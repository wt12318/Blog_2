<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/10/hello-world/"/>
    <url>/2022/06/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>循环神经网络</title>
    <link href="/2022/06/01/RNN/"/>
    <url>/2022/06/01/RNN/</url>
    
    <content type="html"><![CDATA[<p>循环神经网络及 Pytorch 实践</p><span id="more"></span><h2 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h2><p>对于表格数据和图像来说，我们都是假设数据是独立同分布的，当实际上数据并不都是如此的，比如文本中的单词，视频的帧，对话的声音信息，这些数据都是有序列特征的，也就是数据之间并不是独立的，因此我们需要一种特殊的模型去描述这类数据。</p><h3 id="序列模型"><a href="#序列模型" class="headerlink" title="序列模型"></a>序列模型</h3><p>例子：股票的预测，根据之前时间的股票价格来预测目前的股票价格：</p><p>$$<br>x_t  \sim P(x_t|x_{t-1},…, x_1)<br>$$</p><p>对类似上面的问题使用回归模型的难点在于：变量数量的变化，随着时间的推移我们需要纳入模型的变量数量会逐渐增多；解决这个问题有两个策略：</p><ul><li>自回归模型</li><li>马尔可夫模型</li></ul><h4 id="自回归模型"><a href="#自回归模型" class="headerlink" title="自回归模型"></a>自回归模型</h4><p>自回归模型指的是因变量和自变量的数据是一样的（从总体上来说）；自回归模型有两种：</p><ol><li><p>不考虑整个序列，而是一个固定大小 window 的序列，这样变量的数量就可以固定下来</p></li><li><p>将过去的观测整合成一个变量 $h_t$ 这样的模型也叫做隐自回归模型，因为这里的 ht 是一个隐变量</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220411211540-nljbhay.png" style="zoom:67%;" /></li></ol><p>隐变量实际是存在的，观测不到，潜变量可以是不存在的，人为设定的，比如聚类的类信息</p><p>因此整个序列出现的概率可以计算：</p><p>$$<br>P(x_1,…, x_t)&#x3D;\prod_{t&#x3D;1}^TP(x_t|x_{t-1},…x_1)<br>$$</p><h4 id="马尔可夫模型"><a href="#马尔可夫模型" class="headerlink" title="马尔可夫模型"></a>马尔可夫模型</h4><p>上面使用固定大小的 window 就可以说这个序列满足马尔可夫条件，如果这个 window 为 1， 那么就可以得到一阶马尔可夫模型:</p><p>$$<br>P(x_1,…, x_t)&#x3D;\prod_{t&#x3D;1}^TP(x_t|x_{t-1})<br>$$</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>首先产生一些随机的数据，使用正弦函数加上一些噪音：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">%matplotlib inline<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>T = <span class="hljs-number">1000</span>  <span class="hljs-comment"># Generate a total of 1000 points</span><br>time = torch.arange(<span class="hljs-number">1</span>, T + <span class="hljs-number">1</span>, dtype=torch.float32)<br>x = torch.sin(<span class="hljs-number">0.01</span> * time) + torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>, (T,))<br>d2l.plot(time, [x], <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, xlim=[<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>], figsize=(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><p>接下来就要生成训练数据：过去的窗口内的值作为 x ，当前的值作为 y；这里就会出现一个问题，开始的窗口长度的数值就没有足够的 x 输入，一般可以将这些数值扔掉或者 padding 为 0（这里直接丢弃）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">tau = <span class="hljs-number">4</span><br>features = torch.zeros((T - tau, tau))<span class="hljs-comment">##前4个不要</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(tau):<br>    features[:, i] = x[i: T - tau + i] <span class="hljs-comment">##</span><br>labels = x[tau:].reshape((-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><br>batch_size, n_train = <span class="hljs-number">16</span>, <span class="hljs-number">600</span><br><span class="hljs-comment"># Only the first `n_train` examples are used for training</span><br>train_iter = d2l.load_array((features[:n_train], labels[:n_train]),<br>                            batch_size, is_train=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>训练使用两层的 MLP 加上 ReLU 激活函数，loss 使用均方误差（MSEloss）（自回归）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Function for initializing the weights of the network</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_weights</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear:<br>        nn.init.xavier_uniform_(m.weight)<br><br><span class="hljs-comment"># A simple MLP</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_net</span>():<br>    net = nn.Sequential(nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">10</span>),<br>                        nn.ReLU(),<br>                        nn.Linear(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>))<br>    net.apply(init_weights)<br>    <span class="hljs-keyword">return</span> net<br><br><span class="hljs-comment"># Note: `MSELoss` computes squared error without the 1/2 factor</span><br>loss = nn.MSELoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br><br><span class="hljs-comment">##训练</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">net, train_iter, loss, epochs, lr</span>):<br>    trainer = torch.optim.Adam(net.parameters(), lr)<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> train_iter:<br>            trainer.zero_grad()<br>            l = loss(net(X), y)<br>            l.<span class="hljs-built_in">sum</span>().backward()<br>            trainer.step()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, &#x27;</span><br>              <span class="hljs-string">f&#x27;loss: <span class="hljs-subst">&#123;d2l.evaluate_loss(net, train_iter, loss):f&#125;</span>&#x27;</span>)<br><br>net = get_net()<br>train(net, train_iter, loss, <span class="hljs-number">5</span>, <span class="hljs-number">0.01</span>)<br></code></pre></td></tr></table></figure><p>进行预测：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">onestep_preds = net(features)<br>d2l.plot([time, time[tau:]], [x.detach().numpy(), onestep_preds.detach().numpy()], <span class="hljs-string">&#x27;time&#x27;</span>,<br>         <span class="hljs-string">&#x27;x&#x27;</span>, legend=[<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-string">&#x27;1-step preds&#x27;</span>], xlim=[<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>], figsize=(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220411223707-iy3hgos.png" style="zoom:67%;" /><p>这个只是前进一步的预测，如果我们要预测 604 个之后的就只能根据我们的预测来预测（因为上面训练的数据也就是观测的数据只到600），现在来看这些预测怎么样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">multistep_preds = torch.zeros(T)<br>multistep_preds[: n_train + tau] = x[: n_train + tau] <span class="hljs-comment">##只保留实际的604个值后面都是预测的</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_train + tau, T):<br>    multistep_preds[i] = net(<br>        multistep_preds[i - tau:i].reshape((<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>)))<br><br>d2l.plot([time, time[tau:], time[n_train + tau:]],<br>         [x.detach().numpy(), onestep_preds.detach().numpy(),<br>          multistep_preds[n_train + tau:].detach().numpy()], <span class="hljs-string">&#x27;time&#x27;</span>,<br>         <span class="hljs-string">&#x27;x&#x27;</span>, legend=[<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-string">&#x27;1-step preds&#x27;</span>, <span class="hljs-string">&#x27;multistep preds&#x27;</span>],<br>         xlim=[<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>], figsize=(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220411224245-dlctp7g.png" style="zoom:67%;" /><p>可以看到在离 604 不久后预测就飞了，原因是误差的不断累积，比较不同窗口的区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">max_steps = <span class="hljs-number">64</span><br><br>features = torch.zeros((T - tau - max_steps + <span class="hljs-number">1</span>, tau + max_steps))<br><span class="hljs-comment"># Column `i` (`i` &lt; `tau`) are observations from `x` for time steps from</span><br><span class="hljs-comment"># `i + 1` to `i + T - tau - max_steps + 1`</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(tau):<br>    features[:, i] = x[i: i + T - tau - max_steps + <span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># Column `i` (`i` &gt;= `tau`) are the (`i - tau + 1`)-step-ahead predictions for</span><br><span class="hljs-comment"># time steps from `i + 1` to `i + T - tau - max_steps + 1`</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(tau, tau + max_steps):<br>    features[:, i] = net(features[:, i - tau:i]).reshape(-<span class="hljs-number">1</span>)<br><br>steps = (<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">16</span>, <span class="hljs-number">64</span>)<br>d2l.plot([time[tau + i - <span class="hljs-number">1</span>: T - max_steps + i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> steps],<br>         [features[:, (tau + i - <span class="hljs-number">1</span>)].detach().numpy() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> steps], <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>,<br>         legend=[<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>-step preds&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> steps], xlim=[<span class="hljs-number">5</span>, <span class="hljs-number">1000</span>],<br>         figsize=(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220411224545-130vwnu.png" style="zoom:67%;" /><h3 id="文本预处理"><a href="#文本预处理" class="headerlink" title="文本预处理"></a>文本预处理</h3><p>文本是最流行的序列数据的例子，文本预处理分为以下步骤：</p><ul><li>将文本以字符串读入内存</li><li>将字符串拆分成 token，可以是单个的词或者字符</li><li>构建一个词汇表，将 token 映射到数字索引</li><li>将文本转化成数字索引的序列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br></code></pre></td></tr></table></figure><h4 id="读入数据"><a href="#读入数据" class="headerlink" title="读入数据"></a>读入数据</h4><p>将文本读入成文本行构成的列表，每一行是一个字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br>d2l.DATA_HUB[<span class="hljs-string">&#x27;time_machine&#x27;</span>] = (d2l.DATA_URL + <span class="hljs-string">&#x27;timemachine.txt&#x27;</span>,<br>                                <span class="hljs-string">&#x27;090b5e7e70c295757f55df93cb0a180b9691891a&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_time_machine</span>():  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;Load the time machine dataset into a list of text lines.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(d2l.download(<span class="hljs-string">&#x27;time_machine&#x27;</span>), <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        lines = f.readlines()<br>    <span class="hljs-keyword">return</span> [re.sub(<span class="hljs-string">&#x27;[^A-Za-z]+&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, line).strip().lower() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines] <span class="hljs-comment">##非字母的字符去掉，并全部转化成小写</span><br><br>lines = read_time_machine()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;# text lines: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(lines)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(lines[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(lines[<span class="hljs-number">10</span>])<br><br>Downloading ../data/timemachine.txt <span class="hljs-keyword">from</span> http://d2l-data.s3-accelerate.amazonaws.com/timemachine.txt...<br><span class="hljs-comment"># text lines: 3221</span><br>the time machine by h g wells<br>twinkled <span class="hljs-keyword">and</span> his usually pale face was flushed <span class="hljs-keyword">and</span> animated the<br></code></pre></td></tr></table></figure><p>将字符串拆分成词或者字符，这个生成的 token 是一个 list of list，其中每个列表是构成一行的词：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize</span>(<span class="hljs-params">lines, token=<span class="hljs-string">&#x27;word&#x27;</span></span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;Split text lines into word or character tokens.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> token == <span class="hljs-string">&#x27;word&#x27;</span>:<br>        <span class="hljs-keyword">return</span> [line.split() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines]<br>    <span class="hljs-keyword">elif</span> token == <span class="hljs-string">&#x27;char&#x27;</span>:<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">list</span>(line) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ERROR: unknown token type: &#x27;</span> + token)<br><br>tokens = tokenize(lines)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>    <span class="hljs-built_in">print</span>(tokens[i])<br><br>[<span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;machine&#x27;</span>, <span class="hljs-string">&#x27;by&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;wells&#x27;</span>]<br>[]<br>[]<br>[]<br>[]<br>[<span class="hljs-string">&#x27;i&#x27;</span>]<br>[]<br>[]<br>[<span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;traveller&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>, <span class="hljs-string">&#x27;so&#x27;</span>, <span class="hljs-string">&#x27;it&#x27;</span>, <span class="hljs-string">&#x27;will&#x27;</span>, <span class="hljs-string">&#x27;be&#x27;</span>, <span class="hljs-string">&#x27;convenient&#x27;</span>, <span class="hljs-string">&#x27;to&#x27;</span>, <span class="hljs-string">&#x27;speak&#x27;</span>, <span class="hljs-string">&#x27;of&#x27;</span>, <span class="hljs-string">&#x27;him&#x27;</span>]<br>[<span class="hljs-string">&#x27;was&#x27;</span>, <span class="hljs-string">&#x27;expounding&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;recondite&#x27;</span>, <span class="hljs-string">&#x27;matter&#x27;</span>, <span class="hljs-string">&#x27;to&#x27;</span>, <span class="hljs-string">&#x27;us&#x27;</span>, <span class="hljs-string">&#x27;his&#x27;</span>, <span class="hljs-string">&#x27;grey&#x27;</span>, <span class="hljs-string">&#x27;eyes&#x27;</span>, <span class="hljs-string">&#x27;shone&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>]<br>[<span class="hljs-string">&#x27;twinkled&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;his&#x27;</span>, <span class="hljs-string">&#x27;usually&#x27;</span>, <span class="hljs-string">&#x27;pale&#x27;</span>, <span class="hljs-string">&#x27;face&#x27;</span>, <span class="hljs-string">&#x27;was&#x27;</span>, <span class="hljs-string">&#x27;flushed&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;animated&#x27;</span>, <span class="hljs-string">&#x27;the&#x27;</span>]<br></code></pre></td></tr></table></figure><p>接下来就要创建一个词汇表将 token 映射到数字索引：先计算文本中唯一 token 的频率表，叫做语料（corpus），然后根据其频率赋予索引（从大到小，从0开始），有些出现较少的 token 可以去掉以减少复杂性，另外还可以添加一些特殊的token，比如在语料中不存在或者被移除的 token 可以用<code> &lt;unk&gt;</code> 来表示，开始的token 用 <code>&lt;bos&gt;</code>，结束的 token 用 <code>&lt;eos&gt;</code> 表示，padding 可以使用 <code>&lt;pad&gt;</code> 表示等：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_corpus</span>(<span class="hljs-params">tokens</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;Count token frequencies.&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># Here `tokens` is a 1D list or 2D list</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(tokens) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">isinstance</span>(tokens[<span class="hljs-number">0</span>], <span class="hljs-built_in">list</span>):<br>        <span class="hljs-comment"># Flatten a list of token lists into a list of tokens</span><br>        tokens = [token <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> tokens <span class="hljs-keyword">for</span> token <span class="hljs-keyword">in</span> line]<br>    <span class="hljs-keyword">return</span> collections.Counter(tokens)<br></code></pre></td></tr></table></figure><p>注意这里的一个 flatten 二维列表的技巧 <code>[token for line in tokens for token in line]</code>，先运行 <code>line in tokens</code> 每次拿出一个列表，然后运行 <code>token in line</code> 每次拿出该列表中的一个词作为最开始的 <code>token</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]<br>[i <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> a <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> j ]<br><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>创建词汇表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vocab</span>:  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;Vocabulary for text.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, tokens=<span class="hljs-literal">None</span>, min_freq=<span class="hljs-number">0</span>, reserved_tokens=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-keyword">if</span> tokens <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            tokens = []<br>        <span class="hljs-keyword">if</span> reserved_tokens <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            reserved_tokens = []<br>        <span class="hljs-comment"># Sort according to frequencies</span><br>        counter = count_corpus(tokens)<br>        self._token_freqs = <span class="hljs-built_in">sorted</span>(counter.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>],<br>                                   reverse=<span class="hljs-literal">True</span>)<span class="hljs-comment">##按照 key进行排序，key选择的是字典中的值，也就是频率</span><br>        <span class="hljs-comment"># The index for the unknown token is 0</span><br>        self.idx_to_token = [<span class="hljs-string">&#x27;&lt;unk&gt;&#x27;</span>] + reserved_tokens<br>        self.token_to_idx = &#123;token: idx<br>                             <span class="hljs-keyword">for</span> idx, token <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.idx_to_token)&#125;<span class="hljs-comment">##enumerate返回的一个元素是从零开始的索引</span><br>        <span class="hljs-keyword">for</span> token, freq <span class="hljs-keyword">in</span> self._token_freqs:<br>            <span class="hljs-keyword">if</span> freq &lt; min_freq:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> token <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.token_to_idx:<br>                self.idx_to_token.append(token)<br>                self.token_to_idx[token] = <span class="hljs-built_in">len</span>(self.idx_to_token) - <span class="hljs-number">1</span><span class="hljs-comment">##逐渐增加index</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.idx_to_token)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, tokens</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(tokens, (<span class="hljs-built_in">list</span>, <span class="hljs-built_in">tuple</span>)):<br>            <span class="hljs-keyword">return</span> self.token_to_idx.get(tokens, self.unk)<span class="hljs-comment">##dict.get(key,value)当key 不存在时返回 value，这里就是对 unkown 的 token 返回 0</span><br>        <span class="hljs-keyword">return</span> [self.__getitem__(token) <span class="hljs-keyword">for</span> token <span class="hljs-keyword">in</span> tokens]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_tokens</span>(<span class="hljs-params">self, indices</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(indices, (<span class="hljs-built_in">list</span>, <span class="hljs-built_in">tuple</span>)):<br>            <span class="hljs-keyword">return</span> self.idx_to_token[indices]<br>        <span class="hljs-keyword">return</span> [self.idx_to_token[index] <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> indices]<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">unk</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># Index for the unknown token</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">token_freqs</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># Index for the unknown token</span><br>        <span class="hljs-keyword">return</span> self._token_freqs<br></code></pre></td></tr></table></figure><p>接下来我们就可以用上面的类及函数将time machine 这个文本转化为数字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_corpus_time_machine</span>(<span class="hljs-params">max_tokens=-<span class="hljs-number">1</span></span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;Return token indices and the vocabulary of the time machine dataset.&quot;&quot;&quot;</span><br>    lines = read_time_machine()<br>    tokens = tokenize(lines, <span class="hljs-string">&#x27;char&#x27;</span>)<span class="hljs-comment">##以字符而不是词</span><br>    vocab = Vocab(tokens)<br>    <span class="hljs-comment"># Since each text line in the time machine dataset is not necessarily a</span><br>    <span class="hljs-comment"># sentence or a paragraph, flatten all the text lines into a single list</span><br>    corpus = [vocab[token] <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> tokens <span class="hljs-keyword">for</span> token <span class="hljs-keyword">in</span> line]<span class="hljs-comment">##返回每个字的index</span><br>    <span class="hljs-keyword">if</span> max_tokens &gt; <span class="hljs-number">0</span>:<br>        corpus = corpus[:max_tokens]<br>    <span class="hljs-keyword">return</span> corpus, vocab<br><br>corpus, vocab = load_corpus_time_machine()<br><span class="hljs-built_in">len</span>(corpus), <span class="hljs-built_in">len</span>(vocab)<br><br>(<span class="hljs-number">170580</span>, <span class="hljs-number">28</span>)<br></code></pre></td></tr></table></figure><h3 id="语言模型和数据集"><a href="#语言模型和数据集" class="headerlink" title="语言模型和数据集"></a>语言模型和数据集</h3><p>上面我们将文本序列转化成 token，因此一个长度为 T 的文本序列可以表示成一个 token 的序列：$x_1,x_2,…,x_T$ 语言模型的目的就是估计联合概率：</p><p>$$<br>P(x_1,x_2,…,x_T)<br>$$</p><p>由基本的条件概率我们可以得到：</p><p>$$<br>P(x_1, x_2, \ldots, x_T) &#x3D; \prod_{t&#x3D;1}^T P(x_t  \mid  x_1, \ldots, x_{t-1}).<br>$$</p><p>因此要计算这个语言模型，我们需要计算词的概率和给定前面的词的条件概率，对于一些大型的文本可以使用词的频率来估计这种概率，但是这有一个问题：对于一些词的组合，可能出现的次数比较少（越比如对于固定的有3个词的词组，可能就不会出现几次），对于这个问题通常的策略是 <em>Laplace smoothing</em>，也就是加上一个小的常数：</p><p>$$<br>\hat{P}(x)  &#x3D; \frac{n(x) + \epsilon_1&#x2F;m}{n + \epsilon_1}<br>$$</p><p>$$<br>\hat{P}(x’ \mid x) &#x3D; \frac{n(x, x’) + \epsilon_2 \hat{P}(x’)}{n(x) + \epsilon_2}<br>$$</p><p>$$<br>\hat{P}(x’’ \mid x,x’)  &#x3D; \frac{n(x, x’,x’’) + \epsilon_3 \hat{P}(x’’)}{n(x, x’) + \epsilon_3}<br>$$</p><p>但是这样近似还是会存在一些问题：</p><ul><li>需要存储所有的词，词组的 counts</li><li>这个方法忽略了词的意思</li><li>对于一些长的词序列，在整个文本中可能一次都没有，那么这种方法也是不行的</li></ul><p>我们还可以将前面讲过的马尔可夫假设引进语言模型，可以得到不同 gram 的模型估计（对应着一阶，二阶，三阶马尔可夫假设）：</p><p>$$<br>P(x_1, x_2, x_3, x_4) &#x3D;  P(x_1) P(x_2) P(x_3) P(x_4)<br>$$</p><p>$$<br>P(x_1, x_2, x_3, x_4) &#x3D;  P(x_1) P(x_2  \mid  x_1) P(x_3  \mid  x_2) P(x_4  \mid  x_3)<br>$$</p><p>$$<br>P(x_1, x_2, x_3, x_4) &#x3D;  P(x_1) P(x_2  \mid  x_1) P(x_3  \mid  x_1, x_2) P(x_4  \mid  x_2, x_3)<br>$$</p><h4 id="读取长序列数据"><a href="#读取长序列数据" class="headerlink" title="读取长序列数据"></a>读取长序列数据</h4><p>对于一些很长的序列，模型不能一次性处理，我们需要将这些长序列分割成短序列；首先假设使用神经网络来训练语言模型，神经网络处理的是小批量的序列输入，这些序列有着预定的长度，接下来的问题就是<strong>如何从长的序列中随机地读取小批量的特征和标签</strong>。</p><p>如果短序列长度是5，那么可以有如下的选择：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220414105111-jube13u.png" style="zoom:67%;" /><p>对于开始的 offset 我们一般是随机的选择 offset 的大小，从而使得所有可能的子序列的覆盖度比较大，并且增加随机性；选择子序列的方法有两种：随机抽样和顺序分割，随机抽样中两个相邻的 minibatch 在原始序列中不一定相邻，而顺序分割则是相邻的。</p><h5 id="随机抽样"><a href="#随机抽样" class="headerlink" title="随机抽样"></a>随机抽样</h5><p>在序列模型中，目标是基于我们看过的 token 预测下一个token，因此标签为原始的序列向后移动一个 token（比如说上面第一个子序列为 the t 其标签为 he ti）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">seq_data_iter_random</span>(<span class="hljs-params">corpus, batch_size, num_steps</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;Generate a minibatch of subsequences using random sampling.&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># Start with a random offset (inclusive of `num_steps - 1`) to partition a</span><br>    <span class="hljs-comment"># sequence</span><br>    corpus = corpus[random.randint(<span class="hljs-number">0</span>, num_steps - <span class="hljs-number">1</span>):]<br>    <span class="hljs-comment"># Subtract 1 since we need to account for labels</span><br>    num_subseqs = (<span class="hljs-built_in">len</span>(corpus) - <span class="hljs-number">1</span>) // num_steps<br>    <span class="hljs-comment"># The starting indices for subsequences of length `num_steps`</span><br>    initial_indices = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, num_subseqs * num_steps, num_steps))<br>    <span class="hljs-comment"># In random sampling, the subsequences from two adjacent random</span><br>    <span class="hljs-comment"># minibatches during iteration are not necessarily adjacent on the</span><br>    <span class="hljs-comment"># original sequence</span><br>    random.shuffle(initial_indices)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">data</span>(<span class="hljs-params">pos</span>):<br>        <span class="hljs-comment"># Return a sequence of length `num_steps` starting from `pos`</span><br>        <span class="hljs-keyword">return</span> corpus[pos: pos + num_steps]<br><br>    num_batches = num_subseqs // batch_size<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, batch_size * num_batches, batch_size):<br>        <span class="hljs-comment"># Here, `initial_indices` contains randomized starting indices for</span><br>        <span class="hljs-comment"># subsequences</span><br>        initial_indices_per_batch = initial_indices[i: i + batch_size]<br>        X = [data(j) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> initial_indices_per_batch]<br>        Y = [data(j + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> initial_indices_per_batch]<br>        <span class="hljs-keyword">yield</span> torch.tensor(X), torch.tensor(Y)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">my_seq = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">35</span>))<br><span class="hljs-keyword">for</span> X, Y <span class="hljs-keyword">in</span> seq_data_iter_random(my_seq, batch_size=<span class="hljs-number">2</span>, num_steps=<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;X: &#x27;</span>, X, <span class="hljs-string">&#x27;\nY:&#x27;</span>, Y)<br><br>X:  tensor([[<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>],<br>        [<span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>]]) <br>Y: tensor([[<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>],<br>        [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>]])<br>X:  tensor([[<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>],<br>        [ <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>]]) <br>Y: tensor([[<span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>],<br>        [ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br>X:  tensor([[<span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>],<br>        [ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>]]) <br>Y: tensor([[<span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>],<br>        [ <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>]])<br></code></pre></td></tr></table></figure><h5 id="顺序分割"><a href="#顺序分割" class="headerlink" title="顺序分割"></a>顺序分割</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">seq_data_iter_sequential</span>(<span class="hljs-params">corpus, batch_size, num_steps</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;Generate a minibatch of subsequences using sequential partitioning.&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># Start with a random offset to partition a sequence</span><br>    offset = random.randint(<span class="hljs-number">0</span>, num_steps)<br>    num_tokens = ((<span class="hljs-built_in">len</span>(corpus) - offset - <span class="hljs-number">1</span>) // batch_size) * batch_size<br>    Xs = torch.tensor(corpus[offset: offset + num_tokens])<br>    Ys = torch.tensor(corpus[offset + <span class="hljs-number">1</span>: offset + <span class="hljs-number">1</span> + num_tokens])<br>    Xs, Ys = Xs.reshape(batch_size, -<span class="hljs-number">1</span>), Ys.reshape(batch_size, -<span class="hljs-number">1</span>)<br>    num_batches = Xs.shape[<span class="hljs-number">1</span>] // num_steps<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, num_steps * num_batches, num_steps):<br>        X = Xs[:, i: i + num_steps]<br>        Y = Ys[:, i: i + num_steps]<br>        <span class="hljs-keyword">yield</span> X, Y<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> X, Y <span class="hljs-keyword">in</span> seq_data_iter_sequential(my_seq, batch_size=<span class="hljs-number">2</span>, num_steps=<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;X: &#x27;</span>, X, <span class="hljs-string">&#x27;\nY:&#x27;</span>, Y)<br><br>X:  tensor([[ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>],<br>        [<span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]) <br>Y: tensor([[ <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],<br>        [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>]])<br>X:  tensor([[ <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>],<br>        [<span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>]]) <br>Y: tensor([[<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>],<br>        [<span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>]])<br>X:  tensor([[<span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>],<br>        [<span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>]]) <br>Y: tensor([[<span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],<br>        [<span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">34</span>]])<br></code></pre></td></tr></table></figure><p>将上面的函数包装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqDataLoader</span>:  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;An iterator to load sequence data.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, batch_size, num_steps, use_random_iter, max_tokens</span>):<br>        <span class="hljs-keyword">if</span> use_random_iter:<br>            self.data_iter_fn = d2l.seq_data_iter_random<br>        <span class="hljs-keyword">else</span>:<br>            self.data_iter_fn = d2l.seq_data_iter_sequential<br>        self.corpus, self.vocab = d2l.load_corpus_time_machine(max_tokens)<br>        self.batch_size, self.num_steps = batch_size, num_steps<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.data_iter_fn(self.corpus, self.batch_size, self.num_steps)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data_time_machine</span>(<span class="hljs-params">batch_size, num_steps,  <span class="hljs-comment">#@save</span></span><br><span class="hljs-params">                           use_random_iter=<span class="hljs-literal">False</span>, max_tokens=<span class="hljs-number">10000</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the iterator and the vocabulary of the time machine dataset.&quot;&quot;&quot;</span><br>    data_iter = SeqDataLoader(<br>        batch_size, num_steps, use_random_iter, max_tokens)<br>    <span class="hljs-keyword">return</span> data_iter, data_iter.vocab<br></code></pre></td></tr></table></figure><h3 id="循环神经网络-1"><a href="#循环神经网络-1" class="headerlink" title="循环神经网络"></a>循环神经网络</h3><p>之前讲过为了避免随着预测步长的增加，模型的变量越来越多，我们可以使用一个隐变量模型：</p><p>$$<br>P(x_t \mid x_{t-1}, \ldots, x_1) \approx P(x_t \mid h_{t-1}),<br>$$</p><p>$h_{t-1}$ 是隐状态或者叫隐变量，保留了在 t-1 步及之前的信息，在t步的隐变量由t步的输入和前一步的隐变量计算得到：</p><p>$$<br>h_t &#x3D; f(x_{t}, h_{t-1}).<br>$$</p><p>这个 f 可以由神经网络来估计：</p><p>$$<br>H_t &#x3D; \phi(X_t W_{xh} + H_{t-1} W_{hh}  + b_h).<br>$$</p><p>在每个时间步，可以根据 Ht 得到该时间步的输出：</p><p>$$<br>O_t &#x3D; H_t W_{hq} +b_q.<br>$$</p><p>因此一个 RNN 的结构为：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/Whiteboard-20220417113658-2bzy5b5.png" style="zoom:50%;" /><p>下面以一个单词分割成字符预测为例：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220417114034-k39nglx.png" style="zoom:50%;" /><p>在预测中使用类似交叉熵误差的loss，叫做 <em>perplexity</em> （困惑度）：<br>$$<br>\exp\left(-\frac{1}{n} \sum_{t&#x3D;1}^n \log P(x_t \mid x_{t-1}, \ldots, x_1)\right).<br>$$</p><p>在每一个时间步的输出就是每个 token 的概率分布</p><h3 id="循环神经网络的实现"><a href="#循环神经网络的实现" class="headerlink" title="循环神经网络的实现"></a>循环神经网络的实现</h3><p>首先读入数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">%matplotlib inline<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>batch_size, num_steps = <span class="hljs-number">32</span>, <span class="hljs-number">35</span><br>train_iter, vocab = d2l.load_data_time_machine(batch_size, num_steps)<br></code></pre></td></tr></table></figure><p>由于每个token 是一个数值的index，我们需要将其转换为 one-hot 编码，ont-hot 向量的长度为所有token 的数量，某个token 的 one-hot向量就是在相应的token index数值位置是1 其余都是0，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">F.one_hot(torch.tensor([<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]), <span class="hljs-built_in">len</span>(vocab))<br><br>tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>        [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])<br></code></pre></td></tr></table></figure><p>还需要注意的一点是我们每次抽样得到的mini-batch 的大小为 （批量大小*时间步），比如下面数据的批量大小是2，时间步是5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">X = torch.arange(<span class="hljs-number">10</span>).reshape((<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))<br>X<br><br>tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>        [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<br></code></pre></td></tr></table></figure><p>在进行one-hot转换后我们需要将其转换为 （时间步*批量大小*token数量），这样方便进行时间步的取样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python">X.T<br><br>tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">5</span>],<br>        [<span class="hljs-number">1</span>, <span class="hljs-number">6</span>],<br>        [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>],<br>        [<span class="hljs-number">3</span>, <span class="hljs-number">8</span>],<br>        [<span class="hljs-number">4</span>, <span class="hljs-number">9</span>]])<br><br>F.one_hot(X.T,<span class="hljs-built_in">len</span>(vocab))<br>tensor([[[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]],<br><br>        [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]],<br><br>        [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]],<br><br>        [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]],<br><br>        [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]])<br><br>F.one_hot(X.T, <span class="hljs-number">28</span>).shape<br>torch.Size([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">28</span>])<br></code></pre></td></tr></table></figure><p>接下来我们需要初始化模型的参数（也就是上面讲过的 3 个 W 和两个 b）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_params</span>(<span class="hljs-params">vocab_size, num_hiddens, device</span>):<br>    num_inputs = num_outputs = vocab_size<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">normal</span>(<span class="hljs-params">shape</span>):<br>        <span class="hljs-keyword">return</span> torch.randn(size=shape, device=device) * <span class="hljs-number">0.01</span><span class="hljs-comment">##为什么0.01</span><br><br>    <span class="hljs-comment"># Hidden layer parameters</span><br>    W_xh = normal((num_inputs, num_hiddens))<br>    W_hh = normal((num_hiddens, num_hiddens))<br>    b_h = torch.zeros(num_hiddens, device=device)<br>    <span class="hljs-comment"># Output layer parameters</span><br>    W_hq = normal((num_hiddens, num_outputs))<br>    b_q = torch.zeros(num_outputs, device=device)<br>    <span class="hljs-comment"># Attach gradients</span><br>    params = [W_xh, W_hh, b_h, W_hq, b_q]<br>    <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>        param.requires_grad_(<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> params<br></code></pre></td></tr></table></figure><p>在 RNN 模型中第一个时间步是没有上一个隐状态传过来的，因此需要初始化一个状态，这里使用全0来初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_rnn_state</span>(<span class="hljs-params">batch_size, num_hiddens, device</span>):<br>    <span class="hljs-keyword">return</span> (torch.zeros((batch_size, num_hiddens), device=device), )<br></code></pre></td></tr></table></figure><p>下面的 rnn 函数定义了在每个时间步如何计算隐状态和输出，注意前面我们将批量的输入进行了转置，使得最外面的维度表示时间步，因此下面是对每个时间步的批量进行迭代运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rnn</span>(<span class="hljs-params">inputs, state, params</span>):<br>    <span class="hljs-comment"># Here `inputs` shape: (`num_steps`, `batch_size`, `vocab_size`)</span><br>    W_xh, W_hh, b_h, W_hq, b_q = params<br>    H, = state<br>    outputs = []<br>    <span class="hljs-comment"># Shape of `X`: (`batch_size`, `vocab_size`)</span><br>    <span class="hljs-keyword">for</span> X <span class="hljs-keyword">in</span> inputs:<br>        H = torch.tanh(torch.mm(X, W_xh) + torch.mm(H, W_hh) + b_h)<span class="hljs-comment">##基于上一个 H 和这一步的 X 来更新这一步的 H</span><br>        Y = torch.mm(H, W_hq) + b_q <span class="hljs-comment">##基于这一步的 H来预测下一步的Y</span><br>        outputs.append(Y)<br>    <span class="hljs-keyword">return</span> torch.cat(outputs, dim=<span class="hljs-number">0</span>), (H,)<br></code></pre></td></tr></table></figure><p>注意最后一句输出将 output 在第 0 个维度上拼起来了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.cat(outputs, dim=<span class="hljs-number">0</span>).shape<br><span class="hljs-comment">#torch.Size([10, 28])</span><br></code></pre></td></tr></table></figure><p>其实 RNN 的每个批量的输出和多分类问题是一样的，也就是说虽然批量是 2，但是有 5 个时间步，因此也就相当于有 10 个 “样本”，每个样本的输出都是词汇表长度的向量（28），也就是进行28 类的预测。</p><p>现在所有的函数都有了，我们可以定义一个 RNN 模型将这些函数包装到一起：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RNNModelScratch</span>: <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;A RNN Model implemented from scratch.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, vocab_size, num_hiddens, device,</span><br><span class="hljs-params">                 get_params, init_state, forward_fn</span>):<br>        self.vocab_size, self.num_hiddens = vocab_size, num_hiddens<br>        self.params = get_params(vocab_size, num_hiddens, device)<br>        self.init_state, self.forward_fn = init_state, forward_fn<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, X, state</span>):<br>        X = F.one_hot(X.T, self.vocab_size).<span class="hljs-built_in">type</span>(torch.float32)<br>        <span class="hljs-keyword">return</span> self.forward_fn(X, state, self.params)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">begin_state</span>(<span class="hljs-params">self, batch_size, device</span>):<br>        <span class="hljs-keyword">return</span> self.init_state(batch_size, self.num_hiddens, device)<br></code></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">num_hiddens = <span class="hljs-number">512</span><br>net = RNNModelScratch(<span class="hljs-built_in">len</span>(vocab), num_hiddens, d2l.try_gpu(), get_params,<br>                      init_rnn_state, rnn)<br>state = net.begin_state(X.shape[<span class="hljs-number">0</span>], d2l.try_gpu())<br>Y, new_state = net(X.to(d2l.try_gpu()), state)<br>Y.shape, <span class="hljs-built_in">len</span>(new_state), new_state[<span class="hljs-number">0</span>].shape<br><span class="hljs-comment">#(torch.Size([10, 28]), 1, torch.Size([2, 512]))</span><br></code></pre></td></tr></table></figure><h4 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h4><p>在训练模型之前先来看看这么用这个 RNN 模型进行预测，预测分为两步：</p><ul><li>warm-up：根据用户提供的起始字符（<strong>prefix</strong>）来计算这些字符的隐状态，但是不需要输出（因为已经提供输出了）</li><li>预测：基于上一步计算的隐状态继续后面的隐状态和输出的生成</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict_ch8</span>(<span class="hljs-params">prefix, num_preds, net, vocab, device</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;Generate new characters following the `prefix`.&quot;&quot;&quot;</span><br>    state = net.begin_state(batch_size=<span class="hljs-number">1</span>, device=device)<br>    outputs = [vocab[prefix[<span class="hljs-number">0</span>]]] <span class="hljs-comment">##第一个output就是提供的字符的第一个</span><br>    get_input = <span class="hljs-keyword">lambda</span>: torch.tensor([outputs[-<span class="hljs-number">1</span>]], device=device).reshape((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<span class="hljs-comment">##output 的最后一个作为 input</span><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> prefix[<span class="hljs-number">1</span>:]:  <span class="hljs-comment"># Warm-up period</span><br>        _, state = net(get_input(), state)<br>        outputs.append(vocab[y])<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_preds):  <span class="hljs-comment"># Predict `num_preds` steps</span><br>        y, state = net(get_input(), state)<br>        outputs.append(<span class="hljs-built_in">int</span>(y.argmax(dim=<span class="hljs-number">1</span>).reshape(<span class="hljs-number">1</span>)))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([vocab.idx_to_token[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> outputs])<br></code></pre></td></tr></table></figure><p>试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">predict_ch8(<span class="hljs-string">&#x27;time traveller &#x27;</span>, <span class="hljs-number">10</span>, net, vocab, d2l.try_gpu())<br><span class="hljs-string">&#x27;time traveller knr&lt;unk&gt;knr&lt;unk&gt;kn&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="梯度裁剪"><a href="#梯度裁剪" class="headerlink" title="梯度裁剪"></a>梯度裁剪</h4><p>当我们计算的时间步比较长的时候，由于多个矩阵相乘可能会导致梯度爆炸或梯度消失，因此在更新梯度时，如果梯度过小或过大则采取梯度裁剪的方法限制其大小：</p><p>$$<br>\mathbf{g} \leftarrow \min\left(1, \frac{\theta}{|\mathbf{g}|}\right) \mathbf{g}.<br>$$</p><p>$||g||$ 表示梯度的 L2 范数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">grad_clipping</span>(<span class="hljs-params">net, theta</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;Clip the gradient.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, nn.Module):<br>        params = [p <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> net.parameters() <span class="hljs-keyword">if</span> p.requires_grad]<br>    <span class="hljs-keyword">else</span>:<br>        params = net.params<br>    norm = torch.sqrt(<span class="hljs-built_in">sum</span>(torch.<span class="hljs-built_in">sum</span>((p.grad ** <span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> params))<br>    <span class="hljs-keyword">if</span> norm &gt; theta:<br>        <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>            param.grad[:] *= theta / norm<br></code></pre></td></tr></table></figure><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><p>RNN 的训练有几点不同：</p><ul><li><p>序列数据不同的采样方法会导致隐状态的初始化不同</p><ul><li>对于顺序采样，每个批量的时间步是相邻的，因此上一个批量的最终隐状态可以传递到下一个批量的初始隐状态，但是需要将梯度移除（<code>detach_</code>）</li><li>对于随机采样，每个批量不一定相邻，因此每次都需要初始化最初的隐状态</li></ul></li><li><p>在更新模型参数之前将梯度进行裁剪</p></li><li><p>用困惑度（perplexity）来衡量模型</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_epoch_ch8</span>(<span class="hljs-params">net, train_iter, loss, updater, device, use_random_iter</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Train a net within one epoch (defined in Chapter 8).&quot;&quot;&quot;</span><br>    state, timer = <span class="hljs-literal">None</span>, d2l.Timer()<br>    metric = d2l.Accumulator(<span class="hljs-number">2</span>)  <span class="hljs-comment"># Sum of training loss, no. of tokens</span><br>    <span class="hljs-keyword">for</span> X, Y <span class="hljs-keyword">in</span> train_iter:<br>        <span class="hljs-keyword">if</span> state <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> use_random_iter:<br>            <span class="hljs-comment"># Initialize `state` when either it is the first iteration or</span><br>            <span class="hljs-comment"># using random sampling</span><br>            state = net.begin_state(batch_size=X.shape[<span class="hljs-number">0</span>], device=device)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, nn.Module) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(state, <span class="hljs-built_in">tuple</span>):<br>                <span class="hljs-comment"># `state` is a tensor for `nn.GRU`</span><br>                state.detach_()<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># `state` is a tuple of tensors for `nn.LSTM` and</span><br>                <span class="hljs-comment"># for our custom scratch implementation</span><br>                <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> state:<br>                    s.detach_()<br>        y = Y.T.reshape(-<span class="hljs-number">1</span>)<br>        X, y = X.to(device), y.to(device)<br>        y_hat, state = net(X, state)<br>        l = loss(y_hat, y.long()).mean()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(updater, torch.optim.Optimizer):<br>            updater.zero_grad()<br>            l.backward()<br>            grad_clipping(net, <span class="hljs-number">1</span>)<br>            updater.step()<br>        <span class="hljs-keyword">else</span>:<br>            l.backward()<br>            grad_clipping(net, <span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># Since the `mean` function has been invoked</span><br>            updater(batch_size=<span class="hljs-number">1</span>)<br>        metric.add(l * y.numel(), y.numel())<br>    <span class="hljs-keyword">return</span> math.exp(metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">1</span>]), metric[<span class="hljs-number">1</span>] / timer.stop()<br></code></pre></td></tr></table></figure><p>接下来就可以进行训练了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_ch8</span>(<span class="hljs-params">net, train_iter, vocab, lr, num_epochs, device,</span><br><span class="hljs-params">              use_random_iter=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Train a model (defined in Chapter 8).&quot;&quot;&quot;</span><br>    loss = nn.CrossEntropyLoss()<br>    animator = d2l.Animator(xlabel=<span class="hljs-string">&#x27;epoch&#x27;</span>, ylabel=<span class="hljs-string">&#x27;perplexity&#x27;</span>,<br>                            legend=[<span class="hljs-string">&#x27;train&#x27;</span>], xlim=[<span class="hljs-number">10</span>, num_epochs])<br>    <span class="hljs-comment"># Initialize</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, nn.Module):<br>        updater = torch.optim.SGD(net.parameters(), lr)<br>    <span class="hljs-keyword">else</span>:<br>        updater = <span class="hljs-keyword">lambda</span> batch_size: d2l.sgd(net.params, lr, batch_size)<br>    predict = <span class="hljs-keyword">lambda</span> prefix: predict_ch8(prefix, <span class="hljs-number">50</span>, net, vocab, device)<br>    <span class="hljs-comment"># Train and predict</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        ppl, speed = train_epoch_ch8(<br>            net, train_iter, loss, updater, device, use_random_iter)<br>        <span class="hljs-keyword">if</span> (epoch + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(predict(<span class="hljs-string">&#x27;time traveller&#x27;</span>))<br>            animator.add(epoch + <span class="hljs-number">1</span>, [ppl])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;perplexity <span class="hljs-subst">&#123;ppl:<span class="hljs-number">.1</span>f&#125;</span>, <span class="hljs-subst">&#123;speed:<span class="hljs-number">.1</span>f&#125;</span> tokens/sec on <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(device)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(predict(<span class="hljs-string">&#x27;time traveller&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(predict(<span class="hljs-string">&#x27;traveller&#x27;</span>))<br><br>num_epochs, lr = <span class="hljs-number">500</span>, <span class="hljs-number">1</span><br>train_ch8(net, train_iter, vocab, lr, num_epochs, d2l.try_gpu())<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220428231806-47oxqky.png" style="zoom:67%;" /><h4 id="Pytorch-API-实现-RNN"><a href="#Pytorch-API-实现-RNN" class="headerlink" title="Pytorch API 实现 RNN"></a>Pytorch API 实现 RNN</h4><p>导入数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>batch_size, num_steps = <span class="hljs-number">32</span>, <span class="hljs-number">35</span><br>train_iter, vocab = d2l.load_data_time_machine(batch_size, num_steps)<br></code></pre></td></tr></table></figure><p>使用 pytorch 的高阶 API 来构建循环神经网络需要使用 <code>nn.RNN</code> 类，实例化这个类需要提供词汇表和隐藏层的大小：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num_hiddens = <span class="hljs-number">256</span><br>rnn_layer = nn.RNN(<span class="hljs-built_in">len</span>(vocab), num_hiddens)<br></code></pre></td></tr></table></figure><p>RNN 层的输入是序列 X 和初始的隐状态，因此我们需要初始化隐状态，性状是（隐藏层的数量，批量大小，隐藏层的大小）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">state = torch.zeros((<span class="hljs-number">1</span>, batch_size, num_hiddens))<span class="hljs-comment">##一个隐藏层</span><br>state.shape<br><br>torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">256</span>])<br></code></pre></td></tr></table></figure><p>RNN 层的输出有两个：所有中间的隐藏状态（也就是 Y）以及最后一个隐藏状态（H），要注意这里的 Y 和上面算的 Y 不一样，这里仅仅是隐状态，没有通过输出层转化，所以 Y 的最后一个元素就是输出的 状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">X = torch.rand(size=(num_steps, batch_size, <span class="hljs-built_in">len</span>(vocab)))<br>Y, state_new = rnn_layer(X, state)<br>Y.shape, state_new.shape<br><br>(torch.Size([<span class="hljs-number">35</span>, <span class="hljs-number">32</span>, <span class="hljs-number">256</span>]), torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">256</span>]))<br><br>torch.<span class="hljs-built_in">all</span>(Y[-<span class="hljs-number">1</span>] == state_new)<span class="hljs-comment">##判断最后一个元素是否等于输出的 state</span><br>tensor(<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220528120925-bqsgwri.png" style="zoom:67%;" /><p>定义整个的 RNN 类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RNNModel</span>(nn.Module):<br>    <span class="hljs-string">&quot;&quot;&quot;The RNN model.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, rnn_layer, vocab_size, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>(RNNModel, self).__init__(**kwargs)<br>        self.rnn = rnn_layer<br>        self.vocab_size = vocab_size<br>        self.num_hiddens = self.rnn.hidden_size<br>        <span class="hljs-comment"># If the RNN is bidirectional (to be introduced later),</span><br>        <span class="hljs-comment"># `num_directions` should be 2, else it should be 1.</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.rnn.bidirectional:<br>            self.num_directions = <span class="hljs-number">1</span><br>            self.linear = nn.Linear(self.num_hiddens, self.vocab_size)<br>        <span class="hljs-keyword">else</span>:<br>            self.num_directions = <span class="hljs-number">2</span><br>            self.linear = nn.Linear(self.num_hiddens * <span class="hljs-number">2</span>, self.vocab_size)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs, state</span>):<br>        X = F.one_hot(inputs.T.long(), self.vocab_size)<br>        X = X.to(torch.float32)<br>        Y, state = self.rnn(X, state)<br>        <span class="hljs-comment"># The fully connected layer will first change the shape of `Y` to</span><br>        <span class="hljs-comment"># (`num_steps` * `batch_size`, `num_hiddens`). Its output shape is</span><br>        <span class="hljs-comment"># (`num_steps` * `batch_size`, `vocab_size`).</span><br>        output = self.linear(Y.reshape((-<span class="hljs-number">1</span>, Y.shape[-<span class="hljs-number">1</span>])))<br>        <span class="hljs-keyword">return</span> output, state<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">begin_state</span>(<span class="hljs-params">self, device, batch_size=<span class="hljs-number">1</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(self.rnn, nn.LSTM):<br>            <span class="hljs-comment"># `nn.GRU` takes a tensor as hidden state</span><br>            <span class="hljs-keyword">return</span>  torch.zeros((self.num_directions * self.rnn.num_layers,<br>                                 batch_size, self.num_hiddens),<br>                                device=device)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># `nn.LSTM` takes a tuple of hidden states</span><br>            <span class="hljs-keyword">return</span> (torch.zeros((<br>                self.num_directions * self.rnn.num_layers,<br>                batch_size, self.num_hiddens), device=device),<br>                    torch.zeros((<br>                        self.num_directions * self.rnn.num_layers,<br>                        batch_size, self.num_hiddens), device=device))<br></code></pre></td></tr></table></figure><p>训练和预测：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">device = d2l.try_gpu()<br>net = RNNModel(rnn_layer, vocab_size=<span class="hljs-built_in">len</span>(vocab))<br>net = net.to(device)<br>d2l.predict_ch8(<span class="hljs-string">&#x27;time traveller&#x27;</span>, <span class="hljs-number">10</span>, net, vocab, device)<br><br><span class="hljs-string">&#x27;time travellerlysysssyss&#x27;</span><br><span class="hljs-comment">##训练</span><br>num_epochs, lr = <span class="hljs-number">500</span>, <span class="hljs-number">1</span><br>d2l.train_ch8(net, train_iter, vocab, lr, num_epochs, device)<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220528185452-pk22g58.png" style="zoom:67%;" /><h2 id="经典循环神经网络"><a href="#经典循环神经网络" class="headerlink" title="经典循环神经网络"></a>经典循环神经网络</h2><h3 id="GRU"><a href="#GRU" class="headerlink" title="GRU"></a>GRU</h3><p>前面的 RNN 在计算每个输入时都会考虑包含之前所有输入的隐状态，但是对于一个序列而已不是每一个部分都是同等重要的，有些时候需要更关注某些观测值，有时则需要跳过某些观测值。GRU 通过在 RNN 的基础上引入两个门控单元：重置门（reset gate ，<strong>R</strong>）和更新门（update gate，<strong>Z</strong>）来决定<strong>当前的隐状态的更新是否和当前的输入相关</strong>：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220528212128-ujzx5w5.png" style="zoom:67%;" /><p>这两个门其实就是有着 sigmoid 激活函数的全连接层，接着通过重置门我们可以得到候选隐状态：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220528212419-og1vwiw.png" style="zoom:67%;" /><p>这个 $\odot$ 表示按元素相乘，因为这两个门的结果都是经过  sigmoid 函数的，也就是在 0 到 1 之间，如果 R 为 0，那么这个候选隐状态就没有考虑之前的隐状态，相当于将当前输入输进一个 MLP 得到的结果；如果 R 为 1，那么这个候选隐状态就和之前 RNN 得到的结果是一样的了。</p><p>接着基于候选隐状态和更新门得到最终的隐状态：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220528212906-0l3b8h1.png" style="zoom:67%;" /><p>因此这个 Z 决定了如何去更新当前的隐状态：如果 Z 为 0，则候选隐状态为当前的隐状态，如果 Z 为 1，则完全不考虑当前的输入。R 是对之前信息的遗忘程度，Z 是对当前信息的关注程度。</p><h4 id="GRU-实现"><a href="#GRU-实现" class="headerlink" title="GRU 实现"></a>GRU 实现</h4><p>读入数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>batch_size, num_steps = <span class="hljs-number">32</span>, <span class="hljs-number">35</span><br>train_iter, vocab = d2l.load_data_time_machine(batch_size, num_steps)<br></code></pre></td></tr></table></figure><p>高斯分布初始化参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_params</span>(<span class="hljs-params">vocab_size, num_hiddens, device</span>):<br>    num_inputs = num_outputs = vocab_size<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">normal</span>(<span class="hljs-params">shape</span>):<br>        <span class="hljs-keyword">return</span> torch.randn(size=shape, device=device)*<span class="hljs-number">0.01</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">three</span>():<br>        <span class="hljs-keyword">return</span> (normal((num_inputs, num_hiddens)),<br>                normal((num_hiddens, num_hiddens)),<br>                torch.zeros(num_hiddens, device=device))<br><br>    W_xz, W_hz, b_z = three()  <span class="hljs-comment"># Update gate parameters</span><br>    W_xr, W_hr, b_r = three()  <span class="hljs-comment"># Reset gate parameters</span><br>    W_xh, W_hh, b_h = three()  <span class="hljs-comment"># Candidate hidden state parameters</span><br>    <span class="hljs-comment"># Output layer parameters</span><br>    W_hq = normal((num_hiddens, num_outputs))<br>    b_q = torch.zeros(num_outputs, device=device)<br>    <span class="hljs-comment"># Attach gradients</span><br>    params = [W_xz, W_hz, b_z, W_xr, W_hr, b_r, W_xh, W_hh, b_h, W_hq, b_q]<br>    <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>        param.requires_grad_(<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> params<br><br><span class="hljs-comment">##初始化隐状态</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_gru_state</span>(<span class="hljs-params">batch_size, num_hiddens, device</span>):<br>    <span class="hljs-keyword">return</span> (torch.zeros((batch_size, num_hiddens), device=device), )<br></code></pre></td></tr></table></figure><p>定义模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gru</span>(<span class="hljs-params">inputs, state, params</span>):<br>    W_xz, W_hz, b_z, W_xr, W_hr, b_r, W_xh, W_hh, b_h, W_hq, b_q = params<br>    H, = state<br>    outputs = []<br>    <span class="hljs-keyword">for</span> X <span class="hljs-keyword">in</span> inputs:<br>        Z = torch.sigmoid((X @ W_xz) + (H @ W_hz) + b_z)<br>        R = torch.sigmoid((X @ W_xr) + (H @ W_hr) + b_r)<br>        H_tilda = torch.tanh((X @ W_xh) + ((R * H) @ W_hh) + b_h)<br>        H = Z * H + (<span class="hljs-number">1</span> - Z) * H_tilda<br>        Y = H @ W_hq + b_q<br>        outputs.append(Y)<br>    <span class="hljs-keyword">return</span> torch.cat(outputs, dim=<span class="hljs-number">0</span>), (H,)<br></code></pre></td></tr></table></figure><p>训练，预测：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">vocab_size, num_hiddens, device = <span class="hljs-built_in">len</span>(vocab), <span class="hljs-number">256</span>, d2l.try_gpu()<br>num_epochs, lr = <span class="hljs-number">500</span>, <span class="hljs-number">1</span><br>model = d2l.RNNModelScratch(<span class="hljs-built_in">len</span>(vocab), num_hiddens, device, get_params,<br>                            init_gru_state, gru)<br>d2l.train_ch8(model, train_iter, vocab, lr, num_epochs, device)<br></code></pre></td></tr></table></figure><p>也可以使用 pytorch 的 API 来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">num_inputs = vocab_size<br>gru_layer = nn.GRU(num_inputs, num_hiddens)<br>model = d2l.RNNModel(gru_layer, <span class="hljs-built_in">len</span>(vocab))<br>model = model.to(device)<br>d2l.train_ch8(model, train_iter, vocab, lr, num_epochs, device)<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220528214618-m3fy1kp.png" style="zoom:67%;" /><h3 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h3><p>LSTM 和 GRU 的很多设计类似，但是比 GRU 早了 20 年，LSTM 引入了记忆单元（memory cell），和隐状态的大小一样，也可以看作是另一种隐状态。LSTM 使用了 3 个门控单元：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220528223937-9r308oa.png" style="zoom:50%;" /><p>这些门和 GRU 里面的一样，都是由 sigmoid 激活函数的全连接网络；LSTM 还有一个候选记忆单元：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220528224149-bz5bc3g.png" style="zoom:50%;" /><p>这个所谓的候选记忆单元和之前的 RNN 里面的隐状态的计算方式是一样的，没有用到门控，因此这个候选记忆单元相当于储存了当前的记忆。除了隐状态之外，LSTM 还有记忆单元 C：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220528224353-sf5ih2j.png" style="zoom:50%;" /><p>当前的记忆单元的计算涉及到上一个记忆单元，候选记忆单元以及当前的两个门控单元，注意这里的两个门控单元是独立的，而不像前面 GRU 中一个是 Z 另一个就是 1-Z，也就是说可以同时用到前一个记忆单元和当前的记忆单元，也可以都不用（相当于重置了记忆），接着就是隐状态的更新：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220528224849-i85438t.png" style="zoom:50%;" /><p>tanh 的目的是对 C 进行缩放，因为从上面计算记忆单元的式子来看，得到的结果不一定处于 -1~1 之间。如果这个输出门为 1，那么隐状态就包含了前一个记忆，前一个隐状态，以及当前的输入，如果为 0，则重置隐状态。总结一下：遗忘门控制着对之前记忆的保留程度，输入门控制着当前记忆的保留程度，输出门则控制着对前两个门的计算结果的输出</p><h4 id="LSTM-的实现"><a href="#LSTM-的实现" class="headerlink" title="LSTM 的实现"></a>LSTM 的实现</h4><p>导入数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>batch_size, num_steps = <span class="hljs-number">32</span>, <span class="hljs-number">35</span><br>train_iter, vocab = d2l.load_data_time_machine(batch_size, num_steps)<br></code></pre></td></tr></table></figure><p>初始化参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_lstm_params</span>(<span class="hljs-params">vocab_size, num_hiddens, device</span>):<br>    num_inputs = num_outputs = vocab_size<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">normal</span>(<span class="hljs-params">shape</span>):<br>        <span class="hljs-keyword">return</span> torch.randn(size=shape, device=device)*<span class="hljs-number">0.01</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">three</span>():<br>        <span class="hljs-keyword">return</span> (normal((num_inputs, num_hiddens)),<br>                normal((num_hiddens, num_hiddens)),<br>                torch.zeros(num_hiddens, device=device))<br><br>    W_xi, W_hi, b_i = three()  <span class="hljs-comment"># Input gate parameters</span><br>    W_xf, W_hf, b_f = three()  <span class="hljs-comment"># Forget gate parameters</span><br>    W_xo, W_ho, b_o = three()  <span class="hljs-comment"># Output gate parameters</span><br>    W_xc, W_hc, b_c = three()  <span class="hljs-comment"># Candidate memory cell parameters</span><br>    <span class="hljs-comment"># Output layer parameters</span><br>    W_hq = normal((num_hiddens, num_outputs))<br>    b_q = torch.zeros(num_outputs, device=device)<br>    <span class="hljs-comment"># Attach gradients</span><br>    params = [W_xi, W_hi, b_i, W_xf, W_hf, b_f, W_xo, W_ho, b_o, W_xc, W_hc,<br>              b_c, W_hq, b_q]<br>    <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>        param.requires_grad_(<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> params<br><br><span class="hljs-comment">##初始化状态，这里有状态和记忆单元</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_lstm_state</span>(<span class="hljs-params">batch_size, num_hiddens, device</span>):<br>    <span class="hljs-keyword">return</span> (torch.zeros((batch_size, num_hiddens), device=device),<br>            torch.zeros((batch_size, num_hiddens), device=device))<br></code></pre></td></tr></table></figure><p>定义模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">lstm</span>(<span class="hljs-params">inputs, state, params</span>):<br>    [W_xi, W_hi, b_i, W_xf, W_hf, b_f, W_xo, W_ho, b_o, W_xc, W_hc, b_c,<br>     W_hq, b_q] = params<br>    (H, C) = state<br>    outputs = []<br>    <span class="hljs-keyword">for</span> X <span class="hljs-keyword">in</span> inputs:<br>        I = torch.sigmoid((X @ W_xi) + (H @ W_hi) + b_i)<br>        F = torch.sigmoid((X @ W_xf) + (H @ W_hf) + b_f)<br>        O = torch.sigmoid((X @ W_xo) + (H @ W_ho) + b_o)<br>        C_tilda = torch.tanh((X @ W_xc) + (H @ W_hc) + b_c)<br>        C = F * C + I * C_tilda<br>        H = O * torch.tanh(C)<br>        Y = (H @ W_hq) + b_q<span class="hljs-comment">##O不参与输出计算</span><br>        outputs.append(Y)<br>    <span class="hljs-keyword">return</span> torch.cat(outputs, dim=<span class="hljs-number">0</span>), (H, C)<br></code></pre></td></tr></table></figure><p>训练和预测：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">vocab_size, num_hiddens, device = <span class="hljs-built_in">len</span>(vocab), <span class="hljs-number">256</span>, d2l.try_gpu()<br>num_epochs, lr = <span class="hljs-number">500</span>, <span class="hljs-number">1</span><br>model = d2l.RNNModelScratch(<span class="hljs-built_in">len</span>(vocab), num_hiddens, device, get_lstm_params,<br>                            init_lstm_state, lstm)<br>d2l.train_ch8(model, train_iter, vocab, lr, num_epochs, device)<br></code></pre></td></tr></table></figure><p>也可以直接使用 Pytorch 的 API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">num_inputs = vocab_size<br>lstm_layer = nn.LSTM(num_inputs, num_hiddens)<br>model = d2l.RNNModel(lstm_layer, <span class="hljs-built_in">len</span>(vocab))<br>model = model.to(device)<br>d2l.train_ch8(model, train_iter, vocab, lr, num_epochs, device)<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220528230544-s3plklg.png" style="zoom:67%;" /><h3 id="深度循环神经网络"><a href="#深度循环神经网络" class="headerlink" title="深度循环神经网络"></a>深度循环神经网络</h3><p>深度循环神经网络就是使用更多的隐藏层，每个隐藏层接受上一个隐藏层的输入，输出是新的隐状态，这个新的隐状态一方面向下一步传递，另一方面向该步的下一个隐藏层传递：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220529083050-v2y45ji.png" style="zoom:50%;" /><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##数据</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>batch_size, num_steps = <span class="hljs-number">32</span>, <span class="hljs-number">35</span><br>train_iter, vocab = d2l.load_data_time_machine(batch_size, num_steps)<br><br><span class="hljs-comment">##参数和模型</span><br>vocab_size, num_hiddens, num_layers = <span class="hljs-built_in">len</span>(vocab), <span class="hljs-number">256</span>, <span class="hljs-number">2</span><br>num_inputs = vocab_size<br>device = d2l.try_gpu()<br>lstm_layer = nn.LSTM(num_inputs, num_hiddens, num_layers)<br>model = d2l.RNNModel(lstm_layer, <span class="hljs-built_in">len</span>(vocab))<br>model = model.to(device)<br><br><span class="hljs-comment">##预测和训练</span><br>num_epochs, lr = <span class="hljs-number">500</span>, <span class="hljs-number">2</span><br>d2l.train_ch8(model, train_iter, vocab, lr, num_epochs, device)<br></code></pre></td></tr></table></figure><h3 id="双向循环神经网络"><a href="#双向循环神经网络" class="headerlink" title="双向循环神经网络"></a>双向循环神经网络</h3><p>双向循环神经网络通过加入隐状态的反向传递，从而利用 “未来” 的信息（因此不适宜做推理任务，因为在推理预测任务中模型看不到未来的观测）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220529120831-5709iik.png" style="zoom:67%;" /><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-comment"># Load data</span><br>batch_size, num_steps, device = <span class="hljs-number">32</span>, <span class="hljs-number">35</span>, d2l.try_gpu()<br>train_iter, vocab = d2l.load_data_time_machine(batch_size, num_steps)<br><span class="hljs-comment"># Define the bidirectional LSTM model by setting `bidirectional=True`</span><br>vocab_size, num_hiddens, num_layers = <span class="hljs-built_in">len</span>(vocab), <span class="hljs-number">256</span>, <span class="hljs-number">2</span><br>num_inputs = vocab_size<br>lstm_layer = nn.LSTM(num_inputs, num_hiddens, num_layers, bidirectional=<span class="hljs-literal">True</span>)<br>model = d2l.RNNModel(lstm_layer, <span class="hljs-built_in">len</span>(vocab))<br>model = model.to(device)<br><span class="hljs-comment"># Train the model</span><br>num_epochs, lr = <span class="hljs-number">50</span>, <span class="hljs-number">1</span><br>d2l.train_ch8(model, train_iter, vocab, lr, num_epochs, device)<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220529120858-y4lcxvg.png" style="zoom:67%;" /><h3 id="机器翻译和数据集"><a href="#机器翻译和数据集" class="headerlink" title="机器翻译和数据集"></a>机器翻译和数据集</h3><p>机器翻译也就是从一个序列转化成另一个序列，属于一种序列转化模型（sequence transduction），输入和输出都是长度可变的序列，因此和之前讲的语言模型的数据预处理过程有不同的地方。</p><h4 id="数据下载和预处理"><a href="#数据下载和预处理" class="headerlink" title="数据下载和预处理"></a>数据下载和预处理</h4><p>这里使用的数据是来自 Tatoeba 项目的双语句子对（英语对法语），每一行是一句英语和对应的法语翻译，因此在这个数据集中英语是源语言（source），法语是目标语言（target）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-comment">##下载数据</span><br><span class="hljs-comment">#@save</span><br>d2l.DATA_HUB[<span class="hljs-string">&#x27;fra-eng&#x27;</span>] = (d2l.DATA_URL + <span class="hljs-string">&#x27;fra-eng.zip&#x27;</span>,<br>                           <span class="hljs-string">&#x27;94646ad1522d915e7b0f9296181140edcf86a4f5&#x27;</span>)<br><br><span class="hljs-comment">##下载数据http://d2l-data.s3-accelerate.amazonaws.com/fra-eng.zip</span><br><span class="hljs-comment">##解压</span><br>!unzip fra-eng.<span class="hljs-built_in">zip</span><br><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_data_nmt</span>(<span class="hljs-params">data_dir</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Load the English-French dataset.&quot;&quot;&quot;</span><br>    <span class="hljs-comment">#data_dir = d2l.download_extract(&#x27;fra-eng&#x27;)##已经下载了</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(data_dir, <span class="hljs-string">&#x27;fra.txt&#x27;</span>), <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read()<br><br>raw_text = read_data_nmt(<span class="hljs-string">&quot;./fra-eng/&quot;</span>)<br><span class="hljs-built_in">print</span>(raw_text[:<span class="hljs-number">75</span>])<br><br>Go.Va !<br>Hi.Salut !<br>Run!Cours !<br>Run!Courez !<br>Who?Qui ?<br>Wow!Ça alors !<br></code></pre></td></tr></table></figure><p>接下来需要进行一些预处理的操作，比如将不换行空格转化成空格，将大写转化成小写，在次和标点之间插入空格：</p><blockquote><p>编辑器一般会把自动换行放在空格字符处。但是，有些文本内容在排版时不适合被放在连续的一行行尾与下一行行首。例如：“100 km”，就不应该在其中间的那个空格处换行。所以编辑器应该在”100”与”km”之间放置一个“不换行空格”</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_nmt</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Preprocess the English-French dataset.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">no_space</span>(<span class="hljs-params">char, prev_char</span>):<br>        <span class="hljs-keyword">return</span> char <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;,.!?&#x27;</span>) <span class="hljs-keyword">and</span> prev_char != <span class="hljs-string">&#x27; &#x27;</span><br><br>    <span class="hljs-comment"># Replace non-breaking space with space, and convert uppercase letters to</span><br>    <span class="hljs-comment"># lowercase ones</span><br>    text = text.replace(<span class="hljs-string">&#x27;\u202f&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>).replace(<span class="hljs-string">&#x27;\xa0&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>).lower()<br>    <span class="hljs-comment"># Insert space between words and punctuation marks</span><br>    <span class="hljs-comment">##不是第一个字符，该字符为标点且前一个字符不是空格，那么就在该字符前面插入一个空格</span><br>    out = [<span class="hljs-string">&#x27; &#x27;</span> + char <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> no_space(char, text[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">else</span> char<br>           <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(text)]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(out)<br><br>text = preprocess_nmt(raw_text)<br><span class="hljs-built_in">print</span>(text[:<span class="hljs-number">80</span>])<br><br>go .va !<br>hi .salut !<br>run !cours !<br>run !courez !<br>who ?qui ?<br>wow !ça alors !<br></code></pre></td></tr></table></figure><p>和之前一样，这里也需要进行 Tokenization，只不过之前是以字符进行 Tokenization，在机器翻译中可以用词来 Tokenization：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize_nmt</span>(<span class="hljs-params">text, num_examples=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Tokenize the English-French dataset.&quot;&quot;&quot;</span><br>    source, target = [], []<br>    <span class="hljs-keyword">for</span> i, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(text.split(<span class="hljs-string">&#x27;\n&#x27;</span>)):<br>        <span class="hljs-keyword">if</span> num_examples <span class="hljs-keyword">and</span> i &gt; num_examples:<br>            <span class="hljs-keyword">break</span><br>        parts = line.split(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(parts) == <span class="hljs-number">2</span>:<br>            source.append(parts[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27; &#x27;</span>))<br>            target.append(parts[<span class="hljs-number">1</span>].split(<span class="hljs-string">&#x27; &#x27;</span>))<br>     <span class="hljs-keyword">return</span> source, target<br><br>source, target = tokenize_nmt(text)<br>source[:<span class="hljs-number">6</span>], target[:<span class="hljs-number">6</span>]<br><br>go .va !<br>hi .salut !<br>run !cours !<br>run !courez !<br>who ?qui ?<br>wow !ça alors !<br></code></pre></td></tr></table></figure><p>由于机器翻译数据集由一对序列构成，因此我们需要对这一对语言构建两个词汇表，对以词为基础的Tokenization来说，词汇表的大小要比字符的Tokenization大得多（因为字符只有26个），所以将出现频次小于 2 的词弄成 <code>&lt;unk&gt;</code> 的 token，另外还要加上一些特殊的 token ，如 <code>padding</code> (使得小批量中的序列长度一致)，<code>&lt;bos&gt;</code> ，<code>&lt;eos&gt;</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">src_vocab = d2l.Vocab(source, min_freq=<span class="hljs-number">2</span>,<br>                      reserved_tokens=[<span class="hljs-string">&#x27;&lt;pad&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;bos&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;eos&gt;&#x27;</span>])<br><span class="hljs-built_in">len</span>(src_vocab)<br><br><span class="hljs-number">10012</span><br></code></pre></td></tr></table></figure><p>前面在语言模型中，一个小批量中的序列长度都是 <code>num_steps</code> ，在机器翻译中，每个实例都是一对句子，并且句子的长度还可能不一样，为了计算效率，仍然需要小批量的训练模型，因此在机器翻译中还是以 <code>num_steps</code> 来定义小批量中序列的长度，如果一个文本序列比 <code>num_steps</code> 短，那么就在末尾添加 <code>&lt;pad&gt;</code> 来使得长度等于 <code>num_steps</code>，如果比 <code>num_steps</code> 长，那么就直接截断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">truncate_pad</span>(<span class="hljs-params">line, num_steps, padding_token</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Truncate or pad sequences.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(line) &gt; num_steps:<br>        <span class="hljs-keyword">return</span> line[:num_steps]  <span class="hljs-comment"># Truncate</span><br>    <span class="hljs-keyword">return</span> line + [padding_token] * (num_steps - <span class="hljs-built_in">len</span>(line))  <span class="hljs-comment"># Pad</span><br><br>truncate_pad(src_vocab[source[<span class="hljs-number">0</span>]], <span class="hljs-number">10</span>, src_vocab[<span class="hljs-string">&#x27;&lt;pad&gt;&#x27;</span>])<br><br>[<span class="hljs-number">47</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p> 还需要在每个句子的结尾用 <code>&lt;eos&gt;</code> 表示句子的结束，当模型预测出一个 <code>&lt;eos&gt;</code> 时表示这个句子该结束了；另外还返回了每个句子的实际长度（除去 <code>&lt;pad&gt;</code> token），这个信息在后面的模型中会用到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_array_nmt</span>(<span class="hljs-params">lines, vocab, num_steps</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Transform text sequences of machine translation into minibatches.&quot;&quot;&quot;</span><br>    lines = [vocab[l] <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> lines]<br>    lines = [l + [vocab[<span class="hljs-string">&#x27;&lt;eos&gt;&#x27;</span>]] <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> lines]<br>    array = torch.tensor([truncate_pad(<br>        l, num_steps, vocab[<span class="hljs-string">&#x27;&lt;pad&gt;&#x27;</span>]) <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> lines])<br>    valid_len = (array != vocab[<span class="hljs-string">&#x27;&lt;pad&gt;&#x27;</span>]).<span class="hljs-built_in">type</span>(torch.int32).<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> array, valid_len<br></code></pre></td></tr></table></figure><p>最后将上面这些函数放到一起：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data_nmt</span>(<span class="hljs-params">batch_size, num_steps, num_examples=<span class="hljs-number">600</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the iterator and the vocabularies of the translation dataset.&quot;&quot;&quot;</span><br>    text = preprocess_nmt(read_data_nmt(<span class="hljs-string">&quot;fra-eng/&quot;</span>))<br>    source, target = tokenize_nmt(text, num_examples)<br>    src_vocab = d2l.Vocab(source, min_freq=<span class="hljs-number">2</span>,<br>                          reserved_tokens=[<span class="hljs-string">&#x27;&lt;pad&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;bos&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;eos&gt;&#x27;</span>])<br>    tgt_vocab = d2l.Vocab(target, min_freq=<span class="hljs-number">2</span>,<br>                          reserved_tokens=[<span class="hljs-string">&#x27;&lt;pad&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;bos&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;eos&gt;&#x27;</span>])<br>    src_array, src_valid_len = build_array_nmt(source, src_vocab, num_steps)<br>    tgt_array, tgt_valid_len = build_array_nmt(target, tgt_vocab, num_steps)<br>    data_arrays = (src_array, src_valid_len, tgt_array, tgt_valid_len)<br>    data_iter = d2l.load_array(data_arrays, batch_size)<br>    <span class="hljs-keyword">return</span> data_iter, src_vocab, tgt_vocab<br><br><span class="hljs-comment">##测试一下</span><br>train_iter, src_vocab, tgt_vocab = load_data_nmt(batch_size=<span class="hljs-number">2</span>, num_steps=<span class="hljs-number">8</span>)<br><span class="hljs-keyword">for</span> X, X_valid_len, Y, Y_valid_len <span class="hljs-keyword">in</span> train_iter:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;X:&#x27;</span>, X.<span class="hljs-built_in">type</span>(torch.int32))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;valid lengths for X:&#x27;</span>, X_valid_len)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Y:&#x27;</span>, Y.<span class="hljs-built_in">type</span>(torch.int32))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;valid lengths for Y:&#x27;</span>, Y_valid_len)<br>    <span class="hljs-keyword">break</span><br><br>X: tensor([[ <span class="hljs-number">12</span>, <span class="hljs-number">131</span>, <span class="hljs-number">132</span>,   <span class="hljs-number">4</span>,   <span class="hljs-number">3</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>],<br>        [ <span class="hljs-number">68</span>,  <span class="hljs-number">60</span>,   <span class="hljs-number">4</span>,   <span class="hljs-number">3</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>]], dtype=torch.int32)<br>valid lengths <span class="hljs-keyword">for</span> X: tensor([<span class="hljs-number">5</span>, <span class="hljs-number">4</span>])<br>Y: tensor([[<span class="hljs-number">44</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>],<br>        [<span class="hljs-number">64</span>, <span class="hljs-number">53</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>]], dtype=torch.int32)<br>valid lengths <span class="hljs-keyword">for</span> Y: tensor([<span class="hljs-number">4</span>, <span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><h3 id="编码-解码架构"><a href="#编码-解码架构" class="headerlink" title="编码-解码架构"></a>编码-解码架构</h3><p>对于输入和输出都是可变长度的序列数据，我们可以设计一个有两个元素的模型架构来处理这种类型的数据：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220601160137-mx947ou.png" style="zoom:67%;" /><p>第一个组件是编码器（encoder）：输入是可变长度的序列，输出是固定性状的中间状态；第二个组件是解码器（edcoder）：输入是 encoder 生成的状态，输出是可变长度的序列，这个架构就是编码-解码架构。</p><p>代码（架构，不涉及具体实现）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-comment">##编码器</span><br><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Encoder</span>(nn.Module):<br>    <span class="hljs-string">&quot;&quot;&quot;The base encoder interface for the encoder-decoder architecture.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>(Encoder, self).__init__(**kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, X, *args</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError<br></code></pre></td></tr></table></figure><p>在 decoder 中需要一个额外的函数（<code>init_state</code>）来将 encoder 的输出转化成状态，这一步可能需要一些其他的输入（比如前面提到的序列除去 padding 的有效长度）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Decoder</span>(nn.Module):<br>    <span class="hljs-string">&quot;&quot;&quot;The base decoder interface for the encoder-decoder architecture.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>(Decoder, self).__init__(**kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_state</span>(<span class="hljs-params">self, enc_outputs, *args</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, X, state</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError<br></code></pre></td></tr></table></figure><p>结合两者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EncoderDecoder</span>(nn.Module):<br>    <span class="hljs-string">&quot;&quot;&quot;The base class for the encoder-decoder architecture.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, encoder, decoder, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>(EncoderDecoder, self).__init__(**kwargs)<br>        self.encoder = encoder<br>        self.decoder = decoder<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, enc_X, dec_X, *args</span>):<br>        enc_outputs = self.encoder(enc_X, *args)<br>        dec_state = self.decoder.init_state(enc_outputs, *args)<br>        <span class="hljs-keyword">return</span> self.decoder(dec_X, dec_state)<br></code></pre></td></tr></table></figure><h3 id="Seq2seq-模型"><a href="#Seq2seq-模型" class="headerlink" title="Seq2seq 模型"></a>Seq2seq 模型</h3><p>Seq2seq 模型就是上面说的编码-解码架构的一个实例：encoder 和 decoder 都是 RNN。</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220601183741-iewypl2.png" style="zoom: 50%;" /><p>Encoder 是一个常规的 RNN，将隐状态输入进 Decoder 中（如果是多层 RNN 则将最后一层的 RNN 最后一个时刻的隐状态的输出作为 Decoder 的输入），也就是将输入的序列信息编码进这个隐状态中；Decoder 的设计可以有几种选择，比如上面图所示的，第一个时刻接受 encoder 的隐状态和 <code>&lt;bos&gt;</code> token，然后后面和一般的 RNN 差不多，另外一种就是在每个时刻都将 Decoder 输出的隐状态和每个时刻的序列同时作为输入，如下图：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220601185525-2kz5uix.png" style="zoom:67%;" /><p>Decoder 预测就是将上一个时刻的输出作为下一个时刻的输入来生成序列。注意，由于 Encoder 可以看到整个序列，所以也可以使用之前讲过的双向 RNN 作为 Encoder（Encoder 起到一个特征提取的作用）。</p><h4 id="seq2seq-实现"><a href="#seq2seq-实现" class="headerlink" title="seq2seq 实现"></a>seq2seq 实现</h4><h5 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h5><p>在每个时间步中，Encoder 都是将输入 token 的特征向量 $x_t$ 和之前一个时间步的隐藏状态$h_{t-1}$ 转化为当前的隐藏状态 $h_t$ ，可以使用一个函数来表示：</p><p>$$<br>h_t &#x3D; f(x_t,h_{t-1})<br>$$</p><p>一般来讲，encoder 通过一个自定义的函数将所有时间步的隐藏状态转化为一个 context 变量：</p><p>$$<br>c&#x3D;q(h_1,…,h_T)<br>$$</p><p>如果 $q(h_1,…,h_T)&#x3D;h_T$ ，那么就是上面说的那种情况，context 变量为最后一层最后一个时间步的隐藏状态。</p><p>Encoder 和一般的 RNN 不同的地方在于，其输入序列先要进入一个 <strong>embedding</strong> 层，得到每个特征新的 embedding 向量，这个操作的目的是减少特征的维度（常规的 RNN 输入的token 的特征向量是一个 onehot 向量，其长度是词汇表的长度，如果不是以字符作为 token 的话，有些时候数据集中的词汇可能很多），这个 embedding 层学习的权重矩阵的大小为：（输入的词汇表长度，<code>vocab_size</code>*每个token的特征向量长度<code>embed_size</code>），其余的和 RNN 一样，这里使用 GRU 来实现 Encoder：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Seq2SeqEncoder</span>(d2l.Encoder):<br>    <span class="hljs-string">&quot;&quot;&quot;The RNN encoder for sequence to sequence learning.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, vocab_size, embed_size, num_hiddens, num_layers,</span><br><span class="hljs-params">                 dropout=<span class="hljs-number">0</span>, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>(Seq2SeqEncoder, self).__init__(**kwargs)<br>        <span class="hljs-comment"># Embedding layer</span><br>        self.embedding = nn.Embedding(vocab_size, embed_size)<br>        self.rnn = nn.GRU(embed_size, num_hiddens, num_layers,<br>                          dropout=dropout)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, X, *args</span>):<br>        <span class="hljs-comment"># The output `X` shape: (`batch_size`, `num_steps`, `embed_size`)</span><br>        X = self.embedding(X)<br>        <span class="hljs-comment"># In RNN models, the first axis corresponds to time steps</span><br>        X = X.permute(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br>        <span class="hljs-comment"># When state is not mentioned, it defaults to zeros</span><br>        output, state = self.rnn(X)<br>        <span class="hljs-comment"># `output` shape: (`num_steps`, `batch_size`, `num_hiddens`)</span><br>        <span class="hljs-comment"># `state` shape: (`num_layers`, `batch_size`, `num_hiddens`)</span><br>        <span class="hljs-keyword">return</span> output, state<br></code></pre></td></tr></table></figure><p><code>torch.permute</code> 返回按照指定维度重新排列的原始 tensor 的 view，这里的操作就是将第0个维度（batch_size）和第一个维度（num_steps）对调，保证时间步在第一个维度；验证一下输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">encoder = Seq2SeqEncoder(vocab_size=<span class="hljs-number">10</span>, embed_size=<span class="hljs-number">8</span>, num_hiddens=<span class="hljs-number">16</span>,<br>                         num_layers=<span class="hljs-number">2</span>)<br>encoder.<span class="hljs-built_in">eval</span>()<br>X = torch.zeros((<span class="hljs-number">4</span>, <span class="hljs-number">7</span>), dtype=torch.long)<span class="hljs-comment">##batch size 为 4，时间步为 7</span><br>output, state = encoder(X)<br>output.shape,state.shape<br><br>(torch.Size([<span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">16</span>]), torch.Size([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">16</span>]))<br></code></pre></td></tr></table></figure><p>输出的维度（<strong>也就是最后一层的所有时间步的隐状态</strong>）为（时间步*批量大小*隐藏单元的数量），输出的隐藏状态的维度（<strong>也就是所有层最后一个时间步的隐藏状态</strong>）为（隐藏层数*批量大小*隐藏单元数量）。</p><h5 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h5><p>对于 decoder，这里使用的是第二种方法，也就是在每个时间步都将 encoder 的输出 context 变量和当前的输入 concatenated 起来：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220601185525-2kz5uix.png" style="zoom:50%;" /><p>需要注意，由于使用 encoder 的最后一个时间步的隐藏状态来初始化 decoder 的隐藏状态，所以 encoder 和 decoder 的隐藏层数量和隐藏层大小应该是一样的；最后使用一个全连接层来转化输出的隐藏状态得到最终的输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Seq2SeqDecoder</span>(d2l.Decoder):<br>    <span class="hljs-string">&quot;&quot;&quot;The RNN decoder for sequence to sequence learning.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, vocab_size, embed_size, num_hiddens, num_layers,</span><br><span class="hljs-params">                 dropout=<span class="hljs-number">0</span>, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>(Seq2SeqDecoder, self).__init__(**kwargs)<br>        self.embedding = nn.Embedding(vocab_size, embed_size)<br>        self.rnn = nn.GRU(embed_size + num_hiddens, num_hiddens, num_layers,<br>                          dropout=dropout)<br>        self.dense = nn.Linear(num_hiddens, vocab_size)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_state</span>(<span class="hljs-params">self, enc_outputs, *args</span>):<br>        <span class="hljs-keyword">return</span> enc_outputs[<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, X, state</span>):<br>        <span class="hljs-comment"># The output `X` shape: (`num_steps`, `batch_size`, `embed_size`)</span><br>        X = self.embedding(X).permute(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br>        <span class="hljs-comment"># Broadcast `context` so it has the same `num_steps` as `X`</span><br>        context = state[-<span class="hljs-number">1</span>].repeat(X.shape[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        X_and_context = torch.cat((X, context), <span class="hljs-number">2</span>)<br>        output, state = self.rnn(X_and_context, state)<br>        output = self.dense(output).permute(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<span class="hljs-comment">##重新将batch size 放到第二个维度</span><br>        <span class="hljs-comment"># `output` shape: (`batch_size`, `num_steps`, `vocab_size`)</span><br>        <span class="hljs-comment"># `state` shape: (`num_layers`, `batch_size`, `num_hiddens`)</span><br>        <span class="hljs-keyword">return</span> output, state<br></code></pre></td></tr></table></figure><p><code>state[-1].repeat(X.shape[0], 1, 1)</code> 就是取 <code>state</code> 的最后一个（最后一个时间步的最后一层的隐藏状态），然后重复 decoder 输入的时间步长度的次数，以便于直接和 decoder 的输入连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">decoder = Seq2SeqDecoder(vocab_size=<span class="hljs-number">10</span>, embed_size=<span class="hljs-number">8</span>, num_hiddens=<span class="hljs-number">16</span>,<br>                         num_layers=<span class="hljs-number">2</span>)<br>decoder.<span class="hljs-built_in">eval</span>()<br>state = decoder.init_state(encoder(X))<br>output, state = decoder(X, state)<br>output.shape, state.shape<br><br>(torch.Size([<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>]), torch.Size([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">16</span>]))<br></code></pre></td></tr></table></figure><p>目前的 Seq2seq 的架构为：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220603165016-m2hgj66.png" style="zoom:50%;" /><h5 id="Loss-函数"><a href="#Loss-函数" class="headerlink" title="Loss 函数"></a>Loss 函数</h5><p>由于之前为了使得一个批量中的序列长度一样，在较短序列的末尾添加了<code>&lt;pad&gt;</code> token，但是在计算 loss 的时候这些 <code>&lt;pad&gt;</code> 应该被排除（依据之前保留的 <code>valid_length</code> 参数）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sequence_mask</span>(<span class="hljs-params">X, valid_len, value=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Mask irrelevant entries in sequences.&quot;&quot;&quot;</span><br>    maxlen = X.size(<span class="hljs-number">1</span>)<br>    mask = torch.arange((maxlen), dtype=torch.float32,<br>                        device=X.device)[<span class="hljs-literal">None</span>, :] &lt; valid_len[:, <span class="hljs-literal">None</span>]<br>    X[~mask] = value<br>    <span class="hljs-keyword">return</span> X<br><br>X = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br>sequence_mask(X, torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]))<br><br>tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>        [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])<br></code></pre></td></tr></table></figure><p><code>[None, :]</code> 表示增加一个 0 维度，<code>[:, None]</code> 表示增加一个 1 维度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).shape,torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])[:, <span class="hljs-literal">None</span>].shape<br>(torch.Size([<span class="hljs-number">2</span>]), torch.Size([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>]))<br><br>torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])[:, <span class="hljs-literal">None</span>]<br>tensor([[<span class="hljs-number">1</span>],<br>        [<span class="hljs-number">2</span>]])<br><br>torch.arange(<span class="hljs-number">4</span>).shape,torch.arange(<span class="hljs-number">4</span>)[<span class="hljs-literal">None</span>, :].shape<br>(torch.Size([<span class="hljs-number">4</span>]), torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4</span>]))<br><br>torch.arange(<span class="hljs-number">4</span>)[<span class="hljs-literal">None</span>, :]<br>tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]])<br><br><span class="hljs-comment">##将torch.arange(4)[None, :]的第一个维度广播成2维，从而与torch.tensor([1, 2])[:, None]进行逻辑运算</span><br>torch.arange(<span class="hljs-number">4</span>)[<span class="hljs-literal">None</span>, :] &lt; torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])[:, <span class="hljs-literal">None</span>]<br>tensor([[ <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>],<br>        [ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]])<br><br>a = torch.arange(<span class="hljs-number">4</span>)[<span class="hljs-literal">None</span>, :] &lt; torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])[:, <span class="hljs-literal">None</span>]<br>X = torch.tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br>X<br>tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>        [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br><br>X[~a]<span class="hljs-comment">##哪些是False ~ 是取反操作</span><br>tensor([<span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br><br>~a<br>tensor([[<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>],<br>        [<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>]])<br></code></pre></td></tr></table></figure><p>接下来就可以更改之前的交叉熵 loss 来考虑这些 padding 的影响：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MaskedSoftmaxCELoss</span>(nn.CrossEntropyLoss):<span class="hljs-comment">#继承CrossEntropyLoss</span><br>    <span class="hljs-string">&quot;&quot;&quot;The softmax cross-entropy loss with masks.&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># `pred` shape: (`batch_size`, `num_steps`, `vocab_size`)</span><br>    <span class="hljs-comment"># `label` shape: (`batch_size`, `num_steps`)</span><br>    <span class="hljs-comment"># `valid_len` shape: (`batch_size`,)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, pred, label, valid_len</span>):<br>        weights = torch.ones_like(label)<br>        weights = sequence_mask(weights, valid_len)<br>        self.reduction=<span class="hljs-string">&#x27;none&#x27;</span><br>        unweighted_loss = <span class="hljs-built_in">super</span>().forward(pred.permute(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>), label)<br>        weighted_loss = (unweighted_loss * weights).mean(dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> weighted_loss<br><br>pred = torch.ones(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>)<br>pred<br>tensor([[[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>         [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>         [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>         [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]],<br><br>        [[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>         [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>         [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>         [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]],<br><br>        [[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>         [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>         [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>         [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]]])<br><br>label = torch.ones((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), dtype=torch.long)<br>label<br>tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]])<br><br>valid_len = torch.tensor([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>])<br>valid_len<br>tensor([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>])<br><br>weights = torch.ones_like(label)<br>weights = sequence_mask(weights, valid_len)<br>weights<br>tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>        [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])<br><br>loss = nn.CrossEntropyLoss(reduction = <span class="hljs-string">&quot;none&quot;</span>)<br>unweighted_loss = loss(pred.permute(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>), label)<br>unweighted_loss<br>tensor([[<span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>],<br>        [<span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>],<br>        [<span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>]])<br><br>unweighted_loss * weights<br>tensor([[<span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>],<br>        [<span class="hljs-number">2.3026</span>, <span class="hljs-number">2.3026</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>],<br>        [<span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>]])<br><br>(unweighted_loss * weights).mean(dim=<span class="hljs-number">1</span>)<br>tensor([<span class="hljs-number">2.3026</span>, <span class="hljs-number">1.1513</span>, <span class="hljs-number">0.0000</span>])<br></code></pre></td></tr></table></figure><h5 id="训练-1"><a href="#训练-1" class="headerlink" title="训练"></a>训练</h5><p>训练使用的方法：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220601185525-2kz5uix.png" style="zoom:50%;" /><p>这个过程叫做 <em>teacher forcing</em>，也就是每次不使用上一个时间步的输出作为下一个时间步的输入，而是直接使用训练数据中相应的输入，这样即使在某一步预测错误也不影响下一步的输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_seq2seq</span>(<span class="hljs-params">net, data_iter, lr, num_epochs, tgt_vocab, device</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Train a model for sequence to sequence.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">xavier_init_weights</span>(<span class="hljs-params">m</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear:<br>            nn.init.xavier_uniform_(m.weight)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.GRU:<br>            <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> m._flat_weights_names:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;weight&quot;</span> <span class="hljs-keyword">in</span> param:<br>                    nn.init.xavier_uniform_(m._parameters[param])<br>    net.apply(xavier_init_weights)<br>    net.to(device)<br>    optimizer = torch.optim.Adam(net.parameters(), lr=lr)<br>    loss = MaskedSoftmaxCELoss()<br>    net.train()<br>    animator = d2l.Animator(xlabel=<span class="hljs-string">&#x27;epoch&#x27;</span>, ylabel=<span class="hljs-string">&#x27;loss&#x27;</span>,<br>                            xlim=[<span class="hljs-number">10</span>, num_epochs])<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        timer = d2l.Timer()<br>        metric = d2l.Accumulator(<span class="hljs-number">2</span>)  <span class="hljs-comment"># Sum of training loss, no. of tokens</span><br>        <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> data_iter:<br>            optimizer.zero_grad()<br>            X, X_valid_len, Y, Y_valid_len = [x.to(device) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> batch]<br>            bos = torch.tensor([tgt_vocab[<span class="hljs-string">&#x27;&lt;bos&gt;&#x27;</span>]] * Y.shape[<span class="hljs-number">0</span>],<br>                               device=device).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>            dec_input = torch.cat([bos, Y[:, :-<span class="hljs-number">1</span>]], <span class="hljs-number">1</span>)  <span class="hljs-comment"># Teacher forcing</span><br>            Y_hat, _ = net(X, dec_input, X_valid_len)<br>            l = loss(Y_hat, Y, Y_valid_len)<br>            l.<span class="hljs-built_in">sum</span>().backward()  <span class="hljs-comment"># Make the loss scalar for `backward`</span><br>            d2l.grad_clipping(net, <span class="hljs-number">1</span>)<br>            num_tokens = Y_valid_len.<span class="hljs-built_in">sum</span>()<br>            optimizer.step()<br>            <span class="hljs-keyword">with</span> torch.no_grad():<br>                metric.add(l.<span class="hljs-built_in">sum</span>(), num_tokens)<br>        <span class="hljs-keyword">if</span> (epoch + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>            animator.add(epoch + <span class="hljs-number">1</span>, (metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">1</span>],))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;loss <span class="hljs-subst">&#123;metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">1</span>]:<span class="hljs-number">.3</span>f&#125;</span>, <span class="hljs-subst">&#123;metric[<span class="hljs-number">1</span>] / timer.stop():<span class="hljs-number">.1</span>f&#125;</span> &#x27;</span><br>          <span class="hljs-string">f&#x27;tokens/sec on <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(device)&#125;</span>&#x27;</span>)<br><br>embed_size, num_hiddens, num_layers, dropout = <span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0.1</span><br>batch_size, num_steps = <span class="hljs-number">64</span>, <span class="hljs-number">10</span><br>lr, num_epochs, device = <span class="hljs-number">0.005</span>, <span class="hljs-number">300</span>, d2l.try_gpu()<br><br>torch.set_num_threads(<span class="hljs-number">30</span>)<span class="hljs-comment">#限制线程</span><br>train_iter, src_vocab, tgt_vocab = d2l.load_data_nmt(batch_size, num_steps)<br>encoder = Seq2SeqEncoder(<br>    <span class="hljs-built_in">len</span>(src_vocab), embed_size, num_hiddens, num_layers, dropout)<br>decoder = Seq2SeqDecoder(<br>    <span class="hljs-built_in">len</span>(tgt_vocab), embed_size, num_hiddens, num_layers, dropout)<br>net = d2l.EncoderDecoder(encoder, decoder)<br>train_seq2seq(net, train_iter, lr, num_epochs, tgt_vocab, device)<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220603183828-43ixgq6.png" alt="" style="zoom:50%;" /><h5 id="预测-1"><a href="#预测-1" class="headerlink" title="预测"></a>预测</h5><p>预测的架构如下，和 Decoder 训练时不同的地方在于：除了第一个时间步输入是 <code>&lt;bos&gt;</code> 的token 外，其他的时间步的输入是前一个时间步的输出（取概率最大的）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220603183910-cz3hxrq.png" style="zoom: 67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict_seq2seq</span>(<span class="hljs-params">net, src_sentence, src_vocab, tgt_vocab, num_steps,</span><br><span class="hljs-params">                    device, save_attention_weights=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Predict for sequence to sequence.&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># Set `net` to eval mode for inference</span><br>    net.<span class="hljs-built_in">eval</span>()<br>    src_tokens = src_vocab[src_sentence.lower().split(<span class="hljs-string">&#x27; &#x27;</span>)] + [<br>        src_vocab[<span class="hljs-string">&#x27;&lt;eos&gt;&#x27;</span>]]<br>    enc_valid_len = torch.tensor([<span class="hljs-built_in">len</span>(src_tokens)], device=device)<br>    src_tokens = d2l.truncate_pad(src_tokens, num_steps, src_vocab[<span class="hljs-string">&#x27;&lt;pad&gt;&#x27;</span>])<br>    <span class="hljs-comment"># Add the batch axis</span><br>    enc_X = torch.unsqueeze(<br>        torch.tensor(src_tokens, dtype=torch.long, device=device), dim=<span class="hljs-number">0</span>)<br>    enc_outputs = net.encoder(enc_X, enc_valid_len)<br>    dec_state = net.decoder.init_state(enc_outputs, enc_valid_len)<br>    <span class="hljs-comment"># Add the batch axis</span><br>    dec_X = torch.unsqueeze(torch.tensor(<br>        [tgt_vocab[<span class="hljs-string">&#x27;&lt;bos&gt;&#x27;</span>]], dtype=torch.long, device=device), dim=<span class="hljs-number">0</span>)<br>    output_seq, attention_weight_seq = [], []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_steps):<br>        Y, dec_state = net.decoder(dec_X, dec_state)<br>        <span class="hljs-comment"># We use the token with the highest prediction likelihood as the input</span><br>        <span class="hljs-comment"># of the decoder at the next time step</span><br>        dec_X = Y.argmax(dim=<span class="hljs-number">2</span>)<br>        pred = dec_X.squeeze(dim=<span class="hljs-number">0</span>).<span class="hljs-built_in">type</span>(torch.int32).item()<br>        <span class="hljs-comment"># Save attention weights (to be covered later)</span><br>        <span class="hljs-keyword">if</span> save_attention_weights:<br>            attention_weight_seq.append(net.decoder.attention_weights)<br>        <span class="hljs-comment"># Once the end-of-sequence token is predicted, the generation of the</span><br>        <span class="hljs-comment"># output sequence is complete</span><br>        <span class="hljs-keyword">if</span> pred == tgt_vocab[<span class="hljs-string">&#x27;&lt;eos&gt;&#x27;</span>]:<br>            <span class="hljs-keyword">break</span><br>        output_seq.append(pred)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>.join(tgt_vocab.to_tokens(output_seq)), attention_weight_seq<br></code></pre></td></tr></table></figure><h4 id="评估函数"><a href="#评估函数" class="headerlink" title="评估函数"></a>评估函数</h4><p>在机器翻译中广泛使用的评估函数为 BLUE（Bilingual Evaluation Understudy）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220603185940-n4rj7s1.png" style="zoom:50%;" /><p>对于预测序列中的任意 n-gram（gram 表示词汇），BLEU 评估是否这个 n-gram 出现在标签序列中；设 $p_n$ 为 n-gram 的精度，也就是在预测和标签序列中匹配的 n-gram 的数量处于预测序列中的 n-gram 的数量，比如上面那张图里面的例子：1-gram 有 A, B, C, D, E, F 这些 1-gram 中和标签序列匹配的有 A, B, C, D 一共 4 个，预测序列的长度为 5 ，因此 p1 为 4&#x2F;5；同样的 2-gram 有 AB, BC, CD, DE, EF，和标签序列匹配的有 AB, BC, CD 一共 3 个，因此 p2 为 3&#x2F;4，同理 3-gram 只有 BCD 是匹配的，所以为 1&#x2F;3 。</p><p>由于更长的 gram 匹配的难度越大，因此 BLEU 给与大的 n-gram 比较高的权重（$p_n^{1&#x2F;2^n}$，由于 $p_n$ 是小于1 的，所以 n 越大，$1&#x2F;2^n$ 又是小于1的，$1&#x2F;2^n$ 越小，整体就越大）:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> tt <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><span class="hljs-number">0.2</span><span class="hljs-operator">^</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-operator">^</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-operator">&gt;</span> s <span class="hljs-operator">&lt;-</span> tt<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> s<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">0.4472136</span> <span class="hljs-number">0.6687403</span> <span class="hljs-number">0.8177654</span> <span class="hljs-number">0.9043038</span> <span class="hljs-number">0.9509489</span> <span class="hljs-number">0.9751661</span><br></code></pre></td></tr></table></figure><p>同时由于短的 gram 比较好匹配，会得到较高的 $p_n$ 值，因此 BLEU 给短的预测有个惩罚（前面的 min 项，当预测的比较短，会使得 min 项小于0 ，因此 exp 后的值也会比较小），比如：标签序列是 A, B, C, D, E 但是预测序列是 A, B，那么得到的 p1 &#x3D; p2 &#x3D; 1，但是计算前面的项时得到的惩罚因子为 exp(1-6&#x2F;2)&#x3D;0.14。代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bleu</span>(<span class="hljs-params">pred_seq, label_seq, k</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;Compute the BLEU.&quot;&quot;&quot;</span><br>    pred_tokens, label_tokens = pred_seq.split(<span class="hljs-string">&#x27; &#x27;</span>), label_seq.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>    len_pred, len_label = <span class="hljs-built_in">len</span>(pred_tokens), <span class="hljs-built_in">len</span>(label_tokens)<br>    score = math.exp(<span class="hljs-built_in">min</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span> - len_label / len_pred))<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>):<br>        num_matches, label_subs = <span class="hljs-number">0</span>, collections.defaultdict(<span class="hljs-built_in">int</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len_label - n + <span class="hljs-number">1</span>):<br>            label_subs[<span class="hljs-string">&#x27; &#x27;</span>.join(label_tokens[i: i + n])] += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len_pred - n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> label_subs[<span class="hljs-string">&#x27; &#x27;</span>.join(pred_tokens[i: i + n])] &gt; <span class="hljs-number">0</span>:<br>                num_matches += <span class="hljs-number">1</span><br>                label_subs[<span class="hljs-string">&#x27; &#x27;</span>.join(pred_tokens[i: i + n])] -= <span class="hljs-number">1</span><br>        score *= math.<span class="hljs-built_in">pow</span>(num_matches / (len_pred - n + <span class="hljs-number">1</span>), math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">0.5</span>, n))<br>    <span class="hljs-keyword">return</span> score<br></code></pre></td></tr></table></figure><p>计算 BLEU ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">engs = [<span class="hljs-string">&#x27;go .&#x27;</span>, <span class="hljs-string">&quot;i lost .&quot;</span>, <span class="hljs-string">&#x27;he\&#x27;s calm .&#x27;</span>, <span class="hljs-string">&#x27;i\&#x27;m home .&#x27;</span>]<br>fras = [<span class="hljs-string">&#x27;va !&#x27;</span>, <span class="hljs-string">&#x27;j\&#x27;ai perdu .&#x27;</span>, <span class="hljs-string">&#x27;il est calme .&#x27;</span>, <span class="hljs-string">&#x27;je suis chez moi .&#x27;</span>]<br><span class="hljs-keyword">for</span> eng, fra <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(engs, fras):<br>    translation, attention_weight_seq = predict_seq2seq(<br>        net, eng, src_vocab, tgt_vocab, num_steps, device)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;eng&#125;</span> =&gt; <span class="hljs-subst">&#123;translation&#125;</span>, bleu <span class="hljs-subst">&#123;bleu(translation, fra, k=<span class="hljs-number">2</span>):<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>)<br><br>go . =&gt; va !, bleu <span class="hljs-number">1.000</span><br>i lost . =&gt; j<span class="hljs-string">&#x27;ai perdu ., bleu 1.000</span><br><span class="hljs-string">he&#x27;</span>s calm . =&gt; il est riche paresseux, bleu <span class="hljs-number">0.537</span><br>i<span class="hljs-string">&#x27;m home . =&gt; je suis chez moi ., bleu 1.000</span><br></code></pre></td></tr></table></figure><h3 id="束搜索"><a href="#束搜索" class="headerlink" title="束搜索"></a>束搜索</h3><p>前面实现的 Seq2seq 实际上使用了贪婪算法，也就是在每一步中都只关注目前最好的结果，在 seq2seq2 模型就是在每个时间点取预测概率最大的词作为下一个时间点的输入，但是贪婪搜索得到的结果不总是最好的，比如下面两个例子：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220606175247-wn7ho2x.png" style="zoom:50%;" /><p>要想得到最好的结果只能使用穷举法，也就是考察所有的序列，找到概率最高的序列；但是如果有 n 个词，时间步为 T ，那么需要比较的序列就有 $n^T$ 个，这个时间复杂度在计算上是不可行的。</p><p>束搜索则是采取了一种居中的方法，在每个时间点上考虑 k 中可能：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220606175755-h937bef.png" style="zoom: 50%;" /><p>比如上面的情况：词汇表中有 5 个词，输入句子的开始，在第一步预测的 5 个词的概率中取最高的两个，分别基于这两个进行下一个时间点的预测，又可以得到 10 个概率值，在这 10 个里面再取 2 个最高的，如此下去，最终就可以得到一系列的候选序列（这里是两个），然后基于下面的打分函数选择得分最高的序列作为最终的输出序列：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220606180238-pwvgyzr.png" style="zoom:50%;" /><p>L 表示候选序列的长度，对于短的序列得到的概率就越大，因此对于短的序列（为什么会出现不一样的长度，因为可能某个序列预测时提前出现 <code>&lt;eos&gt;</code>，可以想象为平行宇宙）有个惩罚（或者说对长的序列有奖励，因为 <code>log(p)</code> 是负的，负值除以越大的值结果就越大）。另外束搜索的复杂度为 $knT$ ，比穷举法要小得多。</p><p>参考资料：</p><ul><li>动手学深度学习</li><li><a href="https://www.bilibili.com/video/BV1Wv411h7kN?p=40">(强推)李宏毅2021&#x2F;2022春机器学习课程_哔哩哔哩_bilibili</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用多任务图卷积神经网络改进癌症驱动基因识别</title>
    <link href="/2022/05/07/paper_MTGCN/"/>
    <url>/2022/05/07/paper_MTGCN/</url>
    
    <content type="html"><![CDATA[<p>论文阅读：Improving cancer driver gene identification using multi-task learning on graph convolutional network</p><span id="more"></span><p>预测癌症驱动基因传统的方法一般是基于突变频率的方法：先计算背景突变率，然后再比较某些位点的突变频率是否显著高于背景突变率，这些方法存在的问题：1. 不能够准确的估计背景突变率，2.有一些 driver 突变有着低的突变率，这种方法就不能发现。</p><p>一些研究发现 driver 基因通常在共同的通路或者蛋白复合体中发挥作用，将这些通路或者蛋白复合体的亚单元破坏就会导致癌症表型，因此可以利用 PPI （蛋白互作）网络来帮助寻找癌基因，但是单纯 PPI 网络的可信度并不高（可能某些研究比较多的基因在网络中的度就比较高），因此还需要结合其他的特征，比如基因表达，表观状态等（即整合多组学的信息）。这篇文献的主要特点在于：</p><ul><li>增加了基因相关的特征</li><li>构建了多任务的图卷积网络学习框架来鉴别 driver 基因，多任务包括节点预测和边预测</li><li>在 GCN 中增加了 skip connection （类似残差连接）</li><li>使用贝叶斯任务权重学习器来学习调整多任务中的不同任务间的权重</li><li>在训练中使用 drop out 技术（drop out 一些 PPI 网络中的边）</li></ul><p>数据：</p><ul><li>PPI 网络 ：数据来自 Consensus Path DB，移除互作分数小于 0.5 的边，还剩 13627 个节点和 504378 条边</li><li>TCGA 的基因突变，DNA 甲基化和基因表达数据</li></ul><p> 对于每种癌症计算 3 种基因特征：</p><ul><li>基因突变率：一个癌症类型中所有样本某个基因中发生的 SNV 和 CNA 的平均数量</li><li>差异 DNA 甲基化率：一个癌症类型中所有样本某个基因在癌症样本和正常样本的甲基化信号差异的均值</li><li>差异基因表达率：一个癌症类型中所有样本某个基因在正常样本和癌症样本中表达值的 log2 Fold change 的均值</li></ul><p>最后将每个基因 16 种癌症的 3 个特征合并，并进行最小最大标准化，因此每个基因有 16 * 3 &#x3D; 48 个特征。正例样本来自 NCG（包括 pan-cancer 和 癌症类型特异的），负例样本是从所有基因中剔除在 NCG, COSMIC, Online Mendelian Inheritance in Man (OMIM) database , Kyoto Encyclopedia of Genes and Genomes (KEGG) cancer pathway 中的基因，一共正例样本 796 个，负例样本 2187 个。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220507183147-humnmrk.png" style="zoom:67%;" /><p>每个基因的特征包括上面提到的 48 个生物学相关的特征以及 PPI 网络中的网络结构特征，MTGCN 的输入是节点的特征矩阵（X）和 PPI 网络（A）。MTGCN 使用多任务学习来预测 driver 基因，主任务为节点标签预测，辅助任务是边标签预测；这两个任务共享两个 Chebyshev GCN 层（1，2），并使用不同的目标函数进行优化，最后使用贝叶斯任务权重学习器对两个任务的 loss 进行平衡得到最后的 loss，用来训练整个模型。</p><h4 id="节点的特征"><a href="#节点的特征" class="headerlink" title="节点的特征"></a>节点的特征</h4><p>节点的特征包括两种，第一个就是上面讲到的 48 个生物学特征，突变 + 基因表达 + 甲基化；第二类是特征是 PPI 网络结构，通过 DeepWalk 算法提取每个节点的 embedding （16 维的 embedding），可以保留网络的拓扑特征（DeepWalk 算法可以见之前的笔记：<a href="https://wutaoblog.com.cn/2022/03/13/gnn/#Node-embedding">node embedding</a>)，因此最后的特征有 64 维：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220505142814-ujpvk7w.png" style="zoom: 50%;" /><h4 id="Main-task"><a href="#Main-task" class="headerlink" title="Main task"></a>Main task</h4><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220505140108-jssach31-20220505143444-3hrgl3z.png" style="zoom:50%;" /><p>MTGCN 的主要任务是预测一个基因是否是 driver 基因，任务流程为上图：节点的特征矩阵和 PPI 网络输入经过两个 Chebyshev GCN 层，另外特征矩阵还通过一个全连接层，将第二个 Chebyshev GCN 层的输出 embedding 和全连接层输出相加，然后和 PPI 网络一起输入第三个 Chebyshev GCN 层得到最终的 embedding 进行节点标签的预测。</p><h4 id="Chebyshev-GCN-层"><a href="#Chebyshev-GCN-层" class="headerlink" title="Chebyshev GCN 层"></a>Chebyshev GCN 层</h4><p>经典的 GCN 学习步骤有三步：信息传播，聚合，更新（embedding），这篇文章使用的是 Chebyshev 层，每层定义为：</p><p>$$<br>H&#x3D;f(\sum_{k&#x3D;1}^KZ^{(k)} \Theta^{(k)})<br>$$</p><p>$\Theta \in R^{g\times{h}}$ 是权重矩阵，g 是基因数量，h 是隐藏层维度；Z 通过下面计算得到（没有看懂）：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220507170600-7pa92cz.png"></p><p>f 是激活函数，在训练过程中使用 drop out 技术，即随机丢弃一部分 PPI 网络中的边。</p><h4 id="跳转连接"><a href="#跳转连接" class="headerlink" title="跳转连接"></a>跳转连接</h4><p>最初的输入特征经过两层 Chebyshev 层之后会得到每个基因的 embedding 向量，但是在将这些 embedding 输入两个任务之前，作者将最初的输入向量和 embedding 向量相加从而减少过拟合（类似于ResNet 的残差连接，残差连接可以避免梯度消失的问题，但是这里的网络并不是很深，另外残差连接可以一定程度保留原始的信息，还起到模型融合的作用）；为了在输入特征的维度和得到的 embedding 特征维度之间保持一致（不然就加不了），将原始特征输入两个独立的全连接层（main task 和 auxiliary task 各一个）输出的特征维度和 embedding 一致。所谓的跳转连接可以表示为：</p><p>$$<br>H_p&#x3D;H_2+relu(Wx+b)<br>$$</p><p>$H_2$ 表示经过两个 Chebyshev 层学习到的 embedding，W 和 b 是全连接的权重和偏置。</p><h4 id="主要任务的损失函数"><a href="#主要任务的损失函数" class="headerlink" title="主要任务的损失函数"></a>主要任务的损失函数</h4><p>在经过 main task 的 Chebyshev 层之后使用一个 sigmoid 函数来得到 driver 基因的预测。Loss 函数使用修改后的交叉熵 loss：</p><p>$$<br>L_{pre}(\theta)&#x3D;-\frac{1}{n}\sum_{i&#x3D;1}^n[\omega y_ilog(\hat{y_i})+(1-y_i)log(1-\hat{y_i})]<br>$$</p><p>$\hat{y_i}$ 表示预测值，$y_i$ 表示真实的基因标签（0 或 1），n 是基因的数目，$\omega$ 控制着正例样本的权重（这里面取 1）。</p><h4 id="辅助任务：边预测"><a href="#辅助任务：边预测" class="headerlink" title="辅助任务：边预测"></a>辅助任务：边预测</h4><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220507183147-humnmrk1-20220507202952-x736v96.png" style="zoom:50%;" /><p>边预测的目的是辅助网络进行节点的预测，更进一步的提供网络的拓扑信息（文中说可以利用未标注的数据点，但是实际上只有标注的基因才可以得到其 embedding）；在上面的跳转连接之后会得到一个节点 embedding 的矩阵 $H_p$ ，我们可以使用内积来“重构”一个邻接矩阵（如果两个节点的 embedding 内积比较大，就说明这两个节点的 embedding 相似，因此更可能有边连接）：</p><p>$$<br>\hat{A}&#x3D;\sigma(H_pH_p^T)<br>$$</p><p>$\sigma$ 是激活函数，边预测的 Loss 函数如下，类似交叉熵：</p><p>$$<br>L_{rec}(\theta)&#x3D;-\frac{1}{m}[\sum_{i,j\in E}loga_{i,j}+\sum_{i,j\in Neg}(1-loga_{i,j})]<br>$$</p><p>E 是 PPI 网络中的边的集合，Neg 是负采样的边的集合（PPI 中没有的边抽样得到），E 和 Neg 的大小都是 m，$a_{i,j}$ 是 $\hat{A}$ 中的元素。</p><h4 id="联合两个任务的-Loss"><a href="#联合两个任务的-Loss" class="headerlink" title="联合两个任务的 Loss"></a>联合两个任务的 Loss</h4><p>结合节点预测和边预测的 loss 得到整个模型的 loss：</p><p>$$<br>L_{total}&#x3D; w_{pre}L_{pre}+w_{rec}L_{rec}<br>$$</p><p>这篇文章使用了<a href="https://arxiv.org/abs/1705.07115">贝叶斯权重学习器</a>来结合两个 loss：</p><p>基于一个简化假设：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220507210413-6d004yl.png" style="zoom:50%;" /><p>可以将下面两个 sigmoid 激活函数进行转化：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220507210452-0setejr.png" style="zoom:50%;" /><p>之前的节点预测任务的 loss 可以写成：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220507210517-636605f.png" style="zoom:50%;" /><p>$h^3$ 是第三个 Chebyshev 层输出的节点 embedding，接着引入一个因子 $\alpha$  再根据上面的 10 和 11 可以得到:</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220507210649-fwf6zj7.png" style="zoom: 67%;" /><p>通过类似的方法可以得到边预测任务的 loss：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220507210826-lf0goi0.png" style="zoom:50%;" /><p>然后再把两个 loss 相加得到最终的联合 loss：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220507210907-81naywq.png" style="zoom:67%;" /><p>因此，整个 MTGCN 的算法伪代码如下：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220507211008-yyg7ygj.png" style="zoom: 50%;" /><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>Github 地址在 <a href="https://github.com/weiba/MTGCN">weiba&#x2F;MTGCN (github.com)</a></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220507220013-jbxrxw4.png"></p><p>安装相应的包，设置环境：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">conda create -n MTGCN python=<span class="hljs-number">3.7</span><br>conda activate MTGCN<br>conda install pytorch=<span class="hljs-number">1.6</span><span class="hljs-number">.0</span> torchvision cpuonly -c pytorch <span class="hljs-comment">##安装pytorch</span><br>pip install torch_scatter-<span class="hljs-number">2.0</span><span class="hljs-number">.6</span>-cp37-cp37m-linux_x86_64.whl <span class="hljs-comment">#在这里下载 whl https://data.pyg.org/whl/torch-1.6.0%2Bcpu.html</span><br>pip install torch_sparse-<span class="hljs-number">0.6</span><span class="hljs-number">.9</span>-cp37-cp37m-linux_x86_64.whl <br>pip install torch-geometric==<span class="hljs-number">1.7</span><span class="hljs-number">.0</span><br><br>conda install ipykernel<span class="hljs-comment">##使环境可以被jupyter-lab识别</span><br></code></pre></td></tr></table></figure><p>先进行 Deepwork 提取节点的 embedding:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> pickle<br><br><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> torch_geometric.transforms <span class="hljs-keyword">as</span> T<br><br><span class="hljs-keyword">from</span> torch_geometric.nn <span class="hljs-keyword">import</span> Node2Vec<br><span class="hljs-keyword">from</span> torch_geometric.data <span class="hljs-keyword">import</span> Data, DataLoader<br><span class="hljs-keyword">from</span> torch_geometric.utils <span class="hljs-keyword">import</span> dropout_adj, negative_sampling, remove_self_loops,add_self_loops<br><br><br><span class="hljs-comment">##读入数据</span><br>data = torch.load(<span class="hljs-string">&quot;./data/CPDB_data.pkl&quot;</span>)<br></code></pre></td></tr></table></figure><p>我们可以看一下数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">data<br>Data(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">504378</span>], mask=[<span class="hljs-literal">False</span> <span class="hljs-literal">False</span> <span class="hljs-literal">False</span> ... <span class="hljs-literal">False</span> <span class="hljs-literal">False</span> <span class="hljs-literal">False</span>], mask_te=[<span class="hljs-literal">False</span> <span class="hljs-literal">False</span> <span class="hljs-literal">False</span> ... <span class="hljs-literal">False</span> <span class="hljs-literal">False</span> <span class="hljs-literal">False</span>], node_names=[[<span class="hljs-string">&#x27;ENSG00000167323&#x27;</span> <span class="hljs-string">&#x27;STIM1&#x27;</span>]<br> [<span class="hljs-string">&#x27;ENSG00000144935&#x27;</span> <span class="hljs-string">&#x27;TRPC1&#x27;</span>]<br> [<span class="hljs-string">&#x27;ENSG00000089250&#x27;</span> <span class="hljs-string">&#x27;NOS1&#x27;</span>]<br> ...<br> [<span class="hljs-string">&#x27;ENSG00000183117&#x27;</span> <span class="hljs-string">&#x27;CSMD1&#x27;</span>]<br> [<span class="hljs-string">&#x27;ENSG00000180828&#x27;</span> <span class="hljs-string">&#x27;BHLHE22&#x27;</span>]<br> [<span class="hljs-string">&#x27;ENSG00000169618&#x27;</span> <span class="hljs-string">&#x27;PROKR1&#x27;</span>]], x=[<span class="hljs-number">13627</span>, <span class="hljs-number">64</span>], y=[[<span class="hljs-literal">False</span>]<br> [<span class="hljs-literal">False</span>]<br> [<span class="hljs-literal">False</span>]<br> ...<br> [<span class="hljs-literal">False</span>]<br> [<span class="hljs-literal">False</span>]<br> [<span class="hljs-literal">False</span>]], y_te=[[<span class="hljs-literal">False</span>]<br> [<span class="hljs-literal">False</span>]<br> [<span class="hljs-literal">False</span>]<br> ...<br> [<span class="hljs-literal">False</span>]<br> [<span class="hljs-literal">False</span>]<br> [<span class="hljs-literal">False</span>]])<br></code></pre></td></tr></table></figure><p><code>mask</code> 表示是否为训练数据，<code>mask_te</code> 表示是否为测试数据，可以看到训练数据和测试数据加起来和前面的正例样本（driver）和负例样本一样多：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">data[<span class="hljs-string">&quot;mask&quot;</span>].<span class="hljs-built_in">sum</span>()<br><span class="hljs-number">2237</span><br><br>data[<span class="hljs-string">&quot;mask_te&quot;</span>].<span class="hljs-built_in">sum</span>()<br><span class="hljs-number">746</span><br></code></pre></td></tr></table></figure><p>下面就可以训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##DeepWork 就是 p=q=1 的 node2vec</span><br>model =  Node2Vec(data.edge_index, embedding_dim=<span class="hljs-number">16</span>, walk_length=<span class="hljs-number">80</span>,<br>                     context_size=<span class="hljs-number">5</span>,  walks_per_node=<span class="hljs-number">10</span>,<br>                     num_negative_samples=<span class="hljs-number">1</span>, p=<span class="hljs-number">1</span>, q=<span class="hljs-number">1</span>, sparse=<span class="hljs-literal">True</span>).to(device)<br>loader = model.loader(batch_size=<span class="hljs-number">128</span>, shuffle=<span class="hljs-literal">True</span>)<br>optimizer = torch.optim.SparseAdam(<span class="hljs-built_in">list</span>(model.parameters()), lr=<span class="hljs-number">0.001</span>) <br></code></pre></td></tr></table></figure><p>DeepWork 就是 p&#x3D;q&#x3D;1 的 node2vec；<code>context_size</code> 相当于窗口，比如现在 <code>walk_length</code> 为 4：{u, s1, s2 ,s3}，<code>context_size</code> 为 2，那么可以得到的正例样本为：{u: s1,s2}；{s1: s2, s3}，使用梯度下降来优化 loss：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>():<br>    model.train()<br>    total_loss = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> pos_rw, neg_rw <span class="hljs-keyword">in</span> loader:<br>        optimizer.zero_grad()<br>        loss = model.loss(pos_rw.to(device), neg_rw.to(device))<br>        loss.backward()<br>        optimizer.step()<br>        total_loss += loss.item()<br>    <span class="hljs-keyword">return</span> total_loss / <span class="hljs-built_in">len</span>(loader)<br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">501</span>):<br>    loss = train()<br>    <span class="hljs-built_in">print</span> (loss)<br><br>model.<span class="hljs-built_in">eval</span>()<br>str_fearures = model()<br><br>torch.save(str_fearures, <span class="hljs-string">&#x27;str_fearures.pkl&#x27;</span>)<br></code></pre></td></tr></table></figure><p>接着就可以实现上面的两个任务的 GCN 了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> pickle<br><br><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Linear<br><br><span class="hljs-keyword">import</span> torch_geometric.transforms <span class="hljs-keyword">as</span> T<br><span class="hljs-keyword">from</span> torch_geometric.nn <span class="hljs-keyword">import</span> ChebConv<br><span class="hljs-keyword">from</span> torch_geometric.data <span class="hljs-keyword">import</span> Data, DataLoader<br><span class="hljs-keyword">from</span> torch_geometric.utils <span class="hljs-keyword">import</span> dropout_adj, negative_sampling, remove_self_loops, add_self_loops<br><br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>EPOCH = <span class="hljs-number">2500</span><br><br>data = torch.load(<span class="hljs-string">&quot;./data/CPDB_data.pkl&quot;</span>)<br>device = torch.device(<span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span>)<br>data = data.to(device)<br>Y = torch.tensor(np.logical_or(data.y, data.y_te)).<span class="hljs-built_in">type</span>(torch.FloatTensor).to(device)<span class="hljs-comment">##只保留训练和测试的数据</span><br>y_all = np.logical_or(data.y, data.y_te)<br>mask_all = np.logical_or(data.mask, data.mask_te)<br>data.x = data.x[:, :<span class="hljs-number">48</span>]<span class="hljs-comment">##三个生物学特征</span><br><br>datas = torch.load(<span class="hljs-string">&quot;./data/str_fearures.pkl&quot;</span>, map_location=torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>))<span class="hljs-comment">#deepwork 的 embedding</span><br>datas.shape<br><span class="hljs-comment">##torch.Size([13627, 16])</span><br>data.x = torch.cat((data.x, datas), <span class="hljs-number">1</span>)<span class="hljs-comment">#合并两个特征</span><br>data = data.to(device)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./data/k_sets.pkl&quot;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> handle:<br>    k_sets = pickle.load(handle)<br><br><span class="hljs-comment">#pb, _ = remove_self_loops(data.edge_index)</span><br>pb, _ = add_self_loops(pb)<br>E = data.edge_index<br><br><span class="hljs-comment">##网络结构</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.conv1 = ChebConv(<span class="hljs-number">64</span>, <span class="hljs-number">300</span>, K=<span class="hljs-number">2</span>, normalization=<span class="hljs-string">&quot;sym&quot;</span>)<br>        self.conv2 = ChebConv(<span class="hljs-number">300</span>, <span class="hljs-number">100</span>, K=<span class="hljs-number">2</span>, normalization=<span class="hljs-string">&quot;sym&quot;</span>)<br>        self.conv3 = ChebConv(<span class="hljs-number">100</span>, <span class="hljs-number">1</span>, K=<span class="hljs-number">2</span>, normalization=<span class="hljs-string">&quot;sym&quot;</span>)<br><br>        self.lin1 = Linear(<span class="hljs-number">64</span>, <span class="hljs-number">100</span>)<br>        self.lin2 = Linear(<span class="hljs-number">64</span>, <span class="hljs-number">100</span>)<br><br>        self.c1 = torch.nn.Parameter(torch.Tensor([<span class="hljs-number">0.5</span>]))<br>        self.c2 = torch.nn.Parameter(torch.Tensor([<span class="hljs-number">0.5</span>]))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self</span>):<br>        edge_index, _ = dropout_adj(data.edge_index, p=<span class="hljs-number">0.5</span>,<br>                                    force_undirected=<span class="hljs-literal">True</span>,<br>                                    num_nodes=data.x.size()[<span class="hljs-number">0</span>],<br>                                    training=self.training)<br><br>        x0 = F.dropout(data.x, training=self.training)<br>        x = torch.relu(self.conv1(x0, edge_index))<br>        x = F.dropout(x, training=self.training)<br>        x1 = torch.relu(self.conv2(x, edge_index))<br><br>        x = x1 + torch.relu(self.lin1(x0))<span class="hljs-comment">##节点预测</span><br>        z = x1 + torch.relu(self.lin2(x0))<span class="hljs-comment">##边预测</span><br><br>        pos_loss = -torch.log(torch.sigmoid((z[E[<span class="hljs-number">0</span>]] * z[E[<span class="hljs-number">1</span>]]).<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">1</span>)) + <span class="hljs-number">1e-15</span>).mean()<br><br>        neg_edge_index = negative_sampling(pb, <span class="hljs-number">13627</span>, <span class="hljs-number">504378</span>)<br><br>        neg_loss = -torch.log(<br>            <span class="hljs-number">1</span> - torch.sigmoid((z[neg_edge_index[<span class="hljs-number">0</span>]] * z[neg_edge_index[<span class="hljs-number">1</span>]]).<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">1</span>)) + <span class="hljs-number">1e-15</span>).mean()<br><br>        r_loss = pos_loss + neg_loss <span class="hljs-comment">##边预测的 loss</span><br><br><br>        x = F.dropout(x, training=self.training)<br>        x = self.conv3(x, edge_index)<br><br>        <span class="hljs-keyword">return</span> x, r_loss, self.c1, self.c2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">mask</span>):<br>    model.train()<br>    optimizer.zero_grad()<br><br>    pred, rl, c1, c2 = model()<br><br>    loss = F.binary_cross_entropy_with_logits(pred[mask], Y[mask]) / (c1 * c1) + rl / (c2 * c2) + <span class="hljs-number">2</span> * torch.log(c2 * c1)<span class="hljs-comment">##上面的 L_total c1是 α，c2 是 β</span><br>    loss.backward()<br>    optimizer.step()<br><br><br><span class="hljs-meta">@torch.no_grad()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">mask</span>):<br>    model.<span class="hljs-built_in">eval</span>()<br>    x, _, _, _ = model()<br><br>    pred = torch.sigmoid(x[mask]).cpu().detach().numpy()<br>    Yn = Y[mask].cpu().numpy()<br>    precision, recall, _thresholds = metrics.precision_recall_curve(Yn, pred)<br>    area = metrics.auc(recall, precision)<br><br>    <span class="hljs-keyword">return</span> metrics.roc_auc_score(Yn, pred), area<br><br><span class="hljs-comment">##训练</span><br>time_start = time.time()<br><span class="hljs-comment">#ten five-fold cross-validations</span><br>AUC = np.zeros(shape=(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>))<br>AUPR = np.zeros(shape=(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">for</span> cv_run <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        _, _, tr_mask, te_mask = k_sets[i][cv_run]<br>        model = Net().to(device)<br>        <span class="hljs-comment"># optimizer = torch.optim.Adam(model.parameters(), lr=0.001,weight_decay=0.005)</span><br>        optimizer = torch.optim.Adam(model.parameters(), lr=<span class="hljs-number">0.001</span>)<br><br>        <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, EPOCH):<br>            train(tr_mask)<br><br>        AUC[i][cv_run], AUPR[i][cv_run] = test(te_mask)<br><br><br>    <span class="hljs-built_in">print</span>(time.time() - time_start)<br><br><br><span class="hljs-built_in">print</span>(AUC.mean())<br><span class="hljs-built_in">print</span>(AUC.var())<br><span class="hljs-built_in">print</span>(AUPR.mean())<br><span class="hljs-built_in">print</span>(AUPR.var())<br><br><br>model= Net().to(device)<br><span class="hljs-comment">#optimizer = torch.optim.Adam(model.parameters(), lr=0.001,weight_decay=0.0005)</span><br>optimizer = torch.optim.Adam(model.parameters(), lr=<span class="hljs-number">0.001</span>)<br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,EPOCH):<br>    <span class="hljs-built_in">print</span>(epoch )<br>    train(mask_all)<br><br><br>x,_,_,_= model()<br>pred = torch.sigmoid(x[~mask_all]).cpu().detach().numpy()<br>torch.save(pred, <span class="hljs-string">&#x27;pred.pkl&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Pytorch geometric 构建图神经网络</title>
    <link href="/2022/04/21/pytorch_geometric/"/>
    <url>/2022/04/21/pytorch_geometric/</url>
    
    <content type="html"><![CDATA[<p>Pytorch geometric 学习及实践</p><span id="more"></span><h2 id="安装-Pytorch-geometric"><a href="#安装-Pytorch-geometric" class="headerlink" title="安装 Pytorch geometric"></a>安装 Pytorch geometric</h2><p>需要先安装 <code>pytorch</code> ，检查安装的版本：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> os<br><span class="hljs-title">print</span>(<span class="hljs-string">&quot;PyTorch has version &#123;&#125;&quot;</span>.format(torch.__version__))<br><span class="hljs-meta">#PyTorch has version 1.10.1+cu102</span><br></code></pre></td></tr></table></figure><p>根据 Pytorch 和 cuda 的版本选择相应的 <code>torch-scatter</code> 和 <code>torch-sparse</code> 包 （网络原因安装不了，因此手动下载 whl 文件安装）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">!pip install torch_scatter-<span class="hljs-number">2.0</span><span class="hljs-number">.9</span>-cp36-cp36m-linux_x86_64.whl <span class="hljs-comment">#-f https://data.pyg.org/whl/torch-1.10.1+cu102.html</span><br>!pip install torch_sparse-<span class="hljs-number">0.6</span><span class="hljs-number">.12</span>-cp36-cp36m-linux_x86_64.whl <span class="hljs-comment">#-f https://data.pyg.org/whl/torch-1.10.1+cu102.html</span><br>!pip install torch-geometric<br></code></pre></td></tr></table></figure><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h3 id="图的数据操作"><a href="#图的数据操作" class="headerlink" title="图的数据操作"></a>图的数据操作</h3><p>在 <code>PyG</code> 中一个图就是 <code>torch_geometric.data.Data</code> 对象的一个实例，该对象默认有下面的一些属性：</p><ul><li><code>data.x</code> : 节点的特征矩阵，形状是 [节点的数量，节点特征的数量]</li><li><code>data.edge_index</code> : 以 COO 格式存储的图的连接性，形状是 [2，边的数量]，数据类型是 <code>torch.long</code> ，两个维度上相应的元素构成边连接的两个节点</li></ul><p>下面以一个 3 个节点，4条边构成的无权重的无向图为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch_geometric.data <span class="hljs-keyword">import</span> Data<br><br>edge_index = torch.tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>                           [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]], dtype=torch.long)<br>x = torch.tensor([[-<span class="hljs-number">1</span>], [<span class="hljs-number">0</span>], [<span class="hljs-number">1</span>]], dtype=torch.<span class="hljs-built_in">float</span>)<br><br>data = Data(x=x, edge_index=edge_index)<br>data<br><span class="hljs-comment">#Data(x=[3, 1], edge_index=[2, 4])</span><br></code></pre></td></tr></table></figure><p>这个 <code>edge_index</code> 表示 0 和1有边相连，1和2有边相连，<code>x</code> 表示每个节点的特征，这里每个节点的特征只有一个元素，可以用下图来表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/graph-20220422211728-1te7ub8.svg"></p><p>注意除了使用这种在不同维度相应位置表示边的两个节点，也可以使用一个节点对构成的列表表示一个边，此时需要将上面的格式进行转置后再 <code>contiguous</code> 操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">data = Data(x=x, edge_index=edge_index.t().contiguous())<br>data <br><span class="hljs-comment">#Data(x=[3, 1], edge_index=[4, 2])</span><br><br>edge_index.t().contiguous()<br><span class="hljs-comment">#tensor([[0, 1],</span><br><span class="hljs-comment">#        [1, 0],</span><br><span class="hljs-comment">#        [1, 2],</span><br><span class="hljs-comment">#        [2, 1]])</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>为什么要.contiguous()? 因为转置后的数据在内存中是不连续的，后续如果使用 view改变shape就会报错</p>          </div><p><code>Data</code> 对象还提供了一些有用的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(data.keys)<span class="hljs-comment">## Data 和 python 中字典的行为类似，因此有键和值</span><br><span class="hljs-comment">#[&#x27;x&#x27;, &#x27;edge_index&#x27;]</span><br><br><span class="hljs-built_in">print</span>(data[<span class="hljs-string">&#x27;x&#x27;</span>])<span class="hljs-comment">##相当于打印字典的值</span><br><span class="hljs-comment">#tensor([[-1.],</span><br><span class="hljs-comment">#        [ 0.],</span><br><span class="hljs-comment">#        [ 1.]])</span><br><br><span class="hljs-keyword">for</span> key, item <span class="hljs-keyword">in</span> data:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span> found in data&#x27;</span>)<span class="hljs-comment">##也可以像字典一样遍历</span><br><span class="hljs-comment">#x found in data</span><br><span class="hljs-comment">#edge_index found in data</span><br><br><span class="hljs-string">&#x27;edge_attr&#x27;</span> <span class="hljs-keyword">in</span> data<br><span class="hljs-comment">#False</span><br><br><span class="hljs-comment">##一些图属性的函数</span><br>data.num_nodes<br><span class="hljs-comment">#3</span><br><br>data.num_edges<br><span class="hljs-comment">#4</span><br><br>data.num_node_features<br><span class="hljs-comment">#1</span><br><br>data.has_isolated_nodes()<br><span class="hljs-comment">#False</span><br><br>data.has_self_loops()<br><span class="hljs-comment">#False</span><br><br>data.is_directed()<br><span class="hljs-comment">#False</span><br></code></pre></td></tr></table></figure><h3 id="常用数据集"><a href="#常用数据集" class="headerlink" title="常用数据集"></a>常用数据集</h3><p>PyG 包含一些常用的图数据集，初始化一个数据集会自动下载数据并处理成上面所说的 <code>Data</code> 格式，比如下载 <code>ENZYMES</code> 数据集（包含 6个类的600 个图）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch_geometric.datasets <span class="hljs-keyword">import</span> TUDataset<br>dataset = TUDataset(root=<span class="hljs-string">&#x27;/tmp/ENZYMES&#x27;</span>, name=<span class="hljs-string">&#x27;ENZYMES&#x27;</span>)<br></code></pre></td></tr></table></figure><p>可能由于这个数据在国外，由于网络的原因下不下来，因此我手动下载了这个数据（数据在<a href="https://ls11-www.cs.tu-dortmund.de/people/morris/graphkerneldatasets/">这里</a> 下载）然后建了个 Gitee 仓库存放这个数据，接着指定 <code>TUDataset</code> 的 URL，就可以成功下载并载入数据了 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch_geometric.datasets <span class="hljs-keyword">import</span> TUDataset<br>TUDataset.url = <span class="hljs-string">&#x27;https://gitee.com/wt12318/graphkerneldatasets/raw/master/&#x27;</span><br>dataset = TUDataset(root=<span class="hljs-string">&#x27;./&#x27;</span>, name=<span class="hljs-string">&#x27;ENZYMES&#x27;</span>)<br><br><span class="hljs-comment">#Downloading https://gitee.com/wt12318/graphkerneldatasets/raw/master//ENZYMES.zip</span><br><span class="hljs-comment">#Extracting ./ENZYMES/ENZYMES.zip</span><br><span class="hljs-comment">#Processing...</span><br><span class="hljs-comment">#Done!</span><br></code></pre></td></tr></table></figure><p>可以查看这个数据集的一些属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(dataset)<span class="hljs-comment">##数据集大小</span><br><span class="hljs-comment">#600</span><br>dataset.num_classes<span class="hljs-comment">##数据集类别</span><br><span class="hljs-comment">#6</span><br>dataset.num_node_features<span class="hljs-comment">##节点特征维度</span><br><span class="hljs-comment">#3</span><br></code></pre></td></tr></table></figure><p>可以直接用索引获取数据集中单个的图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">data = dataset[<span class="hljs-number">0</span>]<br>data<br><span class="hljs-comment">#Data(edge_index=[2, 168], x=[37, 3], y=[1])## 1 表示这个图的类别</span><br><br><span class="hljs-comment">##这个 data 就是 Data 对象了</span><br>data.is_undirected()<br><span class="hljs-comment">#True</span><br>data.num_edges<br><span class="hljs-comment">#168</span><br>data.num_nodes<br><span class="hljs-comment">#37</span><br></code></pre></td></tr></table></figure><p>也可以使用切片来获取数据集中的多个图，这样我们就可以方便的划分训练集和测试集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">train_dataset = dataset[:<span class="hljs-number">540</span>]<br>test_dataset = dataset[<span class="hljs-number">540</span>:]<br>train_dataset <br><span class="hljs-comment">#ENZYMES(540)</span><br>test_dataset <br><span class="hljs-comment">#ENZYMES(60)</span><br><br><span class="hljs-comment">##还可以进行随机打乱</span><br>dataset = dataset.shuffle()<br><span class="hljs-comment">##和下面操作一样</span><br>perm = torch.randperm(<span class="hljs-built_in">len</span>(dataset))<br>dataset = dataset[perm]<br></code></pre></td></tr></table></figure><p>这个数据集是用来对图进行分类任务的，因为每个图有一个标签，下面再看一个节点任务的数据集 <code>Cora</code> (半监督节点分类问题，数据在<a href="https://github.com/kimiyoung/planetoid">这里</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch_geometric.datasets <span class="hljs-keyword">import</span> Planetoid<br>Planetoid.url = <span class="hljs-string">&quot;https://gitee.com/wt12318/graphkerneldatasets/raw/master/Planetoid/data/&quot;</span><br>dataset = Planetoid(root=<span class="hljs-string">&#x27;./&#x27;</span>, name=<span class="hljs-string">&#x27;Cora&#x27;</span>)<br><br>Downloading https://gitee.com/wt12318/graphkerneldatasets/raw/master/Planetoid/data//ind.cora.x<br>Downloading https://gitee.com/wt12318/graphkerneldatasets/raw/master/Planetoid/data//ind.cora.tx<br>Downloading https://gitee.com/wt12318/graphkerneldatasets/raw/master/Planetoid/data//ind.cora.allx<br>Downloading https://gitee.com/wt12318/graphkerneldatasets/raw/master/Planetoid/data//ind.cora.y<br>Downloading https://gitee.com/wt12318/graphkerneldatasets/raw/master/Planetoid/data//ind.cora.ty<br>Downloading https://gitee.com/wt12318/graphkerneldatasets/raw/master/Planetoid/data//ind.cora.ally<br>Downloading https://gitee.com/wt12318/graphkerneldatasets/raw/master/Planetoid/data//ind.cora.graph<br>Downloading https://gitee.com/wt12318/graphkerneldatasets/raw/master/Planetoid/data//ind.cora.test.index<br>Processing...<br>Done!<br></code></pre></td></tr></table></figure><p>查看数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(dataset)<br><span class="hljs-comment">#1</span><br>dataset.num_classes<br><span class="hljs-comment">#7</span><br>dataset.num_node_features<br><span class="hljs-comment">#1433</span><br><br><span class="hljs-comment">##可以看到这个数据集只有一个图</span><br>data = dataset[<span class="hljs-number">0</span>]<br>data<br><span class="hljs-comment">#Data(x=[2708, 1433], edge_index=[2, 10556], y=[2708], train_mask=[2708], val_mask=[2708], test_mask=[2708])</span><br><br>data.is_undirected()<br><span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>可以看到这个图是一个无向图，并且不像上面那个图，这个图对每个 x 都有一个 y，也就是节点层面的分类问题，这里多了  3 个 key：</p><ul><li><code>train_mask</code> : 用来训练的节点</li><li><code>val_mask</code> ：用来验证的节点（进行 early stopping）</li><li><code>test_mask</code> ：用来测试的节点</li></ul><p>这些都是布尔值的列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">data.train_mask<br><span class="hljs-comment">##tensor([ True,  True,  True,  ..., False, False, False])</span><br><br><span class="hljs-comment">##看看有多少个</span><br>data.train_mask.<span class="hljs-built_in">sum</span>().item()<br><span class="hljs-comment">#140</span><br>data.val_mask.<span class="hljs-built_in">sum</span>().item()<br><span class="hljs-comment">#500</span><br>data.test_mask.<span class="hljs-built_in">sum</span>().item()<br><span class="hljs-comment">#1000</span><br></code></pre></td></tr></table></figure><h3 id="小批量"><a href="#小批量" class="headerlink" title="小批量"></a>小批量</h3><p>神经网络训练时一般是以批量作为单位，PyG 通过  <code>torch_geometric.loader.DataLoader</code> 将 <code>edge_index</code> ，特征和目标值连接在一起形成特定的批量大小：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch_geometric.loader <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch_geometric.datasets <span class="hljs-keyword">import</span> TUDataset<br>TUDataset.url = <span class="hljs-string">&#x27;https://gitee.com/wt12318/graphkerneldatasets/raw/master/&#x27;</span><br>dataset = TUDataset(root=<span class="hljs-string">&#x27;./&#x27;</span>, name=<span class="hljs-string">&#x27;ENZYMES&#x27;</span>,use_node_attr=<span class="hljs-literal">True</span>)<br>loader = DataLoader(dataset, batch_size=<span class="hljs-number">32</span>, shuffle=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> loader:<br>    <span class="hljs-built_in">print</span>(batch)<br><br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3590</span>], x=[<span class="hljs-number">904</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">904</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">4218</span>], x=[<span class="hljs-number">1081</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1081</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3810</span>], x=[<span class="hljs-number">962</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">962</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">4276</span>], x=[<span class="hljs-number">1221</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1221</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3714</span>], x=[<span class="hljs-number">952</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">952</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3670</span>], x=[<span class="hljs-number">933</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">933</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">4142</span>], x=[<span class="hljs-number">1133</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1133</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">4180</span>], x=[<span class="hljs-number">1058</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1058</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3902</span>], x=[<span class="hljs-number">1033</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1033</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">4004</span>], x=[<span class="hljs-number">1084</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1084</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">4136</span>], x=[<span class="hljs-number">1115</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1115</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3710</span>], x=[<span class="hljs-number">938</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">938</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3764</span>], x=[<span class="hljs-number">1036</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1036</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3842</span>], x=[<span class="hljs-number">982</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">982</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">4088</span>], x=[<span class="hljs-number">1052</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1052</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">4342</span>], x=[<span class="hljs-number">1246</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1246</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">4196</span>], x=[<span class="hljs-number">1080</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1080</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3974</span>], x=[<span class="hljs-number">1014</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">32</span>], batch=[<span class="hljs-number">1014</span>], ptr=[<span class="hljs-number">33</span>])<br>DataBatch(edge_index=[<span class="hljs-number">2</span>, <span class="hljs-number">3006</span>], x=[<span class="hljs-number">756</span>, <span class="hljs-number">21</span>], y=[<span class="hljs-number">24</span>], batch=[<span class="hljs-number">756</span>], ptr=[<span class="hljs-number">25</span>])<br></code></pre></td></tr></table></figure><p><code>torch_geometric.data.Batch</code> 对象继承自 <code>Data</code> 对象，并且多了一个 <code>batch</code>  的属性，<code>batch</code> 是一个向量，和该批量中节点的大小是一致的，每一个元素表示相应的节点属于该批量中哪个图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python">batch[<span class="hljs-string">&quot;batch&quot;</span>]<span class="hljs-comment">##最后一个批量大小为24，也就是有24个图</span><br><br>tensor([ <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,<br>         <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,<br>         <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,<br>         <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,<br>         <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,<br>         <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,<br>         <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,<br>         <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,<br>         <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,<br>         <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,<br>         <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,<br>         <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,<br>         <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,<br>         <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,<br>         <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,<br>         <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,<br>         <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>,<br>        <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>,<br>        <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>,<br>        <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>,<br>        <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>,<br>        <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>,<br>        <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>,<br>        <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>,<br>        <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>,<br>        <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>,<br>        <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>,<br>        <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>,<br>        <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>,<br>        <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>,<br>        <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>,<br>        <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>,<br>        <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>,<br>        <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>,<br>        <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>,<br>        <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>,<br>        <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>,<br>        <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>,<br>        <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>,<br>        <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>,<br>        <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>,<br>        <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>])<br></code></pre></td></tr></table></figure><p>比如我们可以根据这个特征来计算每个图中每个特征的均值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch_scatter <span class="hljs-keyword">import</span> scatter_mean<br>x = scatter_mean(batch.x, batch.batch, dim=<span class="hljs-number">0</span>)<br>x.size()<br><span class="hljs-comment">#torch.Size([24, 21])</span><br></code></pre></td></tr></table></figure><p><code>scatter_mean</code> 就是对 batch 中相同的值（也就是每个图）计算 x 在维度 0 上的均值（也就是每个特征对所有节点的均值）。</p><h3 id="GNN"><a href="#GNN" class="headerlink" title="GNN"></a>GNN</h3><p>以 Cora 引用数据集作为例子，实现一个2层的图卷积神经网络（GCN）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch_geometric.datasets <span class="hljs-keyword">import</span> Planetoid<br><br><span class="hljs-comment">##载入数据</span><br>Planetoid.url = <span class="hljs-string">&quot;https://gitee.com/wt12318/graphkerneldatasets/raw/master/Planetoid/data/&quot;</span><br>dataset = Planetoid(root=<span class="hljs-string">&#x27;./&#x27;</span>, name=<span class="hljs-string">&#x27;Cora&#x27;</span>)<br><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> torch_geometric.nn <span class="hljs-keyword">import</span> GCNConv<br><br><span class="hljs-comment">##构建 GCN</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GCN</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.conv1 = GCNConv(dataset.num_node_features, <span class="hljs-number">16</span>)<br>        self.conv2 = GCNConv(<span class="hljs-number">16</span>, dataset.num_classes)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, data</span>):<br>        x, edge_index = data.x, data.edge_index<br><br>        x = self.conv1(x, edge_index)<br>        x = F.relu(x)<br>        x = F.dropout(x, training=self.training)<br>        x = self.conv2(x, edge_index)<br><br>        <span class="hljs-keyword">return</span> F.log_softmax(x, dim=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>注意 GCN 和 CNN 不同，层数和表达能力并不一定相关，GCN 的层数只是指收集离节点多远的邻居节点的信息。并且图神经网络最终得到的是节点的 embedding，因此在构建GCN 的时候变化的 embedding 的维度（<code>num_node_features</code> , 16, <code>num_classes</code>），输入的是节点以及图的结构（<code>edge_index</code>）。接下来进行训练 200 个 epochs：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">device = torch.device(<span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span>)<br>model = GCN().to(device)<br>data = dataset[<span class="hljs-number">0</span>].to(device)<br>optimizer = torch.optim.Adam(model.parameters(), lr=<span class="hljs-number">0.01</span>, weight_decay=<span class="hljs-number">5e-4</span>)<br><br>model.train()<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200</span>):<br>    optimizer.zero_grad()<br>    out = model(data)<br>    loss = F.nll_loss(out[data.train_mask], data.y[data.train_mask])<br>    loss.backward()<br>    optimizer.step()<br></code></pre></td></tr></table></figure><p>在测试节点上进行评估模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">model.<span class="hljs-built_in">eval</span>()<br>pred = model(data).argmax(dim=<span class="hljs-number">1</span>)<br>correct = (pred[data.test_mask] == data.y[data.test_mask]).<span class="hljs-built_in">sum</span>()<br>acc = <span class="hljs-built_in">int</span>(correct) / <span class="hljs-built_in">int</span>(data.test_mask.<span class="hljs-built_in">sum</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Accuracy: <span class="hljs-subst">&#123;acc:<span class="hljs-number">.4</span>f&#125;</span>&#x27;</span>)<br><span class="hljs-comment">##Accuracy: 0.7970</span><br></code></pre></td></tr></table></figure><h2 id="创建信息传播网络"><a href="#创建信息传播网络" class="headerlink" title="创建信息传播网络"></a>创建信息传播网络</h2><p>网络中的信息传播可以类比于图像上的卷积操作，都是收集邻居节点（像素）的信息：<br>$$<br>x_i^{(k)} &#x3D; \gamma^{(k)} ( x_i^{(k-1)}, \square_{j \in N(i)} , \phi^{(k)}(x_i^{(k-1)}, x_j^{(k-1)},e_{j,i}) ),<br>$$<br>$\square$ 表示可微的置换不变函数（也就是打乱元素的次序不改变函数的输出，比如 sum，mean，max 等），$\gamma$ 和 $\phi$ 都表示可微的函数（比如用多层感知机拟合的函数）。</p><h3 id="MessagePassing-基础类"><a href="#MessagePassing-基础类" class="headerlink" title="MessagePassing 基础类"></a>MessagePassing 基础类</h3><p>PyG 提供了 <code>MessagePassing</code> 基础类，通过自动的进行信息传播从而构建神经网络；用户只需要定义函数 $\phi$，也就是 <code>message()</code>，$\gamma$，也就是 <code>update()</code>，和聚合的方法，也就是上面的 $\square$，可以是：<code>aggr=&quot;add&quot;</code>, <code>aggr=&quot;mean&quot;</code> 或者 <code>aggr=&quot;max&quot;</code>。这个过程在下面一些方法的帮助下完成：</p><ul><li><code>MessagePassing(aggr=&quot;add&quot;, flow=&quot;source_to_target&quot;, node_dim=-2)</code>：定义了聚合的方式（add，mean，max）和信息流动的方向（source_to_target 或者 target_to_source，中心节点也就是需要 embedding 的节点是 target，邻居节点为 source）以及 node_dim 为信息聚合的维度</li><li><code>MessagePassing.propagate(edge_index, size=None, **kwargs)</code>：信息传播，在内部依次调用 <code>message</code>，<code>aggregate</code> 和 <code>update</code></li><li><code>MessagePassing.message(...)</code>：相当于 $\phi$ 函数，注意传递给 <code>propagate</code> 的张量会先先添加 i 和 j 的下标转化成相应的节点然后再传递给 <code>message</code> （i 表示中心节点，j 表示邻居节点）</li><li><code>MessagePassing.update(aggr_out, ...)</code>：相当于 $\gamma$ ，接受 <code>aggregation</code> 的输出和其他传给 <code>propagate</code> 的参数</li></ul><p>下面看两个例子：</p><h4 id="GCN-layer"><a href="#GCN-layer" class="headerlink" title="GCN layer"></a>GCN layer</h4><p>GCN 层可以定义为：<br>$$<br>x_i^{(k)} &#x3D; \sum_{j \in N(i) \cup { i }} \frac{1}{\sqrt{\deg(i)} \cdot \sqrt{\deg(j)}} \cdot ( \Theta^{\top} \cdot x_j^{(k-1)} ),<br>$$<br>邻居节点首先由 $\Theta$ 转化，然后根据度进行标准化，接着使用求和作为汇聚函数，可以分成一下几个步骤：</p><ul><li>对邻接矩阵添加自身的边（source 和 target 都是自己，因为上面的式子中 j 包括了 $N(i)\cup{i}$）</li><li>对节点的特征矩阵进行线性转化</li><li>计算标准化系数</li><li>依据标准化系数来标准化节点特征</li><li>求和汇聚</li></ul><p>1-3 步是信息传播之前就可以计算好的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch_geometric.nn <span class="hljs-keyword">import</span> MessagePassing<br><span class="hljs-keyword">from</span> torch_geometric.utils <span class="hljs-keyword">import</span> add_self_loops, degree<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GCNConv</span>(<span class="hljs-title class_ inherited__">MessagePassing</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, in_channels, out_channels</span>):<br>        <span class="hljs-built_in">super</span>().__init__(aggr=<span class="hljs-string">&#x27;add&#x27;</span>)  <span class="hljs-comment"># &quot;Add&quot; aggregation (Step 5).</span><br>        self.lin = torch.nn.Linear(in_channels, out_channels)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x, edge_index</span>):<br>        <span class="hljs-comment"># x has shape [N, in_channels]</span><br>        <span class="hljs-comment"># edge_index has shape [2, E]</span><br><br>        <span class="hljs-comment"># Step 1: Add self-loops to the adjacency matrix.</span><br>        edge_index, _ = add_self_loops(edge_index, num_nodes=x.size(<span class="hljs-number">0</span>))<br><br>        <span class="hljs-comment"># Step 2: Linearly transform node feature matrix.</span><br>        x = self.lin(x)<br><br>        <span class="hljs-comment"># Step 3: Compute normalization.</span><br>        row, col = edge_index<span class="hljs-comment">##将edge_index 拆分成 source (col) 和 target (row)</span><br>        deg = degree(col, x.size(<span class="hljs-number">0</span>), dtype=x.dtype)<span class="hljs-comment">##x.size(0)就是节点的数量</span><br>        deg_inv_sqrt = deg.<span class="hljs-built_in">pow</span>(-<span class="hljs-number">0.5</span>)<br>        deg_inv_sqrt[deg_inv_sqrt == <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)] = <span class="hljs-number">0</span><br>        norm = deg_inv_sqrt[row] * deg_inv_sqrt[col]<br><br>        <span class="hljs-comment"># Step 4-5: Start propagating messages.</span><br>        <span class="hljs-comment">#print(x.shape)</span><br>        <span class="hljs-comment">#print(x)</span><br>        <span class="hljs-keyword">return</span> self.propagate(edge_index, x=x, norm=norm)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">message</span>(<span class="hljs-params">self, x_j, norm</span>):<br>        <span class="hljs-comment"># x_j has shape [E, out_channels]</span><br><br>        <span class="hljs-comment"># Step 4: Normalize node features.</span><br>        <span class="hljs-comment">#print(x_j.shape)</span><br>        <span class="hljs-comment">#print(x_j)</span><br>        <span class="hljs-keyword">return</span> norm.view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) * x_j<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">edge_index = dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;edge_index&quot;</span>]<br>edge_index<br>tensor([[   <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,  ..., <span class="hljs-number">2707</span>, <span class="hljs-number">2707</span>, <span class="hljs-number">2707</span>],<br>        [ <span class="hljs-number">633</span>, <span class="hljs-number">1862</span>, <span class="hljs-number">2582</span>,  ...,  <span class="hljs-number">598</span>, <span class="hljs-number">1473</span>, <span class="hljs-number">2706</span>]])<br>        <br>row, col = edge_index<br>row,col<br>(tensor([   <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,  ..., <span class="hljs-number">2707</span>, <span class="hljs-number">2707</span>, <span class="hljs-number">2707</span>]),<br> tensor([ <span class="hljs-number">633</span>, <span class="hljs-number">1862</span>, <span class="hljs-number">2582</span>,  ...,  <span class="hljs-number">598</span>, <span class="hljs-number">1473</span>, <span class="hljs-number">2706</span>]))<br></code></pre></td></tr></table></figure><p>需要注意的是我们传入 <code>propagate</code> 的是 x ，也就是所有节点的 embedding，但是在其内部进行了一个 <code>lifted</code> 操作转化成了 <code>lifted</code> 张量 <code>x_j</code> ，这个张量包括每个节点的邻居节点的 embedding，便于进行信息传递，因此我们运行上面加了 <code>print</code> 的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">conv = GCNConv(<span class="hljs-number">1433</span>, <span class="hljs-number">32</span>)<span class="hljs-comment">##实例化</span><br>x = conv(dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;x&quot;</span>], dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;edge_index&quot;</span>])<br>torch.Size([<span class="hljs-number">2708</span>, <span class="hljs-number">32</span>])<span class="hljs-comment">##图中有 2708 个节点</span><br>tensor([[ <span class="hljs-number">0.0352</span>, -<span class="hljs-number">0.0465</span>,  <span class="hljs-number">0.0304</span>,  ..., -<span class="hljs-number">0.0498</span>,  <span class="hljs-number">0.0052</span>, -<span class="hljs-number">0.0351</span>],<br>        [ <span class="hljs-number">0.0118</span>, -<span class="hljs-number">0.0057</span>, -<span class="hljs-number">0.0229</span>,  ..., -<span class="hljs-number">0.0921</span>,  <span class="hljs-number">0.0561</span>, -<span class="hljs-number">0.0387</span>],<br>        [-<span class="hljs-number">0.1651</span>, -<span class="hljs-number">0.0569</span>, -<span class="hljs-number">0.0675</span>,  ...,  <span class="hljs-number">0.0006</span>,  <span class="hljs-number">0.0174</span>, -<span class="hljs-number">0.1239</span>],<br>        ...,<br>        [ <span class="hljs-number">0.0200</span>,  <span class="hljs-number">0.0012</span>, -<span class="hljs-number">0.0240</span>,  ..., -<span class="hljs-number">0.0073</span>,  <span class="hljs-number">0.0137</span>, -<span class="hljs-number">0.0065</span>],<br>        [ <span class="hljs-number">0.0939</span>,  <span class="hljs-number">0.0371</span>, -<span class="hljs-number">0.0670</span>,  ...,  <span class="hljs-number">0.0017</span>, -<span class="hljs-number">0.0460</span>,  <span class="hljs-number">0.0491</span>],<br>        [-<span class="hljs-number">0.0430</span>, -<span class="hljs-number">0.0073</span>,  <span class="hljs-number">0.0501</span>,  ..., -<span class="hljs-number">0.0168</span>,  <span class="hljs-number">0.0014</span>, -<span class="hljs-number">0.0537</span>]],<br>       grad_fn=&lt;AddmmBackward0&gt;)<br>torch.Size([<span class="hljs-number">13264</span>, <span class="hljs-number">32</span>])<br>tensor([[ <span class="hljs-number">0.0352</span>, -<span class="hljs-number">0.0465</span>,  <span class="hljs-number">0.0304</span>,  ..., -<span class="hljs-number">0.0498</span>,  <span class="hljs-number">0.0052</span>, -<span class="hljs-number">0.0351</span>],<br>        [ <span class="hljs-number">0.0352</span>, -<span class="hljs-number">0.0465</span>,  <span class="hljs-number">0.0304</span>,  ..., -<span class="hljs-number">0.0498</span>,  <span class="hljs-number">0.0052</span>, -<span class="hljs-number">0.0351</span>],<br>        [ <span class="hljs-number">0.0352</span>, -<span class="hljs-number">0.0465</span>,  <span class="hljs-number">0.0304</span>,  ..., -<span class="hljs-number">0.0498</span>,  <span class="hljs-number">0.0052</span>, -<span class="hljs-number">0.0351</span>],<br>        ...,<br>        [ <span class="hljs-number">0.0200</span>,  <span class="hljs-number">0.0012</span>, -<span class="hljs-number">0.0240</span>,  ..., -<span class="hljs-number">0.0073</span>,  <span class="hljs-number">0.0137</span>, -<span class="hljs-number">0.0065</span>],<br>        [ <span class="hljs-number">0.0939</span>,  <span class="hljs-number">0.0371</span>, -<span class="hljs-number">0.0670</span>,  ...,  <span class="hljs-number">0.0017</span>, -<span class="hljs-number">0.0460</span>,  <span class="hljs-number">0.0491</span>],<br>        [-<span class="hljs-number">0.0430</span>, -<span class="hljs-number">0.0073</span>,  <span class="hljs-number">0.0501</span>,  ..., -<span class="hljs-number">0.0168</span>,  <span class="hljs-number">0.0014</span>, -<span class="hljs-number">0.0537</span>]],<br>       grad_fn=&lt;IndexSelectBackward0&gt;)<br></code></pre></td></tr></table></figure><h4 id="Edge-Convolution"><a href="#Edge-Convolution" class="headerlink" title="Edge Convolution"></a>Edge Convolution</h4><p>EdgeConv 的特点就是在每一层中节点的邻居都可能变化（动态图），也就是每一层都根据上一层更新的节点 embedding 利用 KNN 计算节点的邻居（embedding 距离而不是实际图的连接），除了这个动态图结构之外，EdgeConv 的信息传播和汇聚可以表示为：<br>$$<br>x_i^{(k)} &#x3D; \max_{j \in {N}(i)} h_{\Theta} ( x_i^{(k-1)}, x_j^{(k-1)} - x_i^{(k-1)} )<br>$$<br>$h_{\mathbf{\Theta}}$ 表示 MLP，汇聚函数使用 max：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential <span class="hljs-keyword">as</span> Seq, Linear, ReLU<br><span class="hljs-keyword">from</span> torch_geometric.nn <span class="hljs-keyword">import</span> MessagePassing<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EdgeConv</span>(<span class="hljs-title class_ inherited__">MessagePassing</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, in_channels, out_channels</span>):<br>        <span class="hljs-built_in">super</span>().__init__(aggr=<span class="hljs-string">&#x27;max&#x27;</span>) <span class="hljs-comment">#  &quot;Max&quot; aggregation.</span><br>        self.mlp = Seq(Linear(<span class="hljs-number">2</span> * in_channels, out_channels),<br>                       ReLU(),<br>                       Linear(out_channels, out_channels))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x, edge_index</span>):<br>        <span class="hljs-comment"># x has shape [N, in_channels]</span><br>        <span class="hljs-comment"># edge_index has shape [2, E]</span><br><br>        <span class="hljs-keyword">return</span> self.propagate(edge_index, x=x)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">message</span>(<span class="hljs-params">self, x_i, x_j</span>):<br>        <span class="hljs-comment"># x_i has shape [E, in_channels]</span><br>        <span class="hljs-comment"># x_j has shape [E, in_channels]</span><br><br>        tmp = torch.cat([x_i, x_j - x_i], dim=<span class="hljs-number">1</span>)  <span class="hljs-comment"># tmp has shape [E, 2 * in_channels]</span><br>        <span class="hljs-keyword">return</span> self.mlp(tmp)<br></code></pre></td></tr></table></figure><p>上面讲过，EdgeConv 在每层都会利用 KNN 来选择邻居节点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch_geometric.nn <span class="hljs-keyword">import</span> knn_graph<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicEdgeConv</span>(<span class="hljs-title class_ inherited__">EdgeConv</span>):<span class="hljs-comment">##继承上面的类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, in_channels, out_channels, k=<span class="hljs-number">6</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(in_channels, out_channels)<br>        self.k = k<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x, batch=<span class="hljs-literal">None</span></span>):<br>        edge_index = knn_graph(x, self.k, batch, loop=<span class="hljs-literal">False</span>, flow=self.flow)<span class="hljs-comment">##选择邻居节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().forward(x, edge_index)<span class="hljs-comment">##调用EdgeConv 的forward</span><br></code></pre></td></tr></table></figure><h2 id="创建数据集"><a href="#创建数据集" class="headerlink" title="创建数据集"></a>创建数据集</h2><p>PyG 提供了两个类可以用来创建自己的数据集：<code>torch_geometric.data.Dataset</code> 和 <code>torch_geometric.data.InMemoryDataset</code>，<code>InMemoryDataset</code> 继承 <code>Dataset</code> 类，我们可以在数据集能够完全载入内存的情况下使用这个类（比较小）。<code>Dataset</code> 需要传入一个 root 参数，表示数据集的存储位置，<code>root</code> 文件夹需要拆分成两个子文件夹：<code>raw</code> 和 <code>processed</code>，前者存储原始数据或者数据下载的位置，后者存储处理后的数据。除此之外还可以三个数据处理的函数：<code>transform</code> , <code>pre_transform</code> 和 <code>pre_filter</code> ，这些函数默认为 None；<code>transform</code> 函数在获取数据之前对数据进行处理（第一步），因此适合用来进行数据增强的操作，<code>pre_transform</code> 在数据存储之前对数据进行操作，因此适用于只需要进行一次的大型运算，<code>pre_filter</code> 也是在数据存储之前对数据进行筛选。</p><h4 id="InMemoryDataset"><a href="#InMemoryDataset" class="headerlink" title="InMemoryDataset"></a>InMemoryDataset</h4><p>创建 <code>InMemoryDataset</code> 类需要实现下面四个方法：</p><ul><li><code>raw_file_name()</code> ：返回文件名列表，如果这些文件可以在 <code>raw</code> 中找到，就跳过下载步骤</li><li><code>processed_file_names()</code>：返回文件名列表，如果这些文件可以在 <code>processed</code> 中找到，就跳过处理步骤</li><li><code>download()</code>：下载原始数据到 <code>raw</code></li><li><code>process()</code>：处理原始步骤，将其存储到 <code>processed</code> 里面</li></ul><p>关键是 <code>process()</code> 方法，在这里我们需要读取数据并创建 <code>Data</code> 对象的列表（包括节点特征 x，edge index 等），然后存储到 <code>processed</code> 中；因为存储大的 python 列表比较慢，所以在 pyg 中使用 <code>InMemoryDataset.collate</code> 方法将列表整合成一个大的 Data 对象，并额外返回一个 <code>slices</code> 字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch_geometric.data <span class="hljs-keyword">import</span> InMemoryDataset, download_url<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyOwnDataset</span>(<span class="hljs-title class_ inherited__">InMemoryDataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root, transform=<span class="hljs-literal">None</span>, pre_transform=<span class="hljs-literal">None</span>, pre_filter=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(root, transform, pre_transform, pre_filter)<br>        self.data, self.slices = torch.load(self.processed_paths[<span class="hljs-number">0</span>])<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">raw_file_names</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;some_file_1&#x27;</span>, <span class="hljs-string">&#x27;some_file_2&#x27;</span>, ...]<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">processed_file_names</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;data.pt&#x27;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># Download to `self.raw_dir`.</span><br>        download_url(url, self.raw_dir)<br>        ...<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># Read data into huge `Data` list.</span><br>        data_list = [...]<br><br>        <span class="hljs-keyword">if</span> self.pre_filter <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            data_list = [data <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> data_list <span class="hljs-keyword">if</span> self.pre_filter(data)]<br><br>        <span class="hljs-keyword">if</span> self.pre_transform <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            data_list = [self.pre_transform(data) <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> data_list]<br><br>        data, slices = self.collate(data_list)<br>        torch.save((data, slices), self.processed_paths[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h4 id="Larger-Dataset"><a href="#Larger-Dataset" class="headerlink" title="Larger Dataset"></a>Larger Dataset</h4><p>更一般的情形是创建的数据集并不能全部一次性读入内存，这个时候就需要 <code>Dataset</code> 类，创建该类除了上面几个方法外还需要实现以下两个方法：</p><ul><li><code>len()</code>：返回数据集中样本的数量</li><li><code>get()</code>：读取单个图</li></ul><p>下面是一个从分子数据创建一个 Dataset 数据集的<a href="https://github.com/deepfindr/gnn-project/blob/main/dataset.py">例子</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MoleculeDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root, filename, transform=<span class="hljs-literal">None</span>, pre_transform=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        root = Where the dataset should be stored. This folder is split</span><br><span class="hljs-string">        into raw_dir (downloaded dataset) and processed_dir (processed data). </span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.filename = filename<br>        <span class="hljs-built_in">super</span>(MoleculeDataset, self).__init__(root, transform, pre_transform)<br>        <br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">raw_file_names</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot; If this file exists in raw_dir, the download is not triggered.</span><br><span class="hljs-string">            (The download func. is not implemented here)  </span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.filename<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">processed_file_names</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot; If these files are found in processed_dir, processing is skipped&quot;&quot;&quot;</span><br>        self.data = pd.read_csv(self.raw_paths[<span class="hljs-number">0</span>]).reset_index()<br><br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">f&#x27;data_<span class="hljs-subst">&#123;i&#125;</span>.pt&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(self.data.index)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><span class="hljs-comment">##不需要下载</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process</span>(<span class="hljs-params">self</span>):<br>        self.data = pd.read_csv(self.raw_paths[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">for</span> index, mol <span class="hljs-keyword">in</span> tqdm(self.data.iterrows(), total=self.data.shape[<span class="hljs-number">0</span>]):<span class="hljs-comment">#tqdm可以显示运行进程</span><br>            mol_obj = Chem.MolFromSmiles(mol[<span class="hljs-string">&quot;smiles&quot;</span>])<br>            <span class="hljs-comment"># Get node features</span><br>            node_feats = self._get_node_features(mol_obj)<br>            <span class="hljs-comment"># Get edge features</span><br>            edge_feats = self._get_edge_features(mol_obj)<br>            <span class="hljs-comment"># Get adjacency info</span><br>            edge_index = self._get_adjacency_info(mol_obj)<br>            <span class="hljs-comment"># Get labels info</span><br>            label = self._get_labels(mol[<span class="hljs-string">&quot;HIV_active&quot;</span>])<br><br>            <span class="hljs-comment"># Create data object</span><br>            data = Data(x=node_feats, <br>                        edge_index=edge_index,<br>                        edge_attr=edge_feats,<br>                        y=label,<br>                        smiles=mol[<span class="hljs-string">&quot;smiles&quot;</span>]<br>                        ) <br>            torch.save(data, <br>                    os.path.join(self.processed_dir, <br>                                 <span class="hljs-string">f&#x27;data_<span class="hljs-subst">&#123;index&#125;</span>.pt&#x27;</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_node_features</span>(<span class="hljs-params">self, mol</span>):<br>        <span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string">        This will return a matrix / 2d array of the shape</span><br><span class="hljs-string">        [Number of Nodes, Node Feature size]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        all_node_feats = []<br>        <span class="hljs-comment">##每个分子生成一个图，节点的特征</span><br>        <span class="hljs-keyword">for</span> atom <span class="hljs-keyword">in</span> mol.GetAtoms():<br>            node_feats = []<br>            <span class="hljs-comment"># Feature 1: Atomic number        </span><br>            node_feats.append(atom.GetAtomicNum())<br>            <span class="hljs-comment"># Feature 2: Atom degree</span><br>            node_feats.append(atom.GetDegree())<br>            <span class="hljs-comment"># Feature 3: Formal charge</span><br>            node_feats.append(atom.GetFormalCharge())<br>            <span class="hljs-comment"># Feature 4: Hybridization</span><br>            node_feats.append(atom.GetHybridization())<br>            <span class="hljs-comment"># Feature 5: Aromaticity</span><br>            node_feats.append(atom.GetIsAromatic())<br>            <span class="hljs-comment"># Feature 6: Total Num Hs</span><br>            node_feats.append(atom.GetTotalNumHs())<br>            <span class="hljs-comment"># Feature 7: Radical Electrons</span><br>            node_feats.append(atom.GetNumRadicalElectrons())<br>            <span class="hljs-comment"># Feature 8: In Ring</span><br>            node_feats.append(atom.IsInRing())<br>            <span class="hljs-comment"># Feature 9: Chirality</span><br>            node_feats.append(atom.GetChiralTag())<br><br>            <span class="hljs-comment"># Append node features to matrix</span><br>            <span class="hljs-comment">##list of li</span><br>            all_node_feats.append(node_feats)<br><br>        all_node_feats = np.asarray(all_node_feats)<br>        <span class="hljs-keyword">return</span> torch.tensor(all_node_feats, dtype=torch.<span class="hljs-built_in">float</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_edge_features</span>(<span class="hljs-params">self, mol</span>):<br>        <span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string">        This will return a matrix / 2d array of the shape</span><br><span class="hljs-string">        [Number of edges, Edge Feature size]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        all_edge_feats = []<br><br>        <span class="hljs-keyword">for</span> bond <span class="hljs-keyword">in</span> mol.GetBonds():<br>            edge_feats = []<br>            <span class="hljs-comment"># Feature 1: Bond type (as double)</span><br>            edge_feats.append(bond.GetBondTypeAsDouble())<br>            <span class="hljs-comment"># Feature 2: Rings</span><br>            edge_feats.append(bond.IsInRing())<br>            <span class="hljs-comment"># Append node features to matrix (twice, per direction)</span><br>            all_edge_feats += [edge_feats, edge_feats]<br><br>        all_edge_feats = np.asarray(all_edge_feats)<br>        <span class="hljs-keyword">return</span> torch.tensor(all_edge_feats, dtype=torch.<span class="hljs-built_in">float</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_adjacency_info</span>(<span class="hljs-params">self, mol</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        We could also use rdmolops.GetAdjacencyMatrix(mol)</span><br><span class="hljs-string">        but we want to be sure that the order of the indices</span><br><span class="hljs-string">        matches the order of the edge features</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        edge_indices = []<br>        <span class="hljs-keyword">for</span> bond <span class="hljs-keyword">in</span> mol.GetBonds():<br>            i = bond.GetBeginAtomIdx()<br>            j = bond.GetEndAtomIdx()<br>            edge_indices += [[i, j], [j, i]]<br><br>        edge_indices = torch.tensor(edge_indices)<br>        edge_indices = edge_indices.t().to(torch.long).view(<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> edge_indices<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_labels</span>(<span class="hljs-params">self, label</span>):<br>        label = np.asarray([label])<br>        <span class="hljs-keyword">return</span> torch.tensor(label, dtype=torch.int64)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">len</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.data.shape[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-string">&quot;&quot;&quot; - Equivalent to __getitem__ in pytorch</span><br><span class="hljs-string">            - Is not needed for PyG&#x27;s InMemoryDataset</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        data = torch.load(os.path.join(self.processed_dir, <br>                                 <span class="hljs-string">f&#x27;data_<span class="hljs-subst">&#123;idx&#125;</span>.pt&#x27;</span>))<br>        <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##目录结构</span><br>!ls -R HIV_data/<br>HIV_data/:<br>raw<br><br>HIV_data/raw:<br>HIV_train.csv<br><br>dataset = MoleculeDataset(root=<span class="hljs-string">&quot;HIV_data&quot;</span>,filename=<span class="hljs-string">&quot;HIV_train.csv&quot;</span>)<br><br>Processing...<br> <span class="hljs-number">84</span>%|████████▎ | <span class="hljs-number">31078</span>/<span class="hljs-number">37128</span> [<span class="hljs-number">00</span>:<span class="hljs-number">38</span>&lt;<span class="hljs-number">00</span>:09, <span class="hljs-number">618.98</span>it/s]RDKit WARNING: [<span class="hljs-number">23</span>:<span class="hljs-number">10</span>:<span class="hljs-number">37</span>] WARNING: <span class="hljs-keyword">not</span> removing hydrogen atom without neighbors<br>RDKit WARNING: [<span class="hljs-number">23</span>:<span class="hljs-number">10</span>:<span class="hljs-number">37</span>] WARNING: <span class="hljs-keyword">not</span> removing hydrogen atom without neighbors<br><span class="hljs-number">100</span>%|██████████| <span class="hljs-number">37128</span>/<span class="hljs-number">37128</span> [<span class="hljs-number">00</span>:<span class="hljs-number">46</span>&lt;<span class="hljs-number">00</span>:<span class="hljs-number">00</span>, <span class="hljs-number">798.75</span>it/s]<br>Done!<br><br><span class="hljs-built_in">print</span>(dataset[<span class="hljs-number">0</span>].edge_index)<br>tensor([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">9</span>,<br>          <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>,<br>         <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">11</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">19</span>, <span class="hljs-number">14</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">2</span>],<br>        [ <span class="hljs-number">1</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">7</span>,<br>         <span class="hljs-number">10</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">17</span>,<br>         <span class="hljs-number">19</span>, <span class="hljs-number">18</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">19</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">9</span>]])<br><br><span class="hljs-built_in">print</span>(dataset[<span class="hljs-number">0</span>].x)<br>tensor([[<span class="hljs-number">6.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">7.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">7.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">7.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">7.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">7.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">8.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>        [<span class="hljs-number">6.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>]])<br><br><span class="hljs-built_in">print</span>(dataset[<span class="hljs-number">0</span>].y)<br>tensor([<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>参考：</p><ul><li><strong>Pytorch geometric</strong> <a href="https://pytorch-geometric.readthedocs.io/en/latest/notes/introduction.html">文档</a></li><li><a href="https://www.youtube.com/watch?v=QLIkOtKS4os&list=PLV8yxwGOxvvoNkzPfCx2i8an--Tkt7O8Z&index=8">GNN Project YouTube</a></li><li><a href="https://colab.research.google.com/drive/1DIQm9rOx2mT1bZETEeVUThxcrP1RKqAn">Google Colab</a></li><li><a href="https://github.com/AntonioLonga/PytorchGeometricTutorial">AntonioLonga&#x2F;PytorchGeometricTutorial: Pytorch Geometric Tutorials (github.com)</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图机器学习实践</title>
    <link href="/2022/04/02/CS224W_colab/"/>
    <url>/2022/04/02/CS224W_colab/</url>
    
    <content type="html"><![CDATA[<p>图机器学习 CS224W Colab 代码</p><span id="more"></span><h2 id="Colab-1"><a href="#Colab-1" class="headerlink" title="Colab 1"></a>Colab 1</h2><p>这个 colab 分为 3 个部分：</p><ul><li>载入网络科学中经典的图：Karate Club Network 并探索这个图的一些图相关统计量；“空手道俱乐部网络” 有两个俱乐部（由之前的一个俱乐部分裂来的，分裂后的俱乐部各有一个领导），边表示成员之间的社会联系，有 34 个节点</li><li>将图结构转化为 PyTorch 的 Tensor</li><li>建立 node embedding 模型</li></ul><h3 id="Graph-Basics"><a href="#Graph-Basics" class="headerlink" title="Graph Basics"></a>Graph Basics</h3><p>To start, we will load a classic graph in network science, the <a href="https://en.wikipedia.org/wiki/Zachary%27s_karate_club">Karate Club Network</a>. We will explore multiple graph statistics for that graph.</p><p>首先导入 NetworkX 包用于网络的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> networkx <span class="hljs-keyword">as</span> nx<br></code></pre></td></tr></table></figure><p>载入 Karate Club Network：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">G = nx.karate_club_graph()<br><span class="hljs-comment"># G is an undirected graph</span><br><span class="hljs-built_in">type</span>(G)<br></code></pre></td></tr></table></figure><pre><code class="hljs">networkx.classes.graph.Graph</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Visualize the graph</span><br>nx.draw(G, with_labels = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/colab1_7_0.png"><br>​    </p><h4 id="Question-1-karate-club-network-的平均自由度是多少？"><a href="#Question-1-karate-club-network-的平均自由度是多少？" class="headerlink" title="Question 1: karate club network 的平均自由度是多少？"></a>Question 1: karate club network 的平均自由度是多少？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">average_degree</span>(<span class="hljs-params">num_edges, num_nodes</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement this function that takes number of edges</span><br>  <span class="hljs-comment"># and number of nodes, and returns the average node degree of </span><br>  <span class="hljs-comment"># the graph. Round the result to nearest integer (for example </span><br>  <span class="hljs-comment"># 3.3 will be rounded to 3 and 3.7 will be rounded to 4)</span><br><br>  avg_degree = <span class="hljs-number">0</span><br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  avg_degree = <span class="hljs-built_in">round</span>((<span class="hljs-number">2</span> * num_edges) / num_nodes)<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> avg_degree<br><br>num_edges = G.number_of_edges()<br>num_nodes = G.number_of_nodes()<br>avg_degree = average_degree(num_edges, num_nodes)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average degree of karate club network is &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(avg_degree))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Average degree of karate club network is 5</code></pre><h4 id="Question-2-karate-club-network-的平均聚类系数是多少？"><a href="#Question-2-karate-club-network-的平均聚类系数是多少？" class="headerlink" title="Question 2: karate club network 的平均聚类系数是多少？"></a>Question 2: karate club network 的平均聚类系数是多少？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">average_clustering_coefficient</span>(<span class="hljs-params">G</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement this function that takes a nx.Graph</span><br>  <span class="hljs-comment"># and returns the average clustering coefficient. Round </span><br>  <span class="hljs-comment"># the result to 2 decimal places (for example 3.333 will</span><br>  <span class="hljs-comment"># be rounded to 3.33 and 3.7571 will be rounded to 3.76)</span><br><br>  avg_cluster_coef = <span class="hljs-number">0</span><br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  <span class="hljs-comment">## Note: </span><br>  <span class="hljs-comment">## 1: Please use the appropriate NetworkX clustering function</span><br>  a = nx.clustering(G)<br>  avg_cluster_coef = <span class="hljs-built_in">sum</span>(a.values())/<span class="hljs-built_in">len</span>(a)<br>  avg_cluster_coef = <span class="hljs-built_in">round</span>(avg_cluster_coef,<span class="hljs-number">2</span>)<br><br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> avg_cluster_coef<br><br>avg_cluster_coef = average_clustering_coefficient(G)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average clustering coefficient of karate club network is &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(avg_cluster_coef))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Average clustering coefficient of karate club network is 0.57</code></pre><h4 id="Question-3-在一个-PageRank-迭代后，节点-0-的-PageRank-值是多少"><a href="#Question-3-在一个-PageRank-迭代后，节点-0-的-PageRank-值是多少" class="headerlink" title="Question 3: 在一个 PageRank 迭代后，节点 0 的 PageRank 值是多少"></a>Question 3: 在一个 PageRank 迭代后，节点 0 的 PageRank 值是多少</h4><p>PageRank equation: $r_j &#x3D; \sum_{i \rightarrow j} \beta \frac{r_i}{d_i} + (1 - \beta) \frac{1}{N}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">one_iter_pagerank</span>(<span class="hljs-params">G, beta, r0, node_id</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement this function that takes a nx.Graph, beta, r0 and node id.</span><br>  <span class="hljs-comment"># The return value r1 is one interation PageRank value for the input node.</span><br>  <span class="hljs-comment"># Please round r1 to 2 decimal places.</span><br><br>  r1 = <span class="hljs-number">0</span><br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  <span class="hljs-comment">## Note: </span><br>  <span class="hljs-comment">## 1: You should not use nx.pagerank</span><br>  <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>  adj_nodes = <span class="hljs-built_in">list</span>(G[node_id])<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> adj_nodes:<br>    a = beta * (r0 / <span class="hljs-built_in">dict</span>(G.degree([i]))[i])<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + a<br>  r1 = <span class="hljs-built_in">sum</span> + (<span class="hljs-number">1</span> - beta) * (<span class="hljs-number">1</span> / G.number_of_nodes()) <br>  r1 = <span class="hljs-built_in">round</span>(r1, <span class="hljs-number">2</span>)<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> r1<br><br>beta = <span class="hljs-number">0.8</span><br>r0 = <span class="hljs-number">1</span> / G.number_of_nodes()<br>node = <span class="hljs-number">0</span><br>r1 = one_iter_pagerank(G, beta, r0, node)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The PageRank value for node 0 after one iteration is &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(r1))<br></code></pre></td></tr></table></figure><pre><code class="hljs">The PageRank value for node 0 after one iteration is 0.13</code></pre><h4 id="Question-4-网络的邻近中心性（closeness-centrality）是多少？"><a href="#Question-4-网络的邻近中心性（closeness-centrality）是多少？" class="headerlink" title="Question 4: 网络的邻近中心性（closeness centrality）是多少？"></a>Question 4: 网络的邻近中心性（closeness centrality）是多少？</h4><p>closeness centrality ： $c(v) &#x3D; \frac{1}{\sum_{u \neq v}\text{shortest path length between } u \text{ and } v}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">closeness_centrality</span>(<span class="hljs-params">G, node=<span class="hljs-number">5</span></span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement the function that calculates closeness centrality </span><br>  <span class="hljs-comment"># for a node in karate club network. G is the input karate club </span><br>  <span class="hljs-comment"># network and node is the node id in the graph. Please round the </span><br>  <span class="hljs-comment"># closeness centrality result to 2 decimal places.</span><br><br>  closeness = <span class="hljs-number">0</span><br><br>  <span class="hljs-comment">## Note:</span><br>  <span class="hljs-comment">## 1: You can use networkx closeness centrality function.</span><br>  <span class="hljs-comment">## 2: Notice that networkx closeness centrality returns the normalized </span><br>  <span class="hljs-comment">## closeness directly, which is different from the raw (unnormalized) </span><br>  <span class="hljs-comment">## one that we learned in the lecture.</span><br>  normalized = nx.closeness_centrality(G,node)<br>  closeness = normalized / (G.number_of_nodes() - <span class="hljs-number">1</span>)<br>  closeness = <span class="hljs-built_in">round</span>(closeness,<span class="hljs-number">2</span>)<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> closeness<br><br>node = <span class="hljs-number">5</span><br>closeness = closeness_centrality(G, node=node)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The node 5 has closeness centrality &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(closeness))<br></code></pre></td></tr></table></figure><pre><code class="hljs">The node 5 has closeness centrality 0.01</code></pre><h3 id="Graph-to-Tensor"><a href="#Graph-to-Tensor" class="headerlink" title="Graph to Tensor"></a>Graph to Tensor</h3><p>将图结构转化为 PyTorch 的 Tensor，便于进行后续的机器学习操作。</p><p>检测 pytorch 是否按照以及版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-built_in">print</span>(torch.__version__)<br></code></pre></td></tr></table></figure><pre><code class="hljs">1.10.0+cu111</code></pre><h4 id="PyTorch-tensor-basics"><a href="#PyTorch-tensor-basics" class="headerlink" title="PyTorch tensor basics"></a>PyTorch tensor basics</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Generate 3 x 4 tensor with all ones</span><br>ones = torch.ones(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(ones)<br><br><span class="hljs-comment"># Generate 3 x 4 tensor with all zeros</span><br>zeros = torch.zeros(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(zeros)<br><br><span class="hljs-comment"># Generate 3 x 4 tensor with random values on the interval [0, 1)</span><br>random_tensor = torch.rand(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(random_tensor)<br><br><span class="hljs-comment"># Get the shape of the tensor</span><br><span class="hljs-built_in">print</span>(ones.shape)<br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([[1., 1., 1., 1.],        [1., 1., 1., 1.],        [1., 1., 1., 1.]])tensor([[0., 0., 0., 0.],        [0., 0., 0., 0.],        [0., 0., 0., 0.]])tensor([[0.2417, 0.9127, 0.7875, 0.6463],        [0.1192, 0.1317, 0.9079, 0.4481],        [0.0022, 0.4382, 0.3800, 0.5075]])torch.Size([3, 4])</code></pre><p>PyTorch tensor 有数据类型，用 <code>dtype</code> 表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Create a 3 x 4 tensor with all 32-bit floating point zeros</span><br>zeros = torch.zeros(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, dtype=torch.float32)<br><span class="hljs-built_in">print</span>(zeros.dtype)<br><br><span class="hljs-comment"># Change the tensor dtype to 64-bit integer</span><br>zeros = zeros.<span class="hljs-built_in">type</span>(torch.long)<br><span class="hljs-built_in">print</span>(zeros.dtype)<br></code></pre></td></tr></table></figure><pre><code class="hljs">torch.float32torch.int64</code></pre><h4 id="Question-5-得到-karate-club-network-的边列表并转化为-torch-LongTensor"><a href="#Question-5-得到-karate-club-network-的边列表并转化为-torch-LongTensor" class="headerlink" title="Question 5: 得到 karate club network 的边列表并转化为  torch.LongTensor."></a>Question 5: 得到 karate club network 的边列表并转化为  <code>torch.LongTensor</code>.</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">graph_to_edge_list</span>(<span class="hljs-params">G</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement the function that returns the edge list of</span><br>  <span class="hljs-comment"># an nx.Graph. The returned edge_list should be a list of tuples</span><br>  <span class="hljs-comment"># where each tuple is a tuple representing an edge connected </span><br>  <span class="hljs-comment"># by two nodes.</span><br>  <span class="hljs-comment">## 无向图 (0,1) 和 (1,0) 应该视为一条边</span><br><br>  edge_list = []<br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  nodes = <span class="hljs-built_in">list</span>(G.nodes())<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nodes:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(G[i]):<br>      <span class="hljs-keyword">if</span> (i,j)[::-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> edge_list:<br>        <span class="hljs-keyword">continue</span> <br>      edge_list.append((i,j))<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> edge_list<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edge_list_to_tensor</span>(<span class="hljs-params">edge_list</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement the function that transforms the edge_list to</span><br>  <span class="hljs-comment"># tensor. The input edge_list is a list of tuples and the resulting</span><br>  <span class="hljs-comment"># tensor should have the shape [2 x len(edge_list)].##为什么要变成 2 * len(edge_list)</span><br><br>  edge_index = torch.tensor([])<br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  edge_index = torch.tensor(edge_list).T<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> edge_index<br><br>pos_edge_list = graph_to_edge_list(G)<br>pos_edge_index = edge_list_to_tensor(pos_edge_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The pos_edge_index tensor has shape &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(pos_edge_index.shape))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The pos_edge_index tensor has sum value &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(torch.<span class="hljs-built_in">sum</span>(pos_edge_index)))<br></code></pre></td></tr></table></figure><pre><code class="hljs">The pos_edge_index tensor has shape torch.Size([2, 78])The pos_edge_index tensor has sum value 2535</code></pre><h4 id="Question-6-实现抽样负例边的函数并回答哪些边（edge-1-to-edge-5）是负例边"><a href="#Question-6-实现抽样负例边的函数并回答哪些边（edge-1-to-edge-5）是负例边" class="headerlink" title="Question 6: 实现抽样负例边的函数并回答哪些边（edge_1 to edge_5）是负例边"></a>Question 6: 实现抽样负例边的函数并回答哪些边（edge_1 to edge_5）是负例边</h4><p>负例边就是在图中并不存在的边，其标签也就是0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> compress<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sample_negative_edges</span>(<span class="hljs-params">G, num_neg_samples</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement the function that returns a list of negative edges.</span><br>  <span class="hljs-comment"># The number of sampled negative edges is num_neg_samples. You do not</span><br>  <span class="hljs-comment"># need to consider the corner case when the number of possible negative edges</span><br>  <span class="hljs-comment"># is less than num_neg_samples. It should be ok as long as your implementation </span><br>  <span class="hljs-comment"># works on the karate club network. In this implementation, self loops should </span><br>  <span class="hljs-comment"># not be considered as either a positive or negative edge. Also, notice that </span><br>  <span class="hljs-comment"># the karate club network is an undirected graph, if (0, 1) is a positive </span><br>  <span class="hljs-comment"># edge, do you think (1, 0) can be a negative one?</span><br><br>  neg_edge_list = []<br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  <span class="hljs-comment">##先得到所有的neg edges</span><br>  <span class="hljs-comment">###对于每个节点找出图中与其不相连的其他所有节点，构成 neg edge</span><br>  nodes = <span class="hljs-built_in">list</span>(G.nodes()) <br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nodes:<br>    node_tmp = nodes.copy()<br>    node_tmp.remove(i)<br>    neg_nodes = <span class="hljs-built_in">list</span>(compress(node_tmp, [j <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(G[i]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> node_tmp]))<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> neg_nodes:<br>      <span class="hljs-keyword">if</span> (i,k)[::-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> neg_edge_list:<br>        <span class="hljs-keyword">continue</span> <br>      neg_edge_list.append((i,k))<br>  <span class="hljs-comment">##对所有的neg edge list 进行抽样</span><br>  neg_edge_list = random.sample(neg_edge_list,num_neg_samples)<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> neg_edge_list<br><br><span class="hljs-comment"># Sample 78 negative edges</span><br>neg_edge_list = sample_negative_edges(G, <span class="hljs-built_in">len</span>(pos_edge_list))<br><br><span class="hljs-comment"># Transform the negative edge list to tensor</span><br>neg_edge_index = edge_list_to_tensor(neg_edge_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The neg_edge_index tensor has shape &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(neg_edge_index.shape))<br><br><span class="hljs-comment"># Which of following edges can be negative ones?</span><br>edge_1 = (<span class="hljs-number">7</span>, <span class="hljs-number">1</span>)<br>edge_2 = (<span class="hljs-number">1</span>, <span class="hljs-number">33</span>)<br>edge_3 = (<span class="hljs-number">33</span>, <span class="hljs-number">22</span>)<br>edge_4 = (<span class="hljs-number">0</span>, <span class="hljs-number">4</span>)<br>edge_5 = (<span class="hljs-number">4</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment">############# Your code here ############</span><br><span class="hljs-comment">## Note:</span><br><span class="hljs-comment">## 1: For each of the 5 edges, print whether it can be negative edge</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_neg</span>(<span class="hljs-params">G,edge</span>):<br>  <span class="hljs-keyword">if</span> (edge[<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(G[edge[<span class="hljs-number">0</span>]])):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;edge&#125;</span> is not negative edge.&#x27;</span>)<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;edge&#125;</span> is negative edge.&#x27;</span>)<br><br>is_neg(G,edge_1)<br>is_neg(G,edge_2)<br>is_neg(G,edge_3)<br>is_neg(G,edge_4)<br>is_neg(G,edge_5)<br><span class="hljs-comment">#########################################</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">The neg_edge_index tensor has shape torch.Size([2, 78])(7, 1) is not negative edge.(1, 33) is negative edge.(33, 22) is not negative edge.(0, 4) is not negative edge.(4, 2) is negative edge.</code></pre><h3 id="Node-Emebedding-Learning"><a href="#Node-Emebedding-Learning" class="headerlink" title="Node Emebedding Learning"></a>Node Emebedding Learning</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br><br><span class="hljs-built_in">print</span>(torch.__version__)<br></code></pre></td></tr></table></figure><pre><code class="hljs">1.10.0+cu111</code></pre><p>为了建立 node embedding 模型，我们需要使用到 Pytorch 中的<code>nn.Embedding</code>  模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Initialize an embedding layer</span><br><span class="hljs-comment"># Suppose we want to have embedding for 4 items (e.g., nodes)</span><br><span class="hljs-comment"># Each item is represented with 8 dimensional vector</span><br><br>emb_sample = nn.Embedding(num_embeddings=<span class="hljs-number">4</span>, embedding_dim=<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Sample embedding layer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(emb_sample))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Sample embedding layer: Embedding(4, 8)</code></pre><p>We can select items from the embedding matrix, by using Tensor indices</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Select an embedding in emb_sample</span><br><span class="hljs-built_in">id</span> = torch.LongTensor([<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(emb_sample(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-comment"># Select multiple embeddings</span><br>ids = torch.LongTensor([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(emb_sample(ids))<br><br><span class="hljs-comment"># Get the shape of the embedding weight matrix</span><br>shape = emb_sample.weight.data.shape<br><span class="hljs-built_in">print</span>(shape)<br><br><span class="hljs-comment"># Overwrite the weight to tensor with all ones</span><br>emb_sample.weight.data = torch.ones(shape)<br><br><span class="hljs-comment"># Let&#x27;s check if the emb is indeed initilized</span><br>ids = torch.LongTensor([<span class="hljs-number">0</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(emb_sample(ids))<br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([[-4.4258e-01, -1.5349e+00,  1.1118e-03, -8.3201e-01,  6.3567e-01,         -7.7746e-01, -5.5710e-02, -4.4338e-02]], grad_fn=&lt;EmbeddingBackward0&gt;)tensor([[-4.4258e-01, -1.5349e+00,  1.1118e-03, -8.3201e-01,  6.3567e-01,         -7.7746e-01, -5.5710e-02, -4.4338e-02],        [ 4.5921e-01,  8.7926e-02,  9.4428e-01, -7.5985e-01,  1.6396e+00,         -1.9154e+00, -1.8657e+00, -6.7076e-01]], grad_fn=&lt;EmbeddingBackward0&gt;)torch.Size([4, 8])tensor([[1., 1., 1., 1., 1., 1., 1., 1.],        [1., 1., 1., 1., 1., 1., 1., 1.]], grad_fn=&lt;EmbeddingBackward0&gt;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">emb_sample.weight.data<span class="hljs-comment">##weight.data就是embedding matrix</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([[1., 1., 1., 1., 1., 1., 1., 1.],        [1., 1., 1., 1., 1., 1., 1., 1.],        [1., 1., 1., 1., 1., 1., 1., 1.],        [1., 1., 1., 1., 1., 1., 1., 1.]])</code></pre><p>现在我们可以来创建节点的 embedding 矩阵并初始化：</p><ul><li>对于 karate club network 中的每个节点，进行 16 维向量的 embedding</li><li>使用 <code>[0,1]</code> 的均匀分布来初始化 embedding 矩阵</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Please do not change / reset the random seed</span><br>torch.manual_seed(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_node_emb</span>(<span class="hljs-params">num_node=<span class="hljs-number">34</span>, embedding_dim=<span class="hljs-number">16</span></span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement this function that will create the node embedding matrix.</span><br>  <span class="hljs-comment"># A torch.nn.Embedding layer will be returned. You do not need to change </span><br>  <span class="hljs-comment"># the values of num_node and embedding_dim. The weight matrix of returned </span><br>  <span class="hljs-comment"># layer should be initialized under uniform distribution. </span><br><br>  emb = <span class="hljs-literal">None</span><br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  emb = nn.Embedding(num_embeddings=num_node, embedding_dim=embedding_dim)<br>  emb.weight.data = torch.rand(emb.weight.data.shape)<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> emb<br><br>emb = create_node_emb()<br>ids = torch.LongTensor([<span class="hljs-number">0</span>, <span class="hljs-number">3</span>])<br><br><span class="hljs-comment"># Print the embedding layer</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Embedding: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(emb))<br><br><span class="hljs-comment"># An example that gets the embeddings for node 0 and 3</span><br><span class="hljs-built_in">print</span>(emb(ids))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Embedding: Embedding(34, 16)tensor([[0.2114, 0.7335, 0.1433, 0.9647, 0.2933, 0.7951, 0.5170, 0.2801, 0.8339,         0.1185, 0.2355, 0.5599, 0.8966, 0.2858, 0.1955, 0.1808],        [0.7486, 0.6546, 0.3843, 0.9820, 0.6012, 0.3710, 0.4929, 0.9915, 0.8358,         0.4629, 0.9902, 0.7196, 0.2338, 0.0450, 0.7906, 0.9689]],       grad_fn=&lt;EmbeddingBackward0&gt;)</code></pre><h4 id="Visualize-the-initial-node-embeddings"><a href="#Visualize-the-initial-node-embeddings" class="headerlink" title="Visualize the initial node embeddings"></a>Visualize the initial node embeddings</h4><p>先来可视化未经训练的 embedding，以便于和之后的进行比较，这里使用 PCA 将 embedding 空间映射到二维空间来可视化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">visualize_emb</span>(<span class="hljs-params">emb</span>):<br>  X = emb.weight.data.numpy()<span class="hljs-comment">##转化成 numpy</span><br>  pca = PCA(n_components=<span class="hljs-number">2</span>)<br>  components = pca.fit_transform(X)<br>  plt.figure(figsize=(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>))<br>  club1_x = []<br>  club1_y = []<br>  club2_x = []<br>  club2_y = []<br>  <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> G.nodes(data=<span class="hljs-literal">True</span>):<br>    <span class="hljs-keyword">if</span> node[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;club&#x27;</span>] == <span class="hljs-string">&#x27;Mr. Hi&#x27;</span>:<br>      club1_x.append(components[node[<span class="hljs-number">0</span>]][<span class="hljs-number">0</span>])<br>      club1_y.append(components[node[<span class="hljs-number">0</span>]][<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">else</span>:<br>      club2_x.append(components[node[<span class="hljs-number">0</span>]][<span class="hljs-number">0</span>])<br>      club2_y.append(components[node[<span class="hljs-number">0</span>]][<span class="hljs-number">1</span>])<br>  plt.scatter(club1_x, club1_y, color=<span class="hljs-string">&quot;red&quot;</span>, label=<span class="hljs-string">&quot;Mr. Hi&quot;</span>)<br>  plt.scatter(club2_x, club2_y, color=<span class="hljs-string">&quot;blue&quot;</span>, label=<span class="hljs-string">&quot;Officer&quot;</span>)<br>  plt.legend()<br>  plt.show()<br><br><span class="hljs-comment"># Visualize the initial random embeddding</span><br>visualize_emb(emb)<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/colab1_38_0.png"></p><h4 id="Question-7-Training-the-embedding"><a href="#Question-7-Training-the-embedding" class="headerlink" title="Question 7: Training the embedding"></a>Question 7: Training the embedding</h4><p>We want to optimize our embeddings for the task of classifying edges as positive or negative. Given an edge and the embeddings for each node, the dot product of the embeddings, followed by a sigmoid, should give us the likelihood of that edge being either positive (output of sigmoid &gt; 0.5) or negative (output of sigmoid &lt; 0.5).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.optim <span class="hljs-keyword">import</span> SGD<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">accuracy</span>(<span class="hljs-params">pred, label</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement the accuracy function. This function takes the </span><br>  <span class="hljs-comment"># pred tensor (the resulting tensor after sigmoid) and the label </span><br>  <span class="hljs-comment"># tensor (torch.LongTensor). Predicted value greater than 0.5 will </span><br>  <span class="hljs-comment"># be classified as label 1. Else it will be classified as label 0.</span><br>  <span class="hljs-comment"># The returned accuracy should be rounded to 4 decimal places. </span><br>  <span class="hljs-comment"># For example, accuracy 0.82956 will be rounded to 0.8296.</span><br><br>  accu = <span class="hljs-number">0.0</span><br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  a = pred &gt; <span class="hljs-number">0.5</span><br>  a = a.<span class="hljs-built_in">type</span>(torch.LongTensor)<br>  accu = <span class="hljs-built_in">sum</span>(a == label)/<span class="hljs-built_in">len</span>(a)<br>  accu = <span class="hljs-built_in">round</span>(accu.item(),<span class="hljs-number">4</span>)<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> accu<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">emb, loss_fn, sigmoid, train_label, train_edge</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Train the embedding layer here. You can also change epochs and </span><br>  <span class="hljs-comment"># learning rate. In general, you need to implement: </span><br>  <span class="hljs-comment"># (1) Get the embeddings of the nodes in train_edge</span><br>  <span class="hljs-comment"># (2) Dot product the embeddings between each node pair</span><br>  <span class="hljs-comment"># (3) Feed the dot product result into sigmoid</span><br>  <span class="hljs-comment"># (4) Feed the sigmoid output into the loss_fn</span><br>  <span class="hljs-comment"># (5) Print both loss and accuracy of each epoch </span><br>  <span class="hljs-comment"># (6) Update the embeddings using the loss and optimizer </span><br>  <span class="hljs-comment"># (as a sanity check, the loss should decrease during training)</span><br><br>  epochs = <span class="hljs-number">500</span><br>  learning_rate = <span class="hljs-number">0.1</span><br><br>  optimizer = SGD(emb.parameters(), lr=learning_rate, momentum=<span class="hljs-number">0.9</span>)<br><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br><br>    <span class="hljs-comment">############# Your code here ############</span><br>    pred = torch.empty(train_label.shape)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(train_edge.shape[<span class="hljs-number">1</span>]):<br>      <span class="hljs-comment">##两个节点的embedding</span><br>      em1 = emb(torch.tensor(train_edge[<span class="hljs-number">0</span>,i]))<br>      em2 = emb(torch.tensor(train_edge[<span class="hljs-number">1</span>,i]))<br>      pred_t = sigmoid(torch.dot(em1,em2))<br>      pred[i] = pred_t<br>    loss = loss_fn(pred,train_label)<br>    optimizer.zero_grad()<br>    loss.backward()<br>    optimizer.step()<br>    <span class="hljs-keyword">if</span> epochs % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>:<br>      loss = loss.item()<br>      acc = accuracy(pred,train_label)<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;loss: <span class="hljs-subst">&#123;loss:&gt;4f&#125;</span>, acc: <span class="hljs-subst">&#123;acc:&gt;4f&#125;</span>&quot;</span>)<br>    <span class="hljs-comment">#########################################</span><br><br>loss_fn = nn.BCELoss()<br>sigmoid = nn.Sigmoid()<br><br><span class="hljs-built_in">print</span>(pos_edge_index.shape)<br><br><span class="hljs-comment"># Generate the positive and negative labels</span><br>pos_label = torch.ones(pos_edge_index.shape[<span class="hljs-number">1</span>], )<br>neg_label = torch.zeros(neg_edge_index.shape[<span class="hljs-number">1</span>], )<br><br><span class="hljs-comment"># Concat positive and negative labels into one tensor</span><br>train_label = torch.cat([pos_label, neg_label], dim=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># Concat positive and negative edges into one tensor</span><br><span class="hljs-comment"># Since the network is very small, we do not split the edges into val/test sets</span><br>train_edge = torch.cat([pos_edge_index, neg_edge_index], dim=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(train_edge.shape)<br><br>train(emb, loss_fn, sigmoid, train_label, train_edge)<br></code></pre></td></tr></table></figure><pre><code class="hljs">torch.Size([2, 78])torch.Size([2, 156])loss: 2.059661, acc: 0.500000loss: 2.046740, acc: 0.500000loss: 2.022378, acc: 0.500000loss: 1.988064, acc: 0.500000loss: 1.945258, acc: 0.500000loss: 1.895376, acc: 0.500000loss: 1.839767, acc: 0.500000loss: 1.779702, acc: 0.500000loss: 1.716365, acc: 0.500000loss: 1.650848, acc: 0.500000loss: 1.584147, acc: 0.500000loss: 1.517160, acc: 0.500000/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:45: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor)./usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:46: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).loss: 1.450682, acc: 0.500000loss: 1.385406, acc: 0.500000loss: 1.321924, acc: 0.500000loss: 1.260727, acc: 0.500000loss: 1.202207, acc: 0.500000loss: 1.146660, acc: 0.500000loss: 1.094293, acc: 0.500000loss: 1.045231, acc: 0.500000loss: 0.999524, acc: 0.500000loss: 0.957157, acc: 0.500000loss: 0.918061, acc: 0.500000loss: 0.882122, acc: 0.506400loss: 0.849194, acc: 0.506400loss: 0.819103, acc: 0.519200loss: 0.791663, acc: 0.519200loss: 0.766678, acc: 0.532100loss: 0.743947, acc: 0.538500loss: 0.723275, acc: 0.544900loss: 0.704472, acc: 0.544900loss: 0.687356, acc: 0.544900loss: 0.671758, acc: 0.564100loss: 0.657519, acc: 0.583300loss: 0.644493, acc: 0.596200loss: 0.632548, acc: 0.609000loss: 0.621563, acc: 0.615400loss: 0.611427, acc: 0.628200loss: 0.602045, acc: 0.647400loss: 0.593329, acc: 0.653800loss: 0.585200, acc: 0.666700loss: 0.577589, acc: 0.660300loss: 0.570436, acc: 0.679500loss: 0.563685, acc: 0.692300loss: 0.557289, acc: 0.717900loss: 0.551207, acc: 0.724400loss: 0.545400, acc: 0.730800loss: 0.539836, acc: 0.737200loss: 0.534487, acc: 0.750000loss: 0.529327, acc: 0.762800loss: 0.524334, acc: 0.775600loss: 0.519488, acc: 0.814100loss: 0.514774, acc: 0.833300loss: 0.510174, acc: 0.839700loss: 0.505678, acc: 0.846200loss: 0.501273, acc: 0.846200loss: 0.496948, acc: 0.852600loss: 0.492696, acc: 0.852600loss: 0.488508, acc: 0.859000loss: 0.484377, acc: 0.859000loss: 0.480299, acc: 0.859000loss: 0.476266, acc: 0.865400loss: 0.472276, acc: 0.865400loss: 0.468323, acc: 0.865400loss: 0.464405, acc: 0.865400loss: 0.460518, acc: 0.871800loss: 0.456659, acc: 0.871800loss: 0.452827, acc: 0.871800loss: 0.449019, acc: 0.871800loss: 0.445234, acc: 0.878200loss: 0.441470, acc: 0.878200loss: 0.437725, acc: 0.878200loss: 0.433999, acc: 0.878200loss: 0.430290, acc: 0.878200loss: 0.426598, acc: 0.884600loss: 0.422922, acc: 0.878200loss: 0.419262, acc: 0.878200loss: 0.415616, acc: 0.884600loss: 0.411986, acc: 0.884600loss: 0.408369, acc: 0.891000loss: 0.404766, acc: 0.891000loss: 0.401178, acc: 0.897400loss: 0.397603, acc: 0.897400loss: 0.394041, acc: 0.897400loss: 0.390494, acc: 0.897400loss: 0.386959, acc: 0.903800loss: 0.383439, acc: 0.910300loss: 0.379932, acc: 0.910300loss: 0.376439, acc: 0.910300loss: 0.372960, acc: 0.910300loss: 0.369495, acc: 0.910300loss: 0.366045, acc: 0.910300loss: 0.362609, acc: 0.910300loss: 0.359187, acc: 0.916700loss: 0.355781, acc: 0.923100loss: 0.352389, acc: 0.923100loss: 0.349013, acc: 0.923100loss: 0.345652, acc: 0.923100loss: 0.342307, acc: 0.923100loss: 0.338979, acc: 0.923100loss: 0.335666, acc: 0.923100loss: 0.332370, acc: 0.929500loss: 0.329091, acc: 0.935900loss: 0.325829, acc: 0.942300loss: 0.322585, acc: 0.942300loss: 0.319358, acc: 0.948700loss: 0.316149, acc: 0.948700loss: 0.312959, acc: 0.948700loss: 0.309787, acc: 0.955100loss: 0.306634, acc: 0.955100loss: 0.303499, acc: 0.961500loss: 0.300385, acc: 0.961500loss: 0.297289, acc: 0.961500loss: 0.294214, acc: 0.961500loss: 0.291159, acc: 0.961500loss: 0.288124, acc: 0.961500loss: 0.285110, acc: 0.961500loss: 0.282117, acc: 0.961500loss: 0.279145, acc: 0.961500loss: 0.276195, acc: 0.961500loss: 0.273266, acc: 0.961500loss: 0.270360, acc: 0.961500loss: 0.267475, acc: 0.961500loss: 0.264613, acc: 0.961500loss: 0.261773, acc: 0.961500loss: 0.258956, acc: 0.961500loss: 0.256162, acc: 0.961500loss: 0.253392, acc: 0.961500loss: 0.250645, acc: 0.961500loss: 0.247921, acc: 0.961500loss: 0.245221, acc: 0.961500loss: 0.242546, acc: 0.974400loss: 0.239894, acc: 0.974400loss: 0.237266, acc: 0.974400loss: 0.234663, acc: 0.974400loss: 0.232085, acc: 0.974400loss: 0.229531, acc: 0.974400loss: 0.227001, acc: 0.980800loss: 0.224497, acc: 0.980800loss: 0.222017, acc: 0.987200loss: 0.219563, acc: 0.993600loss: 0.217133, acc: 0.993600loss: 0.214729, acc: 0.993600loss: 0.212350, acc: 0.993600loss: 0.209996, acc: 0.993600loss: 0.207667, acc: 0.993600loss: 0.205363, acc: 0.993600loss: 0.203085, acc: 0.993600loss: 0.200832, acc: 0.993600loss: 0.198603, acc: 0.993600loss: 0.196401, acc: 0.993600loss: 0.194223, acc: 0.993600loss: 0.192070, acc: 0.993600loss: 0.189942, acc: 0.993600loss: 0.187839, acc: 0.993600loss: 0.185761, acc: 1.000000loss: 0.183708, acc: 1.000000loss: 0.181680, acc: 1.000000loss: 0.179675, acc: 1.000000loss: 0.177696, acc: 1.000000loss: 0.175740, acc: 1.000000loss: 0.173809, acc: 1.000000loss: 0.171902, acc: 1.000000loss: 0.170018, acc: 1.000000loss: 0.168158, acc: 1.000000loss: 0.166322, acc: 1.000000loss: 0.164509, acc: 1.000000loss: 0.162719, acc: 1.000000loss: 0.160952, acc: 1.000000loss: 0.159208, acc: 1.000000loss: 0.157487, acc: 1.000000loss: 0.155788, acc: 1.000000loss: 0.154111, acc: 1.000000loss: 0.152456, acc: 1.000000loss: 0.150822, acc: 1.000000loss: 0.149211, acc: 1.000000loss: 0.147620, acc: 1.000000loss: 0.146051, acc: 1.000000loss: 0.144503, acc: 1.000000loss: 0.142975, acc: 1.000000loss: 0.141467, acc: 1.000000loss: 0.139980, acc: 1.000000loss: 0.138513, acc: 1.000000loss: 0.137065, acc: 1.000000loss: 0.135637, acc: 1.000000loss: 0.134228, acc: 1.000000loss: 0.132838, acc: 1.000000loss: 0.131467, acc: 1.000000loss: 0.130114, acc: 1.000000loss: 0.128780, acc: 1.000000loss: 0.127464, acc: 1.000000loss: 0.126165, acc: 1.000000loss: 0.124884, acc: 1.000000loss: 0.123620, acc: 1.000000loss: 0.122374, acc: 1.000000loss: 0.121144, acc: 1.000000loss: 0.119931, acc: 1.000000loss: 0.118734, acc: 1.000000loss: 0.117554, acc: 1.000000loss: 0.116389, acc: 1.000000loss: 0.115240, acc: 1.000000loss: 0.114107, acc: 1.000000loss: 0.112989, acc: 1.000000loss: 0.111886, acc: 1.000000loss: 0.110797, acc: 1.000000loss: 0.109724, acc: 1.000000loss: 0.108665, acc: 1.000000loss: 0.107620, acc: 1.000000loss: 0.106589, acc: 1.000000loss: 0.105571, acc: 1.000000loss: 0.104568, acc: 1.000000loss: 0.103577, acc: 1.000000loss: 0.102600, acc: 1.000000loss: 0.101636, acc: 1.000000loss: 0.100685, acc: 1.000000loss: 0.099746, acc: 1.000000loss: 0.098819, acc: 1.000000loss: 0.097905, acc: 1.000000loss: 0.097003, acc: 1.000000loss: 0.096113, acc: 1.000000loss: 0.095234, acc: 1.000000loss: 0.094367, acc: 1.000000loss: 0.093511, acc: 1.000000loss: 0.092666, acc: 1.000000loss: 0.091833, acc: 1.000000loss: 0.091010, acc: 1.000000loss: 0.090198, acc: 1.000000loss: 0.089396, acc: 1.000000loss: 0.088604, acc: 1.000000loss: 0.087823, acc: 1.000000loss: 0.087052, acc: 1.000000loss: 0.086290, acc: 1.000000loss: 0.085539, acc: 1.000000loss: 0.084796, acc: 1.000000loss: 0.084064, acc: 1.000000loss: 0.083340, acc: 1.000000loss: 0.082626, acc: 1.000000loss: 0.081921, acc: 1.000000loss: 0.081224, acc: 1.000000loss: 0.080537, acc: 1.000000loss: 0.079857, acc: 1.000000loss: 0.079187, acc: 1.000000loss: 0.078525, acc: 1.000000loss: 0.077870, acc: 1.000000loss: 0.077224, acc: 1.000000loss: 0.076586, acc: 1.000000loss: 0.075956, acc: 1.000000loss: 0.075334, acc: 1.000000loss: 0.074719, acc: 1.000000loss: 0.074112, acc: 1.000000loss: 0.073512, acc: 1.000000loss: 0.072919, acc: 1.000000loss: 0.072333, acc: 1.000000loss: 0.071755, acc: 1.000000loss: 0.071184, acc: 1.000000loss: 0.070619, acc: 1.000000loss: 0.070061, acc: 1.000000loss: 0.069510, acc: 1.000000loss: 0.068965, acc: 1.000000loss: 0.068427, acc: 1.000000loss: 0.067895, acc: 1.000000loss: 0.067370, acc: 1.000000loss: 0.066850, acc: 1.000000loss: 0.066337, acc: 1.000000loss: 0.065830, acc: 1.000000loss: 0.065329, acc: 1.000000loss: 0.064833, acc: 1.000000loss: 0.064343, acc: 1.000000loss: 0.063859, acc: 1.000000loss: 0.063381, acc: 1.000000loss: 0.062908, acc: 1.000000loss: 0.062440, acc: 1.000000loss: 0.061978, acc: 1.000000loss: 0.061521, acc: 1.000000loss: 0.061069, acc: 1.000000loss: 0.060622, acc: 1.000000loss: 0.060181, acc: 1.000000loss: 0.059744, acc: 1.000000loss: 0.059312, acc: 1.000000loss: 0.058885, acc: 1.000000loss: 0.058463, acc: 1.000000loss: 0.058046, acc: 1.000000loss: 0.057633, acc: 1.000000loss: 0.057225, acc: 1.000000loss: 0.056821, acc: 1.000000loss: 0.056422, acc: 1.000000loss: 0.056027, acc: 1.000000loss: 0.055636, acc: 1.000000loss: 0.055250, acc: 1.000000loss: 0.054868, acc: 1.000000loss: 0.054490, acc: 1.000000loss: 0.054116, acc: 1.000000loss: 0.053746, acc: 1.000000loss: 0.053380, acc: 1.000000loss: 0.053018, acc: 1.000000loss: 0.052660, acc: 1.000000loss: 0.052305, acc: 1.000000loss: 0.051955, acc: 1.000000loss: 0.051608, acc: 1.000000loss: 0.051265, acc: 1.000000loss: 0.050925, acc: 1.000000loss: 0.050589, acc: 1.000000loss: 0.050257, acc: 1.000000loss: 0.049928, acc: 1.000000loss: 0.049602, acc: 1.000000loss: 0.049280, acc: 1.000000loss: 0.048961, acc: 1.000000loss: 0.048645, acc: 1.000000loss: 0.048333, acc: 1.000000loss: 0.048023, acc: 1.000000loss: 0.047717, acc: 1.000000loss: 0.047414, acc: 1.000000loss: 0.047114, acc: 1.000000loss: 0.046818, acc: 1.000000loss: 0.046524, acc: 1.000000loss: 0.046233, acc: 1.000000loss: 0.045945, acc: 1.000000loss: 0.045660, acc: 1.000000loss: 0.045377, acc: 1.000000loss: 0.045098, acc: 1.000000loss: 0.044821, acc: 1.000000loss: 0.044547, acc: 1.000000loss: 0.044276, acc: 1.000000loss: 0.044007, acc: 1.000000loss: 0.043741, acc: 1.000000loss: 0.043478, acc: 1.000000loss: 0.043217, acc: 1.000000loss: 0.042959, acc: 1.000000loss: 0.042703, acc: 1.000000loss: 0.042450, acc: 1.000000loss: 0.042199, acc: 1.000000loss: 0.041950, acc: 1.000000loss: 0.041704, acc: 1.000000loss: 0.041460, acc: 1.000000loss: 0.041219, acc: 1.000000loss: 0.040980, acc: 1.000000loss: 0.040743, acc: 1.000000loss: 0.040508, acc: 1.000000loss: 0.040275, acc: 1.000000loss: 0.040045, acc: 1.000000loss: 0.039817, acc: 1.000000loss: 0.039591, acc: 1.000000loss: 0.039367, acc: 1.000000loss: 0.039145, acc: 1.000000loss: 0.038925, acc: 1.000000loss: 0.038707, acc: 1.000000loss: 0.038491, acc: 1.000000loss: 0.038277, acc: 1.000000loss: 0.038066, acc: 1.000000loss: 0.037855, acc: 1.000000loss: 0.037647, acc: 1.000000loss: 0.037441, acc: 1.000000loss: 0.037237, acc: 1.000000loss: 0.037034, acc: 1.000000loss: 0.036833, acc: 1.000000loss: 0.036634, acc: 1.000000loss: 0.036437, acc: 1.000000loss: 0.036242, acc: 1.000000loss: 0.036048, acc: 1.000000loss: 0.035856, acc: 1.000000loss: 0.035666, acc: 1.000000loss: 0.035477, acc: 1.000000loss: 0.035290, acc: 1.000000loss: 0.035105, acc: 1.000000loss: 0.034921, acc: 1.000000loss: 0.034739, acc: 1.000000loss: 0.034558, acc: 1.000000loss: 0.034379, acc: 1.000000loss: 0.034202, acc: 1.000000loss: 0.034026, acc: 1.000000loss: 0.033851, acc: 1.000000loss: 0.033678, acc: 1.000000loss: 0.033507, acc: 1.000000loss: 0.033336, acc: 1.000000loss: 0.033168, acc: 1.000000loss: 0.033001, acc: 1.000000loss: 0.032835, acc: 1.000000loss: 0.032670, acc: 1.000000loss: 0.032507, acc: 1.000000loss: 0.032345, acc: 1.000000loss: 0.032185, acc: 1.000000loss: 0.032026, acc: 1.000000loss: 0.031868, acc: 1.000000loss: 0.031712, acc: 1.000000loss: 0.031556, acc: 1.000000loss: 0.031403, acc: 1.000000loss: 0.031250, acc: 1.000000loss: 0.031098, acc: 1.000000loss: 0.030948, acc: 1.000000loss: 0.030799, acc: 1.000000loss: 0.030651, acc: 1.000000loss: 0.030505, acc: 1.000000loss: 0.030359, acc: 1.000000loss: 0.030215, acc: 1.000000loss: 0.030072, acc: 1.000000loss: 0.029930, acc: 1.000000loss: 0.029789, acc: 1.000000loss: 0.029649, acc: 1.000000loss: 0.029511, acc: 1.000000loss: 0.029373, acc: 1.000000loss: 0.029237, acc: 1.000000loss: 0.029101, acc: 1.000000loss: 0.028967, acc: 1.000000loss: 0.028834, acc: 1.000000loss: 0.028701, acc: 1.000000loss: 0.028570, acc: 1.000000loss: 0.028440, acc: 1.000000loss: 0.028310, acc: 1.000000loss: 0.028182, acc: 1.000000loss: 0.028055, acc: 1.000000loss: 0.027929, acc: 1.000000loss: 0.027803, acc: 1.000000loss: 0.027679, acc: 1.000000loss: 0.027555, acc: 1.000000loss: 0.027433, acc: 1.000000loss: 0.027311, acc: 1.000000loss: 0.027190, acc: 1.000000loss: 0.027071, acc: 1.000000loss: 0.026952, acc: 1.000000loss: 0.026834, acc: 1.000000loss: 0.026716, acc: 1.000000loss: 0.026600, acc: 1.000000loss: 0.026485, acc: 1.000000loss: 0.026370, acc: 1.000000loss: 0.026256, acc: 1.000000loss: 0.026143, acc: 1.000000loss: 0.026031, acc: 1.000000loss: 0.025920, acc: 1.000000loss: 0.025809, acc: 1.000000loss: 0.025700, acc: 1.000000loss: 0.025591, acc: 1.000000loss: 0.025483, acc: 1.000000loss: 0.025375, acc: 1.000000loss: 0.025269, acc: 1.000000loss: 0.025163, acc: 1.000000loss: 0.025058, acc: 1.000000loss: 0.024954, acc: 1.000000loss: 0.024850, acc: 1.000000loss: 0.024747, acc: 1.000000loss: 0.024645, acc: 1.000000loss: 0.024544, acc: 1.000000loss: 0.024443, acc: 1.000000loss: 0.024343, acc: 1.000000loss: 0.024244, acc: 1.000000loss: 0.024145, acc: 1.000000loss: 0.024047, acc: 1.000000loss: 0.023950, acc: 1.000000loss: 0.023853, acc: 1.000000loss: 0.023757, acc: 1.000000loss: 0.023662, acc: 1.000000loss: 0.023567, acc: 1.000000loss: 0.023474, acc: 1.000000loss: 0.023380, acc: 1.000000loss: 0.023288, acc: 1.000000loss: 0.023195, acc: 1.000000loss: 0.023104, acc: 1.000000loss: 0.023013, acc: 1.000000loss: 0.022923, acc: 1.000000loss: 0.022833, acc: 1.000000loss: 0.022744, acc: 1.000000loss: 0.022656, acc: 1.000000loss: 0.022568, acc: 1.000000loss: 0.022481, acc: 1.000000loss: 0.022394, acc: 1.000000loss: 0.022308, acc: 1.000000loss: 0.022223, acc: 1.000000loss: 0.022138, acc: 1.000000loss: 0.022053, acc: 1.000000loss: 0.021969, acc: 1.000000loss: 0.021886, acc: 1.000000loss: 0.021803, acc: 1.000000loss: 0.021721, acc: 1.000000loss: 0.021639, acc: 1.000000loss: 0.021558, acc: 1.000000loss: 0.021477, acc: 1.000000loss: 0.021397, acc: 1.000000loss: 0.021318, acc: 1.000000loss: 0.021238, acc: 1.000000loss: 0.021160, acc: 1.000000loss: 0.021082, acc: 1.000000loss: 0.021004, acc: 1.000000loss: 0.020927, acc: 1.000000loss: 0.020850, acc: 1.000000loss: 0.020774, acc: 1.000000loss: 0.020699, acc: 1.000000loss: 0.020623, acc: 1.000000loss: 0.020549, acc: 1.000000loss: 0.020474, acc: 1.000000loss: 0.020400, acc: 1.000000loss: 0.020327, acc: 1.000000loss: 0.020254, acc: 1.000000loss: 0.020182, acc: 1.000000loss: 0.020110, acc: 1.000000loss: 0.020038, acc: 1.000000loss: 0.019967, acc: 1.000000loss: 0.019896, acc: 1.000000loss: 0.019826, acc: 1.000000loss: 0.019756, acc: 1.000000loss: 0.019687, acc: 1.000000loss: 0.019618, acc: 1.000000</code></pre><h3 id="Visualize-the-final-node-embeddings"><a href="#Visualize-the-final-node-embeddings" class="headerlink" title="Visualize the final node embeddings"></a>Visualize the final node embeddings</h3><p>可视化训练后的 embedding，可以看到两类节点还是可以分开的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Visualize the final learned embedding</span><br>visualize_emb(emb)<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/colab1_42_0.png"></p><h2 id="Colab-2"><a href="#Colab-2" class="headerlink" title="Colab 2"></a>Colab 2</h2><p>在这个 colab 中，将会使用 PyTorch Geometric 构建简单的 GNN 进行两类问题的预测 : 1) 节点类别 2) 图类别，使用的数据集是 OGB 包中的两个数据集。</p><p>查看 Pytorch 版本并安装相应的包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;PyTorch has version &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(torch.__version__))<br></code></pre></td></tr></table></figure><pre><code class="hljs">PyTorch has version 1.10.0+cu111</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">!pip install torch-scatter -f https://data.pyg.org/whl/torch-<span class="hljs-number">1.10</span><span class="hljs-number">.0</span>+cu111.html<br>!pip install torch-sparse -f https://data.pyg.org/whl/torch-<span class="hljs-number">1.10</span><span class="hljs-number">.0</span>+cu111.html<br>!pip install torch-geometric<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">!pip install ogb<br></code></pre></td></tr></table></figure><h3 id="1-PyTorch-Geometric-Datasets-and-Data"><a href="#1-PyTorch-Geometric-Datasets-and-Data" class="headerlink" title="1) PyTorch Geometric (Datasets and Data)"></a>1) PyTorch Geometric (Datasets and Data)</h3><p>PyTorch Geometric 有两个类用来存储和转化图数据。一个是 <code>torch_geometric.datasets</code>, 含有一些常用的数据集，另一个是 <code>torch_geometric.data</code>, 提供了以 tensor 操作图数据的方法。</p><h4 id="PyG-Datasets"><a href="#PyG-Datasets" class="headerlink" title="PyG Datasets"></a>PyG Datasets</h4><p>以 <code>ENZYMES</code> 数据集为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch_geometric.datasets <span class="hljs-keyword">import</span> TUDataset<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  root = <span class="hljs-string">&#x27;./enzymes&#x27;</span><br>  name = <span class="hljs-string">&#x27;ENZYMES&#x27;</span><br><br>  <span class="hljs-comment"># The ENZYMES dataset</span><br>  pyg_dataset= TUDataset(root, name)<br><br>  <span class="hljs-comment"># You will find that there are 600 graphs in this dataset</span><br>  <span class="hljs-built_in">print</span>(pyg_dataset)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Downloading https://www.chrsmrrs.com/graphkerneldatasets/ENZYMES.zipExtracting enzymes/ENZYMES/ENZYMES.zipProcessing...ENZYMES(600)Done!</code></pre><h5 id="Question-1-在-ENZYMES-数据集中有多少类别和特征？"><a href="#Question-1-在-ENZYMES-数据集中有多少类别和特征？" class="headerlink" title="Question 1: 在 ENZYMES 数据集中有多少类别和特征？"></a>Question 1: 在 ENZYMES 数据集中有多少类别和特征？</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_num_classes</span>(<span class="hljs-params">pyg_dataset</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement a function that takes a PyG dataset object</span><br>  <span class="hljs-comment"># and returns the number of classes for that dataset.</span><br><br>  num_classes = <span class="hljs-number">0</span><br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  <span class="hljs-comment">## (~1 line of code)</span><br>  <span class="hljs-comment">## Note</span><br>  <span class="hljs-comment">## 1. Colab autocomplete functionality might be useful.</span><br>  num_classes = pyg_dataset.num_classes<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> num_classes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_num_features</span>(<span class="hljs-params">pyg_dataset</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement a function that takes a PyG dataset object</span><br>  <span class="hljs-comment"># and returns the number of features for that dataset.</span><br><br>  num_features = <span class="hljs-number">0</span><br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  <span class="hljs-comment">## (~1 line of code)</span><br>  <span class="hljs-comment">## Note</span><br>  <span class="hljs-comment">## 1. Colab autocomplete functionality might be useful.</span><br>  num_features = pyg_dataset.num_node_features<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> num_features<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  num_classes = get_num_classes(pyg_dataset)<br>  num_features = get_num_features(pyg_dataset)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; dataset has &#123;&#125; classes&quot;</span>.<span class="hljs-built_in">format</span>(name, num_classes))<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; dataset has &#123;&#125; features&quot;</span>.<span class="hljs-built_in">format</span>(name, num_features))<br></code></pre></td></tr></table></figure><pre><code class="hljs">ENZYMES dataset has 6 classesENZYMES dataset has 3 features</code></pre><h4 id="PyG-Data"><a href="#PyG-Data" class="headerlink" title="PyG Data"></a>PyG Data</h4><h5 id="Question-2-ENZYMES-中索引为-100-的图的标签是什么？"><a href="#Question-2-ENZYMES-中索引为-100-的图的标签是什么？" class="headerlink" title="Question 2: ENZYMES 中索引为 100 的图的标签是什么？"></a>Question 2: ENZYMES 中索引为 100 的图的标签是什么？</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_graph_class</span>(<span class="hljs-params">pyg_dataset, idx</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement a function that takes a PyG dataset object,</span><br>  <span class="hljs-comment"># an index of a graph within the dataset, and returns the class/label </span><br>  <span class="hljs-comment"># of the graph (as an integer).</span><br><br>  label = -<span class="hljs-number">1</span><br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  <span class="hljs-comment">## (~1 line of code)</span><br>  <span class="hljs-comment">##data.y å­˜å‚¨ lable</span><br>  label = pyg_dataset[idx][<span class="hljs-string">&quot;y&quot;</span>]<br>  <span class="hljs-comment">#########################################</span><br>  <span class="hljs-keyword">return</span> label<br><br><span class="hljs-comment"># Here pyg_dataset is a dataset for graph classification</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  graph_0 = pyg_dataset[<span class="hljs-number">0</span>]<br>  <span class="hljs-built_in">print</span>(graph_0)<br>  idx = <span class="hljs-number">100</span><br>  label = get_graph_class(pyg_dataset, idx)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Graph with index &#123;&#125; has label &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(idx, label))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Data(edge_index=[2, 168], x=[37, 3], y=[1])Graph with index 100 has label tensor([4])</code></pre><h5 id="Question-3-索引为-200-的图有多少个边？"><a href="#Question-3-索引为-200-的图有多少个边？" class="headerlink" title="Question 3: 索引为 200 的图有多少个边？"></a>Question 3: 索引为 200 的图有多少个边？</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_graph_num_edges</span>(<span class="hljs-params">pyg_dataset, idx</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement a function that takes a PyG dataset object,</span><br>  <span class="hljs-comment"># the index of a graph in the dataset, and returns the number of </span><br>  <span class="hljs-comment"># edges in the graph (as an integer). You should not count an edge </span><br>  <span class="hljs-comment"># twice if the graph is undirected. For example, in an undirected </span><br>  <span class="hljs-comment"># graph G, if two nodes v and u are connected by an edge, this edge</span><br>  <span class="hljs-comment"># should only be counted once.</span><br><br>  num_edges = <span class="hljs-number">0</span><br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  <span class="hljs-comment">## Note:</span><br>  <span class="hljs-comment">## 1. You can&#x27;t return the data.num_edges directly</span><br>  <span class="hljs-comment">## 2. We assume the graph is undirected</span><br>  <span class="hljs-comment">## 3. Look at the PyG dataset built in functions</span><br>  <span class="hljs-comment">## (~4 lines of code)</span><br>  num_edges = pyg_dataset[<span class="hljs-number">200</span>][<span class="hljs-string">&quot;edge_index&quot;</span>].shape[<span class="hljs-number">1</span>]/<span class="hljs-number">2</span><br>  num_edges = <span class="hljs-built_in">int</span>(num_edges)<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> num_edges<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  idx = <span class="hljs-number">200</span><br>  num_edges = get_graph_num_edges(pyg_dataset, idx)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Graph with index &#123;&#125; has &#123;&#125; edges&#x27;</span>.<span class="hljs-built_in">format</span>(idx, num_edges))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Graph with index 200 has 53 edges</code></pre><h4 id="OGB-数据"><a href="#OGB-数据" class="headerlink" title="OGB 数据"></a>OGB 数据</h4><p>以 OGB 中的 ogbn-arxiv 数据为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch_geometric.transforms <span class="hljs-keyword">as</span> T<br><span class="hljs-keyword">from</span> ogb.nodeproppred <span class="hljs-keyword">import</span> PygNodePropPredDataset<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  dataset_name = <span class="hljs-string">&#x27;ogbn-arxiv&#x27;</span><br>  <span class="hljs-comment"># Load the dataset and transform it to sparse tensor</span><br>  dataset = PygNodePropPredDataset(name=dataset_name,transform=T.ToSparseTensor())<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The &#123;&#125; dataset has &#123;&#125; graph&#x27;</span>.<span class="hljs-built_in">format</span>(dataset_name, <span class="hljs-built_in">len</span>(dataset)))<br><br>  <span class="hljs-comment"># Extract the graph</span><br>  data = dataset[<span class="hljs-number">0</span>]<br>  <span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Downloading http://snap.stanford.edu/ogb/data/nodeproppred/arxiv.zipDownloaded 0.08 GB: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 81/81 [00:07&lt;00:00, 10.16it/s]Extracting dataset/arxiv.zipProcessing...Loading necessary files...This might take a while.Processing graphs...100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1/1 [00:00&lt;00:00, 8112.77it/s]Converting graphs into PyG objects...100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1/1 [00:00&lt;00:00, 5729.92it/s]Saving...Done!The ogbn-arxiv dataset has 1 graphData(num_nodes=169343, x=[169343, 128], node_year=[169343, 1], y=[169343, 1], adj_t=[169343, 169343, nnz=1166243])</code></pre><h5 id="Question-4-ogbn-arxiv-图有多少特征？"><a href="#Question-4-ogbn-arxiv-图有多少特征？" class="headerlink" title="Question 4: ogbn-arxiv 图有多少特征？"></a>Question 4: ogbn-arxiv 图有多少特征？</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">graph_num_features</span>(<span class="hljs-params">data</span>):<br>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement a function that takes a PyG data object,</span><br>  <span class="hljs-comment"># and returns the number of features in the graph (as an integer).</span><br><br>  num_features = <span class="hljs-number">0</span><br><br>  <span class="hljs-comment">############# Your code here ############</span><br>  <span class="hljs-comment">## (~1 line of code)</span><br>  num_features = data.num_node_features<br>  <span class="hljs-comment">#########################################</span><br><br>  <span class="hljs-keyword">return</span> num_features<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  num_features = graph_num_features(data)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The graph has &#123;&#125; features&#x27;</span>.<span class="hljs-built_in">format</span>(num_features))<br></code></pre></td></tr></table></figure><pre><code class="hljs">The graph has 128 features</code></pre><h3 id="GNN-节点分类预测"><a href="#GNN-节点分类预测" class="headerlink" title="GNN: 节点分类预测"></a>GNN: 节点分类预测</h3><p>使用 PyG 的 <code>GCNConv</code> 层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-built_in">print</span>(torch.__version__)<br><br><span class="hljs-comment"># The PyG built-in GCNConv</span><br><span class="hljs-keyword">from</span> torch_geometric.nn <span class="hljs-keyword">import</span> GCNConv<br><br><span class="hljs-keyword">import</span> torch_geometric.transforms <span class="hljs-keyword">as</span> T<br><span class="hljs-keyword">from</span> ogb.nodeproppred <span class="hljs-keyword">import</span> PygNodePropPredDataset, Evaluator<br></code></pre></td></tr></table></figure><pre><code class="hljs">1.10.0+cu111</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.adj_t<br></code></pre></td></tr></table></figure><pre><code class="hljs">SparseTensor(row=tensor([     0,      0,      0,  ..., 169341, 169341, 169341]),             col=tensor([   411,    640,   1162,  ...,  30351,  35711, 103121]),             size=(169343, 169343), nnz=1166243, density=0.00%)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.num_nodes<br></code></pre></td></tr></table></figure><pre><code class="hljs">169343</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.adj_t.to_symmetric()<br></code></pre></td></tr></table></figure><pre><code class="hljs">SparseTensor(row=tensor([     0,      0,      0,  ..., 169341, 169342, 169342]),             col=tensor([   411,    640,   1162,  ..., 163274,  27824, 158981]),             size=(169343, 169343), nnz=2315598, density=0.01%)</code></pre><h4 id="Load-and-Preprocess-the-Dataset"><a href="#Load-and-Preprocess-the-Dataset" class="headerlink" title="Load and Preprocess the Dataset"></a>Load and Preprocess the Dataset</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  dataset_name = <span class="hljs-string">&#x27;ogbn-arxiv&#x27;</span><br>  dataset = PygNodePropPredDataset(name=dataset_name,transform=T.ToSparseTensor())<br>  data = dataset[<span class="hljs-number">0</span>]<br><br>  <span class="hljs-comment"># Make the adjacency matrix to symmetric</span><br>  data.adj_t = data.adj_t.to_symmetric()<br><br>  device = <span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span><br><br>  <span class="hljs-comment"># If you use GPU, the device should be cuda</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Device: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(device))<br><br>  data = data.to(device)<br>  split_idx = dataset.get_idx_split()<br>  train_idx = split_idx[<span class="hljs-string">&#x27;train&#x27;</span>].to(device)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Device: cuda</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">split_idx<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#123;&#39;test&#39;: tensor([   346,    398,    451,  ..., 169340, 169341, 169342]), &#39;train&#39;: tensor([     0,      1,      2,  ..., 169145, 169148, 169251]), &#39;valid&#39;: tensor([   349,    357,    366,  ..., 169185, 169261, 169296])&#125;</code></pre><h4 id="GCN-Model"><a href="#GCN-Model" class="headerlink" title="GCN Model"></a>GCN Model</h4><p>GNN 的架构如下：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/aaa.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GCN</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, input_dim, hidden_dim, output_dim, num_layers,</span><br><span class="hljs-params">                 dropout, return_embeds=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement a function that initializes self.convs, </span><br>        <span class="hljs-comment"># self.bns, and self.softmax.</span><br><br>        <span class="hljs-built_in">super</span>(GCN, self).__init__()<br><br>        <span class="hljs-comment"># A list of GCNConv layers</span><br>        self.convs = <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># A list of 1D batch normalization layers</span><br>        self.bns = <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># The log softmax layer</span><br>        self.softmax = <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment">############# Your code here ############</span><br>        <span class="hljs-comment">## Note:</span><br>        <span class="hljs-comment">## 1. You should use torch.nn.ModuleList for self.convs and self.bns</span><br>        <span class="hljs-comment">## 2. self.convs has num_layers GCNConv layers</span><br>        <span class="hljs-comment">## 3. self.bns has num_layers - 1 BatchNorm1d layers</span><br>        <span class="hljs-comment">## 4. You should use torch.nn.LogSoftmax for self.softmax</span><br>        <span class="hljs-comment">## 5. The parameters you can set for GCNConv include &#x27;in_channels&#x27; and </span><br>        <span class="hljs-comment">## &#x27;out_channels&#x27;. For more information please refer to the documentation:</span><br>        <span class="hljs-comment">## https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GCNConv</span><br>        <span class="hljs-comment">## 6. The only parameter you need to set for BatchNorm1d is &#x27;num_features&#x27;</span><br>        <span class="hljs-comment">## For more information please refer to the documentation: </span><br>        <span class="hljs-comment">## https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm1d.html</span><br>        <span class="hljs-comment">## (~10 lines of code)</span><br>        self.num_layers = num_layers<br>        self.convs = torch.nn.ModuleList(<br>            [GCNConv(input_dim,hidden_dim)] + <br>            [GCNConv(hidden_dim,hidden_dim) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.num_layers-<span class="hljs-number">2</span>)] +<br>            [GCNConv(hidden_dim,output_dim)])<br><br>        self.bns = torch.nn.ModuleList([torch.nn.BatchNorm1d(hidden_dim) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.num_layers - <span class="hljs-number">1</span>)])<br>        self.softmax = torch.nn.LogSoftmax()<br>        <span class="hljs-comment">#########################################</span><br><br>        <span class="hljs-comment"># Probability of an element getting zeroed</span><br>        self.dropout = dropout<br><br>        <span class="hljs-comment"># Skip classification layer and return node embeddings</span><br>        self.return_embeds = return_embeds<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset_parameters</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> conv <span class="hljs-keyword">in</span> self.convs:<br>            conv.reset_parameters()<br>        <span class="hljs-keyword">for</span> bn <span class="hljs-keyword">in</span> self.bns:<br>            bn.reset_parameters()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x, adj_t</span>):<br>        <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement a function that takes the feature tensor x and</span><br>        <span class="hljs-comment"># edge_index tensor adj_t and returns the output tensor as</span><br>        <span class="hljs-comment"># shown in the figure.</span><br><br>        out = <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment">############# Your code here ############</span><br>        <span class="hljs-comment">## Note:</span><br>        <span class="hljs-comment">## 1. Construct the network as shown in the figure</span><br>        <span class="hljs-comment">## 2. torch.nn.functional.relu and torch.nn.functional.dropout are useful</span><br>        <span class="hljs-comment">## For more information please refer to the documentation:</span><br>        <span class="hljs-comment">## https://pytorch.org/docs/stable/nn.functional.html</span><br>        <span class="hljs-comment">## 3. Don&#x27;t forget to set F.dropout training to self.training</span><br>        <span class="hljs-comment">## 4. If return_embeds is True, then skip the last softmax layer</span><br>        <span class="hljs-comment">## (~7 lines of code)</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.num_layers - <span class="hljs-number">1</span>):<br>          x = self.convs[i](x, adj_t)<br>          x = self.bns[i](x)<br>          x = F.relu(x)<br>          x = F.dropout(x,p=self.dropout,training=self.training)<br>        x = self.convs[self.num_layers-<span class="hljs-number">1</span>](x, adj_t)<br>        <span class="hljs-keyword">if</span> self.return_embeds :<br>          out = x<br>        <span class="hljs-keyword">else</span>:<br>          out = self.softmax(x)<br>        <span class="hljs-comment">#########################################</span><br><br>        <span class="hljs-keyword">return</span> out<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model, data, train_idx, optimizer, loss_fn</span>):<br>    <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement a function that trains the model by </span><br>    <span class="hljs-comment"># using the given optimizer and loss_fn.</span><br>    model.train()<br>    loss = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment">############# Your code here ############</span><br>    <span class="hljs-comment">## Note:</span><br>    <span class="hljs-comment">## 1. Zero grad the optimizer</span><br>    <span class="hljs-comment">## 2. Feed the data into the model</span><br>    <span class="hljs-comment">## 3. Slice the model output and label by train_idx</span><br>    <span class="hljs-comment">## 4. Feed the sliced output and label to loss_fn</span><br>    <span class="hljs-comment">## (~4 lines of code)</span><br>    optimizer.zero_grad()<br>    out = model(data.x,data.adj_t)<br>    loss = loss_fn(out[train_idx], data.y[train_idx].reshape(-<span class="hljs-number">1</span>))<br>    <span class="hljs-comment">#########################################</span><br><br>    loss.backward()<br>    optimizer.step()<br><br>    <span class="hljs-keyword">return</span> loss.item()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Test function here</span><br><span class="hljs-meta">@torch.no_grad()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">model, data, split_idx, evaluator, save_model_results=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement a function that tests the model by </span><br>    <span class="hljs-comment"># using the given split_idx and evaluator.</span><br>    model.<span class="hljs-built_in">eval</span>()<br><br>    <span class="hljs-comment"># The output of model on all data</span><br>    out = <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment">############# Your code here ############</span><br>    <span class="hljs-comment">## (~1 line of code)</span><br>    <span class="hljs-comment">## Note:</span><br>    <span class="hljs-comment">## 1. No index slicing here</span><br>    out = model(data.x,data.adj_t)<br>    <span class="hljs-comment">#########################################</span><br><br>    y_pred = out.argmax(dim=-<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br><br>    train_acc = evaluator.<span class="hljs-built_in">eval</span>(&#123;<br>        <span class="hljs-string">&#x27;y_true&#x27;</span>: data.y[split_idx[<span class="hljs-string">&#x27;train&#x27;</span>]],<br>        <span class="hljs-string">&#x27;y_pred&#x27;</span>: y_pred[split_idx[<span class="hljs-string">&#x27;train&#x27;</span>]],<br>    &#125;)[<span class="hljs-string">&#x27;acc&#x27;</span>]<br>    valid_acc = evaluator.<span class="hljs-built_in">eval</span>(&#123;<br>        <span class="hljs-string">&#x27;y_true&#x27;</span>: data.y[split_idx[<span class="hljs-string">&#x27;valid&#x27;</span>]],<br>        <span class="hljs-string">&#x27;y_pred&#x27;</span>: y_pred[split_idx[<span class="hljs-string">&#x27;valid&#x27;</span>]],<br>    &#125;)[<span class="hljs-string">&#x27;acc&#x27;</span>]<br>    test_acc = evaluator.<span class="hljs-built_in">eval</span>(&#123;<br>        <span class="hljs-string">&#x27;y_true&#x27;</span>: data.y[split_idx[<span class="hljs-string">&#x27;test&#x27;</span>]],<br>        <span class="hljs-string">&#x27;y_pred&#x27;</span>: y_pred[split_idx[<span class="hljs-string">&#x27;test&#x27;</span>]],<br>    &#125;)[<span class="hljs-string">&#x27;acc&#x27;</span>]<br><br>    <span class="hljs-keyword">if</span> save_model_results:<br>      <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Saving Model Predictions&quot;</span>)<br><br>      data = &#123;&#125;<br>      data[<span class="hljs-string">&#x27;y_pred&#x27;</span>] = y_pred.view(-<span class="hljs-number">1</span>).cpu().detach().numpy()<br><br>      df = pd.DataFrame(data=data)<br>      <span class="hljs-comment"># Save locally as csv</span><br>      df.to_csv(<span class="hljs-string">&#x27;ogbn-arxiv_node.csv&#x27;</span>, sep=<span class="hljs-string">&#x27;,&#x27;</span>, index=<span class="hljs-literal">False</span>)<br><br><br>    <span class="hljs-keyword">return</span> train_acc, valid_acc, test_acc<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Please do not change the args</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  args = &#123;<br>      <span class="hljs-string">&#x27;device&#x27;</span>: device,<br>      <span class="hljs-string">&#x27;num_layers&#x27;</span>: <span class="hljs-number">3</span>,<br>      <span class="hljs-string">&#x27;hidden_dim&#x27;</span>: <span class="hljs-number">256</span>,<br>      <span class="hljs-string">&#x27;dropout&#x27;</span>: <span class="hljs-number">0.5</span>,<br>      <span class="hljs-string">&#x27;lr&#x27;</span>: <span class="hljs-number">0.01</span>,<br>      <span class="hljs-string">&#x27;epochs&#x27;</span>: <span class="hljs-number">100</span>,<br>  &#125;<br>  args<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  model = GCN(data.num_features, args[<span class="hljs-string">&#x27;hidden_dim&#x27;</span>],<br>              dataset.num_classes, args[<span class="hljs-string">&#x27;num_layers&#x27;</span>],<br>              args[<span class="hljs-string">&#x27;dropout&#x27;</span>]).to(device)<br>  evaluator = Evaluator(name=<span class="hljs-string">&#x27;ogbn-arxiv&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">model.convs<br></code></pre></td></tr></table></figure><pre><code class="hljs">ModuleList(  (0): GCNConv(128, 256)  (1): GCNConv(256, 256)  (2): GCNConv(256, 40))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  <span class="hljs-comment"># reset the parameters to initial random value</span><br>  model.reset_parameters()<br><br>  optimizer = torch.optim.Adam(model.parameters(), lr=args[<span class="hljs-string">&#x27;lr&#x27;</span>])<br>  loss_fn = F.nll_loss<br><br>  best_model = <span class="hljs-literal">None</span><br>  best_valid_acc = <span class="hljs-number">0</span><br><br>  <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> + args[<span class="hljs-string">&quot;epochs&quot;</span>]):<br>    loss = train(model, data, train_idx, optimizer, loss_fn)<br>    result = test(model, data, split_idx, evaluator)<br>    train_acc, valid_acc, test_acc = result<br>    <span class="hljs-keyword">if</span> valid_acc &gt; best_valid_acc:<br>        best_valid_acc = valid_acc<br>        best_model = copy.deepcopy(model)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Epoch: <span class="hljs-subst">&#123;epoch:02d&#125;</span>, &#x27;</span><br>          <span class="hljs-string">f&#x27;Loss: <span class="hljs-subst">&#123;loss:<span class="hljs-number">.4</span>f&#125;</span>, &#x27;</span><br>          <span class="hljs-string">f&#x27;Train: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * train_acc:<span class="hljs-number">.2</span>f&#125;</span>%, &#x27;</span><br>          <span class="hljs-string">f&#x27;Valid: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * valid_acc:<span class="hljs-number">.2</span>f&#125;</span>% &#x27;</span><br>          <span class="hljs-string">f&#x27;Test: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * test_acc:<span class="hljs-number">.2</span>f&#125;</span>%&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:78: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.Epoch: 01, Loss: 4.1033, Train: 27.09%, Valid: 29.73% Test: 26.61%Epoch: 02, Loss: 2.4399, Train: 26.64%, Valid: 24.23% Test: 28.44%Epoch: 03, Loss: 1.9616, Train: 26.83%, Valid: 16.91% Test: 14.72%Epoch: 04, Loss: 1.8343, Train: 28.58%, Valid: 15.74% Test: 12.46%Epoch: 05, Loss: 1.6758, Train: 30.91%, Valid: 20.28% Test: 17.73%Epoch: 06, Loss: 1.6027, Train: 33.16%, Valid: 27.19% Test: 25.46%Epoch: 07, Loss: 1.5436, Train: 34.38%, Valid: 30.09% Test: 29.57%Epoch: 08, Loss: 1.4816, Train: 36.40%, Valid: 33.96% Test: 35.30%Epoch: 09, Loss: 1.4277, Train: 39.82%, Valid: 39.25% Test: 43.29%Epoch: 10, Loss: 1.4086, Train: 43.05%, Valid: 42.01% Test: 46.15%Epoch: 11, Loss: 1.3740, Train: 46.01%, Valid: 44.16% Test: 47.89%Epoch: 12, Loss: 1.3430, Train: 49.18%, Valid: 47.97% Test: 51.24%Epoch: 13, Loss: 1.3192, Train: 52.03%, Valid: 51.83% Test: 54.47%Epoch: 14, Loss: 1.2995, Train: 54.05%, Valid: 54.74% Test: 57.26%Epoch: 15, Loss: 1.2774, Train: 55.88%, Valid: 57.32% Test: 59.08%Epoch: 16, Loss: 1.2582, Train: 57.55%, Valid: 59.13% Test: 60.06%Epoch: 17, Loss: 1.2439, Train: 58.61%, Valid: 60.20% Test: 61.11%Epoch: 18, Loss: 1.2282, Train: 59.16%, Valid: 60.52% Test: 61.89%Epoch: 19, Loss: 1.2170, Train: 59.45%, Valid: 60.19% Test: 62.18%Epoch: 20, Loss: 1.1986, Train: 60.01%, Valid: 60.50% Test: 62.57%Epoch: 21, Loss: 1.1874, Train: 60.63%, Valid: 61.09% Test: 62.82%Epoch: 22, Loss: 1.1724, Train: 61.08%, Valid: 61.48% Test: 63.07%Epoch: 23, Loss: 1.1602, Train: 61.42%, Valid: 61.66% Test: 63.16%Epoch: 24, Loss: 1.1519, Train: 62.03%, Valid: 62.16% Test: 63.46%Epoch: 25, Loss: 1.1451, Train: 62.99%, Valid: 63.15% Test: 64.23%Epoch: 26, Loss: 1.1398, Train: 64.04%, Valid: 64.03% Test: 64.89%Epoch: 27, Loss: 1.1307, Train: 65.06%, Valid: 65.05% Test: 65.56%Epoch: 28, Loss: 1.1206, Train: 65.98%, Valid: 65.64% Test: 65.73%Epoch: 29, Loss: 1.1140, Train: 66.77%, Valid: 66.28% Test: 65.64%Epoch: 30, Loss: 1.1101, Train: 67.40%, Valid: 66.95% Test: 66.20%Epoch: 31, Loss: 1.1046, Train: 67.77%, Valid: 67.42% Test: 67.15%Epoch: 32, Loss: 1.0961, Train: 67.67%, Valid: 67.28% Test: 67.73%Epoch: 33, Loss: 1.0916, Train: 67.43%, Valid: 67.16% Test: 67.91%Epoch: 34, Loss: 1.0865, Train: 67.36%, Valid: 67.18% Test: 67.91%Epoch: 35, Loss: 1.0757, Train: 67.53%, Valid: 67.34% Test: 68.08%Epoch: 36, Loss: 1.0746, Train: 68.01%, Valid: 67.87% Test: 68.27%Epoch: 37, Loss: 1.0709, Train: 68.60%, Valid: 68.52% Test: 68.41%Epoch: 38, Loss: 1.0660, Train: 69.08%, Valid: 68.87% Test: 68.58%Epoch: 39, Loss: 1.0616, Train: 69.52%, Valid: 69.17% Test: 68.88%Epoch: 40, Loss: 1.0581, Train: 69.80%, Valid: 69.42% Test: 69.12%Epoch: 41, Loss: 1.0546, Train: 69.92%, Valid: 69.43% Test: 69.35%Epoch: 42, Loss: 1.0500, Train: 69.99%, Valid: 69.57% Test: 69.40%Epoch: 43, Loss: 1.0427, Train: 70.07%, Valid: 69.57% Test: 69.41%Epoch: 44, Loss: 1.0425, Train: 70.27%, Valid: 69.71% Test: 69.46%Epoch: 45, Loss: 1.0397, Train: 70.39%, Valid: 69.82% Test: 69.61%Epoch: 46, Loss: 1.0344, Train: 70.50%, Valid: 69.98% Test: 69.68%Epoch: 47, Loss: 1.0285, Train: 70.66%, Valid: 70.16% Test: 69.82%Epoch: 48, Loss: 1.0244, Train: 70.80%, Valid: 70.35% Test: 70.00%Epoch: 49, Loss: 1.0254, Train: 71.00%, Valid: 70.48% Test: 70.02%Epoch: 50, Loss: 1.0170, Train: 71.11%, Valid: 70.49% Test: 69.76%Epoch: 51, Loss: 1.0184, Train: 71.14%, Valid: 70.37% Test: 69.58%Epoch: 52, Loss: 1.0163, Train: 71.09%, Valid: 70.43% Test: 69.59%Epoch: 53, Loss: 1.0116, Train: 71.03%, Valid: 70.41% Test: 69.82%Epoch: 54, Loss: 1.0086, Train: 71.12%, Valid: 70.52% Test: 69.89%Epoch: 55, Loss: 1.0072, Train: 71.22%, Valid: 70.71% Test: 70.05%Epoch: 56, Loss: 1.0051, Train: 71.36%, Valid: 70.88% Test: 69.98%Epoch: 57, Loss: 1.0010, Train: 71.49%, Valid: 70.94% Test: 69.96%Epoch: 58, Loss: 0.9991, Train: 71.66%, Valid: 70.75% Test: 69.87%Epoch: 59, Loss: 0.9962, Train: 71.69%, Valid: 70.70% Test: 69.88%Epoch: 60, Loss: 0.9930, Train: 71.71%, Valid: 70.77% Test: 70.09%Epoch: 61, Loss: 0.9925, Train: 71.71%, Valid: 70.82% Test: 70.22%Epoch: 62, Loss: 0.9894, Train: 71.81%, Valid: 70.88% Test: 70.22%Epoch: 63, Loss: 0.9862, Train: 71.96%, Valid: 71.00% Test: 70.29%Epoch: 64, Loss: 0.9880, Train: 72.08%, Valid: 71.11% Test: 70.29%Epoch: 65, Loss: 0.9831, Train: 72.18%, Valid: 71.01% Test: 70.15%Epoch: 66, Loss: 0.9821, Train: 72.24%, Valid: 71.01% Test: 70.09%Epoch: 67, Loss: 0.9791, Train: 72.29%, Valid: 70.99% Test: 70.02%Epoch: 68, Loss: 0.9775, Train: 72.35%, Valid: 71.07% Test: 70.08%Epoch: 69, Loss: 0.9716, Train: 72.26%, Valid: 71.14% Test: 70.15%Epoch: 70, Loss: 0.9716, Train: 72.30%, Valid: 71.01% Test: 70.05%Epoch: 71, Loss: 0.9709, Train: 72.38%, Valid: 71.00% Test: 69.94%Epoch: 72, Loss: 0.9719, Train: 72.46%, Valid: 70.86% Test: 69.75%Epoch: 73, Loss: 0.9659, Train: 72.53%, Valid: 71.04% Test: 69.91%Epoch: 74, Loss: 0.9669, Train: 72.58%, Valid: 71.24% Test: 70.23%Epoch: 75, Loss: 0.9637, Train: 72.66%, Valid: 71.39% Test: 70.35%Epoch: 76, Loss: 0.9607, Train: 72.71%, Valid: 71.13% Test: 69.67%Epoch: 77, Loss: 0.9588, Train: 72.72%, Valid: 70.88% Test: 69.13%Epoch: 78, Loss: 0.9592, Train: 72.85%, Valid: 71.09% Test: 69.73%Epoch: 79, Loss: 0.9569, Train: 72.88%, Valid: 71.56% Test: 70.79%Epoch: 80, Loss: 0.9550, Train: 72.81%, Valid: 71.50% Test: 70.85%Epoch: 81, Loss: 0.9504, Train: 72.75%, Valid: 71.25% Test: 70.50%Epoch: 82, Loss: 0.9495, Train: 72.78%, Valid: 71.20% Test: 70.13%Epoch: 83, Loss: 0.9503, Train: 72.85%, Valid: 71.17% Test: 70.13%Epoch: 84, Loss: 0.9459, Train: 72.95%, Valid: 71.17% Test: 69.93%Epoch: 85, Loss: 0.9414, Train: 73.03%, Valid: 71.21% Test: 70.01%Epoch: 86, Loss: 0.9431, Train: 73.12%, Valid: 71.48% Test: 70.46%Epoch: 87, Loss: 0.9416, Train: 73.13%, Valid: 71.38% Test: 70.13%Epoch: 88, Loss: 0.9403, Train: 73.22%, Valid: 71.48% Test: 70.44%Epoch: 89, Loss: 0.9388, Train: 73.09%, Valid: 71.58% Test: 70.74%Epoch: 90, Loss: 0.9381, Train: 72.96%, Valid: 71.49% Test: 70.93%Epoch: 91, Loss: 0.9347, Train: 73.26%, Valid: 71.59% Test: 70.70%Epoch: 92, Loss: 0.9320, Train: 73.25%, Valid: 71.31% Test: 70.03%Epoch: 93, Loss: 0.9316, Train: 73.17%, Valid: 71.03% Test: 69.63%Epoch: 94, Loss: 0.9325, Train: 73.39%, Valid: 71.52% Test: 70.41%Epoch: 95, Loss: 0.9309, Train: 73.37%, Valid: 71.75% Test: 71.18%Epoch: 96, Loss: 0.9268, Train: 73.21%, Valid: 71.80% Test: 71.35%Epoch: 97, Loss: 0.9271, Train: 73.38%, Valid: 71.67% Test: 71.22%Epoch: 98, Loss: 0.9239, Train: 73.50%, Valid: 71.62% Test: 71.12%Epoch: 99, Loss: 0.9245, Train: 73.62%, Valid: 71.61% Test: 70.90%Epoch: 100, Loss: 0.9250, Train: 73.64%, Valid: 71.55% Test: 70.65%</code></pre><h5 id="Question-5-验证和测试中最好的模型是什么？"><a href="#Question-5-验证和测试中最好的模型是什么？" class="headerlink" title="Question 5: 验证和测试中最好的模型是什么？"></a>Question 5: 验证和测试中最好的模型是什么？</h5><p>Run the cell below to see the results of your best of model and save your model’s predictions to a file named <em>ogbn-arxiv_node.csv</em>. </p><p>You can view this file by clicking on the <em>Folder</em> icon on the left side pannel. As in Colab 1, when you sumbit your assignment, you will have to download this file and attatch it to your submission.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  best_result = test(best_model, data, split_idx, evaluator, save_model_results=<span class="hljs-literal">True</span>)<br>  train_acc, valid_acc, test_acc = best_result<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Best model: &#x27;</span><br>        <span class="hljs-string">f&#x27;Train: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * train_acc:<span class="hljs-number">.2</span>f&#125;</span>%, &#x27;</span><br>        <span class="hljs-string">f&#x27;Valid: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * valid_acc:<span class="hljs-number">.2</span>f&#125;</span>% &#x27;</span><br>        <span class="hljs-string">f&#x27;Test: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * test_acc:<span class="hljs-number">.2</span>f&#125;</span>%&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Saving Model PredictionsBest model: Train: 73.21%, Valid: 71.80% Test: 71.35%/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:78: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.</code></pre><h3 id="GNN-图类别预测"><a href="#GNN-图类别预测" class="headerlink" title="GNN: 图类别预测"></a>GNN: 图类别预测</h3><p>In this section we will create a graph neural network for graph property prediction (graph classification).</p><h4 id="Load-and-preprocess-the-dataset"><a href="#Load-and-preprocess-the-dataset" class="headerlink" title="Load and preprocess the dataset"></a>Load and preprocess the dataset</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ogb.graphproppred <span class="hljs-keyword">import</span> PygGraphPropPredDataset, Evaluator<br><span class="hljs-keyword">from</span> torch_geometric.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> tqdm.notebook <span class="hljs-keyword">import</span> tqdm<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  <span class="hljs-comment"># Load the dataset </span><br>  dataset = PygGraphPropPredDataset(name=<span class="hljs-string">&#x27;ogbg-molhiv&#x27;</span>)<br><br>  device = <span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Device: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(device))<br><br>  split_idx = dataset.get_idx_split()<br><br>  <span class="hljs-comment"># Check task type</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Task type: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(dataset.task_type))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Downloading http://snap.stanford.edu/ogb/data/graphproppred/csv_mol_download/hiv.zipDownloaded 0.00 GB: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:02&lt;00:00,  1.33it/s]Processing...Extracting dataset/hiv.zipLoading necessary files...This might take a while.Processing graphs...100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 41127/41127 [00:00&lt;00:00, 102734.99it/s]Converting graphs into PyG objects...100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 41127/41127 [00:00&lt;00:00, 43779.36it/s]Saving...Device: cudaTask type: binary classificationDone!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Load the dataset splits into corresponding dataloaders</span><br><span class="hljs-comment"># We will train the graph classification task on a batch of 32 graphs</span><br><span class="hljs-comment"># Shuffle the order of graphs for training set</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  train_loader = DataLoader(dataset[split_idx[<span class="hljs-string">&quot;train&quot;</span>]], batch_size=<span class="hljs-number">32</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>)<br>  valid_loader = DataLoader(dataset[split_idx[<span class="hljs-string">&quot;valid&quot;</span>]], batch_size=<span class="hljs-number">32</span>, shuffle=<span class="hljs-literal">False</span>, num_workers=<span class="hljs-number">0</span>)<br>  test_loader = DataLoader(dataset[split_idx[<span class="hljs-string">&quot;test&quot;</span>]], batch_size=<span class="hljs-number">32</span>, shuffle=<span class="hljs-literal">False</span>, num_workers=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">/usr/local/lib/python3.7/dist-packages/torch_geometric/deprecation.py:12: UserWarning: &#39;data.DataLoader&#39; is deprecated, use &#39;loader.DataLoader&#39; instead  warnings.warn(out)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  <span class="hljs-comment"># Please do not change the args</span><br>  args = &#123;<br>      <span class="hljs-string">&#x27;device&#x27;</span>: device,<br>      <span class="hljs-string">&#x27;num_layers&#x27;</span>: <span class="hljs-number">5</span>,<br>      <span class="hljs-string">&#x27;hidden_dim&#x27;</span>: <span class="hljs-number">256</span>,<br>      <span class="hljs-string">&#x27;dropout&#x27;</span>: <span class="hljs-number">0.5</span>,<br>      <span class="hljs-string">&#x27;lr&#x27;</span>: <span class="hljs-number">0.001</span>,<br>      <span class="hljs-string">&#x27;epochs&#x27;</span>: <span class="hljs-number">30</span>,<br>  &#125;<br>  args<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">test = dataset[<span class="hljs-number">1</span>:<span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">test[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">Data(edge_index=[2, 48], edge_attr=[48, 3], x=[21, 9], y=[1, 1], num_nodes=21)</code></pre><h4 id="Graph-Prediction-Model"><a href="#Graph-Prediction-Model" class="headerlink" title="Graph Prediction Model"></a>Graph Prediction Model</h4><p>使用上面的 GCN 模型产生图中节点的 embedding，然后使用池化操作（这里是平均）得到每个图的 embedding（对每个节点的 embedding 进行按元素平均），<code>torch_geometric.data.Batch</code> 中的 batch 有利于我们做这个池化操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">model<br></code></pre></td></tr></table></figure><pre><code class="hljs">GCN_Graph(  (node_encoder): AtomEncoder(    (atom_embedding_list): ModuleList(      (0): Embedding(119, 256)      (1): Embedding(4, 256)      (2): Embedding(12, 256)      (3): Embedding(12, 256)      (4): Embedding(10, 256)      (5): Embedding(6, 256)      (6): Embedding(6, 256)      (7): Embedding(2, 256)      (8): Embedding(2, 256)    )  )  (gnn_node): GCN(    (convs): ModuleList(      (0): GCNConv(256, 256)      (1): GCNConv(256, 256)      (2): GCNConv(256, 256)      (3): GCNConv(256, 256)      (4): GCNConv(256, 256)    )    (bns): ModuleList(      (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (3): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )    (softmax): LogSoftmax(dim=None)  )  (linear): Linear(in_features=256, out_features=1, bias=True))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ogb.graphproppred.mol_encoder <span class="hljs-keyword">import</span> AtomEncoder<br><span class="hljs-keyword">from</span> torch_geometric.nn <span class="hljs-keyword">import</span> global_add_pool, global_mean_pool<br><br><span class="hljs-comment">### GCN to predict graph property</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GCN_Graph</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, hidden_dim, output_dim, num_layers, dropout</span>):<br>        <span class="hljs-built_in">super</span>(GCN_Graph, self).__init__()<br><br>        <span class="hljs-comment"># Load encoders for Atoms in molecule graphs</span><br>        self.node_encoder = AtomEncoder(hidden_dim)<br><br>        <span class="hljs-comment"># Node embedding model</span><br>        <span class="hljs-comment"># Note that the input_dim and output_dim are set to hidden_dim</span><br>        self.gnn_node = GCN(hidden_dim, hidden_dim,<br>            hidden_dim, num_layers, dropout, return_embeds=<span class="hljs-literal">True</span>)<br><br>        self.pool = <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment">############# Your code here ############</span><br>        <span class="hljs-comment">## Note:</span><br>        <span class="hljs-comment">## 1. Initialize self.pool as a global mean pooling layer</span><br>        <span class="hljs-comment">## For more information please refer to the documentation:</span><br>        <span class="hljs-comment">## https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#global-pooling-layers</span><br>        self.pool = global_mean_pool<br>        <span class="hljs-comment">#########################################</span><br><br>        <span class="hljs-comment"># Output layer</span><br>        self.linear = torch.nn.Linear(hidden_dim, output_dim)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset_parameters</span>(<span class="hljs-params">self</span>):<br>      self.gnn_node.reset_parameters()<br>      self.linear.reset_parameters()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, batched_data</span>):<br>        <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement a function that takes as input a </span><br>        <span class="hljs-comment"># mini-batch of graphs (torch_geometric.data.Batch) and </span><br>        <span class="hljs-comment"># returns the predicted graph property for each graph. </span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> Since we are predicting graph level properties,</span><br>        <span class="hljs-comment"># your output will be a tensor with dimension equaling</span><br>        <span class="hljs-comment"># the number of graphs in the mini-batch</span><br><br>    <br>        <span class="hljs-comment"># Extract important attributes of our mini-batch</span><br>        x, edge_index, batch = batched_data.x, batched_data.edge_index, batched_data.batch<br>        embed = self.node_encoder(x)<br><br>        out = <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment">############# Your code here ############</span><br>        <span class="hljs-comment">## Note:</span><br>        <span class="hljs-comment">## 1. Construct node embeddings using existing GCN model</span><br>        <span class="hljs-comment">## 2. Use the global pooling layer to aggregate features for each individual graph</span><br>        <span class="hljs-comment">## For more information please refer to the documentation:</span><br>        <span class="hljs-comment">## https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#global-pooling-layers</span><br>        <span class="hljs-comment">## 3. Use a linear layer to predict each graph&#x27;s property</span><br>        <span class="hljs-comment">## (~3 lines of code)</span><br>        x = self.gnn_node(embed,edge_index)<br>        x = self.pool(x,batch)<br>        out = self.linear(x)<br>        <span class="hljs-comment">#########################################</span><br><br>        <span class="hljs-keyword">return</span> out<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model, device, data_loader, optimizer, loss_fn</span>):<br>    <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Implement a function that trains your model by </span><br>    <span class="hljs-comment"># using the given optimizer and loss_fn.</span><br>    model.train()<br>    loss = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(tqdm(data_loader, desc=<span class="hljs-string">&quot;Iteration&quot;</span>)):<br>      batch = batch.to(device)<br><br>      <span class="hljs-keyword">if</span> batch.x.shape[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> batch.batch[-<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<span class="hljs-comment">##å�ªæœ‰ä¸€ä¸ªå›¾</span><br>          <span class="hljs-keyword">pass</span><br>      <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment">## ignore nan targets (unlabeled) when computing training loss.</span><br>        is_labeled = batch.y == batch.y<br><br>        <span class="hljs-comment">############# Your code here ############</span><br>        <span class="hljs-comment">## Note:</span><br>        <span class="hljs-comment">## 1. Zero grad the optimizer</span><br>        <span class="hljs-comment">## 2. Feed the data into the model</span><br>        <span class="hljs-comment">## 3. Use `is_labeled` mask to filter output and labels</span><br>        <span class="hljs-comment">## 4. You may need to change the type of label to torch.float32</span><br>        <span class="hljs-comment">## 5. Feed the output and label to the loss_fn</span><br>        <span class="hljs-comment">## (~3 lines of code)</span><br>        optimizer.zero_grad()<br>        out = model(batch)<br>        loss = loss_fn(out[is_labeled], batch.y[is_labeled].<span class="hljs-built_in">type</span>(torch.float32).reshape(-<span class="hljs-number">1</span>))<br>        <span class="hljs-comment">#########################################</span><br><br>        loss.backward()<br>        optimizer.step()<br><br>    <span class="hljs-keyword">return</span> loss.item()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># The evaluation function</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eval</span>(<span class="hljs-params">model, device, loader, evaluator, save_model_results=<span class="hljs-literal">False</span>, save_file=<span class="hljs-literal">None</span></span>):<br>    model.<span class="hljs-built_in">eval</span>()<br>    y_true = []<br>    y_pred = []<br><br>    <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(tqdm(loader, desc=<span class="hljs-string">&quot;Iteration&quot;</span>)):<br>        batch = batch.to(device)<br><br>        <span class="hljs-keyword">if</span> batch.x.shape[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">with</span> torch.no_grad():<br>                pred = model(batch)<br><br>            y_true.append(batch.y.view(pred.shape).detach().cpu())<br>            y_pred.append(pred.detach().cpu())<br><br>    y_true = torch.cat(y_true, dim = <span class="hljs-number">0</span>).numpy()<br>    y_pred = torch.cat(y_pred, dim = <span class="hljs-number">0</span>).numpy()<br><br>    input_dict = &#123;<span class="hljs-string">&quot;y_true&quot;</span>: y_true, <span class="hljs-string">&quot;y_pred&quot;</span>: y_pred&#125;<br><br>    <span class="hljs-keyword">if</span> save_model_results:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Saving Model Predictions&quot;</span>)<br>        <br>        <span class="hljs-comment"># Create a pandas dataframe with a two columns</span><br>        <span class="hljs-comment"># y_pred | y_true</span><br>        data = &#123;&#125;<br>        data[<span class="hljs-string">&#x27;y_pred&#x27;</span>] = y_pred.reshape(-<span class="hljs-number">1</span>)<br>        data[<span class="hljs-string">&#x27;y_true&#x27;</span>] = y_true.reshape(-<span class="hljs-number">1</span>)<br><br>        df = pd.DataFrame(data=data)<br>        <span class="hljs-comment"># Save to csv</span><br>        df.to_csv(<span class="hljs-string">&#x27;ogbg-molhiv_graph_&#x27;</span> + save_file + <span class="hljs-string">&#x27;.csv&#x27;</span>, sep=<span class="hljs-string">&#x27;,&#x27;</span>, index=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">return</span> evaluator.<span class="hljs-built_in">eval</span>(input_dict)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  model = GCN_Graph(args[<span class="hljs-string">&#x27;hidden_dim&#x27;</span>],<br>              dataset.num_tasks, args[<span class="hljs-string">&#x27;num_layers&#x27;</span>],<br>              args[<span class="hljs-string">&#x27;dropout&#x27;</span>]).to(device)<br>  evaluator = Evaluator(name=<span class="hljs-string">&#x27;ogbg-molhiv&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  model.reset_parameters()<br><br>  optimizer = torch.optim.Adam(model.parameters(), lr=args[<span class="hljs-string">&#x27;lr&#x27;</span>])<br>  loss_fn = torch.nn.BCEWithLogitsLoss()<br><br>  best_model = <span class="hljs-literal">None</span><br>  best_valid_acc = <span class="hljs-number">0</span><br><br>  <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> + args[<span class="hljs-string">&quot;epochs&quot;</span>]):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Training...&#x27;</span>)<br>    loss = train(model, device, train_loader, optimizer, loss_fn)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Evaluating...&#x27;</span>)<br>    train_result = <span class="hljs-built_in">eval</span>(model, device, train_loader, evaluator)<br>    val_result = <span class="hljs-built_in">eval</span>(model, device, valid_loader, evaluator)<br>    test_result = <span class="hljs-built_in">eval</span>(model, device, test_loader, evaluator)<br><br>    train_acc, valid_acc, test_acc = train_result[dataset.eval_metric], val_result[dataset.eval_metric], test_result[dataset.eval_metric]<br>    <span class="hljs-keyword">if</span> valid_acc &gt; best_valid_acc:<br>        best_valid_acc = valid_acc<br>        best_model = copy.deepcopy(model)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Epoch: <span class="hljs-subst">&#123;epoch:02d&#125;</span>, &#x27;</span><br>          <span class="hljs-string">f&#x27;Loss: <span class="hljs-subst">&#123;loss:<span class="hljs-number">.4</span>f&#125;</span>, &#x27;</span><br>          <span class="hljs-string">f&#x27;Train: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * train_acc:<span class="hljs-number">.2</span>f&#125;</span>%, &#x27;</span><br>          <span class="hljs-string">f&#x27;Valid: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * valid_acc:<span class="hljs-number">.2</span>f&#125;</span>% &#x27;</span><br>          <span class="hljs-string">f&#x27;Test: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * test_acc:<span class="hljs-number">.2</span>f&#125;</span>%&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Training...Epoch: 30, Loss: 0.0200, Train: 84.28%, Valid: 79.55% Test: 75.39%</code></pre><h5 id="Question-6-验证和测试集中-AUC-最高的模型是哪个？"><a href="#Question-6-验证和测试集中-AUC-最高的模型是哪个？" class="headerlink" title="Question 6: 验证和测试集中 AUC 最高的模型是哪个？"></a>Question 6: 验证和测试集中 AUC 最高的模型是哪个？</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IS_GRADESCOPE_ENV&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.environ:<br>  train_acc = <span class="hljs-built_in">eval</span>(best_model, device, train_loader, evaluator)[dataset.eval_metric]<br>  valid_acc = <span class="hljs-built_in">eval</span>(best_model, device, valid_loader, evaluator, save_model_results=<span class="hljs-literal">True</span>, save_file=<span class="hljs-string">&quot;valid&quot;</span>)[dataset.eval_metric]<br>  test_acc  = <span class="hljs-built_in">eval</span>(best_model, device, test_loader, evaluator, save_model_results=<span class="hljs-literal">True</span>, save_file=<span class="hljs-string">&quot;test&quot;</span>)[dataset.eval_metric]<br><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Best model: &#x27;</span><br>      <span class="hljs-string">f&#x27;Train: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * train_acc:<span class="hljs-number">.2</span>f&#125;</span>%, &#x27;</span><br>      <span class="hljs-string">f&#x27;Valid: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * valid_acc:<span class="hljs-number">.2</span>f&#125;</span>% &#x27;</span><br>      <span class="hljs-string">f&#x27;Test: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * test_acc:<span class="hljs-number">.2</span>f&#125;</span>%&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Iteration:   0%|          | 0/1029 [00:00&lt;?, ?it/s]Iteration:   0%|          | 0/129 [00:00&lt;?, ?it/s]Saving Model PredictionsIteration:   0%|          | 0/129 [00:00&lt;?, ?it/s]Saving Model PredictionsBest model: Train: 84.10%, Valid: 80.21% Test: 74.61%</code></pre>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NetworkX 网络分析</title>
    <link href="/2022/03/31/networkx/"/>
    <url>/2022/03/31/networkx/</url>
    
    <content type="html"><![CDATA[<p>NetworkX 入门 <a href="https://networkx.org/documentation/stable/tutorial.html">Tutorial — NetworkX 2.7.1 documentation</a></p><span id="more"></span><p>NetworkX 是 python 中一个进行网络分析的包；该包提供了图形图对象的类、创建标准网络图的生成器、读取现有数据集、网络分析的算法和一些基本的可视化工具，这篇文章提供了 NetworkX 的基本介绍。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>NetworkX 需要 python 3.8 以上的版本，使用 pip 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install networkx[default]<br><br><span class="hljs-comment">##如果不想要安装依赖，如numpy，scipy等可以使用</span><br>pip install networkx<br><br><span class="hljs-comment">##安装最新的开发版：</span><br>git <span class="hljs-built_in">clone</span> https://github.com/networkx/networkx.git<br><span class="hljs-built_in">cd</span> networkx<br>pip install -e .[default]<br></code></pre></td></tr></table></figure><h3 id="创建图"><a href="#创建图" class="headerlink" title="创建图"></a>创建图</h3><p>创建一个没有节点和边的空图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> networkx <span class="hljs-keyword">as</span> nx<br>G = nx.Graph()<br></code></pre></td></tr></table></figure><p>图是节点和节点对之间关系（边&#x2F;连接）的集合，在 NetworkX 中节点可以是任何可哈希的对象（不可变数据类型），如字符串，图片，甚至是另一个图。</p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>可以使用 <code>add_node</code> 方法来添加节点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">G.add_node(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(G)<br>&gt;&gt; Graph <span class="hljs-keyword">with</span> <span class="hljs-number">1</span> nodes <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> edges<br></code></pre></td></tr></table></figure><p>或者使用 <code>add_nodes_from</code> 从一个可迭代容器中获取数据添加节点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">G.add_nodes_from([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(G)<br>&gt;&gt; Graph <span class="hljs-keyword">with</span> <span class="hljs-number">3</span> nodes <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> edges<br>G.add_nodes_from((<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(G)<br>&gt;&gt; Graph <span class="hljs-keyword">with</span> <span class="hljs-number">5</span> nodes <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> edges<br></code></pre></td></tr></table></figure><p>我们也可以在添加节点时给节点附加属性，此时节点要以元组的形式添加：<code>(节点，表示节点属性的字典)</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">G.add_nodes_from([<br>  (<span class="hljs-string">&quot;n6&quot;</span>,&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>&#125;),<br>  (<span class="hljs-number">7</span>,&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;green&quot;</span>&#125;)<br>])<br><span class="hljs-built_in">print</span>(G)<br>&gt;&gt; Graph <span class="hljs-keyword">with</span> <span class="hljs-number">7</span> nodes <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> edges<br></code></pre></td></tr></table></figure><p>也可以将另一个图中节点全部添加到现有的图中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">H = nx.path_graph(<span class="hljs-number">10</span>) <span class="hljs-comment">##10个节点的线性图</span><br><span class="hljs-built_in">print</span>(H)<br>&gt;&gt; Graph <span class="hljs-keyword">with</span> <span class="hljs-number">10</span> nodes <span class="hljs-keyword">and</span> <span class="hljs-number">9</span> edges<br>G.add_nodes_from(H)<br><span class="hljs-built_in">print</span>(G)<br>&gt;&gt; Graph <span class="hljs-keyword">with</span> <span class="hljs-number">11</span> nodes <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> edges<br></code></pre></td></tr></table></figure><p>可以看到 G 的节点只增加了 4 个，这是因为之前 G 就有 <code>1,2,3,4,5,7</code> 的节点了，而 H 里面节点是 1-10，所以不一样的节点只有 4 个了。前面说过可以使用整个图作为另一个图的节点，所以我们可以把 H 作为一个节点添加到 G 里面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">G.add_node(H)<br><span class="hljs-built_in">print</span>(G)<br>&gt;&gt; Graph <span class="hljs-keyword">with</span> <span class="hljs-number">12</span> nodes <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> edges<br></code></pre></td></tr></table></figure><h3 id="边"><a href="#边" class="headerlink" title="边"></a>边</h3><p>使用 <code>add_edge</code> 往图里面添加边，参数是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">G.add_edge(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>e = (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>G.add_edge(*e)<span class="hljs-comment">##元组需要拆开</span><br></code></pre></td></tr></table></figure><p>添加多个边需要用列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">G.add_edges_from([(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)])<br><span class="hljs-built_in">print</span>(G)<br>&gt;&gt; Graph <span class="hljs-keyword">with</span> <span class="hljs-number">12</span> nodes <span class="hljs-keyword">and</span> <span class="hljs-number">3</span> edges<br></code></pre></td></tr></table></figure><p>边可以像节点一样添加属性：<code>(node1,node2,&#123;属性字典&#125;)</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">G.add_edges_from([<br>  (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,&#123;<span class="hljs-string">&quot;weight&quot;</span>:<span class="hljs-number">3</span>&#125;)<br>])<br></code></pre></td></tr></table></figure><p>也可以直接使用其他图中的边：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">G.add_edges_from(H.edges)<br><span class="hljs-built_in">print</span>(G)<br>&gt;&gt; Graph <span class="hljs-keyword">with</span> <span class="hljs-number">12</span> nodes <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> edges<br></code></pre></td></tr></table></figure><h3 id="检查图中的元素"><a href="#检查图中的元素" class="headerlink" title="检查图中的元素"></a>检查图中的元素</h3><p>有四种基本的图属性：<code>G.nodes</code>, <code>G.edges</code>, <code>G.adj</code>, <code>G.degree</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">G.nodes<br>&gt;&gt; NodeView((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;n6&#x27;</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, &lt;networkx.classes.graph.Graph <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000022A0F0C62E0</span>&gt;))<br>G.edges<br>&gt;&gt; EdgeView([(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">8</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">9</span>)])<br>G.adj<span class="hljs-comment">##每个节点的邻居节点及其属性</span><br>&gt;&gt; AdjacencyView(&#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-number">2</span>: &#123;&#125;, <span class="hljs-number">3</span>: &#123;&#125;, <span class="hljs-number">0</span>: &#123;&#125;&#125;, <span class="hljs-number">2</span>: &#123;<span class="hljs-number">1</span>: &#123;&#125;, <span class="hljs-number">3</span>: &#123;&#125;&#125;, <span class="hljs-number">3</span>: &#123;<span class="hljs-number">2</span>: &#123;&#125;, <span class="hljs-number">1</span>: &#123;&#125;, <span class="hljs-number">4</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">3</span>&#125;&#125;, <span class="hljs-number">4</span>: &#123;<span class="hljs-number">3</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">3</span>&#125;, <span class="hljs-number">5</span>: &#123;&#125;&#125;, <span class="hljs-number">5</span>: &#123;<span class="hljs-number">4</span>: &#123;&#125;, <span class="hljs-number">6</span>: &#123;&#125;&#125;, <span class="hljs-string">&#x27;n6&#x27;</span>: &#123;&#125;, <span class="hljs-number">7</span>: &#123;<span class="hljs-number">6</span>: &#123;&#125;, <span class="hljs-number">8</span>: &#123;&#125;&#125;, <span class="hljs-number">0</span>: &#123;<span class="hljs-number">1</span>: &#123;&#125;&#125;, <span class="hljs-number">6</span>: &#123;<span class="hljs-number">5</span>: &#123;&#125;, <span class="hljs-number">7</span>: &#123;&#125;&#125;, <span class="hljs-number">8</span>: &#123;<span class="hljs-number">7</span>: &#123;&#125;, <span class="hljs-number">9</span>: &#123;&#125;&#125;, <span class="hljs-number">9</span>: &#123;<span class="hljs-number">8</span>: &#123;&#125;&#125;, &lt;networkx.classes.graph.Graph <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000022A0F0C62E0</span>&gt;: &#123;&#125;&#125;)<br>G.degree<span class="hljs-comment">##每个节点的度</span><br>&gt;&gt; DegreeView(&#123;<span class="hljs-number">1</span>: <span class="hljs-number">3</span>, <span class="hljs-number">2</span>: <span class="hljs-number">2</span>, <span class="hljs-number">3</span>: <span class="hljs-number">3</span>, <span class="hljs-number">4</span>: <span class="hljs-number">2</span>, <span class="hljs-number">5</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;n6&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-number">7</span>: <span class="hljs-number">2</span>, <span class="hljs-number">0</span>: <span class="hljs-number">1</span>, <span class="hljs-number">6</span>: <span class="hljs-number">2</span>, <span class="hljs-number">8</span>: <span class="hljs-number">2</span>, <span class="hljs-number">9</span>: <span class="hljs-number">1</span>, &lt;networkx.classes.graph.Graph <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000022A0F0C62E0</span>&gt;: <span class="hljs-number">0</span>&#125;)<br></code></pre></td></tr></table></figure><p>可以看到这些都是一种 <code>view</code> 的数据格式，我们可以将其转化为列表，字典或者其他的容器数据类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>(G.nodes)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;n6&#x27;</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, &lt;networkx.classes.graph.Graph <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000022A0F0C62E0</span>&gt;]<br><span class="hljs-built_in">list</span>(G.edges)<br>&gt;&gt; [(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">8</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">9</span>)]<br></code></pre></td></tr></table></figure><p>我们也可以将其视作字典来根据键选择值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>(G.adj)<span class="hljs-comment">##只是把类似字典的值给拿出来了</span><br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;n6&#x27;</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, &lt;networkx.classes.graph.Graph <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000022A0F0C62E0</span>&gt;]<br><span class="hljs-built_in">list</span>(G.adj)[<span class="hljs-number">1</span>]<br>&gt;&gt; <span class="hljs-number">2</span><br><span class="hljs-built_in">list</span>(G.adj[<span class="hljs-number">1</span>])<span class="hljs-comment">##注意，这才是我们想要的第二个节点的邻居节点</span><br>&gt;&gt; [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>还可以展示一部分节点的边和度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">G.edges([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-comment">##和节点2 3 有连接的边</span><br>&gt;&gt; EdgeDataView([(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)])<br>G.degree([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>&gt;&gt; DegreeView(&#123;<span class="hljs-number">2</span>: <span class="hljs-number">2</span>, <span class="hljs-number">3</span>: <span class="hljs-number">3</span>&#125;)<br></code></pre></td></tr></table></figure><h3 id="从图中移除元素"><a href="#从图中移除元素" class="headerlink" title="从图中移除元素"></a>从图中移除元素</h3><p>移除元素和添加元素的方法类似，使用 <code>remove_node</code>, <code>remove_nodes_from</code>, <code>remove_edge</code>, <code>remove_edges_from</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>(G.nodes)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;n6&#x27;</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, &lt;networkx.classes.graph.Graph <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000022A0F0C62E0</span>&gt;]<br>G.remove_node(<span class="hljs-number">2</span>)<br>G.add_nodes_from([<span class="hljs-string">&quot;q&quot;</span>,<span class="hljs-string">&quot;m&quot;</span>])<br><span class="hljs-built_in">list</span>(G.nodes)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;n6&#x27;</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, &lt;networkx.classes.graph.Graph <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000022A0F0C62E0</span>&gt;, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>]<br>G.remove_nodes_from(<span class="hljs-string">&quot;qm&quot;</span>)<br><span class="hljs-built_in">list</span>(G.nodes)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;n6&#x27;</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, &lt;networkx.classes.graph.Graph <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000022A0F0C62E0</span>&gt;]<br><span class="hljs-built_in">list</span>(G.edges)<br>&gt;&gt; [(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">8</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">9</span>)]<br>G.remove_edge(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">list</span>(G.edges)<br>&gt;&gt; [(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">8</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">9</span>)]<br></code></pre></td></tr></table></figure><h3 id="使用图构造器"><a href="#使用图构造器" class="headerlink" title="使用图构造器"></a>使用图构造器</h3><p>创建图不一定需要像上面那么逐步的加入点和边，我们可以先创建图的结构然后使用特定图类型的构造器来基于这些预先创建的结构来生成图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">G.clear()<span class="hljs-comment">##清空图</span><br><span class="hljs-built_in">print</span>(G)<br>&gt;&gt; Graph <span class="hljs-keyword">with</span> <span class="hljs-number">0</span> nodes <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> edges<br>G.add_edge(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>H = nx.DiGraph(G) <span class="hljs-comment">##基于已有的图创建一个有向图</span><br><span class="hljs-built_in">list</span>(H.edges())<br>&gt;&gt; [(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)]<br>edgelist = [(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)]<br>H = nx.Graph(edgelist)<br><span class="hljs-built_in">list</span>(H.edges())<br>&gt;&gt; [(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)]<br>adjacency_dict = &#123;<span class="hljs-number">0</span>: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), <span class="hljs-number">1</span>: (<span class="hljs-number">0</span>, <span class="hljs-number">2</span>), <span class="hljs-number">2</span>: (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)&#125;<span class="hljs-comment">##基于邻接关系创建图</span><br>H = nx.Graph(adjacency_dict)<br><span class="hljs-built_in">list</span>(H.edges())<br>&gt;&gt; [(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)]<br></code></pre></td></tr></table></figure><h3 id="获取边和邻居节点"><a href="#获取边和邻居节点" class="headerlink" title="获取边和邻居节点"></a>获取边和邻居节点</h3><p>除了使用上面的 view 方法（Graph.edges, Graph.adj）来查看节点和邻居，也可以使用类似下标的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">G = nx.Graph([(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, &#123;<span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;yellow&quot;</span>&#125;)])<br>G.adj<br>&gt;&gt; AdjacencyView(&#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-number">5</span>: &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>&#125;&#125;, <span class="hljs-number">5</span>: &#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>&#125;&#125;&#125;)<br>G.adj[<span class="hljs-number">5</span>]<br>&gt;&gt; AtlasView(&#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>&#125;&#125;)<br>G[<span class="hljs-number">5</span>]<span class="hljs-comment">##即把与节点5连接的边拿出来</span><br>&gt;&gt; AtlasView(&#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>&#125;&#125;)<br>G.edges[<span class="hljs-number">1</span>,<span class="hljs-number">5</span>]<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>我们也可以通过这种方法来改变边的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">G.add_edge(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>G[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>][<span class="hljs-string">&#x27;color&#x27;</span>] = <span class="hljs-string">&quot;blue&quot;</span><br>G.edges[<span class="hljs-number">1</span>, <span class="hljs-number">5</span>][<span class="hljs-string">&#x27;color&#x27;</span>] = <span class="hljs-string">&quot;red&quot;</span><br>G.adj<br>&gt;&gt; AdjacencyView(&#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-number">5</span>: &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>&#125;, <span class="hljs-number">3</span>: &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>&#125;&#125;, <span class="hljs-number">5</span>: &#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>&#125;&#125;, <span class="hljs-number">3</span>: &#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>&#125;&#125;&#125;)<br></code></pre></td></tr></table></figure><p>可以通过 <code>G.adjacency</code> 或者 <code>G.adj.items</code> 来遍历节点对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">FG = nx.Graph()<br>FG.add_weighted_edges_from([(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0.125</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.75</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1.2</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0.375</span>)])<br><br><span class="hljs-keyword">for</span> n, nbrs <span class="hljs-keyword">in</span> FG.adj.items():<br>  <span class="hljs-keyword">for</span> nbr, eattr <span class="hljs-keyword">in</span> nbrs.items():<br>    wt = eattr[<span class="hljs-string">&#x27;weight&#x27;</span>]<br>    <span class="hljs-keyword">if</span> wt &lt; <span class="hljs-number">0.5</span>: <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;(<span class="hljs-subst">&#123;n&#125;</span>, <span class="hljs-subst">&#123;nbr&#125;</span>, <span class="hljs-subst">&#123;wt:<span class="hljs-number">.3</span>&#125;</span>)&quot;</span>)<br>&gt;&gt; (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0.125</span>)<br>&gt;&gt; (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.125</span>)<br>&gt;&gt; (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0.375</span>)<br>&gt;&gt; (<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.375</span>)<br></code></pre></td></tr></table></figure><p>更简洁的方法是通过 <code>edges.data</code> 来展现属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> (u, v, wt) <span class="hljs-keyword">in</span> FG.edges.data(<span class="hljs-string">&#x27;weight&#x27;</span>):<br>  <span class="hljs-keyword">if</span> wt &lt; <span class="hljs-number">0.5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;(<span class="hljs-subst">&#123;u&#125;</span>, <span class="hljs-subst">&#123;v&#125;</span>, <span class="hljs-subst">&#123;wt:<span class="hljs-number">.3</span>&#125;</span>)&quot;</span>)<br>&gt;&gt; (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0.125</span>)<br>&gt;&gt; (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0.375</span>)<br></code></pre></td></tr></table></figure><h3 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h3><p>可以向图，节点或边添加属性，属性可以是权重，标签，颜色或者任意 python 对象，这些属性都是以键值对形式指定的。</p><p>创建图时就可以直接赋予图属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">G = nx.Graph(day=<span class="hljs-string">&quot;Friday&quot;</span>)<br>G.graph<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;day&#x27;</span>: <span class="hljs-string">&#x27;Friday&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>也可以后来更改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">G.graph[<span class="hljs-string">&#x27;day&#x27;</span>] = <span class="hljs-string">&quot;Monday&quot;</span><br>G.graph<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;day&#x27;</span>: <span class="hljs-string">&#x27;Monday&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>节点和边也是类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##节点</span><br>G.add_node(<span class="hljs-number">1</span>, time=<span class="hljs-string">&#x27;5pm&#x27;</span>)<br>G.add_nodes_from([<span class="hljs-number">3</span>], time=<span class="hljs-string">&#x27;2pm&#x27;</span>)<br>G.add_nodes_from([<br>  (<span class="hljs-number">4</span>,&#123;<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;4pm&quot;</span>&#125;),<br>  (<span class="hljs-number">6</span>,&#123;<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;5pm&quot;</span>&#125;)<br>])<br><br>G.nodes[<span class="hljs-number">6</span>]<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-string">&#x27;5pm&#x27;</span>&#125;<br>G.nodes[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;room&#x27;</span>] = <span class="hljs-number">714</span><span class="hljs-comment">##添加属性</span><br>G.nodes.data()<br><br><span class="hljs-comment">##边</span><br>&gt;&gt; NodeDataView(&#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-string">&#x27;5pm&#x27;</span>, <span class="hljs-string">&#x27;room&#x27;</span>: <span class="hljs-number">714</span>&#125;, <span class="hljs-number">3</span>: &#123;<span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-string">&#x27;2pm&#x27;</span>&#125;, <span class="hljs-number">4</span>: &#123;<span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-string">&#x27;4pm&#x27;</span>&#125;, <span class="hljs-number">6</span>: &#123;<span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-string">&#x27;5pm&#x27;</span>&#125;&#125;)<br>G.add_edge(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, weight=<span class="hljs-number">4.7</span> )<br>G.add_edges_from([(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)], color=<span class="hljs-string">&#x27;red&#x27;</span>)<br>G.add_edges_from([<br>  (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>&#125;), <br>  (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">8</span>&#125;)<br>])<br>G[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>][<span class="hljs-string">&#x27;weight&#x27;</span>] = <span class="hljs-number">4.7</span><br>G.edges[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>][<span class="hljs-string">&#x27;weight&#x27;</span>] = <span class="hljs-number">4.2</span><br><br>G.edges.data()<br>&gt;&gt; EdgeDataView([(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">4.7</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>&#125;), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">4.2</span>&#125;), (<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">8</span>&#125;), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>&#125;)])<br></code></pre></td></tr></table></figure><h3 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h3><p><code>DiGraph</code> 类表示有向边，有向图有一些特殊的特征，比如度可以分成入度和出度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">DG = nx.DiGraph()<br>DG.add_weighted_edges_from([(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0.5</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.75</span>)])<br>DG.out_degree(<span class="hljs-number">1</span>, weight=<span class="hljs-string">&#x27;weight&#x27;</span>)<br>&gt;&gt; <span class="hljs-number">0.5</span><br>DG.out_degree(<span class="hljs-number">3</span>, weight=<span class="hljs-string">&#x27;weight&#x27;</span>)<br>&gt;&gt; <span class="hljs-number">0.75</span><br>DG.degree(<span class="hljs-number">1</span>, weight=<span class="hljs-string">&#x27;weight&#x27;</span>)<span class="hljs-comment">##入度+出度</span><br>&gt;&gt; <span class="hljs-number">1.25</span><br>DG.degree(<span class="hljs-number">1</span>)<span class="hljs-comment">##不考虑边权重</span><br>&gt;&gt; <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>注意有向图里面的 <code>neighbor</code> 和 <code>successor</code> 是一样的，<code>successor</code> 是后继节点，也就是如果 n 指向 m ，那么 m 是 n 的 `<code>successor</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>(DG.successors(<span class="hljs-number">1</span>))<br>&gt;&gt; [<span class="hljs-number">2</span>]<br><span class="hljs-built_in">list</span>(DG.neighbors(<span class="hljs-number">1</span>))<br>&gt;&gt; [<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>可以使用 <code>to_undirected</code> 将有向图转化为无向图或者直接从有向图构建无向图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">G  = DG.to_undirected()<br>G.adj<br><br><span class="hljs-comment">##or</span><br>&gt;&gt; AdjacencyView(&#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-number">2</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.5</span>&#125;, <span class="hljs-number">3</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.75</span>&#125;&#125;, <span class="hljs-number">2</span>: &#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.5</span>&#125;&#125;, <span class="hljs-number">3</span>: &#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.75</span>&#125;&#125;&#125;)<br>H = nx.Graph(DG)<br>H.adj<br>&gt;&gt; AdjacencyView(&#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-number">2</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.5</span>&#125;, <span class="hljs-number">3</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.75</span>&#125;&#125;, <span class="hljs-number">2</span>: &#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.5</span>&#125;&#125;, <span class="hljs-number">3</span>: &#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.75</span>&#125;&#125;&#125;)<br></code></pre></td></tr></table></figure><h3 id="多图"><a href="#多图" class="headerlink" title="多图"></a>多图</h3><p>多图指的是节点对之间有多条边：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">MG = nx.MultiGraph()<br>MG.add_weighted_edges_from([(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0.5</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0.75</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.5</span>)])<br><span class="hljs-built_in">dict</span>(MG.degree(weight=<span class="hljs-string">&#x27;weight&#x27;</span>))<br>&gt;&gt; &#123;<span class="hljs-number">1</span>: <span class="hljs-number">1.25</span>, <span class="hljs-number">2</span>: <span class="hljs-number">1.75</span>, <span class="hljs-number">3</span>: <span class="hljs-number">0.5</span>&#125;<br>MG.adj<br><span class="hljs-comment">##将多图转化为标准的图</span><br>&gt;&gt; MultiAdjacencyView(&#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-number">2</span>: &#123;<span class="hljs-number">0</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.5</span>&#125;, <span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.75</span>&#125;&#125;&#125;, <span class="hljs-number">2</span>: &#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-number">0</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.5</span>&#125;, <span class="hljs-number">1</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.75</span>&#125;&#125;, <span class="hljs-number">3</span>: &#123;<span class="hljs-number">0</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.5</span>&#125;&#125;&#125;, <span class="hljs-number">3</span>: &#123;<span class="hljs-number">2</span>: &#123;<span class="hljs-number">0</span>: &#123;<span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">0.5</span>&#125;&#125;&#125;&#125;)<br>GG = nx.Graph()<br><span class="hljs-keyword">for</span> n, nbrs <span class="hljs-keyword">in</span> MG.adjacency():<br>  <span class="hljs-keyword">for</span> nbr, edict <span class="hljs-keyword">in</span> nbrs.items():<br>    minvalue = <span class="hljs-built_in">min</span>([d[<span class="hljs-string">&#x27;weight&#x27;</span>] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> edict.values()])<br>    GG.add_edge(n, nbr, weight = minvalue)<br></code></pre></td></tr></table></figure><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><p>NetworkX 不是专业绘图的包，但是提供了一些简单的绘图函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>nx.draw(G, with_labels=<span class="hljs-literal">True</span>, font_weight=<span class="hljs-string">&#x27;bold&#x27;</span>)<br>plt.show()  <br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-2-1.png" width="672" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">G = nx.petersen_graph()<br>nx.draw(G, with_labels=<span class="hljs-literal">True</span>, font_weight=<span class="hljs-string">&#x27;bold&#x27;</span>)<br>plt.show() <br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-2-2.png" width="672" /><h3 id="图生成和操作"><a href="#图生成和操作" class="headerlink" title="图生成和操作"></a>图生成和操作</h3><h4 id="使用经典图操作器"><a href="#使用经典图操作器" class="headerlink" title="使用经典图操作器"></a>使用经典图操作器</h4><table><thead><tr><th><a href="https://networkx.org/documentation/stable/reference/generated/networkx.classes.function.subgraph.html#networkx.classes.function.subgraph"><code>subgraph</code></a>(G, nbunch)</th><th>Returns the subgraph induced on nodes in nbunch.</th></tr></thead><tbody><tr><td><a href="https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.operators.binary.union.html#networkx.algorithms.operators.binary.union"><code>union</code></a>(G, H[, rename, name])</td><td>Return the union of graphs G and H.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.operators.binary.disjoint_union.html#networkx.algorithms.operators.binary.disjoint_union"><code>disjoint_union</code></a>(G, H)</td><td>Return the disjoint union of graphs G and H.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.operators.product.cartesian_product.html#networkx.algorithms.operators.product.cartesian_product"><code>cartesian_product</code></a>(G, H)</td><td>Returns the Cartesian product of G and H.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.operators.binary.compose.html#networkx.algorithms.operators.binary.compose"><code>compose</code></a>(G, H)</td><td>Returns a new graph of G composed with H.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.operators.unary.complement.html#networkx.algorithms.operators.unary.complement"><code>complement</code></a>(G)</td><td>Returns the graph complement of G.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/generated/networkx.classes.function.create_empty_copy.html#networkx.classes.function.create_empty_copy"><code>create_empty_copy</code></a>(G[, with_data])</td><td>Returns a copy of the graph G with all of the edges removed.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/generated/networkx.classes.function.to_undirected.html#networkx.classes.function.to_undirected"><code>to_undirected</code></a>(graph)</td><td>Returns an undirected view of the graph <code>graph</code>.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/generated/networkx.classes.function.to_directed.html#networkx.classes.function.to_directed"><code>to_directed</code></a>(graph)</td><td>Returns a directed view of the graph <code>graph</code>.</td></tr></tbody></table><h4 id="调用一些预定义的小型图"><a href="#调用一些预定义的小型图" class="headerlink" title="调用一些预定义的小型图"></a>调用一些预定义的小型图</h4><table><thead><tr><th><a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.small.petersen_graph.html#networkx.generators.small.petersen_graph"><code>petersen_graph</code></a>([create_using])</th><th>Returns the Petersen graph.</th></tr></thead><tbody><tr><td><a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.small.tutte_graph.html#networkx.generators.small.tutte_graph"><code>tutte_graph</code></a>([create_using])</td><td>Returns the Tutte graph.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.small.sedgewick_maze_graph.html#networkx.generators.small.sedgewick_maze_graph"><code>sedgewick_maze_graph</code></a>([create_using])</td><td>Return a small maze with a cycle.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.small.tetrahedral_graph.html#networkx.generators.small.tetrahedral_graph"><code>tetrahedral_graph</code></a>([create_using])</td><td>Returns the 3-regular Platonic Tetrahedral graph.</td></tr></tbody></table><h4 id="经典图的构造器"><a href="#经典图的构造器" class="headerlink" title="经典图的构造器"></a>经典图的构造器</h4><table><thead><tr><th><a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.classic.complete_graph.html#networkx.generators.classic.complete_graph"><code>complete_graph</code></a>(n[, create_using])</th><th>Return the complete graph <code>K_n</code> with n nodes.</th></tr></thead><tbody><tr><td><a href="https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.bipartite.generators.complete_bipartite_graph.html#networkx.algorithms.bipartite.generators.complete_bipartite_graph"><code>complete_bipartite_graph</code></a>(n1, n2[, create_using])</td><td>Returns the complete bipartite graph <code>K_&#123;n_1,n_2&#125;</code>.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.classic.barbell_graph.html#networkx.generators.classic.barbell_graph"><code>barbell_graph</code></a>(m1, m2[, create_using])</td><td>Returns the Barbell Graph: two complete graphs connected by a path.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.classic.lollipop_graph.html#networkx.generators.classic.lollipop_graph"><code>lollipop_graph</code></a>(m, n[, create_using])</td><td>Returns the Lollipop Graph; <code>K_m</code> connected to <code>P_n</code>.</td></tr></tbody></table><h4 id="随机图生成器"><a href="#随机图生成器" class="headerlink" title="随机图生成器"></a>随机图生成器</h4><table><thead><tr><th><a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.random_graphs.erdos_renyi_graph.html#networkx.generators.random_graphs.erdos_renyi_graph"><code>erdos_renyi_graph</code></a>(n, p[, seed, directed])</th><th>Returns a Gn,p random graph, also known as an Erdős-Rényi graph or a binomial graph.</th></tr></thead><tbody><tr><td><a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.random_graphs.watts_strogatz_graph.html#networkx.generators.random_graphs.watts_strogatz_graph"><code>watts_strogatz_graph</code></a>(n, k, p[, seed])</td><td>Returns a Watts–Strogatz small-world graph.</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.random_graphs.barabasi_albert_graph.html#networkx.generators.random_graphs.barabasi_albert_graph"><code>barabasi_albert_graph</code></a>(n, m[, seed, …])</td><td>Returns a random graph using Barabási–Albert preferential attachment</td></tr><tr><td><a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.random_graphs.random_lobster.html#networkx.generators.random_graphs.random_lobster"><code>random_lobster</code></a>(n, p1, p2[, seed])</td><td>Returns a random lobster graph.</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiny基础-3</title>
    <link href="/2022/03/15/mastering_shiny_part3/"/>
    <url>/2022/03/15/mastering_shiny_part3/</url>
    
    <content type="html"><![CDATA[<p>R Shiny 基础知识 参考：<a href="https://mastering-shiny.org/index.html">Mastering Shiny</a></p><span id="more"></span><p>这一部分主要是构建 shiny app 的 “best practices” ，涉及以 R 包，Shiny 模块的形式来组织代码，从而方便地构建较大型的 app，自动化测试以及 app 性能的分析与提升。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>在 UI 中，可能会有一些组件重复出现在多个地方，但是改动非常小；我们可以将这种代码组织到函数中以减少重复，还可以使我们在一个地方控制多个组件的行为</li><li>在 server 中尽量把单个响应抽离出来作为一个一个的函数，更容易进行 debug</li></ul><p>另外将代码组织成函数可以将代码分散到多个文件中，而不是创建一个巨大的 <code>app.R</code> 文件，这样就更易于管理。</p><h3 id="文件组织"><a href="#文件组织" class="headerlink" title="文件组织"></a>文件组织</h3><p>基于函数的大小，可以有两个地方存放这些函数文件：</p><ul><li>一些大的函数（以及这些大函数需要的辅助函数）可以放在 <code>R/&#123;function name&#125;.R</code> 文件中</li><li>一些小的，简单的函数可以放在 <code>R/utils.R</code> 中，如果直接被 UI 使用也可以放到 <code>R/ui.R</code> 中</li></ul><h3 id="UI-函数"><a href="#UI-函数" class="headerlink" title="UI 函数"></a>UI 函数</h3><p>举个例子：如果需要创建多个 <code>sliderInput</code> 范围都是 0-1，从 0.5 开始，步长为 0.1，最直接的方法就是复制多个有着不同 ID 的 <code>sliderInput</code> :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidRow<span class="hljs-punctuation">(</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;alpha&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;alpha&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;beta&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-string">&quot;beta&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;gamma&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;gamma&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;delta&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;delta&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>这种情况下我们可以将其组织成一个函数，只有 ID 是需要指定的参数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">sliderInput01 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  sliderInput<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> id<span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidRow<span class="hljs-punctuation">(</span><br>  sliderInput01<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;alpha&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput01<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;beta&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput01<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;gamma&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput01<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;delta&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>如果使用函数式编程则能够更进一步精简代码：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>purrr<span class="hljs-punctuation">)</span><br><br>vars <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;alpha&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;beta&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;gamma&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;delta&quot;</span><span class="hljs-punctuation">)</span><br>sliders <span class="hljs-operator">&lt;-</span> map<span class="hljs-punctuation">(</span>vars<span class="hljs-punctuation">,</span> sliderInput01<span class="hljs-punctuation">)</span><br>ui <span class="hljs-operator">&lt;-</span> fluidRow<span class="hljs-punctuation">(</span>sliders<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><code>map</code> 对每一个 var 中的值都会调用 <code>sliderInput01</code> ，返回一个列表；当将列表传递给 <code>fluidRow</code> 时会自动将列表拆解，因此每个列表中的元素会成为 <code>fluidRow</code> 容器的一个子元素。另外函数式编程也可以使用数据框来存储函数变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">vars <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-operator">::</span>tribble<span class="hljs-punctuation">(</span><br>  <span class="hljs-operator">~</span> id<span class="hljs-punctuation">,</span>   <span class="hljs-operator">~</span> <span class="hljs-built_in">min</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> <span class="hljs-built_in">max</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;alpha&quot;</span><span class="hljs-punctuation">,</span>     <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>     <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;beta&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>    <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;gamma&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>     <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;delta&quot;</span><span class="hljs-punctuation">,</span>     <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>     <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>使用 <code>tribble</code> 创建一个和参数对应的 tibble，然后使用 <code>pmap</code> 每次对数据框的一行调用函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">mySliderInput <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> id<span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  sliderInput<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> label<span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">max</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>sliders <span class="hljs-operator">&lt;-</span> pmap<span class="hljs-punctuation">(</span>vars<span class="hljs-punctuation">,</span> mySliderInput<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="Server-函数"><a href="#Server-函数" class="headerlink" title="Server 函数"></a>Server 函数</h3><p>相比较 UI 中函数的主要作用是减少代码的重复，Server 中函数的作用就是隔离和测试（debug），一般来说当一个响应表达式较长时（可能大于 10 行）就需要将其独立为一个不使用响应的函数，下面以一个数据上传的简单 app 为例：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  data <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    req<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>file<span class="hljs-punctuation">)</span><br>    <br>    ext <span class="hljs-operator">&lt;-</span> tools<span class="hljs-operator">::</span>file_ext<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>file<span class="hljs-operator">$</span>name<span class="hljs-punctuation">)</span><br>    <span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span>ext<span class="hljs-punctuation">,</span><br>      csv <span class="hljs-operator">=</span> vroom<span class="hljs-operator">::</span>vroom<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>file<span class="hljs-operator">$</span>datapath<span class="hljs-punctuation">,</span> delim <span class="hljs-operator">=</span> <span class="hljs-string">&quot;,&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      tsv <span class="hljs-operator">=</span> vroom<span class="hljs-operator">::</span>vroom<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>file<span class="hljs-operator">$</span>datapath<span class="hljs-punctuation">,</span> delim <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\t&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      validate<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Invalid file; Please upload a .csv or .tsv file&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>head <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    head<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>n<span class="hljs-operator">=</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面的 app 根据用户上传的文件后缀选择不同的读取方式并展示文件的前5行，我们可以将这个响应给隔离出来作为一个函数，参数是文件名和路径：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">load_file <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>name<span class="hljs-punctuation">,</span> path<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  ext <span class="hljs-operator">&lt;-</span> tools<span class="hljs-operator">::</span>file_ext<span class="hljs-punctuation">(</span>name<span class="hljs-punctuation">)</span><br>  <span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span>ext<span class="hljs-punctuation">,</span><br>    csv <span class="hljs-operator">=</span> vroom<span class="hljs-operator">::</span>vroom<span class="hljs-punctuation">(</span>path<span class="hljs-punctuation">,</span> delim <span class="hljs-operator">=</span> <span class="hljs-string">&quot;,&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    tsv <span class="hljs-operator">=</span> vroom<span class="hljs-operator">::</span>vroom<span class="hljs-punctuation">(</span>path<span class="hljs-punctuation">,</span> delim <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\t&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    validate<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Invalid file; Please upload a .csv or .tsv file&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##validate 和 stop 差不多</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样就可以把这个函数放到 <code>R/load_file.R</code> 文件中，然后在响应表达式中直接调用这个函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  data <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    req<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>file<span class="hljs-punctuation">)</span><br>    load_file<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>file<span class="hljs-operator">$</span>name<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>file<span class="hljs-operator">$</span>datapath<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>head <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    head<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>n<span class="hljs-operator">=</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>通过隔离出没有响应的函数，我们可以直接在 console 中测试或者 debug 这个函数，另外也可以较明确的知道这个函数的输入和输出分别是什么。</p><h2 id="Shiny-模块"><a href="#Shiny-模块" class="headerlink" title="Shiny 模块"></a>Shiny 模块</h2><p>shiny 模块和一般的 shiny 区别在于每一个模块都会构建一个命名空间（namespace），而不像普通的 app 那样是共享的（对于每个控件的 ID ，所有的 server 函数都可以通过该 ID 获取输入的内容）；只有具有相同命名空间的函数才可以共享这些变量，那么这些函数就构成了一个模块。因此模块就像一个一个隔离的黑盒子，在模块外面只能获取到模块的输出，下面是一个 app 的例子：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220425162058363.png" style="zoom:50%;" /><h3 id="模块基础"><a href="#模块基础" class="headerlink" title="模块基础"></a>模块基础</h3><p>我们以一个非常简单的画直方图的 app 为例：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Variable&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;bins&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;bins&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  data <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">[[</span>input<span class="hljs-operator">$</span>var<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>hist <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    hist<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> breaks <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>bins<span class="hljs-punctuation">,</span> main <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>var<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>一个模块和一个 app 是类似的，由两部分构成：</p><ul><li>模块 UI 函数：产生 UI</li><li>模块 server 函数：运行 server 函数内的代码</li></ul><p>这两个函数都是以 <code>id</code> 作为参数，并将其作为该模块的命名空间。</p><h4 id="模块-UI"><a href="#模块-UI" class="headerlink" title="模块 UI"></a>模块 UI</h4><p>构建模块 UI 函数需要两步：将 UI 代码放到一个接受 id 为参数的函数中；将之前的 ID 放到 <code>NS</code> (NameSpace) 的函数调用中，例如原来 ID 是 <code>var</code> ，现在就变成 <code>NS(id,&quot;var&quot;)</code> ，将上面 app 的 UI 部分构建成模块 UI 为：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">histogramUI <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  tagList<span class="hljs-punctuation">(</span><br>    selectInput<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Variable&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    numericInput<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;bins&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;bins&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    plotOutput<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>注意这里的 <code>tagList</code> 将多个 UI 控件放在一起，并没有指定布局是什么，我们可以在调用这个模块 UI 时选择合适的布局函数（比如 <code>fluidRow</code> , <code>fluidPage</code> 等）。</p><h4 id="模块-server"><a href="#模块-server" class="headerlink" title="模块 server"></a>模块 server</h4><p>模块的 server 函数是一个两层的函数，第一层和 UI 类似，以 <code>id</code> 作为输入；第二层是一个 <code>moduleServer</code> 函数，这个函数和 server 类似，但是需要有个 <code>id</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">histogramServer <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  moduleServer<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    data <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">[[</span>input<span class="hljs-operator">$</span>var<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>    output<span class="hljs-operator">$</span>hist <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>      hist<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> breaks <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>bins<span class="hljs-punctuation">,</span> main <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>var<span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>moduleServer</code> 函数可以自动附加命名空间，比如在这个函数里面 <code>input$bins</code> 就会自动找命名空间为 <code>id</code> 的 <code>input$bins</code> 变量，不需要像 UI 里面一样加上 <code>NS</code>。</p><p>现在可以把原来的 app 改写成模块的形式：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R">histogramApp <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>    histogramUI<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist1&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br>  server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    histogramServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist1&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br>  shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span>  <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>注意和 shiny 控件一样，一个模块的 UI 和 server 的 <code>id</code> 要一样，不然变量无法共享</p>          </div><p>前面讲过模块就像一个黑盒子，从外面 “看不到” 里面的东西，比如下面这个 app：</p> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  histogramUI<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist1&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;out&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  histogramServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist1&quot;</span><span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>out <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span>paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Bins: &quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>bins<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>output$out</code> 不会依据 <code>input$bins</code> 的值进行更新，因为没有 <code>input$bins</code>，只有 <code>hist1</code> 模块可以看到见 <code>input$bins</code> 这个变量（相当于局部变量）。像函数一样，为了精简 <code>app.R</code> 文件，我们可以将这些模块函数放到一个单独的文件中，比如 <code>R/histogram.R</code>。</p><hr><p>再举个例子，构建四个一样的控件，但是命名空间不一样，也就是四个模块：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment"># module UI</span><br>randomUI <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  fluidRow<span class="hljs-punctuation">(</span><br>    column<span class="hljs-punctuation">(</span>width <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>           textOutput<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;val&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    column<span class="hljs-punctuation">(</span>width <span class="hljs-operator">=</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>           actionButton<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Go!&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment"># module server</span><br>randomServer <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  moduleServer<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    rand <span class="hljs-operator">&lt;-</span> eventReactive<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>go<span class="hljs-punctuation">,</span> sample<span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    output<span class="hljs-operator">$</span>val <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span>rand<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>shiny<span class="hljs-punctuation">)</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  randomUI<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand1&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  randomUI<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand2&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  randomUI<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand3&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  randomUI<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand4&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  randomServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand1&quot;</span><span class="hljs-punctuation">)</span><br>  randomServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand2&quot;</span><span class="hljs-punctuation">)</span><br>  randomServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand3&quot;</span><span class="hljs-punctuation">)</span><br>  randomServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand4&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span>  <br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>shiny<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># generate app</span><br>randomApp <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>    randomUI<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand1&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    randomUI<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand2&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    randomUI<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand3&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    randomUI<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand4&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br>  server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    randomServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand1&quot;</span><span class="hljs-punctuation">)</span><br>    randomServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand2&quot;</span><span class="hljs-punctuation">)</span><br>    randomServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand3&quot;</span><span class="hljs-punctuation">)</span><br>    randomServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rand4&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br>  shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span>  <br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment"># run app</span><br>randomApp<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB249.gif"></p><hr><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>对于模块的 UI 和 server 除了 id 参数外还可以输入其他参数，通过模块 UI 其他的参数可以让我们使用同一个模块函数在不同的地方表现多样的 UI 外观，对于模块 UI 函数来说，其和普通的函数是一样，因此加上其他的参数并没有什么特殊的地方，而对于模块 server 函数来说更需要注意输入和输出是什么。</p><h4 id="UI-输入-server-输出"><a href="#UI-输入-server-输出" class="headerlink" title="UI 输入 + server 输出"></a>UI 输入 + server 输出</h4><p>以一个选择数据集的模块为例：</p><p>对模块 UI ，我们添加了一个 <code>filter</code> 参数（<code>is.data.frame</code> 或者 <code>is.matrix</code> 来筛选供选择的数据集）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R">datasetInput <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> filter <span class="hljs-operator">=</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-built_in">names</span> <span class="hljs-operator">&lt;-</span> ls<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span><span class="hljs-built_in">is.null</span><span class="hljs-punctuation">(</span>filter<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    data <span class="hljs-operator">&lt;-</span> lapply<span class="hljs-punctuation">(</span><span class="hljs-built_in">names</span><span class="hljs-punctuation">,</span> get<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-built_in">names</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">[</span>vapply<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">,</span> filter<span class="hljs-punctuation">,</span> logical<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <br>  selectInput<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;dataset&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Pick a dataset&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>vapply</code> 可以类型判断，返回的值必须和 <code>FUN.VALUE</code> (这里就是 logical(1)，也就是逻辑值) 的长度和数据类型一致，因此返回的是一个布尔型标量，依据这个值来选择数据集的名称。</p><p>对于模块 server，我们只需要使用 <code>get</code> 来依据用户提供的名称提取数据就行了，但是要注意的是模块 server 函数更像一般的函数而不是 server 函数，也就是模块 server 需要返回一个<strong>响应</strong>值（函数最后一个代码的值会被自动返回，因此不需要 return）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">datasetServer <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  moduleServer<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    reactive<span class="hljs-punctuation">(</span>get<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在 app 中使用模块 server 返回的值直接用赋值语句（<code>&lt;-</code>）就可以了：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">datasetApp <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>filter <span class="hljs-operator">=</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>    datasetInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dataset&quot;</span><span class="hljs-punctuation">,</span> filter <span class="hljs-operator">=</span> filter<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br>  server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    data <span class="hljs-operator">&lt;-</span> datasetServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dataset&quot;</span><span class="hljs-punctuation">)</span><br>    output<span class="hljs-operator">$</span>data <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span>head<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br>  shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB250.gif"></p><p>我们再进一步：让用户基于已选择的数据集来选择列展示；这个 UI 很简单，就是一个 <code>selectInput</code> ，但是要注意由于刚开始用户没有选择数据集，因此启动 app 时需要将 <code>choices</code> 设定为 <code>NULL</code>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">selectVarInput <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  selectInput<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Variable&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span> <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>模块 server 函数需要另外两个参数：<code>data</code> 用来选择变量的数据，这个需要是响应的，可以使用上面那个 <code>dataset</code> 模块的输出作为这个参数；<code>filter</code> ，用来控制什么样的变量可供用户选择，因此这个参数不需要响应（由开发者定义的），先将选择变量名的函数独立出来：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">find_vars <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">,</span> filter<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">)</span><span class="hljs-punctuation">[</span>vapply<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">,</span> filter<span class="hljs-punctuation">,</span> logical<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>模块 server 中应该使用 <code>observeEvent</code> 来响应 <code>data</code> 的变化，从而更新 <code>inputSelect</code> ，并且返回的仍然是一个可响应的值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R">selectVarServer <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> data<span class="hljs-punctuation">,</span> filter <span class="hljs-operator">=</span> <span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  moduleServer<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    observeEvent<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>      updateSelectInput<span class="hljs-punctuation">(</span>session<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> find_vars<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> filter<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>    <br>    reactive<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">[[</span>input<span class="hljs-operator">$</span>var<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>对于整个 app 来说，此时就有两个模块了，<code>dataset</code> 和 <code>var</code> 模块，并且 <strong><code>var</code> 模块接受 <code>dataset</code> 模块的输出作为输入</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R">selectVarApp <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>filter <span class="hljs-operator">=</span> <span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>    datasetInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">,</span> is.data.frame<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    selectVarInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    verbatimTextOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;out&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br>  server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    data <span class="hljs-operator">&lt;-</span> datasetServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br>    var <span class="hljs-operator">&lt;-</span> selectVarServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">,</span> data<span class="hljs-punctuation">,</span> filter <span class="hljs-operator">=</span> filter<span class="hljs-punctuation">)</span><br>    output<span class="hljs-operator">$</span>out <span class="hljs-operator">&lt;-</span> renderPrint<span class="hljs-punctuation">(</span>var<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <br>  shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB251.gif"></p><h4 id="Server-输入"><a href="#Server-输入" class="headerlink" title="Server 输入"></a>Server 输入</h4><p>从上面的例子也可以看出：我们设计一个模块 server 时需要考虑函数的每个参数是由谁提供的，如果是由其他开发者或者调用这个模块的人提供，那么这种参数就是在 app 的生命周期中不变的，也就是不需要响应（如上面的 <code>filter</code> 参数）；如果参数是由用户提供的，那么就需要是响应的（如上面的 <code>data</code> 参数）。除了在设计 server 时考虑好，还可以在模块中检查某个值是不是响应的：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs R">selectVarServer <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> data<span class="hljs-punctuation">,</span> filter <span class="hljs-operator">=</span> <span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  stopifnot<span class="hljs-punctuation">(</span>is.reactive<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  stopifnot<span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>is.reactive<span class="hljs-punctuation">(</span>filter<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <br>  moduleServer<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    observeEvent<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>      updateSelectInput<span class="hljs-punctuation">(</span>session<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> find_vars<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> filter<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>    <br>    reactive<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">[[</span>input<span class="hljs-operator">$</span>var<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="在模块内的模块"><a href="#在模块内的模块" class="headerlink" title="在模块内的模块"></a>在模块内的模块</h4><p>模块是可以组合的，比如我们将上面两个模块 (<code>dataset</code> 和 <code>var</code> ) 组合成一个模块 <code>datavar</code> 来进行选择数据和变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs R">selectDataVarUI <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  tagList<span class="hljs-punctuation">(</span><br>    datasetInput<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> filter <span class="hljs-operator">=</span> is.data.frame<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    selectVarInput<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>selectDataVarServer <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> filter <span class="hljs-operator">=</span> <span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  moduleServer<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    data <span class="hljs-operator">&lt;-</span> datasetServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br>    var <span class="hljs-operator">&lt;-</span> selectVarServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">,</span> data<span class="hljs-punctuation">,</span> filter <span class="hljs-operator">=</span> filter<span class="hljs-punctuation">)</span><br>    var<br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>selectDataVarApp <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>filter <span class="hljs-operator">=</span> <span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>    sidebarLayout<span class="hljs-punctuation">(</span><br>      sidebarPanel<span class="hljs-punctuation">(</span>selectDataVarUI<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;datavar&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      mainPanel<span class="hljs-punctuation">(</span>verbatimTextOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;out&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br>  server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    var <span class="hljs-operator">&lt;-</span> selectDataVarServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;datavar&quot;</span><span class="hljs-punctuation">,</span> filter<span class="hljs-punctuation">)</span><br>    output<span class="hljs-operator">$</span>out <span class="hljs-operator">&lt;-</span> renderPrint<span class="hljs-punctuation">(</span>var<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> width <span class="hljs-operator">=</span> <span class="hljs-number">40</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br>  shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以对前面绘制直方图的 app 进行修改，依据我们选择的变量可以绘制直方图，这里对于模块 server 提供两个额外的参数：<code>x</code> 需要绘制的变量和 <code>title</code> 直方图的标题，这两个参数都要是可响应的，因此对于标题来说开始需要用 <code>reavtive</code> 返回一个常数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs R">histogramOutputBins <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  numericInput<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;bins&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;bins&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>histogramOutputPlot <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  plotOutput<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>histogramServer <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> title <span class="hljs-operator">=</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Histogram&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  stopifnot<span class="hljs-punctuation">(</span>is.reactive<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  stopifnot<span class="hljs-punctuation">(</span>is.reactive<span class="hljs-punctuation">(</span>title<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <br>  moduleServer<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    output<span class="hljs-operator">$</span>hist <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>      req<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>      main <span class="hljs-operator">&lt;-</span> paste0<span class="hljs-punctuation">(</span>title<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; [&quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>bins<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;]&quot;</span><span class="hljs-punctuation">)</span><br>      hist<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> breaks <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>bins<span class="hljs-punctuation">,</span> main <span class="hljs-operator">=</span> main<span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>histogramApp <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  sidebarLayout<span class="hljs-punctuation">(</span><br>    sidebarPanel<span class="hljs-punctuation">(</span><br>      datasetInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">,</span> is.data.frame<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      selectVarInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      histogramOutputBins<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    mainPanel<span class="hljs-punctuation">(</span><br>      histogramOutputPlot<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>  <br>  server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    data <span class="hljs-operator">&lt;-</span> datasetServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br>    x <span class="hljs-operator">&lt;-</span> selectVarServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">,</span> data<span class="hljs-punctuation">)</span><br>    histogramServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br>  shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span> <br>histogramApp<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB252.gif"></p><p>我们想要直方图的标题显示用户选择的变量而不是 <code>Histogram</code> ，那么就需要在用户选择变量后不仅要返回变量的值，还要返回变量的名称。对于 server 函数而言，返回多个值就和普通的函数一样：需要返回一个包含多个值的列表，因此我们修改 <code>selectVarServer</code> 函数，使其返回值和名称：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs R">selectVarServer <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> data<span class="hljs-punctuation">,</span> filter <span class="hljs-operator">=</span> <span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  stopifnot<span class="hljs-punctuation">(</span>is.reactive<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  stopifnot<span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>is.reactive<span class="hljs-punctuation">(</span>filter<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <br>  moduleServer<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    observeEvent<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>      updateSelectInput<span class="hljs-punctuation">(</span>session<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> find_vars<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> filter<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>    <br>    <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><br>      name <span class="hljs-operator">=</span> reactive<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>var<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      value <span class="hljs-operator">=</span> reactive<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">[[</span>input<span class="hljs-operator">$</span>var<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后修改 <code>histogramApp()</code> ：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">histogramApp <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span>...<span class="hljs-punctuation">)</span><span class="hljs-comment">## UI 和之前一样</span><br><br>  server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    data <span class="hljs-operator">&lt;-</span> datasetServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br>    x <span class="hljs-operator">&lt;-</span> selectVarServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">,</span> data<span class="hljs-punctuation">)</span><br>    histogramServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">,</span> x<span class="hljs-operator">$</span>value<span class="hljs-punctuation">,</span> x<span class="hljs-operator">$</span>name<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br>  shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span> <br></code></pre></td></tr></table></figure><p>主要的变化就是对 <code>histogramServer</code> 传入 <code>selectVarServer</code> 返回的列表中的两个值，注意这里传进去的是响应表达式（<code>x$value</code>）而不是值（<code>x$value()</code>），因为我们需要在 <code>histogramServer</code> 中对变量值以及名字进行响应。</p><hr><p>可以使用 <code>zeallot</code> 包中的 <code>%&lt;-%</code> 函数进行方便的进行多变量赋值（和 python 中的类似）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>value<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&lt;-%</span> selectVarServer<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;var&quot;</span><span class="hljs-punctuation">,</span> data<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>我们想要创建一个下面的 app：有多个界面构成，每个界面有一个用户输入和两个按钮，由用户控制是跳转下一个页面还是返回上个界面（第一个和最后一个除外）：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB255.gif"></p><p>首先从最基本的开始，每个页面都有两个 button，一个导向下一个页面，另一个是返回上一个页面，因此先用两个辅助函数来创建 button：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">nextPage <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> i<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  actionButton<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;go_&quot;</span><span class="hljs-punctuation">,</span> i<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;_&quot;</span><span class="hljs-punctuation">,</span> i <span class="hljs-operator">+</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;next&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>prevPage <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> i<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  actionButton<span class="hljs-punctuation">(</span>NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;go_&quot;</span><span class="hljs-punctuation">,</span> i<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;_&quot;</span><span class="hljs-punctuation">,</span> i <span class="hljs-operator">-</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;prev&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后再为每个页面创建一个函数，函数的参数包括 <code>title</code> ，页面的名称（不会显示，用来标记要切换的界面）；<code>page</code>，页面的内容；两个 button：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs R">wrapPage <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>title<span class="hljs-punctuation">,</span> page<span class="hljs-punctuation">,</span> button_left <span class="hljs-operator">=</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">,</span> button_right <span class="hljs-operator">=</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  tabPanel<span class="hljs-punctuation">(</span><br>    title <span class="hljs-operator">=</span> title<span class="hljs-punctuation">,</span> <br>    fluidRow<span class="hljs-punctuation">(</span><br>      column<span class="hljs-punctuation">(</span><span class="hljs-number">12</span><span class="hljs-punctuation">,</span> page<span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>    fluidRow<span class="hljs-punctuation">(</span><br>      column<span class="hljs-punctuation">(</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span> button_left<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      column<span class="hljs-punctuation">(</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span> button_right<span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>接下来需要将这些放到一起构成整个 UI，对不同页面构成的列表进行循环操作：创建 button，将含有 button 的页面包装进上面的 <code>tabPanel</code>；最后将 <code>tabPanel</code> 组合成 <code>tabsetPanel</code>。对于 button，有两个特别的点需要注意：</p><ul><li>第一个界面没有向前的 button，这里使用没有 else 的 if，那么在条件为 FALSE 时会返回 NULL</li><li>最后一个页面可以提供一个输入，由用户决定完成整个操作后要干什么，比如弄一个 submit 按钮</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs R">wizardUI <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> pages<span class="hljs-punctuation">,</span> doneButton <span class="hljs-operator">=</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  stopifnot<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.list</span><span class="hljs-punctuation">(</span>pages<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  n <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>pages<span class="hljs-punctuation">)</span><br>  <br>  wrapped <span class="hljs-operator">&lt;-</span> vector<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;list&quot;</span><span class="hljs-punctuation">,</span> n<span class="hljs-punctuation">)</span><br>  <span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-built_in">seq_along</span><span class="hljs-punctuation">(</span>pages<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment"># First page only has next; last page only prev + done</span><br>    lhs <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>i <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span> prevPage<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> i<span class="hljs-punctuation">)</span><br>    rhs <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>i <span class="hljs-operator">&lt;</span> n<span class="hljs-punctuation">)</span> nextPage<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> i<span class="hljs-punctuation">)</span> <span class="hljs-keyword">else</span> doneButton<br>    wrapped<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> wrapPage<span class="hljs-punctuation">(</span>paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;page_&quot;</span><span class="hljs-punctuation">,</span> i<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> pages<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> lhs<span class="hljs-punctuation">,</span> rhs<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <br>  <span class="hljs-comment"># Create tabsetPanel</span><br>  <span class="hljs-comment"># https://github.com/rstudio/shiny/issues/2927</span><br>  wrapped<span class="hljs-operator">$</span>id <span class="hljs-operator">&lt;-</span> NS<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;wizard&quot;</span><span class="hljs-punctuation">)</span><br>  wrapped<span class="hljs-operator">$</span>type <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;hidden&quot;</span><br>  do.call<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;tabsetPanel&quot;</span><span class="hljs-punctuation">,</span> wrapped<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图机器学习</title>
    <link href="/2022/03/13/GNN/"/>
    <url>/2022/03/13/GNN/</url>
    
    <content type="html"><![CDATA[<p>图机器学习 CS224W 课程笔记</p><span id="more"></span><p><a href="https://www.youtube.com/watch?v=JAB_plj2rbA&list=PLoROMvodv4rPLKxIpqhjhPgdQy7imNkDn">(4) CS224W: Machine Learning with Graphs | 2021 | Lecture 1.1 - Why Graphs - YouTube</a></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%9B%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0_backup_301789.png" alt="图机器学习"></p><h2 id="第一课"><a href="#第一课" class="headerlink" title="第一课"></a>第一课</h2><p><strong>Graphs connect things</strong></p><p>为什么图深度学习比较难？因为图是作为网络的形式展现的，网络是比较复杂的：</p><ul><li><p>大小不固定，拓扑结构复杂（没有类似于序列或者图像的空间局部性）</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305211603-kn6ivwg.png" alt="" style="zoom:50%;" div align=center/></li><li><p>节点的次序不固定，或者说没有参考点 reference point</p></li><li><p>动态性，多维特征</p></li></ul><p>图深度学习的一般构造：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305211903-jx7ltl0.png" style="zoom:50%;" div align=center/><p>这门课主要覆盖：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305211942-cmiexbm.png" alt="" style="zoom:50%;" div align=center/><h3 id="图学习的任务"><a href="#图学习的任务" class="headerlink" title="图学习的任务"></a>图学习的任务</h3><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305212050-7qr5zne.png" alt="" style="zoom:50%;" div align=center /><ul><li><p>节点层面的任务：预测节点的属性，比如蛋白质折叠预测，节点是氨基酸，边是氨基酸的临近程度（节点的属性就是其坐标）</p></li><li><p>边层面的任务：预测在两个节点之间是否有缺失的连接，比如推荐系统，节点是用户和物品，边就是用户物品之间的作用，也就是预测用户和物品间有无联系（购买的倾向）；再比如预测药物的副作用：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305213609-rwjjwnr.png" style="zoom:50%;" div align=center/></li><li><p>子图层面的任务：对不同的图进行分类，比如分子气味的分类；行程时间的预测（谷歌地图）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305213922-wzy2iix.png" style="zoom:67%;" div align=center/></li><li><p>图层面的任务：比如预测抗生素分子（2020 Cell paper：A Deep Learning Approach to Antibiotic Discovery），优化已有的小分子（生成模型）等；物理模拟属于图演化任务，节点是粒子，边是粒子之间的相互作用（距离），预测图是如何演化的，也就是下一时刻粒子的位置：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305214336-y540vf8.png" style="zoom: 67%;" div align=center/></li></ul><h3 id="图展示的选择"><a href="#图展示的选择" class="headerlink" title="图展示的选择"></a>图展示的选择</h3><p>一个网络主要有3个部分构成：<strong>对象</strong>，对象之间的<strong>相互作用</strong>，以及这些相互作用和对象构成的<strong>系统</strong>：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305214554-wyayxl6.png" style="zoom:50%;" div align=center/><p>对于一个问题，选择一种合适的图展示方法对于解决问题有很大帮助</p><p>图（网络）可以分为有向图，无向图，<strong>异质性图</strong>，加权图，不加权图，有自联结环的图，多图：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305214948-jkqll8t.png" alt="" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305220709-mstia0u.png" alt="" style="zoom:67%;" div align=center/><p><strong>异质性图表示在同一个图中有不同类型的节点和不同类型的边</strong>：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305215050-ev2hg8x.png" alt="image.png" style="zoom: 67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305215057-689lsgr.png" style="zoom:67%;" div align=center/><p>节点的自由度：</p><ul><li>对于无向图为有多少边与该节点相连，平均自由度为:  $\frac{2E}{N}$</li><li>对于有向图，分入自由度（指向该节点的边）和出自由度（该节点指向别的节点的边数目），平均自由度为 $\frac{E}{N}$</li></ul><p>还有一种特殊的图，叫做<strong>二部图（Bipartite）</strong>，也就是将图的节点分为2部分，每部分之间的节点没有连接，只有不同部分之间的节点有连接，比如上面那个推荐系统的图：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305220256-1uh5aom.png" alt="" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305220318-ben1cez.png" style="zoom:67%;" div align=center/><p>图结构的展示方法：</p><ul><li><p>邻接矩阵：比较<strong>稀疏</strong></p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305220407-d4dbxiw.png" alt="" style="zoom: 67%;" div align=center/></li><li><p>边列表：不好分析，比如计算自由度</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305220454-cn6qqxy.png" style="zoom:67%;" div align=center/></li><li><p>邻接列表：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305220541-vzvuskw.png" alt="image.png" style="zoom:67%;" div align=center/></li></ul><p>图的<strong>连接性</strong>：</p><ul><li><p>对于无向图来说，如果任意两个节点都可以被一条路径连接，那么这个图就叫做连接无向图（Connected undirected graph），那么不连接的图至少有两个或两个以上的连接组分构成：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305221022-aan5o7t.png" alt="image.png" style="zoom:67%;" div align=center/></li><li><p>对于有向图，又可以分成<strong>强连接</strong>和<strong>弱连接</strong>，强连接表示任意两个节点间都有有向的路径连接，弱连接表示把方向去掉后是一个连接的无向图：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220305221258-1f1lyym.png" alt="image.png" style="zoom:67%;" div align=center/></li></ul><h2 id="第二课"><a href="#第二课" class="headerlink" title="第二课"></a>第二课</h2><p>这一节主要是介绍经典机器学习中如何<strong>人工抽取图的特征</strong>，分为节点，边，和图层面的特征构建</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220306161422-gblapoz.png" alt="" style="zoom:50%;" div align=center/><p>经典机器学习的一般步骤为：提取特征，训练模型，应用模型进行预测，对于图来说关键在于特征的设计，能否有效的表示图的组分：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220306161701-y08kjjy.png" alt="" style="zoom:67%;" div align=center/><h3 id="节点特征"><a href="#节点特征" class="headerlink" title="节点特征"></a>节点特征</h3><p>用来表示节点的特征应该可以反应网络中节点的结构和位置，通常考虑 4 种类型的节点特征：</p><ul><li>节点自由度</li><li>节点中心性</li><li>聚类系数</li><li>Graphlets，一种子图结构（一种模式）</li></ul><p>这四种特征可以分为两类：基于重要性的和基于网络结构的：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307155404-xf5bi97.png" style="zoom:67%;" div align=center/><h4 id="节点自由度"><a href="#节点自由度" class="headerlink" title="节点自由度"></a>节点自由度</h4><p><strong>节点自由度</strong>是一种比较简单的特征，仅仅考虑了邻居节点的数量，并且所有的邻居节点是等同的，因此没有考虑到这些节点的重要性，比如下图的 C 和 E，自由度都是3：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220306162529-obdq6h3.png" alt="" style="zoom:67%;" div align=center/><h4 id="节点中心性"><a href="#节点中心性" class="headerlink" title="节点中心性"></a>节点中心性</h4><p><strong>节点中心性</strong>（centrality）考虑了图中节点的重要性，有一些方法可以用来表示“重要性”：</p><ul><li>特征向量中心性（Engienvector centrality）</li><li>介数中心性（Betweenness centrality）<br /></li><li>临接中心性（Closeness centrality）</li></ul><p><strong>特征向量中心性</strong>的思想是如果一个节点的邻居节点是重要的，那么这个节点也比较重要；一个节点的中心性可以表示为其邻居节点中心性的和，这个迭代的形式可以写成矩阵，进一步可以用特征向量来表示一个节点的邻居节点的中心性：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220306163130-ghw32oa.png" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220306164418-xzx5t26.png" alt="" style="zoom:67%;" div align=center/><p><strong>介数中心性</strong>的思想是如果一个节点频繁的出现在连接其他节点的最短路径上，那么这个节点就是比较重要的，在数值上为通过该节点的其他所有节点对之间的最短路径数量除以其他所有节点对之间的最短路径数量：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307150410-17609z7.png" style="zoom:67%;" div align=center/><p><strong>临接中心性</strong>的思想是如果一个节点离其他节点都比较近，那么这个节点就比较重要，数值上为该节点到其他所有节点的最短路径和的倒数：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307150632-b22rn53.png" alt="" style="zoom:67%;" div align=center/><h4 id="聚类系数"><a href="#聚类系数" class="headerlink" title="聚类系数"></a>聚类系数</h4><p>聚类系数衡量节点 v 的邻居之间连接有<strong>多紧密</strong>，为节点邻居的实际边除以所有可能形成的边数目：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307151003-6zzpeco.png" alt="" style="zoom:50%;" div align=center/><p>其实从这个图也可以看出来在计算聚类系数时，实际计算的是以感兴趣的节点为中心旁边自由度为1的子网络中三角形的数目（这个子网络又叫ego-network）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307151336-nst4015.png" alt="" style="zoom:50%;" div align=center/><p>将这个概念进行拓展→可以预定义一些图像（子图），然后在网络中数有多少这样的子图，这种预定于的子图就叫做 <strong>graphlet</strong> （类似于一种模式，motif），因此<strong>描述了节点 u 周围的网络结构</strong>：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307151649-n3gnfsj.png" alt="" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307152224-07tslps.png" style="zoom: 67%;" div align=center/><p>从图的类型上来看，<strong>graphlet 是 Rooted connected  induced non-isomorphic subgraphs</strong>，将这些概念拆开：</p><ul><li><p>Rooted 在图中某个节点被特殊标记以区分于其他的节点，这个节点叫做根节点，这个图叫做有根的图</p></li><li><p>connected 连接图指的是图中任意两个节点之间都有路径连接</p></li><li><p>induced subgraph 诱导子图指的是从一个大网络中拿出来的一个子图，但是这个子图保留了原来网络中拿出来的这些节点之间的边，区别于一般的部分子图，部分子图可能只含有原来网络的一部分边：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307154833-utv1khe.png" style="zoom:67%;" div align=center/></li><li><p>non-isomorphic 同型图指的是两个图有相同数量的节点，并且节点之间连接的方式也是一样的：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307155110-uhhot51.png" alt="" style="zoom:67%;" div align=center/></li></ul><p>对于不同的节点数量有不同的 graphlet：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307155212-fu67pk7.png" style="zoom:67%;" div align=center/><p>因此可以用包含感兴趣节点的 graphlet 数目来作为该节点的特征向量，这个向量叫做：<strong>Graphlet Degree Vector</strong></p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307155257-2v7hk2d.png" alt="" style="zoom:67%;" div align=center/><h3 id="边特征"><a href="#边特征" class="headerlink" title="边特征"></a>边特征</h3><p>回顾一下边层面的预测任务就是基于已有的连接去预测新的连接，在测试阶段，没有连接的节点对按照某种规则排序，top K 的节点对之间就被预测有连接，因此重要问题就是<strong>对于节点对如何设计特征</strong>？</p><p>有3种比较重要的连接层面的特征：</p><ul><li>基于距离的特征</li><li>Local neighborhood overlap</li><li>Global neighborhood overlap</li></ul><h4 id="基于距离的特征"><a href="#基于距离的特征" class="headerlink" title="基于距离的特征"></a>基于距离的特征</h4><p>最简单的基于距离的特征就是两个节点之间的最短路径的长度，但是这个特征没有关注到节点对的共同邻居节点的数量，比如下图的B,H和 A,B节点对最短路径都是2，但是AB只有一个共同的邻居节点，而BH有两个，共同邻居越多 两个节点有连接的可能性就越大：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307160358-hplzpb5.png" alt="" style="zoom:67%;" div align=center/><h4 id="Local-neighborhood-overlap"><a href="#Local-neighborhood-overlap" class="headerlink" title="Local neighborhood overlap"></a>Local neighborhood overlap</h4><p>Local neighborhood overlap 就是考虑了两个节点的共同邻居的数量，可以用 <strong>Jaccard 系数</strong>和 <strong>Adamic-Adar指数</strong>来表示：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307160750-eia02uc.png" alt="" style="zoom:67%;" div align=center/><h4 id="Global-neighborhood-overlap"><a href="#Global-neighborhood-overlap" class="headerlink" title="Global neighborhood overlap"></a>Global neighborhood overlap</h4><p>Local neighborhood overlap 的缺点是如果两个节点没有<strong>直接</strong>的共同节点，那么上面的指标算出来就是0，但是这样的两个节点还是有可能连接的，比如图中的A 和 E 节点：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307161001-89d1q7n.png" alt="" style="zoom:67%;" div align=center/><p>因此 Global neighborhood overlap 通过考虑整个图来解决这个问题。</p><p>其中一种方法就是计算 <strong>Katz 指数</strong>，Katz 指数计算<strong>给定一对节点间所有长度路径的数量</strong>，现在的问题就是如何计算这个数量？</p><h5 id="Katz-指数"><a href="#Katz-指数" class="headerlink" title="Katz 指数"></a><strong>Katz 指数</strong></h5><p><strong>两个节点之间长度为 K 的路径的数量就为图的邻居矩阵的K次方的相应位置的数值</strong>：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307161912-mmx0a3j.png" alt="" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307161940-kc4lanj.png" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307162008-17bs1py.png" style="zoom:67%;" div align=center/><p>可以用矩阵的几何级数来计算 Katz 指数矩阵的解析解:</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307162312-fw0aujq.png" alt="" style="zoom:67%;" div align=center/><h3 id="图特征"><a href="#图特征" class="headerlink" title="图特征"></a>图特征</h3><p>图特征表征的是整个图的结构，整个图的特征一般用<strong>核方法</strong>（kernel method）进行构建，核可以用来比较两个数据（图）的<strong>相似性</strong>（可以理解为将数据通过某个函数映射到高维空间，然后对映射后的向量或矩阵做内积，这个内积就是所谓的核，而内积可以表示相似性，核技巧就是定义这个核函数，而不显式的定义两个数据的映射函数，这里貌似没有用到核技巧）。常用的图的核有：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307163928-693hxsp.png" style="zoom: 67%;" div align=center/><p>Bag-of-Words (BoW) 指的是对于一段文本使用词的计数作为文本的特征，那么对于图来说，则可以把节点当作词，比如使用节点的数量来作为特征，但是这就带来一个问题，如果两个图的节点数量一致，那么这种特征就不能区分两个图。但是我们可以使用其他的一些图的特征，比如可以使用 <strong>Bag of  node degree</strong>, 看一个图中不同自由度的节点的数量：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307165151-d0lg7vo.png" alt="" style="zoom:67%;" div align=center/><p>上面提到的两种方法： Graphlet Kernel and Weisfeiler-Lehman (WL) Kernel 都使用了 Bag of * 的图展示方法，这里面的 * 可以有多种表示，不止节点的自由度。</p><h4 id="Graphlet-kernel"><a href="#Graphlet-kernel" class="headerlink" title="Graphlet kernel"></a>Graphlet kernel</h4><p>Graphlet kernel 是基于 Graphlet 的，而这里的Graphlet 和之前提到的 Graphlet 有不同的地方：</p><ul><li>这里的Graphlet不必要是连接的，也就是可以有独立的，和其他节点没有路径连接的节点</li><li>这里的Graphlet是无根的</li></ul><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307165925-k3jt90h.png" alt="" style="zoom:50%;" div align=center/><p>给定一个图和一个 graphlet 列表，可以定义  graphlet 数量向量，也就是每个 <strong>graphlet 的出现数量作为向量的元素</strong>：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307170100-mtb3ijt.png" alt="" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307170112-h8mi1ds.png" alt="" style="zoom:50%;" /><p>给定两个图，<strong>Graphlet 核就是两个图的Graphlet 向量的内积</strong>，但是如果两个图的大小差异比较大，那么所得到的向量中的值差异也就比较大，因此对于每个Graphlet 向量都用其大小进行归一化：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307170340-659o39w.png" style="zoom:67%;" div align=center/><p>但是计算一个图中的graphlets是一个NP难问题，时间复杂度比较高，因此需要更高效的图核的计算方法。</p><h4 id="Weisfeiler-Lehman-Kernel-Color-refinement"><a href="#Weisfeiler-Lehman-Kernel-Color-refinement" class="headerlink" title="Weisfeiler-Lehman Kernel (Color refinement)"></a>Weisfeiler-Lehman Kernel (Color refinement)</h4><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307183253-c97cczp.png" style="zoom:67%;" div align=center/><p>这个算法是一种迭代的算法，逐步更新节点的颜色，在每次迭代中有两步：</p><ol><li>收集邻居节点的颜色数值</li><li>根据一个 hash 表将收集到的数值转化成新的颜色</li></ol><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307184131-7egjho2.png" alt="" style="zoom:67%;" div align=center/><p>一个例子：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307184149-1xbqkl9.png" alt="" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307184202-gju1jyu.png" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307184213-vc81p9r.png" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307184226-owq5tla.png" style="zoom:67%;" div align=center/><p>经过K步的更新后，计算每个颜色数值的出现次数，然后 WL 核就是两个图的颜色数量向量的内积：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307184348-8y80rp8.png" alt="" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307184408-c57lh27.png" alt="" style="zoom:67%;" div align=center/><p>这种迭代的计算方法是非常高效的，时间复杂度和边的数量成线性关系，并且和后面要见到的图神经网络非常类似，总结一下：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220307184616-b34vahy.png" alt="" style="zoom:67%;" div align=center/><h2 id="第三课"><a href="#第三课" class="headerlink" title="第三课"></a>第三课</h2><p>上一节讲的都是人工提取节点，边和图的特征（展示），更有效的方法可能是进行任务不依赖的特征展示（也就是embedding）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309152025-0rmp015.png" alt="" style="zoom:67%;" div align=center/><p>将节点embed到embedding 空间后就可以用节点的embedding 之间的相似性来衡量原来网络中节点的相似性（比如节点之间的距离），另外这种embedding 的向量适合进行下游的各种预测任务：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309153031-ruxe1pv.png" alt="" style="zoom:67%;" div align=center/><h3 id="Node-embedding"><a href="#Node-embedding" class="headerlink" title="Node embedding"></a>Node embedding</h3><p>我们现在有一个图 G，V是其节点集合，A是其邻接矩阵；目标就是得到节点的embedding向量，并且在embedding空间中的embedding 向量的相似性（可以用向量的点积来衡量）可以近似为图中节点的相似性：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309153420-qrauked.png" alt="" style="zoom:67%;" div align=center/><p>我们可以使用 encoder-decoder 框架来分析这个问题，分为以下几个步骤：</p><ul><li>encoder 将节点映射到 embedding</li><li>定义节点的相似性函数，也就是如何度量原来网络中节点的相似性</li><li>decoder 将embedding映射到一个相似性值</li><li>我们的目标就是优化 encoder 的参数使得在 embedding 空间的相似性（点积）和网络中节点的相似性近似相等</li></ul><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309153937-k3wquu0.png" alt="" style="zoom:67%;" div align=center/><p>最简单的 encoder 策略就是对每个节点都映射到一个 embedding 向量（embedding lookup），很多方法是使用这种策略的，比如 DeepWalk 和 node2vec：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309154228-2yd5bw3.png" alt="" style="zoom:67%;" div align=center/><p>因此这种方法是非监督或者是半监督的（不会使用节点的标签，特征），目的是估计节点的 embedding 向量来保留网络的部分结构。</p><p>关键问题就是<strong>如何定义节点间的相似性</strong>，简单的方法就是根据节点是否连接，节点共享的邻居数目等，但是这里使用的是更具表现力的一种方法：随机游走（<strong>random walk</strong>），随机游走指的是给定一个图，从某个节点出发，随机选择该节点的邻居节点然后移动到该邻居节点，重复这个过程，以这种方法访问到的节点序列称为图上的随机游走：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309155116-a3l45a3.png" alt="" style="zoom:67%;" div align=center/><p><strong>我们可以使用 u 和 v 节点在同一个以 u 为出发节点的随机游走上的概率来定义两个节点的相似性</strong>，因此可以根据这个概率来优化我们的 embedding 向量，使得 embedding 向量的内积接近于这个概率：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309155442-0kj3d7e.png" alt="" style="zoom:67%;" div align=center/><p>我们学习到的节点embedding 应该使得在网络中邻近的节点在embedding空间也邻近，可以通过随机游走来收集某个节点的邻近节点，然后计算从该节点到其邻近节点的似然（所有两两节点的上面那个概率的乘积）然后优化log似然函数：</p><ul><li><p>使用固定长度的随机游走策略从节点 u 进行随机游走</p></li><li><p>对于图中的每个节点 u ，收集 $N_R(u)$，也就是从 u 出发通过随机游走得到的节点集合（这个集合是 multiset，因为可以有重复的元素）</p></li><li><p>优化<strong>对数似然函数</strong>：</p><p>$$<br>L &#x3D; \sum_{u\in V} \sum_{v\in N_R(u)} -log(P(v|z_u))<br>$$</p></li></ul><p>在实践中一般使用 <strong>softmax 函数</strong>来表示 $P(v|z_u)$:</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309161344-2grjvna.png" style="zoom:67%;" div align=center/><blockquote><p>为什么使用 softmax？</p><p>因为我们想要最相似的突出出来</p></blockquote><p>但是这个函数优化起来比较困难，因为有两个求和，计算复杂度比较高；一种解决方法是使用<strong>负采样（negative sampling）</strong>，负采样就是不用所有的节点来标准化（分母），而是选择 k 个随机的负样本（不在random work 上的样本，但是实际操作的适合一般使用任何节点）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309162346-f7tjua3.png" alt="" style="zoom:67%;" div align=center/><p>这个采样的方法采用的是baised采样，<strong>可以根据节点的自由度赋予采样的概率</strong>，对于采样的数目：高的k会带来更稳定的估计，但是计算也更复杂，并且大的k会使得结果偏向于负样本，一般k选择 <strong>5-20</strong>个；<strong>那么对于这个负采样后的对数似然函数可以使用随机梯度下降的方法进行优化</strong>：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309162839-s0fdb34.png" alt="" style="zoom:67%;" div align=center/><p>那么还有一个问题：<strong>如何选择随机游走的策略 R</strong>？对于 <strong>DeepWalk</strong>，采取的是最简单的方法：<strong>固定长度，没有偏向的随机游走</strong>。</p><h4 id="node2vec"><a href="#node2vec" class="headerlink" title="node2vec"></a>node2vec</h4><p>node2vec 使用的是有偏的游走，<strong>可以在局部和全局的网络视角间进行平衡</strong>（对比 deepwalk，使用的仅仅是固定长度的随机游走）。定义给定节点 u 的邻居节点的经典策略有两个：</p><ul><li>BFS：局部</li><li>DFS：全局</li></ul><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220309171239-x5ner7v.png" style="zoom:50%;" div align=center/><p>这种策略有两个超参数：</p><ul><li>返回参数 p，返回到之前的节点</li><li>In-out 参数 q，移出（DFS）还是移入（BFS），q可以直观的理解为 BFS 和 DFS 的比值</li></ul><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309173425-cl78bki.png" alt="" style="zoom:67%;" div align=center/><p>因此 node2vec 算法步骤为（与 deepwalk 不同处就是如何产生 $N_R(u)$）:</p><ul><li>计算随机游走概率</li><li>对每个节点进行 r 次长度为 l 的随机游走</li><li>使用随机梯度下降优化目标函数（对数似然）</li></ul><p>还有一些其他的随机游走方法：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309173809-15ragxx.png" alt="" style="zoom:67%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309173847-482bhrq.png" alt="" style="zoom:67%;" div align=center/><h3 id="Graph-embedding"><a href="#Graph-embedding" class="headerlink" title="Graph embedding"></a>Graph embedding</h3><p>也可以对整个图进行 embedding，相对应的任务就是对整个图进行分类，比如识别分子的毒性，识别异常图等，可以有如下的方法：</p><ol><li>利用节点的embedding得到图的embedding</li></ol><ul><li><p>对图（或子图）进行上述的节点的embedding</p></li><li><p>然后对节点的embedding进行加和或者平均：</p><p>$$<br>Z_G&#x3D;\sum_{v\in G}Z_v<br>$$</p></li></ul><ol start="2"><li><p>引入一个虚拟的节点来代替图（或者子图），然后对该节点进行 embedding：</p> <img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309223742-plaxwjt.png" alt="" style="zoom:67%;" div align=center/></li><li><p>anonymous walk embedding</p></li></ol><p>不记名walk的状态就是在随机游走中第一次访问节点的索引，比如：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309224032-xtfhj6b.png" alt="" style="zoom:67%;" div align=center/><p>在上图中，左边两个随机游走代表的序列是一样的，对于 random walk1：首先访问 A，记其索引为1，第二个访问的节点是B， 记其索引为2，第三个访问的是节点C，记其索引为3，然后又是节点B，其第一次被访问的索引为2，然后是节点C，其第一次被访问的索引是3，因此这个状态序列为1-2-3-2-3。因为这样我们不能从这个序列上推断出访问的节点身份，所以叫做<strong>匿名游走</strong>。</p><p>匿名游走的数量是随着其长度指数增长的：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220309224638-z8cy6ud.png" alt="" style="zoom:67%;" div align=center/><p>基于这种匿名游走，如何去得到图的 embedding 呢？有两种想法：</p><p>第一种简单的想法是<strong>使用随机游走的概率分布来进行图的 embedding</strong>：</p><ul><li>随机产生 m 个长度为 l 的匿名游走</li><li>图的 embedding 为这些匿名游走的概率分布</li></ul><p>比如设随机游走的长度为 3，因此可以将图表示为一个 5 维的向量（因为长度为 3 的匿名游走有 5 种：111，112，121，122，123），然后随机生成 m 个这样的随机游走，统计每种匿名游走的的数量，计算概率分布。这里有一个问题，我们需要生成多少个随机游走（也就是 m 是多少）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220313164248-oasfccc.png" alt="" style="zoom:67%;" div align=center/><p>第二种想法是<strong>学习匿名游走 $w_i$ 的 embedding $z_i$：</strong>使得可以根据前面固定大小的 window 中已有的游走 embedding 来预测下一个游走，比如下图根据 w1 和 w2 来预测 w3（window 为 2 ）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220313165835-kwb547l.png" alt="" style="zoom:67%;" div align=center/><p>因此目标函数为 (T 为随机游走的总数量，$\Delta$ 为 window 大小）：</p><p>$$<br>max_{z_G}\sum_{t&#x3D;\Delta+1}^TlogP(w_t|w_{t-\Delta},…,w_{t-1},z_G)<br>$$</p><p>具体步骤：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220313170348-eapj54q.png" alt="" style="zoom:67%;" div align=center/><h2 id="第四课"><a href="#第四课" class="headerlink" title="第四课"></a>第四课</h2><p>这一课主要是将图视作矩阵，进行图的分析。</p><p>互联网可以看作一个有向图，节点是网页，边是超链接；但是不是所有的节点的重要性都是一样的，比如 <code>thispersondoesnotexist.com</code> 和 <code>www.stanford.edu</code>，对于网络构成的图，节点的连接性的差异是非常大的（比如下图的<strong>蓝色</strong>和<strong>红色</strong>节点），因此可以使用网络图的连接结构来对网页进行排序。</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315151830-cjxn872.png" style="zoom: 67%;" div align=center/><p>本章学习下面的 3 种连接分析方法来计算节点的重要性：</p><ul><li>PageRank</li><li>Personalized PageRank （PPR）</li><li>Random Walk with Restart</li></ul><h3 id="PageRank"><a href="#PageRank" class="headerlink" title="PageRank"></a>PageRank</h3><p>一个简单的想法是我们可以使用网页的链接来给网页投票：一个网页如果有更多的链接，那么这个网页更重要，使用指向网页的链接还是该网页指出的链接？使用 in-link 可能更好，因为别的网页指向该网页的 in-link 不容易造假，out-link 容易造假，那么现在问题就是所有的 in-link 都是等同的吗？<strong>显然从重要节点指向该网页的 in-link 权重应该更大</strong>，从这个描述可以看出这个问题是一个<strong>递归</strong>的问题。</p><p>PageRank 使用的是 <code>Flow</code> 的模型即从更重要的网页来源的指向（边）投票更多：如果一个节点 i 有着重要性 $r_i$，同时有 $d_i$ 个出边（out-link），那么每个出边有 $r_i&#x2F;d_i$ 的票数（权重），对于节点 j，其重要性 $r_j$ 是其所有入边的票数和，比如下面的例子：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315154100-xgtv87v.png" alt="" style="zoom:67%;" div align=center/><p>因此节点 j 的排序 $r_j$ 可以定义为：</p><p>$$<br>r_j&#x3D;\sum_{i\rightarrow j}\frac{r_i}{d_i}<br>$$</p><p>$d_i$ 是节点 i 的出度（out-degree），对于一个简单的图，我们可以使用这个定义来列出方程：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315154813-gz9r72o.png" alt="" style="zoom: 67%;" div align=center/><p>但是直接去解这个方程（高斯消元）不是一个方法，因为不能简单的迁移到大的数据集上。对于这个问题，pagerank引入了一种<strong>随机邻接矩阵（stochastic adjacency matrix）M</strong>：$d_i$ 是节点 i 的出度，如果节点 i 指向节点 j，那么 $M_{ji}$ 为 $\frac{1}{d_i}$，因此 M 是一个列随机矩阵，其每列加起来为 1：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-03-15%20155429-20220315155527-x9naqjq.png" alt="" style="zoom:50%;" div align=center/><p>再定义一个<strong>排序向量 r，其中的元素 $r_i$ 为第 i 个节点的重要性值</strong>，并且：</p><p>$$<br>\sum_ir_i&#x3D;1<br>$$</p><p>因此上面的 flow equation 可以写成：</p><p>$$<br>r&#x3D;M\cdot r<br>$$</p><p>还以刚才的那个简单的图为例：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315155929-zfxh2ct.png" style="zoom:67%;" div align=center/><p>现在想象一个场景：随机网上冲浪，在任意时刻 t，我们在某个网页 i，然后在 t+1 时刻我们从网页 i 指向别的网页的链接中随机选一个（均匀分布）到达网页 j，重复这个过程，设 $p(t)$  为时间 t 网页的概率分布，也就是 p(t) 的第 i 个元素为在时刻 t 在网页 i 上的概率；那么可以得到：</p><p>$$<br>p(t+1)&#x3D;M\cdot p(t)<br>$$</p><p>(因为是均匀随机选择边)</p><p>那么如果假设这个随机游走达到一种状态，此时：</p><p>$$<br>p(t+1)&#x3D;M\cdot p(t)&#x3D;p(t)<br>$$</p><p>称这个 p(t) 为随机游走的稳定分布，也就是下一个时刻网页的概率分布和这一个时刻一样，整个系统达到一种平衡。把这个式子和之前的 $r&#x3D;M\cdot r$ 比较，可以看出两者的形式是一样的，因此 <strong>r 也是这个随机游走的稳定分布</strong>。</p><p>回顾一下第二课中节点的特征向量中心性</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315162222-jqh5aq7.png" alt="" style="zoom:50%;" div align=center/><p>我们可以将 flow equation 写成：</p><p>$$<br>1\cdot r &#x3D; M\cdot r<br>$$</p><p>因此<strong>秩向量 r 也可以看为随机邻接矩阵 M 在特征值为 1 时的特征向量</strong></p><p>我们也可以将上面的<strong>稳定分布看成从任意向量 u 开始，不停的左乘矩阵 M，其极限为 r</strong>，那么这个 r 就是 M 的 principal eigenvector（最大特征值的特征向量），通过这种方式可以有效的解出 r，这个方法叫做 Power iteration（幂迭代），总结：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315214033-dxjtyaa.png" style="zoom:50%;" div align=center/><p>实际操作时可以分为三步：</p><ul><li>初始化每个节点的重要性为 1&#x2F;N：$r^{0}&#x3D;[1&#x2F;N,…, 1&#x2F;N]^T$</li><li>进行迭代：$r^{t+1}&#x3D;M\cdot r^{t}$</li><li>当两次迭代的误差小于某个值时停止（这个误差可以使用 L1 范数）：</li></ul><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315215528-j56twlp.png" style="zoom:50%;" div align=center/><p>举个例子：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315215601-yr5skbb.png" alt="" style="zoom:67%;" div align=center/><p>上面这个过程可能会出现两个问题：</p><ul><li><p>一些节点是 dead end，也就是没有指出的边，有这种节点进行上面的迭代时会造成所有的节点都为0的情况：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315215811-15jbqap.png" style="zoom:50%;" div align=center/></li><li><p>第二种情况为 spider traps，也就是有一个节点其所有的指出的边都指向自己，迭代时就会出现该节点是 1 其余都是 0 的情况：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315220009-r8mc3g2.png" alt="" style="zoom:67%;" div align=center/></li></ul><p>对于 spider-trap 来说在数学上看着是没有问题的，但是结果不是我们想要的，因为被困在 b 节点并不能说明 b 是最重要的，因此对于这种情况可以采用<strong>有一定概率直接跳到其他节点</strong> (<strong>teleport</strong>)，使得在一定步骤后可以摆脱困在某个节点的情况：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315220420-nk9mmi6.png" alt="" style="zoom:50%;" div align=center/><p>对于 dead end，这种情况下的随机邻接矩阵就不符合我们的设定，因为某一（些）列加起来是 0 而不是 1，因此我们对这个矩阵可以调整，如果有一列全为 0 则对每个元素赋予同样值：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315220732-zxhs54i.png" alt="" style="zoom:50%;" div align=center/><p>Google 采取的 PageRank 算法：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315220836-yyjnedf.png" alt="" style="zoom:50%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315220849-tycz1ds.png" alt="" style="zoom:50%;" div align=center/><p>例子：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220315220909-7nr4jta.png" alt="" style="zoom:50%;" div align=center/><h3 id="Personalized-PageRank-amp-Random-Walk-with-Restart"><a href="#Personalized-PageRank-amp-Random-Walk-with-Restart" class="headerlink" title="Personalized PageRank &amp; Random Walk with Restart"></a>Personalized PageRank &amp; Random Walk with Restart</h3><p>上面讲到的 teleport 是随机的跳向任意节点，但是根据这个 teleport 的目标节点的不同，pageRank 有一些不同的变种。</p><p>通过推荐任务来引入问题：有一个二部图代表用户和商品的相互作用（购买）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220316145048-nwmuryw.png" alt="" style="zoom:50%;" div align=center/><p>我们想要预测的问题是，如果用户和商品 Q 互作，那么我们应该推荐什么商品给这个用户；问题就变成了哪些节点与 Q 最相关，也就是我们需要基于与节点集 S 的邻近性对其他节点进行排序（之前是直接根据节点的重要性进行排序）【这里的S &#x3D; {Q}】，这个问题可以用 Random Walk with Restart 算法来解决：</p><ul><li>给定一个 Query-Nodes 集合（可以只有一个节点），开始模拟随机游走</li><li>随机走向一个邻居节点，记录其被访问的次数（visit count）</li><li>以概率 alpha 重启游走，也就是直接回到 Query-Nodes</li><li>重复以上过程，最后有着最高的 visit count 的节点就是和 Query-Nodes 最近的节点</li></ul><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220316145923-xvr2ivu.png" style="zoom:50%;" div align=center/><p>为什么这个方法可以奏效？原因可能是：考虑了节点间的多种连接，多个路径，有向和无向的路径，还有节点的自由度（也就是节点的边）。</p><p>Personalized PageRank ，Random Walk with Restart 和 PageRank 之间的区别就在于如何定义这个重启节点集合 S：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220316150210-p2akpwb.png" alt="" style="zoom: 50%;" div align=center/><p>​    </p><h2 id="第五课"><a href="#第五课" class="headerlink" title="第五课"></a>第五课</h2><p>这一课的主要问题就是：<strong>给定一个一些节点有标签的网络，如何给这个网络其他节点也打上标签</strong>？这个问题是一个半监督学习问题，因为只有一部分样本有标签。我们可以利用前面第 3 课讲到的 node embedding 方法来处理这个问题，也就是先学习节点的 embedding，然后用这个 embedding 向量去预测节点的标签。但是这一课讨论的是另一个处理这类问题的框架：<strong>信息传递（message passing）</strong>该框架的想法就是：网络中存在着相关性，也就是说相似的节点倾向于连接在一起。</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320162151-sholsef.png" style="zoom:50%;" div align=center/><p>两种类型的依赖会导致网络中存在相关性：</p><ul><li>同质性：”物以类聚，人以群分”</li><li>影响：”社会关系会影响个人的特性”，比如我向朋友推荐我喜欢的音乐，长此以往，他们可能和我的品味变得类似</li></ul><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320162639-zp5lmna.png" style="zoom:50%;" div align=center/><p>如何使用这种网络中的相关性来帮助我们预测节点的标签？可以想到的是除了用到节点本身的特征之外还需要节点邻居节点的特征和标签（这种方法叫做 <strong>collective classification</strong>）。</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320215355-net8f5c.png" style="zoom:50%;" div align=center/><p>collective classification 一个重要的假设（除了网络中存在同质性）是马尔可夫假设，也就是一个节点的标签和其一阶邻居相关，（也就是和邻居的邻居不相关）：</p><p>$$<br>P(Y_v)&#x3D;P(Y_v|N_v)<br>$$</p><p>$Y_v$ 为节点 v 的标签，$N_v$ 为节点 v 的邻居节点。</p><p>collective classification 一般有3个步骤：</p><ul><li>训练局部分类器（local classifier）：给每个节点初始的标签，基于节点的属性&#x2F;特征训练分类器，没有用到网络的信息</li><li>训练相关分类器（relational classifier）：该分类器可以捕捉节点间的相关性，基于邻居的节点标签或者（和）属性训练分类器，用到了网络的信息</li><li>进行集体推理（collective inference）：将相关性在网络间进行“传播”（propagate），对每个节点迭代运用相关分类器直到标签收敛</li></ul><p>collective classification 有 3 种经典的方法：</p><ul><li>Relational classification</li><li>Iterative classification</li><li>Belief propagation</li></ul><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320221256-4cxpzai.png" style="zoom:50%;" div align=center/><h3 id="Relational-classifiers"><a href="#Relational-classifiers" class="headerlink" title="Relational classifiers"></a>Relational classifiers</h3><p>基本想法是：<strong>节点的类概率是其邻居类概率的加权平均</strong>，具体步骤为：</p><ol><li><p>对于有标签的节点，初始化的标签为其真实的标签，对于没有标签的节点，初始化其概率为 0.5</p></li><li><p>以随机的顺序使用加权平均来迭代更新节点的类概率，直到收敛或者达到最大的迭代次数：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320222227-i9y8m1e.png" style="zoom:50%;" div align=center/></li></ol><p>例子：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320222330-x1c78tn.png" style="zoom:50%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320222346-fwagdrs.png" style="zoom:50%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320222355-3i0lhu0.png" style="zoom:50%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320222403-exes9pu.png" style="zoom:50%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320222415-1pi7pto.png" style="zoom:50%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320222424-uq5ks5w.png" style="zoom:50%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320222435-pyng4ia.png" style="zoom:50%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320222444-7mk05ml.png" style="zoom:50%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320222456-3faw0j3.png" style="zoom:50%;" div align=center/><h3 id="Iterative-classification"><a href="#Iterative-classification" class="headerlink" title="Iterative classification"></a>Iterative classification</h3><p>上面的 Relational classifiers 初始化时直接给没有标签的节点概率 0.5，其实并没有collective classification 的第一步 local classifier，也就是没有使用节点的特征。那么iterative classification就是既考虑了节点的特征也考虑了邻居节点的标签。该方法主要是训练两个分类器：</p><ul><li>$\phi_1(f_v)$ 基于节点的特征 $f_v$ 训练分类器预测节点的标签</li><li>$\phi_2(f_v,z_v)$ 基于节点的特征 $f_v$ 以及 邻居节点标签的汇总变量 $z_v$ 来训练模型更新节点的标签</li></ul><p>$z_v$ 如何计算？可以有几种选择：</p><ul><li>邻居节点的每种标签的分布（直方图）</li><li>最多数量的标签</li><li>标签的种类</li><li>…</li></ul><p>步骤：</p><ol><li>在训练集上（节点都有标签）训练两个模型：只使用节点属性，以及使用节点属性和汇总变量</li><li>在测试集上应用第一个模型得到每个节点的标签</li><li>计算每个节点的汇总变量 $z_v$</li><li>用第二个模型 基于节点的特征和汇总变量更新节点的标签</li><li>重复3，4步直到收敛或者达到最大迭代次数</li></ol><p>总结：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320224610-kbc0qbi.png" style="zoom:50%;" div align=center/><h3 id="Belief-Propagation-（loopy-BP-算法）"><a href="#Belief-Propagation-（loopy-BP-算法）" class="headerlink" title="Belief Propagation （loopy BP 算法）"></a>Belief Propagation （loopy BP 算法）</h3><p>信念传播是一个迭代过程，邻居节点之间相互“交谈”，传递信息:</p><blockquote><p>“I (node v) believe you (node u) belong to class 1 with likelihood …”</p></blockquote><p>每个节点收集其邻居节点传递的信息，然后更新自己的信念（比如属于某个类的概率），然后再将这种信息传递给下一个邻居节点。</p><p>用数图中节点的数量来引入信息传播的概念：前提是每个节点只能和其邻居相互作用：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320230930-3fzjkus.png" style="zoom:50%;" div align=center/><p>这个里面更新的 belif 就是图上有多个节点，进一步可扩展到树形结构的图上（从叶子节点到根节点）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320231050-urotjqw.png" style="zoom:50%;" div align=center/><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220320231100-urwvfzy.png" style="zoom:50%;" div align=center/><p>这个过程就是局部的信息计算，节点收集信息，进行转换，然后再传递给别的节点。</p><p>loopy 信念传播算法是一种迭代算法，节点 i 传递给邻居节点 j 的信息是 i 对 j 的状态的信念（比如节点 i 认为 j 是某个类的概率），而节点 i 所接受的信息又来自于其邻居，因此可以将上面那句话写成：</p><blockquote><p>I (node i) believe that you (node j) belong to class Y_j with probability … </p></blockquote><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220322201017-9ivd6hf.png" style="zoom: 80%;" div align=center/><p>该算法用到的一些记号：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220322201100-rv5xxc5.png" style="zoom:50%;" div align=center/><p>算法步骤：</p><ul><li><p>初始化所有的信息为 1</p></li><li><p>对每个节点进行迭代：假设现在在节点 i 上，节点 i 传递给节点 j 的信息为 (即节点 i 认为节点 j 属于 $Y_j$ 的 belief)：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220322225819-xl91k7b.png" style="zoom:80%;" div align=center/></li></ul><p>也就是说节点 i 收集整合来自下游的信息（下游节点认为节点 i 属于 $Y_i$ 的 belief，即最后一项连乘）乘以其自己认为自己属于某一类的概率（先验），而 label-label potential 表示节点 i 的标签如何影响节点 j 的标准，因此乘以这个值就是要向节点 j 传递的信息（i 认为 j 应该是某类的 belief），求和是对所有可能的 i 节点的类求和。</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220322230718-2wm1wdh.png" style="zoom:67%;" div align=center/><p>但是当图中出现环的时候就可能有问题：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220322230807-35mlurt.png" style="zoom:67%;" div align=center/><p>因为此时一个节点的下游分支就有可能不是独立的（用乘法就有问题），最终导致错误的信息被放大，但是实际情况这个影响不大（实际情况中环比较大，使得这个影响减弱），总结：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220322231147-2vzflci.png" style="zoom:50%;" div align=center/><h2 id="第六课"><a href="#第六课" class="headerlink" title="第六课"></a>第六课</h2><p>先来回顾一下之前学习的 node embedding 方法：</p><p>node embedding 就是把图中的节点映射到 d 维的 embedding 空间，使得在图中相似的节点在这个 embedding 空间中是距离较近的，问题就是如何学习这样的映射函数。之前讲过了 encoder + decoder 策略，encoder 将节点映射到 d 维的向量，decoder 就是衡量映射后的向量间的相似性（可以使用点积），然后这个 encoder + decoder 框架的目标就是使得两个节点 embedding 向量 decoder 后的值（即两个向量的内积）和这两个节点在图中的相似性值接近，那么定义这种相似性又有多种方法，比如 DeepWalk 和 nod2vec 的随机游走方法；之前讲的 encoder 是一种最简单的 “shallow” encoding 的方法，也就是 embedding 矩阵的每一列是一个节点的 embedding，这种 shallow encoder 的缺点有：</p><ul><li>需要学习的参数数量和节点的数量相关，因为每个节点都需要学习一个 embedding 向量</li><li>不能迁移到在训练过程中没有见过的节点上，也就是不能对这些节点生成 embedding</li><li>这种方法没有考虑节点或图的特征</li></ul><p>这一节讲的是通过图神经网络来构造编码器（encoder）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326154720-68gy4ix.png" style="zoom:50%;" /><p>图和经典的深度学习输入的数据类型（图片或者序列信息）有什么不同：</p><ul><li>大小可变，拓扑结构复杂，不像图片和序列一样，局部拓扑结构是可变的，而图片和序列的局部拓扑结构是类似的（图片的每个局部结构都是一个方块，序列的局部还是一个线性的结构）</li><li>没有固定的节点次序或者参考点，图片可以从左到右，从上到下；序列从左到右</li><li>图的结构是可变的，并且有多模态的特征，比如节点的特征可以多样性</li></ul><h3 id="图深度学习"><a href="#图深度学习" class="headerlink" title="图深度学习"></a>图深度学习</h3><p>一些符号标记：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326155547-tzz6ws6.png" alt="" style="zoom:50%;" /><p> 一种简单的方法就是讲邻接矩阵和特征拼接起来作为一个矩阵，然后喂给一个深度神经网络：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326163511-fn3trcm.png" alt="" style="zoom: 67%;" /><p>这种方法的问题是：</p><ul><li>参数仍然和节点的数量有关</li><li>不能迁移到不同大小的图上</li><li>对节点的次序敏感，也就是即使保持网络结构不变，将节点的标记改变，最后得到的矩阵也会不一样，导致学习到的网络参数也会不同</li></ul><p>我们可以从图片的卷积神经网络上获得一些启发，在CNN中我们是使用一个滑框（卷积核）来对图片进行操作，将滑框内的像素整合成下一个卷积层的新的像素：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326164038-9ehy6dg.png" alt="" style="zoom:67%;" /><p>在图上就行这种操作会有问题：还是之前讲过的图的局部拓扑结构是变化的，因此我们不能使用类似滑框的方法（也就是在图片上的操作必须要满足平移不变性，而在图上的操作要满足扰动不变性，permutation invariant，即改变节点的次序不影响操作的结果），但是我们可以借鉴 CNN 的思想：将一定范围内的元素进行整合，在图上就是<strong>将一个节点的邻居节点的信息进行整合</strong>：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326164503-s1gl662.png" alt="" style="zoom:50%;" /><p>因此图神经网络的关键想法就是基于局部的邻居节点信息来产生节点的embedding：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326165611-lsx5x8s.png" alt="" style="zoom:50%;" /><p>所以每个节点都有自己的计算图（computation graph），并且我们可以创建任意深度的模型，在每一层节点都有一个 embedding；在 0 层时，节点的 embedding 就是该节点的输入特征，在第 k 层的 embedding 就可以获得离该节点 k 步的节点的信息：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326165929-v486kpd.png" alt="" style="zoom:50%;" /><p>不同的图神经网络的关键区别就在于：如何去聚合和转化邻近节点的信息？一种基本的方法就是对来自各个邻近节点的信息取个平均，然后再用一个神经网络来转化这个聚合的信息：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326170227-fbjz29g.png" style="zoom:50%;" /><p>数学化的形式：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326170351-vtpywpt.png" alt="" style="zoom:50%;" /><p>需要学习的参数就是上式中的 $W_l$ 和 $B_l$ ,前者是对邻近节点进行转化，后者是对自己的embedding向量进行转化。</p><p>接下来就是如何去训练这个模型，可以有两种方法：</p><ul><li><p>监督式的训练，直接用节点的 embedding z 和节点的标签来进行监督训练即可：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326171308-lqblal6.png" alt="" style="zoom:67%;" /></li><li><p>非监督式的训练，利用图的结构，也就是相似的节点有着相似的 embedding，节点的相似性可以用第三课中的方法衡量，比如随机游走的方法，embedding 的相似性可以使用点积来衡量：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326171454-rnaerl0.png" alt="" style="zoom:50%;" /></li></ul><p>可以看到这个<strong>训练的参数对一层中所有的节点来说都是共享的</strong>，也就是说即使对于没有训练过的节点甚至是另一个新的图中的节点，我们也可以得到其 embedding，总结一下在图中应用神经网络得到节点 embedding 的过程：</p><ol><li>定义邻居节点信息汇总函数</li><li>定义节点 embedding 的 loss 函数</li><li>对节点的批次进行训练</li><li>得到节点的 embedding</li></ol><h3 id="GraphSAGE"><a href="#GraphSAGE" class="headerlink" title="GraphSAGE"></a>GraphSAGE</h3><p>前面的方法是通过平均得到邻居节点信息的聚合，而GraphSAGE 则进一步拓展了这一点，并不一定需要平均的操作，下式的 AGG 可以有多种选择，而且是直接将转换后的邻居节点的信息和自身的信息进行连接，不是上面的加和：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326212546-qthx1jx.png" alt="" style="zoom:50%;" /><p>比如 AGG 可以选择平均，和上面的GCN一样，也可以选择池化操作（min&#x2F;max），甚至可以用更复杂的 LSTM，但是需要注意的是：在使用 LSTM时需要将邻居节点的次序打乱，从而避免模型记住了次序（也就是我们需要的是次序无关的模型）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326212838-b5hkb5x.png" alt="" style="zoom:50%;" /><p>总结：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326212917-qekkdwe.png" alt="" style="zoom:50%;" /><h2 id="第七课"><a href="#第七课" class="headerlink" title="第七课"></a>第七课</h2><p>一般的 GNN 架构分成 5 个部分，即GNN 层，包括信息的转换和整合；GNN 层之间如何连接；图的增强，包括特征和图结构的增强；学习目标：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326213542-bujxnww.png" alt="" style="zoom:50%;" /><h3 id="GNN-层"><a href="#GNN-层" class="headerlink" title="GNN 层"></a>GNN 层</h3><p>一个单独的 GNN 层的作用是将一组向量（来自邻居节点的embedding 和自己的embedding向量）给压缩成一个向量:</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326213948-h6lsmxe.png" alt="" style="zoom:50%;" /><p>那么一个 GNN 层可以分成两个过程：</p><ul><li>信息的计算</li><li>信息的汇聚</li></ul><p>信息的计算就是每个节点会计算自己的信息，然后传递给其他的节点，一个简单的例子就是线性转化，将节点的特征（embedding）乘以一个权重，对于多个节点（一层）来说就是乘以一个权重矩阵：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326214649-zl7mpkk.png" alt="" style="zoom:50%;" /><p>信息的汇聚就是将来自节点转化后的信息进行整合，这个整合的要去就是对节点次序不敏感，可以使用求和，平均或者最大&#x2F;最小操作，由于在上述计算过程中我们并没有考虑目标节点自身的信息，所以需要将这个信息加入：在信息计算步骤对自身节点单独赋予参数进行计算，然后在汇聚阶段将邻居的信息和自身的信息进行联合：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326215214-j1c8h3z.png" alt="" style="zoom:50%;" /><p>为了增加模型的表达能力还需要增加非线性的激活函数，这个激活函数可以添加在信息计算或者信汇聚步骤。下面来看上节中讲过的 GCN 和 GraphSAGE 如何用这种信息计算和信息汇聚的框架来理解：</p><p>对于 GCN 原始的表示为：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326215653-f67pjcs.png" alt="" style="zoom:50%;" /><p>可以将 W 写进去，就可以看成计算（乘以 W）和汇聚步骤（求和）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326215735-5migblj.png" style="zoom:50%;" /><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326215805-upl5m4g.png" alt="" style="zoom:50%;" /><p>对于 GraphSAGE ，原始的形式为：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326220132-bipkrgj.png" alt="" style="zoom:50%;" /><p>信息计算是在 AGG 函数内部进行的，比如上节讲过的 3 种选择：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326220304-og2bqrk.png" alt="" style="zoom:50%;" /><p>然后信息汇聚过程分为两步，第一步为 AGG 函数汇聚邻居节点的信息，第二步是和自己的信息进行合并，然后乘上个 W ：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326220505-wjb24av.png" alt="" style="zoom:50%;" /><p>GraphSAGE 一般还包括一个 L2 标准化的过程，对每一层的所有节点的 embedding 向量进行 L2 标准化，使得每个向量的范围差不多（有相同的 L2 范数）。</p><h5 id="GAT"><a href="#GAT" class="headerlink" title="GAT"></a>GAT</h5><p>图注意力网络应用了注意力机制，也就是对每个邻居节点的关注度不一样，GAT 的一般形式为：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326222122-v3v7msd.png" alt="" style="zoom:50%;" /><p>通过比较这个式子和上面的 GCN的形式，可以发现 GCN 中 $\alpha_{vu}$ 就是 $1&#x2F;|N(v)|$ 在这里面每个节点的重要性都是一样的，但是实际情况更可能是节点的每个邻居不是同等重要的，所以我们可以使得这个 $\alpha_{vu}$ 成为一个可学习得参数，来赋予不同的节点不同的权重。这个注意力权重是通过注意力机制 $\alpha$ 计算出来的：</p><ul><li><p>先通过 $\alpha$ 基于一对节点转化后的信息计算注意力系数 $e_{vu}$ :</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326223249-5i8fnhk.png" alt="" style="zoom:50%;" /></li><li><p>然后通过 softmax 函数将注意力系数标准化为最终的注意力权重 $\alpha_{vu}$</p></li></ul><p>那么现在的问题就是这个注意力机制 $\alpha$ 是什么？这个有多种选择，一种方法就是通过神经网络来训练这个参数：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326223555-2b0fwsz.png" alt="" style="zoom:50%;" /><p>NLP 中的多头注意力机制也可以在这里面应用，可以训练多个注意力机制，得到多个权重，最后将这些embedding 聚合起来：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326223724-92zc4m6.png" alt="" style="zoom:50%;" /><h3 id="实践中的-GNN-层"><a href="#实践中的-GNN-层" class="headerlink" title="实践中的 GNN 层"></a>实践中的 GNN 层</h3><p>现代的一些深度学习的模块也可以加到 GNN 层中：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326224116-ah7fiy9.png" alt="" style="zoom:50%;" /><ul><li><p>Batch Normalization，批次标准化可以稳定神经网络的训练过程，给定一个批次的输入（节点 embedding），将这些 embedding 向量归一化到均值为0 ，方差为1：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326224327-2eentle.png" alt="" style="zoom:50%;" /></li><li><p>Dropout，减轻过拟合现象，<strong>在GNN 中 dropout是应用在线性层的</strong>，比如转化信息的 w 操作：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326224530-m0f972c.png" alt="" style="zoom:50%;" /></li><li><p>激活函数：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326224738-150qndo.png" alt="" style="zoom:50%;" /></li></ul><h3 id="GNN-层的叠加"><a href="#GNN-层的叠加" class="headerlink" title="GNN 层的叠加"></a>GNN 层的叠加</h3><p>接下来就需要将不同的 GNN 层叠加在一起，最直接的方法就是顺序叠加 GNN 层，输入是原始的节点特征，在 L 层的 GNN 后输出是节点的 embedding 向量：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220327141929-75jtckx.png" style="zoom:50%;" /><p>但是这样叠加很多 GNN 层可能会出现 over-smoothing 问题，也就是最后不同节点的 embedding 向量是非常类似的，而在不是我们想要的，我们需要的是不同的节点有不同的可分辨的 embedding，那么为什么会出现这种问题呢？首先需要了解感受野的概念（receptive field）和 CNN 中的类似，感受野指的是<strong>决定一个节点 embedding 的一组节点</strong>，也就是在 GNN 层的信息流动过程中，感兴趣的节点是从这组节点中收集信息的，在有 K 层的 GNN 中每个节点的感受野是距离其 k 步内（k-hops away）的邻居节点，比如下面的例子，黄色节点的感受野随着 GNN 层数的增多也越来越大，在 3 层 GNN 中其感受野已经是几乎所有节点了：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220327142544-ty8jyc6.png" style="zoom:50%;" /><p>因此如果我们看两个节点感受野的重合就可以知道为什么 over-smooth 问题会出现，如下图的两个黄色节点，在 3-hop 内的共同邻居几乎覆盖整个网络的节点：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220327142715-1yj89hl.png" style="zoom:50%;" /><p>所以<strong>如果两个节点的感受野有较大的重合，那么这两个节点收集到的信息几乎是一样的，并且每个 GNN 层的参数也是在节点间是共享的，那么就可能会导致最终两个节点的 embedding 向量是类似的</strong>，也就是所谓的 over-smooth 问题。那么如何去减轻这种 over-smooth 问题呢？</p><p>第一个考虑的问题就是谨慎地添加更多的 GNN 层，从上面的描述可以看出GNN 的层和 CNN 的层有所不同，GNN的层的深度表示想要获取多少步远的节点信息 （hops） 不一定越深的网络的表达能力就越好。因此在设计网络层数的时候可以考虑：</p><ul><li>分析解决问题所必须的感受野</li><li>设置 GNN 的层数略大于我们所需要的感受野（不要一味的增大层数）</li></ul><p>第二个问题就是在 GNN 层数比较小的情况下，如何增加 GNN 的表达能力？</p><ul><li><p>可以增加每一层 GNN 的表达能力，比如可以在信息计算和汇聚步骤使用更加深的神经网络</p></li><li><p>可以把 GNN 层和其他的非 GNN 层结合起来：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220327143750-72coapk.png" style="zoom:50%;" /></li></ul><p>如果我们的问题仍然需要比较大的 GNN 层数，如何在不减少 GNN 层的情况下减轻 over-smooth 问题呢？这里可以借鉴<strong>残差连接</strong>的思想，也就是 over-smooth 是由于 GNN 过深导致，那么在较浅的 GNN 层中节点的 embedding 可以更好的区分节点，因此我们可以通过 skip connections 直接在后面较深的 GNN 层中加入之前浅层 GNN 中的这些信息，：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220327144218-m7ts3fh.png" style="zoom:50%;" /><p>这种方法类似于创建了一个混合模型，将之前的GNN 模型和该层的 GNN 进行加权组合：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220327144419-iooy8wd.png" style="zoom:50%;" /><h2 id="第八课"><a href="#第八课" class="headerlink" title="第八课"></a>第八课</h2><p>下一个问题就是进行节点或者图特征的增强，这一点可以类比 CNN 中的图像增强操作，对应下图中的第 4 点：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220326213542-bujxnww.png" style="zoom:50%;" /><p>需要图增强的原因是：并不是在所有情况下我们都可以直接将原始的图转化成 GNN 所需要的计算图，下面是一些例子：</p><ul><li>原始图缺少节点的特征，我们可以进行<strong>特征增强</strong></li><li>图过于稀疏，进行信息传播时效率低下，可以<strong>添加虚拟的节点或者边</strong>来解决</li><li>图过于稠密，在进行信息传播时计算就比较复杂，比如一个节点的度非常高，如果直接将原始的图转化为计算图，那么就需要整合该节点所有邻居节点的信息，这个计算就比较耗时，可以<strong>对邻居节点采样</strong>来进行信息计算</li><li>图太大，无法将计算图导入 GPU 进行运算，<strong>对图进行采样</strong>，利用子图进行计算 embedding</li></ul><h3 id="特征增强"><a href="#特征增强" class="headerlink" title="特征增强"></a>特征增强</h3><p>进行特征增强通常是由于原始图缺少节点的特征，比如我们只有图的邻接矩阵信息；常用的方法有：</p><ul><li>给每个节点赋予相同的常数</li><li>给每个节点赋予独特的 ID，然后可以将这些 ID 转化为 one hot 向量</li></ul><p>下面是两者的比较：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328180230-ur2ft9j.png" alt="" style="zoom:50%;" /><p>还有一种情况下需要特征增强：只通过 GNN 难以学习某些特征，比如某个节点所在的环的长度，如下面两个图中节点 v1 所在环的长度一个是 3，一个是 4，但是这两个图中所有节点的度都是 2，因此两个图的计算图是完全相同的：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328180520-6nv5ckw.png" alt="" style="zoom:50%;" /><p>所以通过 GNN 无法分辨这两种节点的区别，但是在某些情况下这种区别是重要的，比如分子结构中长度为 3 的环和长度为  4 的环的功能可能完全不一样。一种解决方法就是添加一个向量来表示节点所在环的长度：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328180800-sivt9ed.png" alt="" style="zoom:50%;" /><p>另外在第二课中学习的节点特征编码方法都可以使用，比如聚类系数，PageRank，节点中心性等</p><h3 id="图增强"><a href="#图增强" class="headerlink" title="图增强"></a>图增强</h3><p>对于比较稀疏的图，我们可以增加虚拟的节点或者边；对于边，常用的方法是<strong>增加长度为 2 的虚拟边</strong>，从而连接两个距离为 2 的节点，因此在计算 GNN 时可以使用的不再是原始图的邻接矩阵 A，而是 $A+A^2$ (之前讲过两个节点之间长度为 K 的路径的数量就为图的邻居矩阵的K次方的相应位置的数值)，一个典型的例子就是 “作者-论文” 二部图，添加这样的虚拟节点后就可以表示作者的协作关系，也就是如果两个作者节点之间有这种虚拟边的连接就表明这两个作者是这个虚拟边所通过的论文的共同作者：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328182325-88bqc4u.png" alt="" style="zoom: 67%;" /><p>对于节点，可以添加一个和所有节点都有连接的虚拟节点，比如现在有一个非常稀疏的图，两个节点间最短的路劲长度都有 10，通过添加这样的虚拟节点后，所有的节点间都有距离为 2 的路径了，可以有效的提高信息传递的效率：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328182630-2qo12qw.png" alt="" style="zoom:67%;" /><p>对于过于稠密的图，为了计算的高效，需要对邻居节点进行采样操作：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328183104-v0il80r.png" alt="" style="zoom:50%;" /><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328183118-g29rdxo.png" alt="" style="zoom:50%;" /><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328183136-79wpcja.png" alt="" style="zoom:50%;" /><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328183147-y12actw.png" style="zoom:50%;" /><p>（这里的 next layer 也可以表示在下一个 epoch 的操作）</p><p>总计一下目前讲过的东西：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328183355-7j4xayp.png" style="zoom:50%;" /><h3 id="GNN-预测"><a href="#GNN-预测" class="headerlink" title="GNN 预测"></a>GNN 预测</h3><p>下一个问题就是使用 GNN 进行预测，不同的图任务需要不同的预测方法：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328183606-p5ap93i.png" alt="" style="zoom:50%;" /><p>对于<strong>节点</strong>，可以直接使用 GNN 产生的节点 embedding 进行预测：在 GNN 计算后我们可以得到 d 维的节点 embedding（$h_v^{L}$)，需要使用一个矩阵来将节点的 embeeding 从 d 维的 embedding 空间映射到 k 维的预测空间（假设分类任务的类别有 k 个，对于回归就是 1）：</p><p>$$<br>\hat{y_v}&#x3D;Head_{node}(h_v^{L})&#x3D;W^Hh_v^L<br>$$</p><p>对于<strong>边</strong>，预测需要使用节点对:</p><p>$$<br>\hat{y_{uv}}&#x3D;Head_{edge}(h_u^L,h_v^L)<br>$$</p><p>这个 $Head_{edge}$ 可以有多种选择，比如：</p><ul><li><p>将两个节点的 embedding 直接连接起来，然后输进一个线性层，这个线性层的作用就是将维度为 2d 的 embedding 映射成 k 维的 embedding</p></li><li><p>也可以直接将两个节点的 embedding 进行点积运算，适用于单个值的预测（比如预测两个节点之间有没有连接），这种方法可以进一步扩展到 k 维的预测：类似于多头注意力，使用多个矩阵参数得到 k 个点积，最后把这 k 个点积拼起来得到 k 维的向量：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328185519-nlzvyr2.png" alt="" style="zoom:67%;" /></li></ul><p>对于图的预测，使用的是所有节点的 embedding，类似于 GNN 层中的汇聚函数 AGG，同样的这种汇聚操作可以是各种池化（平均，最小&#x2F;最大，求和等），但是直接对所有节点 embedding 进行池化操作可能会损失信息，下面是一个例子：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328185844-wa7snke.png" alt="" style="zoom:50%;" /><p>一种解决方法是通过<strong>层次汇聚</strong>来聚合节点的信息，比如还是上面那个例子，我们可以先对前两个节点和后3个节点进行汇聚，然后再对得到的两个结果进行汇聚：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328211626-qvajezk.png" alt="" style="zoom: 67%;" /><p>另一种有意思的层次汇聚方法是 <strong>DiffPool</strong>，通过网络中的 community 分析对节点进行分层汇聚，而这个 community 检测也可以通过另一个 GNN 来完成，这两个 GNN 可以并行运算，这样就不需要另外的方法进行 community 检测了：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328211918-b6esloq.png" alt="" style="zoom: 67%;" /><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328211957-lr0m8rw.png" style="zoom:67%;" /><h3 id="GNN-训练"><a href="#GNN-训练" class="headerlink" title="GNN 训练"></a>GNN 训练</h3><p>这一部分和经典的深度学习没有什么区别：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328212121-5aj9nyu.png" style="zoom: 67%;" /><h3 id="数据集分割"><a href="#数据集分割" class="headerlink" title="数据集分割"></a>数据集分割</h3><p>还有一个关键的问题就是我们在训练 GNN 时如果设置训练集，验证集和测试集？</p><p>一般来说机器学习中数据集的划分有两种方式：</p><ul><li><p>固定划分，也就是把数据分成固定的三份：</p><ul><li>训练集用来优化 GNN 模型参数</li><li>验证集用来选择模型超参数</li><li>测试集用来检测并报告模型的性能</li></ul></li><li><p>随机划分，也就是随机多次划分训练集，验证集和测试集，报告多次平均的性能</p></li></ul><p>但是对于图数据来说，划分数据集和一般的机器学习任务有所不同，比如如果是图片数据集，那么每个数据点是一张图片，每个数据点之间是独立的，但是如果对图的节点进行预测，那么每个数据点是图中的一个节点，这样数据点之间就不是独立的关系了，比如下图的节点5会影响节点1的预测，因为其参与节点1 的信息传递过程，那么如果把节点1 划分到训练集，把节点5划分到测试集，就会造成信息泄露：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328222817-t95xwnc.png" style="zoom:67%;" /><p>对图的数据集划分有两类方法：</p><ul><li><p>Transductive：对于所有的数据集划分，输入的图都可以可被观测的，只划分标签，比如对上图而言，在训练步骤使用整个图计算节点的 embedding，但是计算 Loss 时只使用节点 1和2的标签；在验证步骤也是使用整个图基于训练步骤训练的 GNN 模型计算节点的embedding，但是在评估时使用节点 3 和4的标签</p></li><li><p>Inductive：破坏划分数据集之间的连接，从而得到不同的独立的图，在训练步骤使用节点 1和2的图，并用节点 1和2 的标签来计算 Loss；在验证步骤基于训练步骤的模型在节点3和4构成的图中计算 embedding，并使用 3和4的标签来评估模型：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328223635-z261man.png" style="zoom:67%;" /></li></ul><p>总结：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328223659-ew09eev.png" alt="" style="zoom:50%;" /><p>需要注意的是预测图中的边，也就是预测两个节点之间是否存在边，这种问题是一种自监督问题，因为不需要外部的标签，也就是在训练过程中隐藏部分节点之间的边，然后让 GNN 模型来预测这些边（supervision edge训练步骤不会输入GNN）。</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328224810-rfffafh.png" alt="" style="zoom:80%;" /><p>预测边同样也有两种方法：</p><ul><li><p>Inductive：在训练集，验证集和测试集中都有两种类型的边：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328224838-homc0i5.png" alt="" style="zoom:67%;" /></li><li><p>Transductive：逐步的过程：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328225104-e8oaree.png" alt="" style="zoom: 50%;" /><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328225131-t9mcwcx.png" alt="" style="zoom:50%;" /></li></ul><p>总结整个的 GNN 训练流程：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220328225156-30tniaq.png" alt="" style="zoom:50%;" /><h2 id="第九课"><a href="#第九课" class="headerlink" title="第九课"></a>第九课</h2><p>这一课主要是讲 GNN 的表达能力，以及如何设计表达能力更强的 GNN 模型</p><h3 id="GIN"><a href="#GIN" class="headerlink" title="GIN"></a>GIN</h3><p>前面讲过 GNN 的通用架构就是使用神经网络从邻居节点收集信息：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220413224547-66zba1u.png" style="zoom:50%;" /><p>不同的 GNN 的神经网络不一样，比如GCN是按元素的平均池化+线性层+ ReLu激活层，而GraphSAGE 是MLP + 按元素的最大池化操作。</p><p>GNN 的表达能力指的是：对于局部邻接结构不同的节点，GNN 能否产生不同的 node embedding？通过前面的学习我们知道 GNN 是通过计算图的方式来收集邻居节点的信息从而得到节点的 embedding，因此<strong>如果两个节点的计算图是完全一样的，那么GNN 就不能分辨这两个节点</strong>，比如下图中的节点 1和2：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220413225417-jnoohoa.png" style="zoom:50%;" /><p>节点颜色表示特征，这里所有节点的特征都是一样的。</p><p>因此在这个限制下，如果 GNN 能将不同的有根子树映射到不同的 node embedding，那么这个GNN就是最具表现力的 GNN （也就是只要局部网络结构不同，GNN 就能分辨出来）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220413230027-bo4m4qq.png" alt="" style="zoom:50%;" /><p>这个想法和单射函数（injective）的概念类似，单射函数指的是将不同的输入映射到不同的输出，也就是这种函数保留了输入的全部信息：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220413230225-nqv5f8n.png" alt="" style="zoom:50%;" /><p>因此<strong>最具表现力的GNN应该将子树单射到node embedding</strong>。</p><p>GNN 是由多层构成的，在每一层中节点收集邻居节点的信息，如果GNN的每一层的汇聚步骤能够完全保留邻接信息，那么最终得到的 embedding也可以区分整个树结构：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220413230824-6twol7j.png" alt="" style="zoom:50%;" /><p>也就是说每一层的<strong>汇聚函数也要是单射的</strong>，下面就来分析这个汇聚函数。</p><p>汇聚函数可以看出一个输入是 multi-set 的函数（multi-set 也就是有重复元素的集合，比如在某一层有节点的特征是一样的），下面来看一下 GCN 和 GraphSAGE 的汇聚函数：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220413231318-dz8e50q.png" alt="" style="zoom:50%;" /><p>GCN 使用的是平均池化，因此如果multi-set相同特征的节点的比例一样多，那么这个汇聚函数就不能分辨不同的multi-set，比如假设黄色绿色节点特征为 one-hot（黄色(1,0)，绿色(0,1)）:</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220413232159-pr3xfon.png" alt="" style="zoom:50%;" /><p>GraphSAGE 的汇聚函数有多种选择，这里以最大池化为例，对于最大池化，如果multi-set 中相同特征的节点集合是一样的，那么也不能分辨：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220413232344-ncyoqnr.png" alt="" style="zoom:50%;" /><p>因此 GCN 和GraphSAGE 的汇聚函数都不是单射函数，所以这两种 GNN 都不是最具表达力的 GNN。那么如何设计这样的 GNN 呢？一种好的解决方法是利用神经网络学习到这种单射的汇聚函数。</p><p>我们可以将单射的 multi-set 函数表示为：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220414091431-ew3t2z9.png" alt="" style="zoom:50%;" /><p>f 进行非线性转化（可以假设转化后的是 one-hot），sum操作可以保留转换后的输入信息，接着 $\phi$ 再进行一个非线性转化，而对 f 和 $\phi$ 则可以使用 MLP 进行近似（一层的MLP就可以逼近任何连续函数），这样得到了最具表现力的 GNN 模型：Graph Isomorphism Network (GIN)，通过 MLP + sum + MLP 学习单射汇聚函数。</p><h3 id="GIN-VS-WL"><a href="#GIN-VS-WL" class="headerlink" title="GIN VS WL"></a>GIN VS WL</h3><p>在第二课的图特征中讲过 WL 核，简要的步骤是：初始化每个节点的颜色；收集每个节点邻居节点的颜色并用预定义的 HASH 函数将收集的颜色映射到新的颜色；迭代收集-映射步骤，在 K步迭代后，每个节点就可以收集 K-hop 的邻居节点信息。在达到稳定状态后，如果两个图有个一样的节点颜色集合，那么这两个图就是同构的（isomorphic）。从这个描述我们可以看到 GIN 就是使用神经网络来学习这个 HASH 函数，WL 在收集信息时是将邻居的颜色和自己节点的颜色合并在一起，因此 GIN 也可以这么做：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220414093747-wtvl7k1.png" alt="" style="zoom:50%;" /><p>由于 GIN 和 WL 的这种关联使得 GIN 和 WL 图核的表达能力是相似的，而WL已经被理论和实践证明可以区分大部分实践的图结构，因此 GIN 也具有区分大部分图结构的能力。</p><h2 id="第十课"><a href="#第十课" class="headerlink" title="第十课"></a>第十课</h2><p>目前遇见的图的边都只有一种类型（虽然可以有权重），这一课主要是讲有着<strong>多种边和节点类型的有向图</strong>的处理方法，这种图也叫异质性图 (heterogeneous graphs)。</p><h3 id="异质性图和相关GCN（RGCN）"><a href="#异质性图和相关GCN（RGCN）" class="headerlink" title="异质性图和相关GCN（RGCN）"></a>异质性图和相关GCN（RGCN）</h3><p>异质性图定义为：</p><p>$$<br>G &#x3D; (V,E,R,T)<br>$$</p><ul><li>V：节点，$v_i \in V$</li><li>E ：边（边类型 r），$(v_i,r,v_j) \in E$</li><li>T：节点类型</li><li>R：关系（边）类型</li></ul><p>现实世界有很多异质性图的例子，比如下面的生物医学知识图：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220502220107-1g02ryx.png" style="zoom:50%;" /><p>不同的节点形状表示不同的节点类型，比如药物，疾病，蛋白等；边的类型也不一样，比如有 target，cause 等。</p><p>我们可以将 GCN 拓展到有着不同边类型的异质性图上，先看单一边类型的有向图，假设我们想要得到下图 A 的 embedding：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220502221528-co4mlt1.png" style="zoom:50%;" /><p>需要将之前的信息传递过程变成沿着图中边的方向的信息传递：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220502221743-myocld5.png" alt="" style="zoom:50%;" /><p>接下来将其拓展到有着多种边类型的图：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220502221825-fa9ib8s.png" style="zoom: 67%;" /><p>可以在每一个 GCN 层中对不同的边类型使用不同的权重（也就是一层中参数不是在所有节点中共享的）</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220502222038-3n215541-20220502222135-qgujyt9.png" style="zoom:50%;" /><p>上图不同的颜色表示不同的权重矩阵，因此 RGCN 的信息传递和汇聚过程可以表示为：</p><ul><li><p>信息传递：分为两部分</p><ul><li><p>一个是节点的边类型为 r 的邻居节点（$c_{u,r}$ 表示类型为 r 的边所定义的自由度）：</p><p>$$<br>m_{u,r}^{(l)}&#x3D;\frac{1}{c_{v,r}}W_r^{(l)}h_u^{(l)}<br>$$</p></li><li><p>一个是节点自身：</p><p>$$<br>m_v^{(l)} &#x3D; W_0^{(l)}h_v^{(l)}<br>$$</p></li></ul></li><li><p>信息汇聚：求和，再进行激活函数操作</p></li></ul><h4 id="RGCN-regularize-the-weights"><a href="#RGCN-regularize-the-weights" class="headerlink" title="RGCN regularize the weights"></a>RGCN regularize the weights</h4><p>但是这样的拓展会带来一种问题：如果一层中边的类型非常多，那么就需要<strong>不同的权重矩阵</strong>，造成参数的激增；有两种方法来缓解这种问题：</p><ul><li>使用分块对角矩阵</li><li>基本学习或者叫字典学习</li></ul><p>原本对每个边类型在每一层都会有一个矩阵，每个矩阵的大小是 $d^{(l+1)} * d^{(l)}$，而使用分块对角矩阵可以使得权重矩阵稀疏化，因此减少参数（<em>没有明白</em>）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220502223658-0zwaq74.png" alt="" style="zoom:50%;" /><p>而字典学习则是将不同边类型的矩阵转化为基本矩阵 ($V_b$) 的不同线性组合（$\sum_{b&#x3D;1}^Ba_{rb}$），而这个 V 则是对于不同的边类型是相同的，所以这个 $a_{rb}$ 可以看出基本矩阵的重要性（权重），因此我们只需要学习这个权重就行了，大大减少了参数量。</p><h4 id="RGCN-example"><a href="#RGCN-example" class="headerlink" title="RGCN example"></a>RGCN example</h4><p>对于节点标签的预测和之前没有什么区别，都是用最后一层的 embedding 连接一个 softmax，得到 k 类的概率。</p><p>对于边预测任务的数据集划分在第八课中讲过了，这里每个边又有不同的类型，这个类型是独立于在第八课中的 Transductive 划分方法中的四类边的（Training message, Traning supervision, validation 和 test）(这里不使用 Inductive ，因为如果随机划分的话，不同类型的边的 message 和 supervision 可能不一样多)。因此对于不同类型的边，分别划分四类边，最后将不同类型的边相应的划分合并：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220503200409-plb1fpf1-20220503200518-708kzka.png" style="zoom: 50%;" /><p>下面来看一个例子：</p><ul><li><p>在训练步骤，假设合并后使用 $(E,r_3,A)$ 作为 supervision 边，其他的都是 message 边：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220503201208-5h36fg3.png" alt="" style="zoom:50%;" /><ol><li>使用 RGCN 对 supervision 边打分（取最后一层的 E 和 A 的 embedding，传给某个打分函数，比如直接 $h_E^T W_{r_1}h_A$）</li><li>通过对 supervision 边的打乱 （比如取 $(E,r_3,B)$）构建负例边，注意负例边不能是 supervision 或者 message 边（比如 C）</li><li>使用 RGCN 对负例边进行打分</li><li>通过交叉熵 loss 优化模型参数（最大化supervision边，最小化负例边）</li></ol></li><li><p>在评估步骤（validation 或者 test）validation 边为 $(E,r_3,D)$  </p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220503203346-kxqvpf8.png" style="zoom:50%;" /><ol><li><p>使用上一步训练的模型计算边 $(E,r_3,D)$ （使用 supervision 和 message 进行 RGCN 计算，然后预测 ED）</p></li><li><p>计算所有负例边的值，负例边不能是 supervision 或者 message 边，因此是 EB 和 EF</p></li><li><p>计算 validation  边的 Rank</p></li><li><p>计算评估指标，可以有两个选择：</p><ol><li>Hits：validation 边有多少比例在 top k 的边里面</li><li>$\frac{1}{Rank}$：validation 边的 rank 越高，这个值就越大</li></ol></li></ol></li></ul><h3 id="知识图：KG-completion-with-embeddings"><a href="#知识图：KG-completion-with-embeddings" class="headerlink" title="知识图：KG completion with embeddings"></a>知识图：KG completion with embeddings</h3><p>知识图是异质性图的一种，节点是实体（entities），节点有类别标签，连接两个节点之间的边代表着节点之间的关系（relationships）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220503222508-5krntw4.png" alt="" style="zoom:50%;" /><p>比如一个书目网络，节点的类型是文章，标题，作者，会议，年份等；而节点之间的边可以表示文章发表在哪里，发表的年份，有什么样的标题，作者是谁这些关系：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220503223140-lybzw0e.png" style="zoom:50%;" /><p>现在已经有很多的知识图的数据，特点是数据量比较大；另外信息不是很完整，比如很多真实的边是丢失的，因此一个重要的任务就是对这些缺失边的填补（<strong>Knowledge Graph Completion</strong>）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220503223407-t39ysfi.png" style="zoom:50%;" /><p>KG 补全和边预测任务还不是一样的，KG补全是给定一个起始节点（head）和边的类型，预测终止节点（tail），比如下图中给定作者 J.K. Rowling 和边 genre (体裁) 预测尾节点 Science Fiction:</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220504212618-79vdsnd.png" style="zoom:50%;" /><p>在知识图谱中的边可以表示成三元组 $(h,r,t)$ ，h 表示 head，t 表示 tail，r 表示 relation；在这个任务中我们使用的是最开始讲过的 shallow embedding，也就是对每个节点学习一个 embedding，而不是使用 GNN（GNN 是对一层所有节点共享参数，而 shallow embedding 是每个节点都有系列参数）。主要想法就是对于一个实际存在的 $(h,r,t)$，$(h,r)$ 的 embedding 应该和 t 的 embedding 接近，问题就是如何得到 $(h,r)$ 的 embedding 以及怎么定义“接近”</p><h4 id="TransE"><a href="#TransE" class="headerlink" title="TransE"></a>TransE</h4><p>一个想法就是如果能从 h 节点沿着边 r 移动到 t 节点，那么说明 h 和 t 之间就是有这样的连接的：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220506222440-rgvk0g4.png" style="zoom:50%;" /><p>因此我们可以使用这样的打分函数：</p><p>$$<br>f_r(h,t)&#x3D;-||h+r-t||<br>$$</p><p>TransE 的学习算法：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220506222750-81bp56g.png" alt="" style="zoom:50%;" /><p>关键有 3 步：</p><ul><li>节点（实体）和边（关系）首先初始化和标准化</li><li>进行负采样，产生一些不在 KG 中的三元组（比如可以固定 head 随机定义没有边连接的 tail）</li><li>依据上面蓝色方框中的 loss 进行更新 embedding – 最小化这个 loss 就是需要前面的正例样本的距离比较小，后面的负例样本的距离比较大</li></ul><p>在异质性的 KG 中关系有着不同的模式：</p><ul><li>对称（反对称）关系：$r(h,t) \Rightarrow r(t,h)$ 或者 $r(h,t) \Rightarrow \lnot r(t,h)$；比如同桌关系，A 是 B 的同桌，B 肯定也是 A 的同桌，反对称关系比如上位词和下位词对应</li><li>相反关系：两个节点之间当边的方向相反，关系也会颠倒，$r_2(h,t) \Rightarrow r_1(t,h)$ ；比如导师和学生指导和被指导的关系</li><li>可传递的关系：$r_1(x,y) \land r_2(y,z) \Rightarrow r_3(x,z)$ ，比如我的母亲的丈夫是我的父亲</li><li>1 对 N 关系，从一个节点有连接多个节点的关系，$r(h,t_1),r(h,t_2)$，比如一个老师和班里的所有学生</li></ul><p>先来看 TransE 可以处理上述关系中的哪些。</p><ol><li><p>反对称关系 ✅，h 可以经过 r 移动到 t，但是 t 不能继续移动 r 到 h：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220506225639-q5vbz92.png" style="zoom:50%;" /></li><li><p>相反关系 ✅，h 可以通过 r2 移动到 t，我们可以将 r1 设成负的 r2，这样 t 就能通过 r1 回到 h（下面的图画反了）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220506225934-6dyppt9.png" style="zoom: 67%;" /></li><li><p>可传递关系 ✅，x 可以通过 r1 到达 y，然后再通过 r2 到达 z，根据向量的加法我们可以将 r3 设为 r1 + r2，那么就可以通过 x 直接从 r3 到 z：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220506230209-axr16dq.png" alt="image.png" style="zoom:50%;" /></li><li><p>对称 ❎，如果对于 h，t 要同时满足 $r(h,t),r(t,h)$ 都存在，那么 $||h+r-t|| &#x3D;0$ 并且 $||t+r-h|| &#x3D;0$，因此 r &#x3D; 0 并且 h &#x3D; t ，但是 h 和 t 是两个不同的节点，所以 TransE 不能对对称关系建模</p></li><li><p>一对多关系 ❎ 因为 t1 和 t2 会映射到同一个节点，但实际上并不是，所以 TransE 不能对一对多关系建模：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220506231759-vdgnnd3.png" style="zoom: 50%;" /></li></ol><h4 id="TransR"><a href="#TransR" class="headerlink" title="TransR"></a>TransR</h4><p>对 TransE 而言，实体和关系在同一个 embedding 空间中，TransR 则是将关系映射到一个不同的“关系空间”中：实体在 $R^d$ 的实体空间中，而关系在 $R^k$ 的关系空间中，通过一个投射矩阵（projection matrix）将实体从 $R^d$ 投射到 $R^k$ ，然后在关系空间中应用与 TransE 类似的打分函数:</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220511211945-nup2w9c1-20220511212047-p4pu6hs.png" style="zoom:50%;" /><p>然后我们再来看 TransR 可以解决上述的哪些关系：</p><ol><li><p>对称关系，我们可以将 t 和 h 映射到关系空间的相同一点，那么此时 r &#x3D; 0：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220511212427-wxqfzma.png" style="zoom:50%;" /></li><li><p>反对称关系，可以，和上面类似：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220511212619-z16n9yn.png" style="zoom:50%;" /></li><li><p>1-N 关系，可以将 t1 和 t2 映射到关系空间中的同一点上：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220511213517-yb004bx.png" style="zoom:50%;" /></li><li><p>相反关系，可以使两个关系的映射矩阵相同，也就是映射到同一个空间中，然后设两个关系是相反的：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220511213923-g9tyskw.png" style="zoom:50%;" /></li><li><p>可传递关系 可以，但是看不懂</p></li></ol><h4 id="DistMult"><a href="#DistMult" class="headerlink" title="DistMult"></a>DistMult</h4><p>TransE 和 TransR 的打分函数都是基于距离的，而 DistMult 则不是使用距离，而是使用向量的乘积（类似于内积）：按元素相乘再相加：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220511223359-ukjb5n9.png" style="zoom:50%;" /><p>直觉上可以将这个打分函数理解为 $h\cdot r$ （定义为 h 和 r 的逐元素相乘）与 t 的 <strong>cosine 相似性</strong>（这个打分函数相当于 cosine 相似性的分子，但是分母是一个标量，相当于标准化因子，对于优化没啥用）；那么这个$h\cdot r$ 就可以定义一个超平面，如果 t 与 $h\cdot r$ 在超平面的两侧，打分函数就是负的，如果在同侧就是正的：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220514161617-7h1a2z8.png" style="zoom:50%;" /><ol><li><p>1 对 N 关系：可以，因为可以找到使得 $&lt;h,r,t_1&gt;&#x3D;&lt;h,r,t_2&gt;$ 的两个不同的关系：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220514163331-r2fmmrt.png" style="zoom:50%;" /></li><li><p>对称关系：可以，因为三者对调不影响最后的结果</p></li><li><p>反对称关系：不可以，还是因为对调 h 和 t 并不影响最终的结果，得到的是同一个值</p></li><li><p>相反关系：不可以，如果相反关系成立，那么就有：$f_{r_2}(h,t)&#x3D;&lt;h,r_2,t&gt;&#x3D;&lt;t,r_1,h&gt;&#x3D;f_{r_1}(t,h)$ ，这说明 $r_2&#x3D;r_1$，但是两个相反关系的 embedding 不应该相等，比如导师和学生这两个关系</p></li><li><p>可传递关系：不可以，可传递关系可以表示为：$r_1(x,y)\land r_2(y,z) \Rightarrow r_3(x,z)$ ，前面说过 DistMult 通过起始节点和关系定义了一个超平面，但是两个超平面的并集并不能表述为另一个单独的超平面</p></li></ol><h4 id="ComplEx"><a href="#ComplEx" class="headerlink" title="ComplEx"></a>ComplEx</h4><p>ComplEx 是基于 Distmult，但是将实体和关系映射到复数向量空间 $C^k$；和 Distmult 类似，使用三个向量相乘求和的方式作为打分函数：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220514195544-l61utzh.png" style="zoom:50%;" /><p>这里需要注意的是 tail 节点使用的是共轭复数（原来的复数的虚部取负值）；另外最后求和的结果是取最终结果的实部。下面来看这种方法处理常见的关系的能力：</p><ol><li><p>反对称关系：可以，因为采取的是共轭复数，将 h 和 t 调换位置得到的值不一样</p></li><li><p>对称关系：可以，当 r 的虚部为 0 时有：</p><p>$$<br>f_r(h,t)&#x3D;Re(\sum_ih_i\cdot r_i\cdot \bar{t_i})&#x3D;\sum_iRe(r_i\cdot h_i\cdot \bar{t_i})<br>$$</p><p>$$<br>&#x3D;\sum_ir_i\cdot Re(h_i\cdot \bar{t_i})&#x3D;\sum_ir_i\cdot Re(\bar{h_i}\cdot t_i)&#x3D;\sum_i Re(r_i\cdot \bar{h_i}\cdot t_i)&#x3D;f_r(t,h)<br>$$</p></li></ol><p>这里要注意 $Re(h_i \cdot \bar{t_i})&#x3D;Re(\bar{h_i}\cdot t_i)$，可以设  h 为 a + bi, 设 t 为 c + di，因此：</p><p>$$<br>left &#x3D; (a+bi)(c-di)&#x3D;ac-adi+bci-bd,(i^2 &#x3D; 1) \<br>right &#x3D; (a-bi)(c+di)&#x3D;ac+adi-bdi-bd<br>$$</p><p>所以取实部之后两边是一样的。</p><ol start="3"><li>相反关系：可以，取两个关系向量为共轭的就行</li><li>可传递关系：不可以，和 DistMult 一样</li><li>1 对 N 关系：可以， 和 DistMult 一样</li></ol><p>总结上面几种方法的特点：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220514214258-5cuh94h.png" style="zoom:50%;" /><p>在实践中我们可以使用这张表来帮助我们选择合适的 embedding 方法。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R 启动设置</title>
    <link href="/2022/03/06/R_options/"/>
    <url>/2022/03/06/R_options/</url>
    
    <content type="html"><![CDATA[<p>R 及 Rstudio 启动时的环境配置，主要包括 <code>.Rprofile</code>, <code>.Renviron</code>, <code>Rprofile.site</code>, <code>Renviron.site</code>, <code>rsession.conf</code>, <code>repos.conf</code> 等文件</p><span id="more"></span><p>最近升级了系统了的 <code>gcc</code> 版本，但是在 R 中编译包时还是提示找不到动态库，搜寻了一番才发现原来 Rstudio 中的环境变量不是从 <code>.bashrc</code> 中继承的，<a href="https://stackoverflow.com/questions/31121645/rstudio-shows-a-different-path-variable">r - RStudio shows a different $PATH variable - Stack Overflow</a>：</p><blockquote><p>When you start R from the command line and then run <code>system(echo $PATH)</code>, you are inheriting the Bash environment from your command line session. When you launch RStudio from, say, the Dock or Finder on a Mac or as a system application in Ubuntu, and not from the command line, RStudio does not gets its environment from your <code>/.bashrc</code>. Instead it will get the environment variables from system-wide settings. How it finds those system settings will depend on the operating system.</p></blockquote><p>因此学习一下 R 中环境变量的设置是有必要的。</p><p>R 启动时有 3 个步骤：启动 R ，设置环境变量，载入 profile 脚本；在后两个步骤中 R 会寻找服务器层面或者用户&#x2F;项目层面的文件，这 3 个步骤及相关的文件可用下图来表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/R_STARTUP.jpeg"></p><p>R 启动时的选项和环境变量一般由下表列出的文件控制：</p><table><thead><tr><th>File</th><th>Who Controls</th><th>Level</th><th>Limitations</th></tr></thead><tbody><tr><td><code>.Rprofile</code></td><td>User or Admin</td><td>User or Project</td><td>None, sourced as R code.</td></tr><tr><td><code>.Renviron</code></td><td>User or Admin</td><td>User or Project</td><td>Set environment variables only.</td></tr><tr><td><code>Rprofile.site</code></td><td>Admin</td><td>Version of R</td><td>None, sourced as R code.</td></tr><tr><td><code>Renviron.site</code></td><td>Admin</td><td>Version of R</td><td>Set environment variables only.</td></tr></tbody></table><h3 id="Rprofile"><a href="#Rprofile" class="headerlink" title=".Rprofile"></a>.Rprofile</h3><p><code>.Rprofile </code> 文件是用户可控制的文件，用来设置选项（一些默认值，如通过 options() 函数设置的全局选项）；<code>.Rprofile </code> 文件可以是用户或者项目级别的，用户级别的则放到用户的 <code>home</code> 路径下，而项目级别的则放到特定项目的路径下。虽然有两种 <code>.Rprofile </code> 文件，但是 R 只会载入一个，当存在项目级别的 <code>.Rprofile </code>  时会优先载入项目级别，而不是用户级别，因此如果想要载入两个，则需要在项目级别的 <code>.Rprofile </code> 开始就加上 <code>source(&quot;~/.Rprofile&quot;)</code>。从这里我们也可以看出，<code>.Rprofile</code> 文件中必须是 R 代码的形式，因此如果想要在这个文件中设置环境变量，必须要使用 <code>Sys.setenv(key=&quot;value&quot;)</code> 命令。</p><p>可以方便地使用 <code>usethis::edit_r_profile()</code> 函数来编辑 <code>.Rprofile</code> 文件，这个函数有一个 <code>scope</code> 参数，可以指定修改的是用户（user）还是项目（project）级别的 <code>.Rprofile</code> 文件（注意修改后要重启）。</p><p>主要注意的是一般不要将影响代码复现性或者可移植性的选项放在 <code>.Rprofile</code> 文件中，比如 <code>options(stringsAsFactors = FALSE)</code> , 还有读数据，载入包，定义函数等一般也不放在 <code>profile</code> 文件中。</p><h3 id="Renviron"><a href="#Renviron" class="headerlink" title=".Renviron"></a>.Renviron</h3><p><code>.Renviron </code> 也是一个用户可控制的文件，用来设置环境变量，这个文件不像 <code>.Rprofile</code> 是代码形式的，而是键值形式的（key&#x3D;value），和 <code>.bashrc</code> 差不多；在 R 会话里面可以使用 <code>Sys.getenv(&quot;key&quot;)</code> 来获取该文件中对应的环境变量值。和  <code>.Rprofile</code>  一样，这个文件也可以是用户级别或者项目级别的，同样地，只会有一个能被导入，如果同时存在用户和项目级别的 <code>.Renviron </code> 文件，优先导入项目级别的文件。</p><p>可以使用 <code>usethis::edit_r_environ()</code> 函数来编辑 <code>.Renviron</code> 文件。</p><h3 id="Rprofile-site-和-Renviron-site"><a href="#Rprofile-site-和-Renviron-site" class="headerlink" title="Rprofile.site 和 Renviron.site"></a>Rprofile.site 和 Renviron.site</h3><p> <code>.Rprofile</code> 和  <code>.Renviron</code> 都是用户层面或者项目层面的配置文件，相对应的就是<code>Rprofile.site</code> 和<code>Renviron.site </code>，为系统层面的，是管理员设定的，对于用户来说可以使用  <code>.Rprofile</code> 文件中的设置覆盖这些文件中的设置；这些文件可以被放置在 <code>R_HOME</code> 的 <code>etc</code> 目录下。</p><hr><p>可以在项目的 <code>.Rprofile</code> 文件中加入以下代码，使得每次启动 session 时都会自动生成 <code>sessionInfoLog</code> 文件：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs R">.Last <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">interactive</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    <br>    <span class="hljs-comment">## check to see if we&#x27;re in an RStudio project (requires the rstudioapi package)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>requireNamespace<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rstudioapi&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>      <span class="hljs-built_in">return</span><span class="hljs-punctuation">(</span><span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span><br>    pth <span class="hljs-operator">&lt;-</span> rstudioapi<span class="hljs-operator">::</span>getActiveProject<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">is.null</span><span class="hljs-punctuation">(</span>pth<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>      <span class="hljs-built_in">return</span><span class="hljs-punctuation">(</span><span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span><br>    <br>    <span class="hljs-comment">## append date + sessionInfo to a file called sessionInfoLog</span><br>    cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Recording session info into the project&#x27;s sesionInfoLog file...&quot;</span><span class="hljs-punctuation">)</span><br>    info <span class="hljs-operator">&lt;-</span>  capture.output<span class="hljs-punctuation">(</span>sessionInfo<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    info <span class="hljs-operator">&lt;-</span> paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;\n----------------------------------------------&quot;</span><span class="hljs-punctuation">,</span><br>                  paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Session Info for &#x27;</span><span class="hljs-punctuation">,</span> Sys.time<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                  paste<span class="hljs-punctuation">(</span>info<span class="hljs-punctuation">,</span> collapse <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                  sep  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">)</span><br>    f <span class="hljs-operator">&lt;-</span> file.path<span class="hljs-punctuation">(</span>pth<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;sessionInfoLog&quot;</span><span class="hljs-punctuation">)</span><br>    cat<span class="hljs-punctuation">(</span>info<span class="hljs-punctuation">,</span> file <span class="hljs-operator">=</span> f<span class="hljs-punctuation">,</span> append <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><hr><p>参考：</p><ol><li><p><a href="https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">Managing R with .Rprofile, .Renviron, Rprofile.site, Renviron.site, rsession.conf, and repos.conf – RStudio Support</a></p></li><li><p><a href="https://rviews.rstudio.com/2017/04/19/r-for-enterprise-understanding-r-s-startup/">R for Enterprise: Understanding R’s Startup · R Views (rstudio.com)</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 STAR-Fusion 鉴别融合基因</title>
    <link href="/2022/01/24/star_fusion/"/>
    <url>/2022/01/24/star_fusion/</url>
    
    <content type="html"><![CDATA[<p>使用 STAR-Fusion 及相关的软件从 RNA-Seq 数据中预测融合基因</p><span id="more"></span><h2 id="安装-STAR-Fusion"><a href="#安装-STAR-Fusion" class="headerlink" title="安装 STAR-Fusion"></a>安装 STAR-Fusion</h2><p>有两种方法可以安装 STAR-Fusion，一种是下载 Github 的 <a href="%5BSTAR-Fusion/STAR-Fusion/releases%5D(https://github.com/STAR-Fusion/STAR-Fusion/releases)">release</a> （注意下载第一个，其他两个是自动生成的，可能有些组件不全）；第二种方法就是克隆 Github 仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#下载好解压后,进入文件夹</span></span><br>make<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#然后将STAR-Fusion的路径加入Bashrc的 PATH即可</span></span><br></code></pre></td></tr></table></figure><p>STAR-Fusion 依赖一些其他的软件，需要安装：</p><ul><li><p>STAR</p></li><li><p>samtools</p></li><li><p>一些 Perl 模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">perl -MCPAN -e shell<br>install DB_File<br>install URI::Escape<br>install Set::IntervalTree<br>install Carp::Assert<br>install JSON::XS<br>install PerlIO::gzip<br></code></pre></td></tr></table></figure></li></ul><p>先安装 STAR：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Get latest STAR <span class="hljs-built_in">source</span> from releases</span><br>wget https://github.com/alexdobin/STAR/archive/2.7.10a.tar.gz<br>tar -xzf 2.7.10a.tar.gz<br>cd STAR-2.7.10a<br>cd source<br>make STAR<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#将 STAR 加入 PATH</span></span><br>vi ~/.bashrc<br><span class="hljs-meta prompt_">#</span><span class="language-bash">bashrc添加：</span><br>PATH=&quot;/home/data/t040201/software/STAR-2.7.10a/bin/Linux_x86_64:$PATH&quot;<br>source ~/.bashrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#验证一下是否安装成功</span></span><br>cd <br>STAR<br><span class="hljs-meta prompt_">#</span><span class="language-bash">出现以下信息则安装成功</span><br>Usage: STAR  [options]... --genomeDir /path/to/genome/index/   --readFilesIn R1.fq R2.fq<br>Spliced Transcripts Alignment to a Reference (c) Alexander Dobin, 2009-2020<br><br>STAR version=2.7.10a<br>STAR compilation time,server,dir=2022-01-14T18:50:00-05:00 :/home/dobin/data/STAR/STARcode/STAR.master/source<br>For more details see:<br>&lt;https://github.com/alexdobin/STAR&gt;<br>&lt;https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf&gt;<br><br>To list all parameters, run STAR --help<br></code></pre></td></tr></table></figure><p>samtools 也是类似的，下载安装就行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xjf samtools-1.13.tar.bz2 <br>cd samtools-1.13 <br>./configure --prefix=/home/data/t040201/software/samtools <br>make <br>make install<br></code></pre></td></tr></table></figure><p>安装需要的 Perl 模块（通过 conda 安装比较方便）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n STAR_fusion<br>conda install -c bioconda perl-db-file perl-uri perl-set-intervaltree perl-json-xs perl-perlio-gzip<br>conda install -c conda-forge perl-carp-assert<br></code></pre></td></tr></table></figure><p>注意如果这里安装了<code>perl-set-intervaltree</code> 可能会和上面 STAR-Fusion make 过程中安装的 <code>intervaltree</code> 发生冲突，可以直接将 STAR-Fusion 路径下的 <code>PerlLib/Set</code> 目录给删除，这样就可以使用我们用 conda 安装的 <code>intervaltree</code> 了。</p><p>STAR-Fusion 还需要参考基因组文件以及相关的基因注释文件，可以从<a href="https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/">这里</a> 下载，如果下载的是较大的30G左右的文件（GRCh38）就可以直接使用，如果下载的是几个 G 的未经处理的文件，则需要进行进一步的处理才能被 STAR-Fusion 使用，具体方法见 <a href="https://github.com/STAR-Fusion/STAR-Fusion/wiki/installing-star-fusion">Github</a>, 这里直接下载了 30G 的文件（可以使用迅雷下载，比较快），解压就可以使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play.tar.gz<br></code></pre></td></tr></table></figure><p>如果后面要进行转录本的重构，则需要安装 <code>Trinity</code> 和 <code>GMAP</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###安装依赖</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##下载预编译的 bowtie2</span></span><br>unzip bowtie2-2.4.5-linux-x86_64.zip <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#安装路径加入 PATH 即可</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载安装Jellyfish https://github.com/gmarcais/Jellyfish/releases</span></span><br>./configure --prefix=/home/data/t040201/software/Jellyfish/<br>make &amp; make install<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#bin 加入 PATH 即可</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载预编译的 salmon</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">https://github.com/COMBINE-lab/salmon/releases</span><br>tar -xvzf salmon-1.6.0_linux_x86_64.tar.gz<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#bin 加入 PATH 即可</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#下载安装 trinity https://github.com/trinityrnaseq/trinityrnaseq/releases</span></span><br>make<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#.bashrc中加入：</span></span><br>export TRINITY_HOME=/home/data/t040201/software/trinityrnaseq-v2.13.2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载安装GMAP http://research-pub.gene.com/gmap/</span></span><br> ./configure --prefix=/home/data/t040201/software/gmap_gsnap/<br><span class="hljs-meta prompt_"> #</span><span class="language-bash"><span class="hljs-comment">#bin 加入 PATH 即可</span></span><br></code></pre></td></tr></table></figure><h2 id="运行-STAR-Fusion"><a href="#运行-STAR-Fusion" class="headerlink" title="运行 STAR-Fusion"></a>运行 STAR-Fusion</h2><p>有两种方式来运行 STAR-Fusion，一种就是从 FASTQ 文件开始，另一种是之前已经使用 STAR 进行比对，会得到 <code>Chimeric.out.junction</code> 文件，就可以直接使用这个文件作为 STAR-Fusion 的输入 （这种方式具体参照官方文档）。</p><p>对于双端测序的 FASTQ 文件，可以运行（这里用 HEC108 细胞系的 RNA-seq 数据为例）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">STAR-Fusion --genome_lib_dir /home/data/t040201/data/STAR_data/GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play/ctat_genome_lib_build_dir --left_fq HEC108_1.fastq.gz --right_fq HEC108_2.fastq.gz  --output_dir /home/data/t040201/cell_lines/fusion<br></code></pre></td></tr></table></figure><p>其中参数：</p><ul><li><code>genome_lib_dir</code> ：刚刚下载的 30 多 G 数据解压后的 <code>ctat_genome_lib_build_dir</code> 子目录的路径</li><li><code>left_fq</code> , <code>right_fq</code>：双端测序的 fastq 文件</li><li><code>output_dir</code>：输出路径</li></ul><p>如果是单端测序，只需要指定 <code>left_fq</code> 就行了。</p><p>如果是已经有了 <code>Chimeric.out.junction</code> 文件则可以直接运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">STAR-Fusion --genome_lib_dir <span class="hljs-regexp">/home/</span>data<span class="hljs-regexp">/t040201/</span>data<span class="hljs-regexp">/STAR_data/</span>GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play<span class="hljs-regexp">/ctat_genome_lib_build_dir -J ./</span>fusion<span class="hljs-regexp">/Chimeric.out.junction --output_dir /</span>home<span class="hljs-regexp">/data/</span>t040201<span class="hljs-regexp">/cell_lines/</span>fusion<br></code></pre></td></tr></table></figure><h2 id="输出文件"><a href="#输出文件" class="headerlink" title="输出文件"></a>输出文件</h2><p>先需要了解几个概念：</p><ul><li><p>Fragment 和 Read ：对于双端测序，一个 Fragment 会有两个 reads 从两端开始测序，而单端测序只有一个 read：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/fgene-05-00005-g001.jpg"></p></li><li><p>Spanning reads 和 split reads：Spanning reads 指的是双端测序中有一个 read 匹配到与另一个 read 不同的基因上，而 split read 指的是一个 read 横跨两个基因</p></li></ul><p>STAR-Fusion 的输出文件主要有两个：<code>star-fusion.fusion_predictions.abridged.tsv</code> 和 <code>star-fusion.fusion_predictions.tsv</code>，先来看第一个文件中的内容：</p><table><thead><tr><th>#FusionName</th><th>JunctionReadCount</th><th>SpanningFragCount</th><th>est_J</th><th>est_S</th><th>SpliceType</th><th>LeftGene</th><th>LeftBreakpoint</th><th>RightGene</th><th>RightBreakpoint</th><th>LargeAnchorSupport</th><th>FFPM</th><th>LeftBreakDinuc</th><th>LeftBreakEntropy</th><th>RightBreakDinuc</th><th>RightBreakEntropy</th><th>annots</th></tr></thead><tbody><tr><td>PHACTR4--RCC1</td><td>128</td><td>48</td><td>128</td><td>48</td><td>ONLY_REF_SPLICE</td><td>PHACTR4^ENSG00000204138.13</td><td>chr1:28407463:+</td><td>RCC1^ENSG00000180198.16</td><td>chr1:28529858:+</td><td>YES_LDAS</td><td>1.801</td><td>GT</td><td>1.9329</td><td>AG</td><td>1.8323</td><td>[“CCLE_StarF2019”</td></tr><tr><td>LEPROT--LEPR</td><td>51</td><td>4</td><td>51</td><td>4</td><td>ONLY_REF_SPLICE</td><td>LEPROT^ENSG00000213625.9</td><td>chr1:65425378:+</td><td>LEPR^ENSG00000116678.20</td><td>chr1:65565546:+</td><td>YES_LDAS</td><td>0.5628</td><td>GT</td><td>1.8256</td><td>AG</td><td>1.9219</td><td>[“GTEx_recurrent_StarF2019”</td></tr><tr><td>SHISA9--U91319.1</td><td>35</td><td>13</td><td>35</td><td>11.67</td><td>ONLY_REF_SPLICE</td><td>SHISA9^ENSG00000237515.9</td><td>chr16:13203549:+</td><td>U91319.1^ENSG00000262801.6</td><td>chr16:13350180:+</td><td>YES_LDAS</td><td>0.4775</td><td>GT</td><td>1.9899</td><td>AG</td><td>1.9656</td><td>[“GTEx_recurrent_StarF2019”</td></tr><tr><td>CRISPLD2--CDH13</td><td>27</td><td>9</td><td>27</td><td>9</td><td>ONLY_REF_SPLICE</td><td>CRISPLD2^ENSG00000103196.12</td><td>chr16:84854829:+</td><td>CDH13^ENSG00000140945.17</td><td>chr16:83486477:+</td><td>YES_LDAS</td><td>0.3684</td><td>GT</td><td>1.9656</td><td>AG</td><td>1.9329</td><td>[“CCLE_StarF2019”</td></tr><tr><td>PFKFB3--LINC02649</td><td>25</td><td>11</td><td>25</td><td>11</td><td>ONLY_REF_SPLICE</td><td>PFKFB3^ENSG00000170525.21</td><td>chr10:6226365:+</td><td>LINC02649^ENSG00000215244.3</td><td>chr10:6326546:+</td><td>YES_LDAS</td><td>0.3684</td><td>GT</td><td>1.9329</td><td>AG</td><td>1.9329</td><td>[“INTRACHROMOSOMAL[chr10:0.02Mb]“</td></tr><tr><td>SEPTIN7P14--PSPH</td><td>24</td><td>0</td><td>12</td><td>0</td><td>ONLY_REF_SPLICE</td><td>SEPTIN7P14^ENSG00000245958.6</td><td>chr4:119455133:+</td><td>PSPH^ENSG00000146733.14</td><td>chr7:56021231:-</td><td>YES_LDAS</td><td>0.1228</td><td>GT</td><td>1.8892</td><td>AG</td><td>1.9656</td><td>[“INTERCHROMOSOMAL[chr4--chr7]“]</td></tr><tr><td>NRIP1--LINC02246</td><td>13</td><td>5</td><td>13</td><td>2.32</td><td>ONLY_REF_SPLICE</td><td>NRIP1^ENSG00000180530.11</td><td>chr21:15064745:-</td><td>LINC02246^ENSG00000281903.2</td><td>chr21:14857708:-</td><td>YES_LDAS</td><td>0.1567</td><td>GT</td><td>1.2729</td><td>AG</td><td>1.5546</td><td>[“GTEx_recurrent_StarF2019”</td></tr><tr><td>LINC02643--NEBL</td><td>8</td><td>5</td><td>8</td><td>2.5</td><td>ONLY_REF_SPLICE</td><td>LINC02643^ENSG00000230109.1</td><td>chr10:21369967:-</td><td>NEBL^ENSG00000078114.19</td><td>chr10:21020201:-</td><td>YES_LDAS</td><td>0.1075</td><td>GT</td><td>1.9656</td><td>AG</td><td>1.7056</td><td>[“INTRACHROMOSOMAL[chr10:0.05Mb]“</td></tr><tr><td>TVP23C--CDRT4</td><td>6</td><td>9</td><td>5.88</td><td>5.87</td><td>ONLY_REF_SPLICE</td><td>TVP23C^ENSG00000175106.17</td><td>chr17:15540433:-</td><td>CDRT4^ENSG00000239704.11</td><td>chr17:15440285:-</td><td>YES_LDAS</td><td>0.1203</td><td>GT</td><td>1.8323</td><td>AG</td><td>1.9899</td><td>[“INTRACHROMOSOMAL[chr17:0.03Mb]“</td></tr><tr><td>NRIP1--LINC02246</td><td>6</td><td>10</td><td>6</td><td>5.79</td><td>ONLY_REF_SPLICE</td><td>NRIP1^ENSG00000180530.11</td><td>chr21:15014344:-</td><td>LINC02246^ENSG00000281903.2</td><td>chr21:14857708:-</td><td>YES_LDAS</td><td>0.1206</td><td>GT</td><td>1.8892</td><td>AG</td><td>1.5546</td><td>[“GTEx_recurrent_StarF2019”</td></tr></tbody></table><ul><li>FusionName：融合基因的名称，断点上下游的基因名称</li><li>JunctionReadCount：含有 Split read 的 RNA fragment 的数量</li><li>SpanningFragCount：含有 Spanning read 的 RNA fragment 的数量，如果一个融合事件的 JunctionReads 或者 （和）SpanningFrag 比较小，那么这个事件可能是假阳性的融合</li><li>est_J , est_S, FFPM：JunctionReadCount 和 SpanningFragCount 是原始的，直接读出来的 read counts ，而 est_J 和 est_S 是考虑了多重比对和 fusion 转录本的多样性后的估计值，然后基于这些值计算 FFPM （fusion fragments per million total reads），一般使用这个值进行过滤融合事件（大于 0.1 FFPM），这个计算方法类似 RSEM （相关的讨论见<a href="https://groups.google.com/g/star-fusion/c/THb6TxGrSBg?pli=1">这里</a> )</li><li>SpliceType：表示预测的断点是否发生在提供的参考转录本注释（gencode）的外显子分界处</li><li>LargeAnchorSupport：是否有 split read 提供在断点两侧的较长的比对（设定为 25 个碱基）；如果融合事件仅仅被 split reads 支持（没有 spanning reads）并且缺少LargeAnchorSupport，那么这个融合事件就很可疑，可能是假阳性</li><li>Left&#x2F;RightBreakEntropy：断点两侧的 15 个碱基的 shannon 熵，低代表不可信（不知道为什么。。。）</li><li>annots：使用 <a href="https://github.com/FusionAnnotator/FusionAnnotator/wiki">FusionAnnotator</a> 对融合转录本的简单注释</li></ul><p><code>star-fusion.fusion_predictions.tsv</code> 就是多了两列：<code>JunctionReads</code> 和 <code>SpanningFrags</code> 以逗号分隔的方式列出了具体的 split reads 和 spanning reads。</p><h2 id="使用-FusionInspector-对融合事件进行检查验证"><a href="#使用-FusionInspector-对融合事件进行检查验证" class="headerlink" title="使用 FusionInspector 对融合事件进行检查验证"></a>使用 FusionInspector 对融合事件进行检查验证</h2><p>FusionInspector 可以对融合事件进行检查，验证（其他的融合基因检测软件输出的结果也可以）并可视化。FusionInspector 提取融合对的基因组区间并构建包含基因对的 mini-fusion-contigs ，然后原始的 reads 被比对到这个 contig 上：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/FusionInspector-alg_overview.png"></p><p>运行的时候只需要加上 <code>--FusionInspector</code> 就可以，这个工具有两种模式：</p><ul><li>inspect：只有被 STAR-Fusion 鉴别出支持融合事件的 reads 才会被比对到融合基因的 contig 上</li><li>validate：对所有的 reads 进行重新评估</li></ul><p>另外还需要把安装一些依赖的 python 包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install -c anaconda numpy requests<br>conda install -c bioconda igv-reports<br></code></pre></td></tr></table></figure><p>接着就可以运行了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">STAR-Fusion --genome_lib_dir /home/data/t040201/data/STAR_data/GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play/ctat_genome_lib_build_dir --left_fq HEC108_1.fastq.gz --right_fq HEC108_2.fastq.gz  --output_dir /home/data/t040201/cell_lines/fusion --FusionInspector inspect<br></code></pre></td></tr></table></figure><blockquote><p>出现了一个报错：&#x2F;bin&#x2F;sh: bgzip: command not found，因此安装一下htslib：</p><p>下载<a href="http://www.htslib.org/download/">SAMtools&#x2F;BCFtools&#x2F;HTSlib - Downloads</a></p><p>编译：.&#x2F;configure –prefix&#x3D;&#x2F;home&#x2F;data&#x2F;t040201&#x2F;software&#x2F;htslib</p><p>安装：make &amp; make install</p><p>添加 PATH</p></blockquote><p>主要的输出文件是 <code>finspector.FusionInspector.fusions.abridged.tsv</code> （在新生成的目录FusionInspector-inspect 下）：</p><table><thead><tr><th>FusionName</th><th>JunctionReadCount</th><th>SpanningFragCount</th><th>est_J</th><th>est_S</th><th>LeftGene</th><th>LeftLocalBreakpoint</th><th>LeftBreakpoint</th><th>RightGene</th><th>RightLocalBreakpoint</th><th>RightBreakpoint</th><th>SpliceType</th><th>LargeAnchorSupport</th><th>NumCounterFusionLeft</th><th>NumCounterFusionRight</th><th>FAR_left</th><th>FAR_right</th><th>LeftBreakDinuc</th><th>LeftBreakEntropy</th><th>RightBreakDinuc</th><th>RightBreakEntropy</th><th>microh_brkpt_dist</th><th>num_microh_near_brkpt</th></tr></thead><tbody><tr><td>PHACTR4--RCC1</td><td>117</td><td>34</td><td>117</td><td>34</td><td>PHACTR4^ENSG00000204138.13</td><td>2298</td><td>chr1:28407463:+</td><td>RCC1^ENSG00000180198.16</td><td>34901</td><td>chr1:28529858:+</td><td>ONLY_REF_SPLICE</td><td>YES</td><td>0</td><td>0</td><td>152</td><td>152</td><td>GT</td><td>1.9329</td><td>AG</td><td>1.8323</td><td>1539</td><td>0</td></tr><tr><td>LEPROT--LEPR</td><td>48</td><td>3</td><td>48</td><td>3</td><td>LEPROT^ENSG00000213625.9</td><td>2949</td><td>chr1:65425378:+</td><td>LEPR^ENSG00000116678.20</td><td>14955</td><td>chr1:65565546:+</td><td>ONLY_REF_SPLICE</td><td>YES</td><td>0</td><td>0</td><td>52</td><td>52</td><td>GT</td><td>1.8256</td><td>AG</td><td>1.9219</td><td>57</td><td>2</td></tr><tr><td>SHISA9--U91319.1</td><td>37</td><td>10</td><td>37</td><td>10</td><td>SHISA9^ENSG00000237515.9</td><td>9996</td><td>chr16:13203549:+</td><td>U91319.1^ENSG00000262801.6</td><td>25888</td><td>chr16:13350180:+</td><td>ONLY_REF_SPLICE</td><td>YES</td><td>0</td><td>0</td><td>48</td><td>48</td><td>GT</td><td>1.9899</td><td>AG</td><td>1.9656</td><td>3012</td><td>0</td></tr><tr><td>CRISPLD2--CDH13</td><td>27</td><td>9</td><td>27</td><td>9</td><td>CRISPLD2^ENSG00000103196.12</td><td>11156</td><td>chr16:84854829:+</td><td>CDH13^ENSG00000140945.17</td><td>50276</td><td>chr16:83486477:+</td><td>ONLY_REF_SPLICE</td><td>YES</td><td>0</td><td>0</td><td>37</td><td>37</td><td>GT</td><td>1.9656</td><td>AG</td><td>1.9329</td><td>5725</td><td>0</td></tr><tr><td>PFKFB3--LINC02649</td><td>22</td><td>10</td><td>22</td><td>10</td><td>PFKFB3^ENSG00000170525.21</td><td>16805</td><td>chr10:6226365:+</td><td>LINC02649^ENSG00000215244.3</td><td>31340</td><td>chr10:6326546:+</td><td>ONLY_REF_SPLICE</td><td>YES</td><td>0</td><td>0</td><td>33</td><td>33</td><td>GT</td><td>1.9329</td><td>AG</td><td>1.9329</td><td>2817</td><td>0</td></tr><tr><td>NRIP1--LINC02246</td><td>14</td><td>4</td><td>14</td><td>2.24</td><td>NRIP1^ENSG00000180530.11</td><td>2192</td><td>chr21:15064745:-</td><td>LINC02246^ENSG00000281903.2</td><td>24982</td><td>chr21:14857708:-</td><td>ONLY_REF_SPLICE</td><td>YES</td><td>0</td><td>0</td><td>19</td><td>19</td><td>GT</td><td>1.2729</td><td>AG</td><td>1.5546</td><td>5526</td><td>0</td></tr><tr><td>NRIP1--LINC02246</td><td>6</td><td>9</td><td>6</td><td>6.76</td><td>NRIP1^ENSG00000180530.11</td><td>4395</td><td>chr21:15014344:-</td><td>LINC02246^ENSG00000281903.2</td><td>24982</td><td>chr21:14857708:-</td><td>ONLY_REF_SPLICE</td><td>YES</td><td>0</td><td>0</td><td>16</td><td>16</td><td>GT</td><td>1.8892</td><td>AG</td><td>1.5546</td><td>5568</td><td>0</td></tr><tr><td>LINC02643--NEBL</td><td>8</td><td>5</td><td>8</td><td>5</td><td>LINC02643^ENSG00000230109.1</td><td>2205</td><td>chr10:21369967:-</td><td>NEBL^ENSG00000078114.19</td><td>23713</td><td>chr10:21020201:-</td><td>ONLY_REF_SPLICE</td><td>YES</td><td>0</td><td>0</td><td>14</td><td>14</td><td>GT</td><td>1.9656</td><td>AG</td><td>1.7056</td><td>4138</td><td>0</td></tr><tr><td>TVP23C--CDRT4</td><td>4</td><td>10</td><td>4</td><td>10</td><td>TVP23C^ENSG00000175106.17</td><td>7982</td><td>chr17:15540433:-</td><td>CDRT4^ENSG00000239704.11</td><td>22624</td><td>chr17:15440285:-</td><td>ONLY_REF_SPLICE</td><td>YES</td><td>0</td><td>0</td><td>15</td><td>15</td><td>GT</td><td>1.8323</td><td>AG</td><td>1.9899</td><td>2126</td><td>0</td></tr></tbody></table><p>可以看到这个文件里面少了 <code>SEPTIN7P14--PSPH</code>  一行，因为在 STAR-Fusion 的结果中，这个融合的 spanning reads 为 0 ，把他过滤掉了。这个文件中有新的几列：</p><ul><li><p>Left&#x2F;RightlocalBreakpoint：断点在构建的 mini-fusion-gene contig 中的位置</p></li><li><p>NumCounterFusionLeft&#x2F;Right：在断点处支持非融合的等位基因的 RNA-seq fragment 的数量</p></li><li><p>FAR_left&#x2F;right：fusion allelic ratio，用来作为相对该基因的非融合等位位点的融合转录本表达量的一种定量，可用下图展示计算方法：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220125214733245.png"></p></li></ul><p>在这个图中，共有两个支持 fusion 的 fragment，对于基因 A 有 3 个支持非 fusion 的fragment，对于基因 B 有 1 个这样的 fragment，因此可以分别对基因 A 和 B 计算 FAR，作为融合 VS 非融合转录本比例的粗糙估计。</p><h2 id="融合效应的检测"><a href="#融合效应的检测" class="headerlink" title="融合效应的检测"></a>融合效应的检测</h2><p>有些时候融合转录本会产生新的蛋白，改变原蛋白的功能，可以使用 <code>examine_coding_effect</code> 参数来检测融合事件对编码区域造成的影响：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">STAR-Fusion --genome_lib_dir /home/data/t040201/data/STAR_data/GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play/ctat_genome_lib_build_dir --left_fq HEC108_1.fastq.gz --right_fq HEC108_2.fastq.gz  --output_dir /home/data/t040201/cell_lines/fusion --FusionInspector inspect --examine_coding_effect<br></code></pre></td></tr></table></figure><p>会产生一个新的文件 <code>star-fusion.fusion_predictions.abridged.coding_effect.tsv</code> ，这个文件比 STAR-Fusion 的直接输出会多出几列：</p><table><thead><tr><th align="center">#FusionName</th><th>JunctionReadCount</th><th>SpanningFragCount</th><th>est_J</th><th>est_S</th><th>SpliceType</th><th>LeftGene</th><th>LeftBreakpoint</th><th>RightGene</th><th>RightBreakpoint</th><th>LargeAnchorSupport</th><th>FFPM</th><th>LeftBreakDinuc</th><th>LeftBreakEntropy</th><th>RightBreakDinuc</th><th>RightBreakEntropy</th><th>annots</th><th>CDS_LEFT_ID</th><th>CDS_LEFT_RANGE</th><th>CDS_RIGHT_ID</th><th>CDS_RIGHT_RANGE</th><th>PROT_FUSION_TYPE</th><th>FUSION_MODEL</th><th>FUSION_CDS</th><th>FUSION_TRANSL</th><th>PFAM_LEFT</th><th>PFAM_RIGHT</th><th></th><th></th><th></th></tr></thead><tbody><tr><td align="center">PHACTR4--RCC1</td><td>128</td><td>48</td><td>128</td><td>48</td><td>ONLY_REF_SPLICE</td><td>PHACTR4^ENSG00000204138.13</td><td>chr1:28407463:+</td><td>RCC1^ENSG00000180198.16</td><td>chr1:28529858:+</td><td>YES_LDAS</td><td>1.801</td><td>GT</td><td>1.9329</td><td>AG</td><td>1.8323</td><td>[“CCLE_StarF2019”</td><td>“INTRACHROMOSOMAL[chr1:0.01Mb]“</td><td>“NEIGHBORS[5579]“]</td><td>ENST00000493669.2</td><td>1-16</td><td>ENST00000486790.2</td><td>298-446</td><td>FRAMESHIFT</td><td>chr1|+|[0]28407448-28407463[0]&lt;&#x3D;&#x3D;&gt;chr1|+|[0]28529858-28529939[0]|[1]28530523-28530573[0]|[1]28531803-28531818[1]</td><td>atggaagatccatttgGACAGGAAGATGTCACCCAAGCGCATAGCTAAAAGAAGGTCCCCCCCAGCAGATGCCATCCCCAAAAGCAAGAAGGTGAAGGACACGAGGGCCGCTGCCTCCCGCCGCGTTCCTGGCGCCCGCTCCTGCCAAGTCTCACACAGGTCCCA</td><td>MEDPFGQEDVTQAHS*KKVPPSRCHPQKQEGEGHEGRCLPPRSWRPLLPSLTQVP</td><td>TGF_beta-PARTIAL|6-16~|4.4e-06</td><td>.</td><td></td></tr><tr><td align="center">LEPROT--LEPR</td><td>51</td><td>4</td><td>51</td><td>4</td><td>ONLY_REF_SPLICE</td><td>LEPROT^ENSG00000213625.9</td><td>chr1:65425378:+</td><td>LEPR^ENSG00000116678.20</td><td>chr1:65565546:+</td><td>YES_LDAS</td><td>0.5628</td><td>GT</td><td>1.8256</td><td>AG</td><td>1.9219</td><td>[“GTEx_recurrent_StarF2019”</td><td>“ChimerSeq”</td><td>“INTRACHROMOSOMAL[chr1:0.09Mb]“</td><td>“NEIGHBORS[89682]“]</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td></tr><tr><td align="center">SHISA9--U91319.1</td><td>35</td><td>13</td><td>35</td><td>11.67</td><td>ONLY_REF_SPLICE</td><td>SHISA9^ENSG00000237515.9</td><td>chr16:13203549:+</td><td>U91319.1^ENSG00000262801.6</td><td>chr16:13350180:+</td><td>YES_LDAS</td><td>0.4775</td><td>GT</td><td>1.9899</td><td>AG</td><td>1.9656</td><td>[“GTEx_recurrent_StarF2019”</td><td>“INTRACHROMOSOMAL[chr16:0.01Mb]“</td><td>“NEIGHBORS[5816]“]</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td></td></tr><tr><td align="center">CRISPLD2--CDH13</td><td>27</td><td>9</td><td>27</td><td>9</td><td>ONLY_REF_SPLICE</td><td>CRISPLD2^ENSG00000103196.12</td><td>chr16:84854829:+</td><td>CDH13^ENSG00000140945.17</td><td>chr16:83486477:+</td><td>YES_LDAS</td><td>0.3684</td><td>GT</td><td>1.9656</td><td>AG</td><td>1.9329</td><td>[“CCLE_StarF2019”</td><td>“INTRACHROMOSOMAL[chr16:1.02Mb]“]</td><td>ENST00000567845.5</td><td>1-709</td><td>ENST00000428848.7</td><td>665-2025</td><td>INFRAME</td><td>chr16|+|[0]84838496-84838735[2]|[0]84845786-84845904[1]|[2]84849385-84849517[2]|[0]84850568-84850683[1]|[2]84854729-84854829[0]&lt;&#x3D;&#x3D;&gt;chr16|+|[1]83486477-83486655[2]|[0]83602454-83602594[2]|[0]83670790-83670972[2]|[0]83678208-83678461[1]|[2]83748108-83748250[0]|[1]83779968-83780201[0]|[1]83783254-83783472[0]|[1]83795023-83795030[2]</td><td>atgagctgcgtcctgggtggtgtcatccccttggggctgctgttcctggtctgcggatcccaaggctacctcctgcccaacgtcactctcttagaggagctgctcagcaaataccagcacaacgagtctcactcccgggtccgcagagccatccccagggaggacaaggaggagatcctcatgctgcacaacaagcttcggggccaggtgcagcctcaggcctccaacatggagtacatgacctgggatgacgaactggagaagtctgctgcagcgtgggccagtcagtgcatctgggagcacgggcccaccagtctgctggtgtccatcgggcagaacctgggcgctcactggggcaggtatcgctctccggggttccatgtgcagtcctggtatgacgaggtgaaggactacacctacccctacccgagcgagtgcaacccctggtgtccagagaggtgctcggggcccatgtgcacgcactacacacagatagtttgggccaccaccaacaagatcggttgtgctgtgaacacctgccggaagatgactgtctggggagaagtttgggagaacgcggtctactttgtctgcaattattctccaaaggggaactggattggagaagccccctacaagaatggccggccctgctctgagtgcccacccagctatggaggcagctgcaggaacaacttgtgttaccgagGCACCACAGTGATGCGGATGACAGCCTTTGATGCAGATGACCCAGCCACCGATAATGCCCTCCTGCGGTATAATATCCGTCAGCAGACGCCTGACAAGCCATCTCCCAACATGTTCTACATCGATCCTGAGAAAGGAGACATTGTCACTGTTGTGTCACCTGCGCTGCTGGACCGAGAGACTCTGGAAAATCCCAAGTATGAACTGATCATCGAGGCTCAAGATATGGCTGGACTGGATGTTGGATTAACAGGCACGGCCACAGCCACGATCATGATCGATGACAAAAATGATCACTCACCAAAATTCACCAAGAAAGAGTTTCAAGCCACAGTCGAGGAAGGAGCTGTGGGAGTTATTGTCAATTTGACAGTTGAAGATAAGGATGACCCCACCACAGGTGCATGGAGGGCTGCCTACACCATCATCAACGGAAACCCCGGGCAGAGCTTTGAAATCCACACCAACCCTCAAACCAACGAAGGGATGCTTTCTGTTGTCAAACCATTGGACTATGAAATTTCTGCCTTCCACACCCTGCTGATCAAAGTGGAAAATGAAGACCCACTCGTACCCGACGTCTCCTACGGCCCCAGCTCCACAGCCACCGTCCACATCACTGTCCTGGATGTCAACGAGGGCCCAGTCTTCTACCCAGACCCCATGATGGTGACCAGGCAGGAGGACCTCTCTGTGGGCAGCGTGCTGCTGACAGTGAATGCCACGGACCCCGACTCCCTGCAGCATCAAACCATCAGGTATTCTGTTTACAAGGACCCAGCAGGTTGGCTGAATATTAACCCCATCAATGGGACTGTTGACACCACAGCTGTGCTGGACCGTGAGTCCCCATTTGTCGACAACAGCGTGTACACTGCTCTCTTCCTGGCAATTGACAGTGGCAACCCTCCCGCTACGGGCACTGGGACTTTGCTGATAACCCTGGAGGACGTGAATGACAATGCCCCGTTCATTTACCCCACAGTAGCTGAAGTCTGTGATGATGCCAAAAACCTCAGTGTAGTCATTTTGGGAGCATCAGATAAGGATCTTCACCCGAATACAGATCCTTTCAAATTTGAAATCCACAAACAAGCTGTTCCTGATAAAGTCTGGAAGATCTCCAAGATCAACAATACACACGCCCTGGTAAGCCTTCTTCAAAATCTGAACAAAGCAAACTACAACCTGCCCATCATGGTGACAGATTCAGGGAAACCACCCATGACGAATATCACAGATCTCAGGGTACAAGTGTGCTCCTGCAGGAATTCCAAAGTGGACTGCAACGCGGCAGGGGCCCTGCGCTTCAGCCTGCCCTCAGTCCTGCTCCTCAGCCTCTTCAGCTTAGCTTGTCTGTGA</td><td>MSCVLGGVIPLGLLFLVCGSQGYLLPNVTLLEELLSKYQHNESHSRVRRAIPREDKEEILMLHNKLRGQVQPQASNMEYMTWDDELEKSAAAWASQCIWEHGPTSLLVSIGQNLGAHWGRYRSPGFHVQSWYDEVKDYTYPYPSECNPWCPERCSGPMCTHYTQIVWATTNKIGCAVNTCRKMTVWGEVWENAVYFVCNYSPKGNWIGEAPYKNGRPCSECPPSYGGSCRNNLCYRGTTVMRMTAFDADDPATDNALLRYNIRQQTPDKPSPNMFYIDPEKGDIVTVVSPALLDRETLENPKYELIIEAQDMAGLDVGLTGTATATIMIDDKNDHSPKFTKKEFQATVEEGAVGVIVNLTVEDKDDPTTGAWRAAYTIINGNPGQSFEIHTNPQTNEGMLSVVKPLDYEISAFHTLLIKVENEDPLVPDVSYGPSSTATVHITVLDVNEGPVFYPDPMMVTRQEDLSVGSVLLTVNATDPDSLQHQTIRYSVYKDPAGWLNINPINGTVDTTAVLDRESPFVDNSVYTALFLAIDSGNPPATGTGTLLITLEDVNDNAPFIYPTVAEVCDDAKNLSVVILGASDKDLHPNTDPFKFEIHKQAVPDKVWKISKINNTHALVSLLQNLNKANYNLPIMVTDSGKPPMTNITDLRVQVCSCRNSKVDCNAAGALRFSLPSVLLLSLFSLACL*</td><td>CAP|62-200|1.6e-26^LCCL|150-164|1^DUF5607|170-196|1.8e-05^LCCL|287-378|2.2e-28^Rxt3|315-340|0.0053^LCCL|388-483|2.6e-31^Rxt3|425-466|2.8e-07</td><td>.</td><td></td><td></td></tr><tr><td align="center">PFKFB3--LINC02649</td><td>25</td><td>11</td><td>25</td><td>11</td><td>ONLY_REF_SPLICE</td><td>PFKFB3^ENSG00000170525.21</td><td>chr10:6226365:+</td><td>LINC02649^ENSG00000215244.3</td><td>chr10:6326546:+</td><td>YES_LDAS</td><td>0.3684</td><td>GT</td><td>1.9329</td><td>AG</td><td>1.9329</td><td>[“INTRACHROMOSOMAL[chr10:0.02Mb]“</td><td>“NEIGHBORS[16525]“]</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td></td><td></td></tr><tr><td align="center">SEPTIN7P14--PSPH</td><td>24</td><td>0</td><td>12</td><td>0</td><td>ONLY_REF_SPLICE</td><td>SEPTIN7P14^ENSG00000245958.6</td><td>chr4:119455133:+</td><td>PSPH^ENSG00000146733.14</td><td>chr7:56021231:-</td><td>YES_LDAS</td><td>0.1228</td><td>GT</td><td>1.8892</td><td>AG</td><td>1.9656</td><td>[“INTERCHROMOSOMAL[chr4--chr7]“]</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td></td><td></td><td></td></tr><tr><td align="center">NRIP1--LINC02246</td><td>13</td><td>5</td><td>13</td><td>2.32</td><td>ONLY_REF_SPLICE</td><td>NRIP1^ENSG00000180530.11</td><td>chr21:15064745:-</td><td>LINC02246^ENSG00000281903.2</td><td>chr21:14857708:-</td><td>YES_LDAS</td><td>0.1567</td><td>GT</td><td>1.2729</td><td>AG</td><td>1.5546</td><td>[“GTEx_recurrent_StarF2019”</td><td>“INTRACHROMOSOMAL[chr21:0.04Mb]“</td><td>“NEIGHBORS[42683]“]</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td></td></tr><tr><td align="center">LINC02643--NEBL</td><td>8</td><td>5</td><td>8</td><td>2.5</td><td>ONLY_REF_SPLICE</td><td>LINC02643^ENSG00000230109.1</td><td>chr10:21369967:-</td><td>NEBL^ENSG00000078114.19</td><td>chr10:21020201:-</td><td>YES_LDAS</td><td>0.1075</td><td>GT</td><td>1.9656</td><td>AG</td><td>1.7056</td><td>[“INTRACHROMOSOMAL[chr10:0.05Mb]“</td><td>“NEIGHBORS[47222]“]</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td></td><td></td></tr><tr><td align="center">TVP23C--CDRT4</td><td>6</td><td>9</td><td>5.88</td><td>5.87</td><td>ONLY_REF_SPLICE</td><td>TVP23C^ENSG00000175106.17</td><td>chr17:15540433:-</td><td>CDRT4^ENSG00000239704.11</td><td>chr17:15440285:-</td><td>YES_LDAS</td><td>0.1203</td><td>GT</td><td>1.8323</td><td>AG</td><td>1.9899</td><td>[“INTRACHROMOSOMAL[chr17:0.03Mb]“</td><td>“NEIGHBORS[26536]“]</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td></td><td></td></tr><tr><td align="center">NRIP1--LINC02246</td><td>6</td><td>10</td><td>6</td><td>5.79</td><td>ONLY_REF_SPLICE</td><td>NRIP1^ENSG00000180530.11</td><td>chr21:15014344:-</td><td>LINC02246^ENSG00000281903.2</td><td>chr21:14857708:-</td><td>YES_LDAS</td><td>0.1206</td><td>GT</td><td>1.8892</td><td>AG</td><td>1.5546</td><td>[“GTEx_recurrent_StarF2019”</td><td>“INTRACHROMOSOMAL[chr21:0.04Mb]“</td><td>“NEIGHBORS[42683]“]</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td></td></tr></tbody></table><p>主要关注的有 FUSION_MODEL 和 PFAM 列，FUSION MODEL 是基于断点和在多个 isoform 中选择的编码框内的编码结构重构的融合转录本的基因结构，格式为：<code>chr|strand|[exon_start_codon_phase]|lend-rend[exon_end_codon_phase] ...&lt;==&gt; 另一侧的基因结构（相同的格式）</code>；PFAM 表示推定的融合蛋白结构域的位置（基于原始蛋白结构域的注释），<code>~</code> 符号表示断点破坏了原始蛋白结构域注释。</p><h2 id="使用-Trinity-重构融合转录本"><a href="#使用-Trinity-重构融合转录本" class="headerlink" title="使用 Trinity 重构融合转录本"></a>使用 Trinity 重构融合转录本</h2><p>上面得出的 FUSION_MODEL, FUSION_CDS, FUSION_TRANSL 是基于参考注释和参考基因组序列，如果想要基于实际支持融合事件的 RNA-seq 的 Read 进行从头的（de novo）融合转录本重构，从而获取变异信息或者新的序列特征，就要加上 <code>--denovo_reconstruct</code> 参数，通过使用 Trinity 组装比对到 FusionInspector 构建的 fusion contig 上的 reads 来进行转录本重构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">STAR-Fusion --genome_lib_dir /home/data/t040201/data/STAR_data/GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play/ctat_genome_lib_build_dir --left_fq HEC108_1.fastq.gz --right_fq HEC108_2.fastq.gz  --output_dir /home/data/t040201/cell_lines/fusion --FusionInspector inspect --examine_coding_effect --denovo_reconstruct<br></code></pre></td></tr></table></figure><p>运行之后就会多出这些文件：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220126094937488.png"></p><p>其中 <code>fusions.fasta </code> 是 de novo 装配的转录组序列，<code>gff3</code> 是 gff3 格式的转录本比对，其他的文件可以用来进行 IGV 可视化。</p><p>该细胞系重构的融合转录本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">TRINITY_GG_1_c0_g2_i2 PHACTR4--RCC1:2298-34901</span><br>CCGGCCCCTGCTGGGGACTACAAGTCCCGTAAGCCTCCGCGGCGGCACGTCCTACCCTACACTGTCCAGCCGGCTCCCTTTTTCCCCCTCCCCGGGGGCCAAGGGCTCCGGCTGCTGCCTGGCGGCCAACGGGCCAGGTAGGATTTCCGGGAGAGGCTGCTGTGGAGGCTGAGGAGGCGGCGGCGGAGATCTGGAAACAGTATCTCACCTCCCTAAACTGGTTAATAGTGGCATGGAAGATCCATTTGGACAGGAAGATGTCACCCAAGCGCATAGCTAAAAGAAGGTCCCCCCCAGCAGATGCCATCCCCAAAAGCAAGAAGGTGAAGGTCTCACACAGGTCCCACAGCACAGAACCCGGCTTGGTGCTGACACTAGGCCAGGGCGACGTGGGCCAGCTGGGGCTGGGTGAGAATGTGATGGAGAGGAAGAAGCCGGCCCTGGTATCCATTCCGGAGGATGTTGTGCAGGCTGAGGCTGGGGGCATGCACACCGTGTGTCTAAGCAAAAGTGGCCAGGTCTATTCCTTCGGCTGCAATGATGAGGGTGCCCTGGGAAGGGACACATCAGTGGAGGGCTCGGAGATGGTCCCTGGGAAAGTGGAGCTGCAAGAGAAGGTGGTACAGGTGTCAGCAGGAGACAGTCACACAGCAGCCCTCACCGATGATGGCCGTGTCTTCCTCTGGGGCTCCTTCCGGGACAATAACGGTGTGATTTGACTGTTGGAGCCCATGAAGAAGAGCATGGTGCCTG<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">TRINITY_GG_1_c0_g2_i4 PHACTR4--RCC1:2298-34901</span><br>CCGGCCCCTGCTGGGGACTACAAGTCCCGTAAGCCTCCGCGGCGGCACGTCCTACCCTACACTGTCCAGCCGGCTCCCTTTTTCCCCCTCCCCGGGGGCCAAGGGCTCCGGCTGCTGCCTGGCGGCCAACGGGCCAGGTAGGATTTCCGGGAGAGGCTGCTGTGGAGGCTGAGGAGGCGGCGGCGGAGATCTGGAAACAGTATCTCACCTCCCTAAACTGGTTAATAGTGGCATGGAAGATCCATTTGGACAGGAAGATGTCACCCAAGCGCATAGCTAAAAGAAGGTCCCCCCCAGCAGATGCCATCCCCAAAAGCAAGAAGGTGAAGGACACGAGGGCCGCTGCCTCCCGCCGCGTTCCTGGCGCCCGCTCCTGCCAAGTCTCACACAGGTCCCACAGCACAGAACCCGGCTTGGTGCTGACACTAGGCCAGGGCGACGTGGGCCAGCTGGGGCTGGGTGAGAATGTGATGGAGAGGAAGAAGCCGGCCCTGGTATCCATTCCGGAGGATGTTGTGCAGGCTGAGGCTGGGGGCATGCACACCGTGTGTCTAAGCAAAAGTGGCCAGGTCTATTCCTTCGGCTGCAATGATGAGGGTGCCCTGGGAAGGGACACATCAGTGGAGGGCTCGGAGATGGTCCCTGGGAAAGTGGAGCTGCAAGAGAAGGTGGTACAGGTGTCAGCAGGAGACAGTCACACAGCAGCCCTCACCGATGATGGCCGTGTCTTCCTCTGGGGCTCCTTCCGGGACAATAACGGTGTGATTTGACTGTTGGAGCCCATGAAGAAGAGCATGGTGCCTG<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">TRINITY_GG_2_c0_g2_i1 SEPTIN7P14--PSPH:1343-30726</span><br>CGCAGAAGCTTCTCAATGGCCAGCGCCAGCTGCAGCCCCGGCGGCGCACTCGCCTCACCTGAGCCTGGGAGGAAAATTCTTCCAAGGATGATCTCCCACTCAGAGCTGAGGAAGCTTTTCTACTCAGCAGATGCTGTGTGTTTTGATGTTGACAGCACGGTCATCAGTGAAGAAGGAATCGGAC<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">TRINITY_GG_3_c0_g1_i1 SHISA9--U91319.1:9996-25888</span><br>CTTGCGGATGTCATGAGACCACAGGGCCACTGCAACACTGATCACATGGAGAGAGACCTAAACATCGTTGTCCACGTCCAGCATTATGAGAACATGGACACGAGAACCCCCATAAATAATCTTCATGCCACCCAGATGAACAACGCAGTGCCCACCTCTCCTCTGCTCCAGCAGATGGGCCATCCACATTCGTACCCGAACCTGGGCCAGATCTCCAACCCCTATGAACAGCAGCCACCAGGAAAAGAGCTCAACAAGTACGCCTCCTTAAAGGCAGTCGAGCTGGAACACCCTTCTTCTCCTGCCTTTGGACATCAGAACTTCAGATTCTCTGGCCTTCAGACTTCAAGACTTGCACTAGTGGCCCCCTGGGTTCTCAAGGTTTTGGCCGCCTCGGTTGAGAGTTACACCATCGGCTTCTTTGGTTCTGAGGCCGTTGGAGTTGGACTGAGCCATGCTACCAGCTTCCCTGGGTCTCCAGCCTGCAGATTGCCTACTGTGAGATTTAGCCTCCATAATCACGTAACAGAATATTGGCATGTAGCACTCCTCAAAACATAGAAAGCAGAAACAAATCAATTCTGCCTGGAGG<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">TRINITY_GG_4_c0_g1_i1 PFKFB3--LINC02649:16805-31340</span><br>TGAACGTGGAGTCCGTCTGCACACACCGAGAGAGGTCAGAGGATGCAAAGAAGGGACCTAACCCGCTCATGAGACGCAATAGTGTCACCCCGCTAGCCAGCCCCGAACCCACCAAAAAGCCTCGCATCAACAGCTTTGAGGAGCATGTGGCCTCCACCTCGGCCGCCCTGCCCAGCTGCCTGCCCCCGGAGGTGCCCACGCAGCTGCCTGGACAAATATGGAGTTACCAGTAAGGAGCTCCACCGTGACTCTCCTCCCTGCTCCGTTGCCCCGACGAGGAAGTGTGAAAACGTTTCTGGCTCCATCCAAGAGTTACTTCCCTGAAGAAGAGAGGGCTTTGTTGAAGTCTTCCCATGCTTTCTGCACAGGGCTCTGGCCTTGGAGAAGGGATTTCCAGTTACCGCAGTGTCACTTGGCCCTGGGTCTCCTCCCGGGAGAGAGAAGTGTACGGCTCCCAAGGTTCCTGGCAGTTTTGAAAGAGCTCTCAGCCACAGCCAGCTTTACTTTGATCACG<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">TRINITY_GG_5_c0_g1_i1 CRISPLD2--CDH13:11156-50276</span><br>TGAAGGACTACACCTACCCCTACCCGAGCGAGTGCAACCCCTGGTGTCCAGAGAGGTGCTCGGGGCCCATGTGCACGCACTACACACAGATAGTTTGGGCCACCACCAACAAGATCGGTTGTGCTGTGAACACCTGCCGGAAGATGACTGTCTGGGGAGAAGTTTGGGAGAACGCGGTCTACTTTGTCTGCAATTATTCTCCAAAGGGGAACTGGATTGGAGAAGCCCCCTACAAGAATGGCCGGCCCTGCTCTGAGTGCCCACCCAGCTATGGAGGCAGCTGCAGGAACAACTTGTGTTACCGAGGCACCACAGTGATGCGGATGACAGCCTTTGATGCAGATGACCCAGCCACCGATAATGCCCTCCTGCGGTATAATATCCGTCAGCAGACGCCTGACAAGCCATCTCCCAACATGTTCTACATCGATCCTGAGAAAGGAGACATTGTCACTGTTGTGTCACCTGCGCTGCTGGACCGAGAGACTCTGGAAAATCCCAAGTATGAACTGATCATCGAGGCTCAAGATATGGCTGGACTGGATGTTGGATTAACAGGCACGGCCACGG<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">TRINITY_GG_6_c0_g1_i2 NRIP1--LINC02246:2192-24982</span><br>CTGGCTCCCTCTTTGCCTTCCACCATGACTGTAAGCTTCCTGAGGCCTCACCACAAGCCAAACAGATGCACGTGCCATGCTTGCACAACCTGCTCTCAGCTGGGCTCACTCATGCATCTGCTATCAGCTGGCTGGTTAACTGTAGTTAGTTTATCTTGATGGCATCATTGGGGAAACTCAGCTCTCTTTCACTGGACTTCTCTTATATTTCTCCAGCAAACTGGAAAGGGTGTGTTCTCGTGGCAGGGGCAGGAGTCCCAGGCCGCCGCGGCTCCCAGCCTCCGGCTCCGTCAGGCTCGGTCCGCGAAGGCGCCTGCCGCCCCGTCCTGGCCCGGCGCCCCGGCGAGCTCTTCCCTCCGACCAGCGGCGCTCAC<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">TRINITY_GG_6_c0_g1_i3 NRIP1--LINC02246:4395-24982</span><br>CTGGCTCCCTCTTTGCCTTCCACCATGACTGTAAGCTTCCTGAGGCCTCACCACAAGCCAAACAGATGCACGTGCCATGCTTGCACAACCTGCTCTCAGCTGGGCTCACTCATGCATCTGCTATCAGCTGGCTGGTTAACTGTAGTTAGTTTATCTTGATGGCATCATTGGGGAAACTCAGCTCTCTTTCACTGGACTTCTCTTATATTTCTCCAGCAAACTGGAAAGGGTGTGTTCTCGTGGCAGGGGCAGGAGTCGTCTGTCTCCAAGCTCTGAGCCTCTGCTTTCTGAGAAAGAAAATTGAGAAGGCTGTTGAAAAGTAGCTCTGATGTCATCCGGAGTCTTCAGATTCCCTGTCCTCCTTCAGTCAAGTGTGCATCCCAGGCCGCCGCGG<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">TRINITY_GG_7_c0_g1_i1 TVP23C--CDRT4:7982-22624</span><br>GACTAATGGTTGGCCTACGTTGGTGGAATCACATTGATGAAGATGGAAAGAGCCATTGGGTGTTTGAATCTAGAAAGGAGTCCTCTCAAGAGAATAAAACTGTGTCAGAGGCTGAATCAAGAATCTTTTGGTTGGGACTTATTGCCTGTTCAGTACTGTGGGTGATATTTGCCTTTAGTGCACTCTTCTCCTTCACAGTAAAGTGGCTGGCGGTGGTTATTATGGGTGTGGTGCTACAAGGTGCCAACCTGTATGGTTACATCAGGTGTAAGGTGCGCAGCAGAAAGCATTTAACCAGCATGGCTACTTCATATTTTGGAAAGCAGTTTTTAAGACAAGAATCTGAACCTGTGATGTTAAGAAATCAGTAAATATTAAAAAGAAGATGGATGCAAGAAGGATGAAGAAAGAAGAAGGACTCACAGAAAACACTGGACTTCCCCGGAAGCTACTTGAAAAACATGACCCCTGGCCGGCCTATGTCACCTATACCTCTCAGACAGTGAAAAGACTCATTGAGAAAAGCAAAACTAGAGAACTGGAATGCATGCGTGCCCTCGAGGAAAGACCCTGGGCATCAAGGCAGAATAAACCTTCCAGCGTC<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">TRINITY_GG_8_c0_g2_i1 LEPROT--LEPR:2949-14955</span><br>CGCGGGGCGACTCCCGGTCTGGCTTGGGCAGGCTGCCCGGGCCGTGGCAGGAAGCCGGAAGCAGCCGCGGCCCCAGTTCGGGAGACATGGCGGGCGTTAAAGCTCTCGTGGCATTATCCTTCAGTGGGGCTATTGGACTGACTTTTCTTATGCTGGGATGTGCCTTAGAGGATTATGGGTGTACTTCTCTGAAGTAAGATGATTTGTCAAAAATTCTGTGTGGTTTTGTTACATTGGGAATTTATTTATGTGATAACTGCGTTTAACTTGTCATATCCAATTACTCCTTGGAGATTTAAGTTGTCTTGCATGCCACCAAATTCAACCTATGACTACTTCCTTTTGCCTGCTGGACTCTCAAAGAATACTTCAAATTCGAATGGACATTATGAGACAGCTGTTGAACCTAAGTTTAATTCAAG<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">TRINITY_GG_9_c0_g1_i1 LINC02643--NEBL:2205-23713</span><br>AAACAATCAGGAAAGCTCAGCAGCATAAAACTATGAGAAAACTGGGTCTGAGAATCCAGATGTCCTGAGTGAGTAAAGGGAAAATTTTCACTTCTTCCTATGGAAGCCTGTCACCCCCCAACTCCATCCTAGGCTGAGGAAGTCTGCGTTCTTCTCTCACGGAGCTGGAGAACCTTTCAAGACACTACCCGAAGCAGTCCTTCACCACGGTGGCAGATACACCTGAAAATCTTCGCCTGAAGCAGCAAAGTGAATTGCAGAGTCAGGTCAAGTACAAAAGAGATTTTGAAGAAAGCAAAGGGAGGGGCTTCAGCATCGTCACGGACACTCCTGAGCTACAGAGACTGAAGAGGACTCAGGAGCAAATCAGTAATGTAGGTGCCTGTTTATTCAATAGCATGATGGCTCTGATGTGCATTTCTGGATGAGAAAGGGAGGCTGGATGACTT<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果想要一步完成融合转录本的检测，融合事件的效应，以及重构融合转录本，就可以直接运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate STAR_fusion ##激活环境<br>cd /home/data/t040201/cell_lines<br>mkdir KLE_fusion<br><br>nohup STAR-Fusion --genome_lib_dir /home/data/t040201/data/STAR_data/GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play/ctat_genome_lib_build_dir --left_fq KLE_1.fastq.gz --right_fq KLE_2.fastq.gz  --output_dir /home/data/t040201/cell_lines/KLE_fusion/ --FusionInspector inspect --examine_coding_effect --denovo_reconstruct &amp;<br></code></pre></td></tr></table></figure><p>主要查看的文件包括 <code>star-fusion.fusion_predictions.abridged.tsv</code> （融合事件），<code>star-fusion.fusion_predictions.abridged.coding_effect.tsv</code> (融合事件对编码区域的影响) , FusionInspector-inspect 目录下的 <code>finspector.FusionInspector.fusions.abridged.tsv</code> （校验后的融合以及 FAR 值）和 <code>finspector.gmap_trinity_GG.fusions.fasta</code> （重构的融合转录本序列）文件。</p>]]></content>
    
    
    <categories>
      
      <category>生物信息</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用R包GenomicDataCommons下载和处理TCGA数据</title>
    <link href="/2022/01/07/GenomicDataCommons/"/>
    <url>/2022/01/07/GenomicDataCommons/</url>
    
    <content type="html"><![CDATA[<p>GenomicDataCommons R 包学习，并使用该包计算 TCGA 样本的测序深度</p><span id="more"></span><p>GDC (Genomic Data Commons) 是美国国家癌症研究所建立的在癌症精准医疗数据方面的数据共享平台，目前已经包含几个大型的癌症基因组数据集，比如 TCGA 和 TARGET。GDC 的数据模型非常复杂，可以用下图来简单展示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/%E4%B8%8B%E8%BD%BD.png"></p><p>节点表示实体，比如项目，样本，诊断，文件等，实体之间的关系用边来表示，节点和边都有相应的属性。</p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>这一部分展示一些基础功能</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装和一般的 <code>Bioconductor</code> 包一样：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>require<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;BiocManager&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;BiocManager&quot;</span><span class="hljs-punctuation">)</span><br>BiocManager<span class="hljs-operator">::</span>install<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;GenomicDataCommons&#x27;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>GenomicDataCommons<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h2 id="检查连接和状态"><a href="#检查连接和状态" class="headerlink" title="检查连接和状态"></a>检查连接和状态</h2><p><code>GenomicDataCommons</code> 包需要网络连接，并且在使用时需要 NCI 的 GDC API 处于可操作和非维护状态，使用 <code>status</code> 来检查连接和状态：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">GenomicDataCommons<span class="hljs-operator">::</span>status<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>commit<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;b49b90e1318040f447906940f3dff145809d9ea0&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>data_release<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Data Release 31.0 - October 29, 2021&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>status<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;OK&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>tag<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;3.0.0&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>version<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>如果我们需要在脚本或者开发的包中判断连接是否正常，可以使用 <code>stopifnot</code> 函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">stopifnot<span class="hljs-punctuation">(</span>GenomicDataCommons<span class="hljs-operator">::</span>status<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>status<span class="hljs-operator">==</span><span class="hljs-string">&quot;OK&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h2 id="寻找数据"><a href="#寻找数据" class="headerlink" title="寻找数据"></a>寻找数据</h2><p>在下载数据之前，我们需要先制作原始数据的 <code>manifest</code> 文件，这个文件中有数据的 UUID ，可以被 GDC 的 API 用来定位下载的文件。比如下面的代码获取了卵巢癌 RNA-seq数据的原始 counts：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs r">ge_manifest <span class="hljs-operator">=</span> files<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span><br>    filter<span class="hljs-punctuation">(</span> cases.project.project_id <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;TCGA-OV&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>    filter<span class="hljs-punctuation">(</span> type <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;gene_expression&#x27;</span> <span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span><br>    filter<span class="hljs-punctuation">(</span> analysis.workflow_type <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;HTSeq - Counts&#x27;</span><span class="hljs-punctuation">)</span>  <span class="hljs-operator">%&gt;%</span><br>    manifest<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">379</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br>head<span class="hljs-punctuation">(</span>ge_manifest<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 × 5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   id                                   filename                                             md5                      size state <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                                <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                                                <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-number">451</span>c9c6d<span class="hljs-operator">-</span>f062<span class="hljs-operator">-</span><span class="hljs-number">4</span>ca2<span class="hljs-operator">-</span><span class="hljs-number">8459</span><span class="hljs-operator">-</span>efed929bd305 <span class="hljs-number">9</span>c6f2d76<span class="hljs-operator">-</span><span class="hljs-number">7701</span><span class="hljs-operator">-</span><span class="hljs-number">434</span>e<span class="hljs-operator">-</span>a876<span class="hljs-operator">-</span>c04ab14cccea.htseq.counts.gz d296b0cb99d14b4b91383… <span class="hljs-number">263970</span> relea…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span>bc23348<span class="hljs-operator">-</span><span class="hljs-number">57</span>f9<span class="hljs-operator">-</span><span class="hljs-number">4929</span><span class="hljs-operator">-</span>a90b<span class="hljs-operator">-</span>a557696ca955 af6e5654<span class="hljs-operator">-</span>e755<span class="hljs-operator">-</span><span class="hljs-number">4</span>c15<span class="hljs-operator">-</span>b3e5<span class="hljs-operator">-</span><span class="hljs-number">807</span>da2642e25.htseq.counts.gz <span class="hljs-number">615e3868</span>d8943e94859a2… <span class="hljs-number">253867</span> relea…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span>c8ea118<span class="hljs-operator">-</span>fbce<span class="hljs-operator">-</span><span class="hljs-number">4</span>dc9<span class="hljs-operator">-</span><span class="hljs-number">803</span>d<span class="hljs-operator">-</span><span class="hljs-number">1</span>b6e30d06704 d73c0f69<span class="hljs-operator">-</span>ab9b<span class="hljs-operator">-</span><span class="hljs-number">4408</span><span class="hljs-operator">-</span>bf89<span class="hljs-operator">-</span>aa34bf829351.htseq.counts.gz ef4a8c5d45c6de49b590b… <span class="hljs-number">263239</span> relea…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span>b83b0f5<span class="hljs-operator">-</span><span class="hljs-number">4</span>fc7<span class="hljs-operator">-</span><span class="hljs-number">4</span>a3a<span class="hljs-operator">-</span>a090<span class="hljs-operator">-</span><span class="hljs-number">3</span>ce497fb1af4 c9689d9f<span class="hljs-operator">-</span><span class="hljs-number">6138</span><span class="hljs-operator">-</span><span class="hljs-number">42</span>a8<span class="hljs-operator">-</span>a58e<span class="hljs-operator">-</span><span class="hljs-number">1</span>b44dc4b193f.htseq.counts.gz f1ffd9f86b0f6c97cbb66… <span class="hljs-number">257423</span> relea…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> <span class="hljs-number">749e9</span>e26<span class="hljs-operator">-</span>eb75<span class="hljs-operator">-</span><span class="hljs-number">4681</span><span class="hljs-operator">-</span>b039<span class="hljs-operator">-</span><span class="hljs-number">6966e911</span>ae7a <span class="hljs-number">43622957</span><span class="hljs-operator">-</span><span class="hljs-number">7</span>bed<span class="hljs-operator">-</span><span class="hljs-number">4</span>d24<span class="hljs-operator">-</span>a31e<span class="hljs-operator">-</span><span class="hljs-number">5</span>fadf41216e1.htseq.counts.gz <span class="hljs-number">50e84291</span>a89a72fe3d43e… <span class="hljs-number">255649</span> relea…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span> a2d8e28d<span class="hljs-operator">-</span><span class="hljs-number">0371</span><span class="hljs-operator">-</span><span class="hljs-number">4421</span><span class="hljs-operator">-</span><span class="hljs-number">8</span>ca4<span class="hljs-operator">-</span><span class="hljs-number">4629</span>a8cc7b72 <span class="hljs-number">9</span>a420e2d<span class="hljs-operator">-</span><span class="hljs-number">15</span>c8<span class="hljs-operator">-</span><span class="hljs-number">41</span>f3<span class="hljs-operator">-</span><span class="hljs-number">859</span>f<span class="hljs-operator">-</span><span class="hljs-number">25872765</span>f75e.htseq.counts.gz <span class="hljs-number">3e2</span>e347efa85410ecbd8c… <span class="hljs-number">253306</span> relea…<br>nrow<span class="hljs-punctuation">(</span>ge_manifest<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">379</span><br></code></pre></td></tr></table></figure><h2 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h2><p>通过上面步骤的筛选，获得了 379 个样本的基因表达数据的 UUID，我们可以通过这些 UUID 来下载相应的基因表达数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##演示只下载了前20个文件，已经指定了 cache dir</span><br>fnames <span class="hljs-operator">=</span> lapply<span class="hljs-punctuation">(</span>ge_manifest<span class="hljs-operator">$</span>id<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>gdcdata<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br></code></pre></td></tr></table></figure><p>下载需要用到的函数是 <code>gdcdata</code>，该函数接受文件的 UUID 作为输入，返回下载的文件并以 <code>Filename</code> 重命名文件，需要注意的是我们最好指定<code>gdc_cache</code> 作为 下载文件的存放目录（cache），避免多次重复下载（当然默认的 cache 目录也可以）。</p><p>可以查看一下下载文件的结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">tree ~/.cache/GenomicDataCommons<br>&gt;&gt; [01;34m/home/data/t040201/.cache/GenomicDataCommons[00m<br>&gt;&gt; ├── [01;34m02ab2f95-023b-492e-8dc9-20b4f52f209f[00m<br>&gt;&gt; │   └── [01;31mb1d5c444-da0d-4360-bd45-31c94217adfc.FPKM-UQ.txt.gz[00m<br>&gt;&gt; ├── [01;34m0f2ef2fa-cf6e-4d03-a648-ccd9fdf8b8c5[00m<br>&gt;&gt; │   └── [01;31mb64ef80a-d41c-4f92-a3ed-e43d55abb2c2.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m1480554d-8579-4146-93ba-a7b23b8c9a5b[00m<br>&gt;&gt; │   └── [01;31ma2082ad4-279e-422f-b5a7-cb7fbeb7a6df.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m1c099182-703f-4aaf-b1d6-0f9be5094b9a[00m<br>&gt;&gt; │   └── [01;31mfea3c4d0-7b9f-4279-989e-535aaefbdfeb.FPKM.txt.gz[00m<br>&gt;&gt; ├── [01;34m3b82236e-b055-4d10-acb4-b5a5992a1261[00m<br>&gt;&gt; │   └── [01;31m6aa7225b-3d10-4b19-a472-0adeb21c26cf.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m451c9c6d-f062-4ca2-8459-efed929bd305[00m<br>&gt;&gt; │   └── [01;31m9c6f2d76-7701-434e-a876-c04ab14cccea.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m4958b9d4-59fa-49e4-a849-1b777452f6d2[00m<br>&gt;&gt; │   └── [01;31m3e00e8aa-31bc-454e-b558-7bcbad5f47ad.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m4b83b0f5-4fc7-4a3a-a090-3ce497fb1af4[00m<br>&gt;&gt; │   └── [01;31mc9689d9f-6138-42a8-a58e-1b44dc4b193f.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m581b0bcf-a7e5-44ec-818a-9193a0565095[00m<br>&gt;&gt; │   └── [01;31m347a8eeb-204f-41df-98d3-61394d2b7cd7.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m5bc23348-57f9-4929-a90b-a557696ca955[00m<br>&gt;&gt; │   └── [01;31maf6e5654-e755-4c15-b3e5-807da2642e25.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m5e57bd1d-f38d-447d-9d7c-1fa1c5a2ecaa[00m<br>&gt;&gt; │   └── [01;31mb269c35d-7f91-4c66-8bef-59906ec87745.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m717ca3c0-0b0e-4cf3-af34-15d0fbfd7f68[00m<br>&gt;&gt; │   └── [01;31mc255d022-a659-42bd-9099-6853b41b64c7.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m749e9e26-eb75-4681-b039-6966e911ae7a[00m<br>&gt;&gt; │   └── [01;31m43622957-7bed-4d24-a31e-5fadf41216e1.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m750f8926-4361-4a92-8c72-59c82baad867[00m<br>&gt;&gt; │   └── [01;31m195a13be-31a4-47ce-bc3d-6aba8451e304.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m769c5f60-fdf1-49b1-bba3-7f4a3ef1f9a8[00m<br>&gt;&gt; │   └── [01;31m9e198dfe-9fc6-48e2-ba06-90c49ddf48aa.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34m7c8ea118-fbce-4dc9-803d-1b6e30d06704[00m<br>&gt;&gt; │   └── [01;31md73c0f69-ab9b-4408-bf89-aa34bf829351.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34ma0765b46-5fbb-49d0-b8aa-682486927d0f[00m<br>&gt;&gt; │   └── [01;31m5a928267-356d-47e9-b8b2-f477eaa261fa.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34ma2d8e28d-0371-4421-8ca4-4629a8cc7b72[00m<br>&gt;&gt; │   └── [01;31m9a420e2d-15c8-41f3-859f-25872765f75e.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34mb44b0d52-562a-476a-a607-a7148d128359[00m<br>&gt;&gt; │   └── [01;31m062b6d0c-06b0-4d27-8702-32501278cd9c.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34mc44d4c5c-b855-4e82-bd90-0f4b6c0e0015[00m<br>&gt;&gt; │   └── [01;31m75303476-cdec-4ae4-aaf5-01abdc3213ab.htseq.counts.gz[00m<br>&gt;&gt; ├── [01;34mc9cd12a4-b4b3-416e-9046-9c06dd884547[00m<br>&gt;&gt; │   └── [01;31mac6e38b7-143c-491e-9892-4c28f51ddce5.htseq.counts.gz[00m<br>&gt;&gt; └── [01;34mcd32019f-e6e5-4cf9-a4b4-d38dfdfc0f0a[00m<br>&gt;&gt;     └── [01;31mfedd52be-18a8-423f-ba8a-4f9416f11ff5.htseq.counts.gz[00m<br>&gt;&gt; <br>&gt;&gt; 22 directories, 22 files<br></code></pre></td></tr></table></figure><p class="note note-primary">如果下载的是 controlled-access 数据，需要提供 token</p><h2 id="元数据获取"><a href="#元数据获取" class="headerlink" title="元数据获取"></a>元数据获取</h2><h3 id="临床数据"><a href="#临床数据" class="headerlink" title="临床数据"></a>临床数据</h3><p>获取临床数据是一个常见的任务，<code>gdc_clinical</code> 函数接受 <code>case_ids</code>，返回一个有个四个数据框的列表：</p><ul><li>人口学统计（demographic），包括性别，种族，年龄等</li><li>诊断（diagnoses），包括临床分期，生存时间，回访信息等</li><li>暴露（exposures），包括吸烟，饮酒记录等</li><li>main，包括疾病类型，诊断时间等</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs r">case_ids <span class="hljs-operator">=</span> cases<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> results<span class="hljs-punctuation">(</span>size<span class="hljs-operator">=</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> ids<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>clindat <span class="hljs-operator">=</span> gdc_clinical<span class="hljs-punctuation">(</span>case_ids<span class="hljs-punctuation">)</span><br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>clindat<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;demographic&quot;</span> <span class="hljs-string">&quot;diagnoses&quot;</span>   <span class="hljs-string">&quot;exposures&quot;</span>   <span class="hljs-string">&quot;main&quot;</span><br><br>head<span class="hljs-punctuation">(</span>clindat<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;demographic&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 × 15</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   vital_status gender race    ethnicity  age_at_index submitter_id  days_to_birth created_datetime year_of_birth demographic_id <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>             <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                 <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>lgl<span class="hljs-operator">&gt;</span>                    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> Alive        female not re… not repor…           <span class="hljs-number">65</span> TCGA<span class="hljs-operator">-</span>A8<span class="hljs-operator">-</span>A07G…        <span class="hljs-operator">-</span><span class="hljs-number">23926</span> <span class="hljs-literal">NA</span>                        <span class="hljs-number">1944</span> <span class="hljs-number">38</span>caac77<span class="hljs-operator">-</span>d856<span class="hljs-operator">-</span>…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> Dead         female black … not hispa…           <span class="hljs-number">49</span> TCGA<span class="hljs-operator">-</span>A2<span class="hljs-operator">-</span>A3XY…        <span class="hljs-operator">-</span><span class="hljs-number">18059</span> <span class="hljs-literal">NA</span>                        <span class="hljs-number">1961</span> ac6eba06<span class="hljs-operator">-</span><span class="hljs-number">6e54</span><span class="hljs-operator">-</span>…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> Alive        female white   not hispa…           <span class="hljs-number">56</span> TCGA<span class="hljs-operator">-</span>E2<span class="hljs-operator">-</span>A152…        <span class="hljs-operator">-</span><span class="hljs-number">20705</span> <span class="hljs-literal">NA</span>                        <span class="hljs-number">1953</span> <span class="hljs-number">680</span>b1fdd<span class="hljs-operator">-</span><span class="hljs-number">143</span><span class="hljs-built_in">c</span><span class="hljs-operator">-</span>…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> Alive        female white   not hispa…           <span class="hljs-number">40</span> TCGA<span class="hljs-operator">-</span>E2<span class="hljs-operator">-</span>A15E…        <span class="hljs-operator">-</span><span class="hljs-number">14894</span> <span class="hljs-literal">NA</span>                        <span class="hljs-number">1969</span> <span class="hljs-number">1</span>b53b23d<span class="hljs-operator">-</span>b98c<span class="hljs-operator">-</span>…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> Alive        female white   not repor…           <span class="hljs-number">73</span> TCGA<span class="hljs-operator">-</span>AR<span class="hljs-operator">-</span>A0U0…        <span class="hljs-operator">-</span><span class="hljs-number">26993</span> <span class="hljs-literal">NA</span>                        <span class="hljs-number">1931</span> <span class="hljs-number">2</span>f82f157<span class="hljs-operator">-</span>cce2<span class="hljs-operator">-</span>…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span> Alive        female white   not repor…           <span class="hljs-number">52</span> TCGA<span class="hljs-operator">-</span>BH<span class="hljs-operator">-</span>A0E1…        <span class="hljs-operator">-</span><span class="hljs-number">19192</span> <span class="hljs-literal">NA</span>                        <span class="hljs-number">1957</span> <span class="hljs-number">7</span>c593975<span class="hljs-operator">-</span>bc80<span class="hljs-operator">-</span>…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># … with 5 more variables: updated_datetime &lt;chr&gt;, state &lt;chr&gt;, year_of_death &lt;lgl&gt;, days_to_death &lt;int&gt;, case_id &lt;chr&gt;</span><br>head<span class="hljs-punctuation">(</span>clindat<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;diagnoses&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 × 29</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   case_id synchronous_mal… ajcc_pathologic… days_to_diagnos… created_datetime last_known_dise… tissue_or_organ… days_to_last_fo…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>            <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                       <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>lgl<span class="hljs-operator">&gt;</span>            <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>            <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                       <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-number">8</span>cf8b6… No               Stage IIA                       <span class="hljs-number">0</span> <span class="hljs-literal">NA</span>               not reported     Breast<span class="hljs-punctuation">,</span> NOS                   <span class="hljs-number">577</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> deba32… No               Stage IIB                       <span class="hljs-number">0</span> <span class="hljs-literal">NA</span>               not reported     Breast<span class="hljs-punctuation">,</span> NOS                  <span class="hljs-number">1064</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> a80154… No               Stage I                         <span class="hljs-number">0</span> <span class="hljs-literal">NA</span>               not reported     Breast<span class="hljs-punctuation">,</span> NOS                  <span class="hljs-number">2128</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span>a2a35… No               Stage IIA                       <span class="hljs-number">0</span> <span class="hljs-literal">NA</span>               not reported     Breast<span class="hljs-punctuation">,</span> NOS                   <span class="hljs-number">630</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> e3c336… No               Stage IIB                       <span class="hljs-number">0</span> <span class="hljs-literal">NA</span>               not reported     Breast<span class="hljs-punctuation">,</span> NOS                  <span class="hljs-number">1988</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span> <span class="hljs-number">606</span>fbc… No               Stage IIB                       <span class="hljs-number">0</span> <span class="hljs-literal">NA</span>               not reported     Breast<span class="hljs-punctuation">,</span> NOS                   <span class="hljs-number">477</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># … with 21 more variables: primary_diagnosis &lt;chr&gt;, age_at_diagnosis &lt;int&gt;, updated_datetime &lt;chr&gt;, year_of_diagnosis &lt;int&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   prior_malignancy &lt;chr&gt;, state &lt;chr&gt;, prior_treatment &lt;chr&gt;, days_to_last_known_disease_status &lt;lgl&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   ajcc_staging_system_edition &lt;chr&gt;, ajcc_pathologic_t &lt;chr&gt;, days_to_recurrence &lt;lgl&gt;, morphology &lt;chr&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   ajcc_pathologic_n &lt;chr&gt;, ajcc_pathologic_m &lt;chr&gt;, submitter_id &lt;chr&gt;, classification_of_tumor &lt;chr&gt;, diagnosis_id &lt;chr&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   icd_10_code &lt;chr&gt;, site_of_resection_or_biopsy &lt;chr&gt;, tumor_grade &lt;chr&gt;, progression_or_recurrence &lt;chr&gt;</span><br>head<span class="hljs-punctuation">(</span>clindat<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;exposures&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 × 10</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   case_id    cigarettes_per_d… updated_datetime   alcohol_history exposure_id   submitter_id years_smoked state created_datetime<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>lgl<span class="hljs-operator">&gt;</span>             <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>              <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>lgl<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>lgl<span class="hljs-operator">&gt;</span>           <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-number">8</span>cf8b620<span class="hljs-operator">-</span>… <span class="hljs-literal">NA</span>                <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">31</span>T21<span class="hljs-operator">:</span><span class="hljs-number">48</span><span class="hljs-operator">:</span>… Not Reported    a8be57c5<span class="hljs-operator">-</span><span class="hljs-number">620</span>… TCGA<span class="hljs-operator">-</span>A8<span class="hljs-operator">-</span>A07… <span class="hljs-literal">NA</span>           rele… <span class="hljs-literal">NA</span>              <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> deba32e4<span class="hljs-operator">-</span>… <span class="hljs-literal">NA</span>                <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">31</span>T21<span class="hljs-operator">:</span><span class="hljs-number">29</span><span class="hljs-operator">:</span>… Not Reported    <span class="hljs-number">9</span>aa5cc63<span class="hljs-operator">-</span>cea… TCGA<span class="hljs-operator">-</span>A2<span class="hljs-operator">-</span>A3X… <span class="hljs-literal">NA</span>           rele… <span class="hljs-literal">NA</span>              <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> a8015490<span class="hljs-operator">-</span>… <span class="hljs-literal">NA</span>                <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">31</span>T21<span class="hljs-operator">:</span><span class="hljs-number">52</span><span class="hljs-operator">:</span>… Not Reported    <span class="hljs-number">134</span>cee43<span class="hljs-operator">-</span><span class="hljs-number">117</span>… TCGA<span class="hljs-operator">-</span>E2<span class="hljs-operator">-</span>A15… <span class="hljs-literal">NA</span>           rele… <span class="hljs-literal">NA</span>              <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span>a2a3529<span class="hljs-operator">-</span>… <span class="hljs-literal">NA</span>                <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">31</span>T21<span class="hljs-operator">:</span><span class="hljs-number">31</span><span class="hljs-operator">:</span>… Not Reported    fdf22b2e<span class="hljs-operator">-</span><span class="hljs-number">0</span>ba… TCGA<span class="hljs-operator">-</span>E2<span class="hljs-operator">-</span>A15… <span class="hljs-literal">NA</span>           rele… <span class="hljs-literal">NA</span>              <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> e3c336f5<span class="hljs-operator">-</span>… <span class="hljs-literal">NA</span>                <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">31</span>T15<span class="hljs-operator">:</span><span class="hljs-number">38</span><span class="hljs-operator">:</span>… Not Reported    <span class="hljs-number">3</span>d1c43ad<span class="hljs-operator">-</span>b1d… TCGA<span class="hljs-operator">-</span>AR<span class="hljs-operator">-</span>A0U… <span class="hljs-literal">NA</span>           rele… <span class="hljs-literal">NA</span>              <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span> <span class="hljs-number">606</span>fbc6a<span class="hljs-operator">-</span>… <span class="hljs-literal">NA</span>                <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">31</span>T21<span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-operator">:</span>… Not Reported    <span class="hljs-number">1</span>d844394<span class="hljs-operator">-</span><span class="hljs-number">425</span>… TCGA<span class="hljs-operator">-</span>BH<span class="hljs-operator">-</span>A0E… <span class="hljs-literal">NA</span>           rele… <span class="hljs-literal">NA</span>              <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># … with 1 more variable: alcohol_intensity &lt;lgl&gt;</span><br>head<span class="hljs-punctuation">(</span>clindat<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;main&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 × 8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   id                                   disease_type  submitter_id created_datetime primary_site updated_datetime  case_id  state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                                <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>lgl<span class="hljs-operator">&gt;</span>            <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>             <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-number">8</span>cf8b620<span class="hljs-operator">-</span><span class="hljs-number">7</span>ab6<span class="hljs-operator">-</span><span class="hljs-number">4</span>b6e<span class="hljs-operator">-</span><span class="hljs-number">84</span>bc<span class="hljs-operator">-</span>ff5a83f381fa Ductal and L… TCGA<span class="hljs-operator">-</span>A8<span class="hljs-operator">-</span>A07G <span class="hljs-literal">NA</span>               Breast       <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">06</span>T14<span class="hljs-operator">:</span><span class="hljs-number">14</span>… <span class="hljs-number">8</span>cf8b62… rele…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> deba32e4<span class="hljs-operator">-</span><span class="hljs-number">0e68</span><span class="hljs-operator">-</span><span class="hljs-number">4711</span><span class="hljs-operator">-</span><span class="hljs-number">941</span>b<span class="hljs-operator">-</span><span class="hljs-number">3</span>b63bd965afb Ductal and L… TCGA<span class="hljs-operator">-</span>A2<span class="hljs-operator">-</span>A3XY <span class="hljs-literal">NA</span>               Breast       <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">06</span>T14<span class="hljs-operator">:</span><span class="hljs-number">14</span>… deba32e… rele…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> a8015490<span class="hljs-operator">-</span><span class="hljs-number">9740</span><span class="hljs-operator">-</span><span class="hljs-number">45</span>c9<span class="hljs-operator">-</span><span class="hljs-number">8</span>bd2<span class="hljs-operator">-</span>eb6d1beefc2e Ductal and L… TCGA<span class="hljs-operator">-</span>E2<span class="hljs-operator">-</span>A152 <span class="hljs-literal">NA</span>               Breast       <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">06</span>T14<span class="hljs-operator">:</span><span class="hljs-number">16</span>… a801549… rele…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span>a2a3529<span class="hljs-operator">-</span>f645<span class="hljs-operator">-</span><span class="hljs-number">4967</span><span class="hljs-operator">-</span><span class="hljs-number">9</span>a58<span class="hljs-operator">-</span><span class="hljs-number">89</span>ee20b8bb62 Ductal and L… TCGA<span class="hljs-operator">-</span>E2<span class="hljs-operator">-</span>A15E <span class="hljs-literal">NA</span>               Breast       <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">06</span>T14<span class="hljs-operator">:</span><span class="hljs-number">16</span>… <span class="hljs-number">0</span>a2a352… rele…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> e3c336f5<span class="hljs-operator">-</span>c32f<span class="hljs-operator">-</span><span class="hljs-number">4</span>c5d<span class="hljs-operator">-</span><span class="hljs-number">81</span>fb<span class="hljs-operator">-</span>e2408ae145b2 Ductal and L… TCGA<span class="hljs-operator">-</span>AR<span class="hljs-operator">-</span>A0U0 <span class="hljs-literal">NA</span>               Breast       <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">06</span>T14<span class="hljs-operator">:</span><span class="hljs-number">15</span>… e3c336f… rele…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span> <span class="hljs-number">606</span>fbc6a<span class="hljs-operator">-</span>b41b<span class="hljs-operator">-</span><span class="hljs-number">441</span>d<span class="hljs-operator">-</span><span class="hljs-number">9401</span><span class="hljs-operator">-</span><span class="hljs-number">51e54912</span>bf5e Ductal and L… TCGA<span class="hljs-operator">-</span>BH<span class="hljs-operator">-</span>A0E1 <span class="hljs-literal">NA</span>               Breast       <span class="hljs-number">2019</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">06</span>T14<span class="hljs-operator">:</span><span class="hljs-number">15</span>… <span class="hljs-number">606</span>fbc6… rele…<br></code></pre></td></tr></table></figure><h3 id="广义的元数据获取"><a href="#广义的元数据获取" class="headerlink" title="广义的元数据获取"></a>广义的元数据获取</h3><p>我们可以通过 <code>GenomicDataCommons</code> 结合各种参数（比如 <code>filter</code>, <code>select</code>, <code>expand</code>等）来灵活的获取想要的元数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">expands <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;diagnoses&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;annotations&quot;</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-string">&quot;demographic&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;exposures&quot;</span><span class="hljs-punctuation">)</span><br>clinResults <span class="hljs-operator">=</span> cases<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span><br>    GenomicDataCommons<span class="hljs-operator">::</span>select<span class="hljs-punctuation">(</span><span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span><br>    GenomicDataCommons<span class="hljs-operator">::</span>expand<span class="hljs-punctuation">(</span>expands<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span><br>    results<span class="hljs-punctuation">(</span>size<span class="hljs-operator">=</span><span class="hljs-number">50</span><span class="hljs-punctuation">)</span><br>str<span class="hljs-punctuation">(</span>clinResults<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>list.len<span class="hljs-operator">=</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">50</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;8cf8b620-7ab6-4b6e-84bc-ff5a83f381fa&quot;</span> <span class="hljs-string">&quot;deba32e4-0e68-4711-941b-3b63bd965afb&quot;</span> ...<br></code></pre></td></tr></table></figure><h1 id="基本设计"><a href="#基本设计" class="headerlink" title="基本设计"></a>基本设计</h1><p>从上面的例子中可以看出这个包的设计行为和 <code>dplyr</code> 是非常类似的，一些动词也是直接和 <code>dplyr</code> 的函数同名(filter, select 等)。简单来说，该包检索，获取元数据和文件分为三步：</p><ul><li>请求构造函数（query constructors，如上面的 <code>cases()</code>, <code>files()</code>）</li><li>一系列的动词用来过滤样本，选择字段，聚合并生成最终的请求对象（query object，如 <code>filter</code>, <code>select</code>等）</li><li>使用一系列动词基于上面得到的请求对象获取文件，返回结果（如 <code>gdcdata</code>）</li></ul><p>完成上述过程的基本函数如下：</p><ul><li>创建请求：<ul><li><code>projects()</code></li><li><code>cases()</code></li><li><code>files()</code></li><li><code>annotations()</code></li></ul></li><li>操作请求：<ul><li><code>filter()</code></li><li><code>facet()</code></li><li><code>select()</code></li><li><code>expand()</code></li></ul></li><li>GDC API 字段的内省（introspection, 即支持哪些查询，有哪些字段及字段类型等信息）：<ul><li><code>mapping()</code></li><li><code>available_fields()</code></li><li><code>default_fields()</code></li><li><code>grep_fields()</code></li><li><code>field_picker()</code></li><li><code>available_values()</code></li><li><code>available_expand()</code></li></ul></li><li>执行 API 调用，获取请求的结果：<ul><li><code>results()</code></li><li><code>count()</code></li><li><code>response()</code></li></ul></li><li>原始数据下载：<ul><li><code>gdcdata()</code></li><li><code>transfer()</code></li><li><code>gdc_client()</code></li></ul></li><li>汇总，聚合字段值（也叫 faceting）：<ul><li><code>aggregations()</code></li></ul></li><li>Control 数据的授权（token）：<ul><li><code>gdc_token()</code></li></ul></li><li>BAM 文件切片：<ul><li><code>slicing()</code></li></ul></li></ul><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>上面那些基本函数构成了两大类操作：</p><ul><li>检索元数据和寻找数据文件</li><li>传输原始数据或者处理后的数据</li></ul><h2 id="检索元数据"><a href="#检索元数据" class="headerlink" title="检索元数据"></a>检索元数据</h2><h3 id="创建检索"><a href="#创建检索" class="headerlink" title="创建检索"></a>创建检索</h3><p>有四种方便的函数可以创建 <code>GDCQuery</code> 对象来获取不同类型的数据：</p><ul><li><code>project()</code></li><li><code>cases()</code></li><li><code>files()</code></li><li><code>annotations()</code></li></ul><p>这些对象都含有下列的一些元素：</p><ul><li>字段（fields）：需要下载的字段，如果没有指定字段，就会使用默认字段来取回数据（默认字段可以通过<code>default_fields()</code> 来查看）</li><li>过滤器（filters）：含有调用 <code>filter()</code> 方法后获得的结果，并用来筛选取回的数据</li><li>facets：当调用 <code>aggregations()</code> 时对数据汇总所需的字段名</li><li>存档（archive）：可以是 “default” 或者 <code>legacy</code> (legacy 是比较老的数据)</li><li>token：下载 control 数据的凭证，对于获取元数据可以不需要，只需在下载真正数据时提供即可</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">pquery <span class="hljs-operator">=</span> projects<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>str<span class="hljs-punctuation">(</span>pquery<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> List of <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> fields <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;dbgap_accession_number&quot;</span> <span class="hljs-string">&quot;disease_type&quot;</span> <span class="hljs-string">&quot;intended_release_date&quot;</span> <span class="hljs-string">&quot;name&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> filters<span class="hljs-operator">:</span> <span class="hljs-literal">NULL</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> facets <span class="hljs-operator">:</span> <span class="hljs-literal">NULL</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> legacy <span class="hljs-operator">:</span> logi <span class="hljs-literal">FALSE</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> expand <span class="hljs-operator">:</span> <span class="hljs-literal">NULL</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">-</span> <span class="hljs-built_in">attr</span><span class="hljs-punctuation">(</span><span class="hljs-operator">*</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;class&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;gdc_projects&quot;</span> <span class="hljs-string">&quot;GDCQuery&quot;</span> <span class="hljs-string">&quot;list&quot;</span><br><br>default_fields<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;projects&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;dbgap_accession_number&quot;</span> <span class="hljs-string">&quot;disease_type&quot;</span>           <span class="hljs-string">&quot;intended_release_date&quot;</span>  <span class="hljs-string">&quot;name&quot;</span>                  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;primary_site&quot;</span>           <span class="hljs-string">&quot;project_autocomplete&quot;</span>   <span class="hljs-string">&quot;project_id&quot;</span>             <span class="hljs-string">&quot;releasable&quot;</span>            <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;released&quot;</span>               <span class="hljs-string">&quot;state&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到初始状态下大部分元素是空的（NULL）</p><h3 id="取回结果"><a href="#取回结果" class="headerlink" title="取回结果"></a>取回结果</h3><p>当有了一个请求对象后，我们就可以从 GDC 取回结果了。可以使用 <code>count()</code> 来得到最基本的结果类型，这个函数返回满足 <code>filter</code> 标准的记录数量，由于我们目前没有定义任何的过滤条件，所以这里的 <code>count()</code> 返回的是所有的 <code>project</code> 记录（在 default 存档中）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">pcount <span class="hljs-operator">=</span> pquery <span class="hljs-operator">%&gt;%</span> count<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>pcount<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">70</span><br></code></pre></td></tr></table></figure><p><code>results()</code> 可以直接取回结果：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">presults <span class="hljs-operator">=</span> pquery <span class="hljs-operator">%&gt;%</span> results<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>返回的结果从 GDC 的 Json 格式被转换成 R 里面的 List，可以使用 <code>str()</code> 来简单的查看数据结构：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs r">str<span class="hljs-punctuation">(</span>presults<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> List of <span class="hljs-number">9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> id                    <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;TCGA-BRCA&quot;</span> <span class="hljs-string">&quot;GENIE-MSK&quot;</span> <span class="hljs-string">&quot;GENIE-VICC&quot;</span> <span class="hljs-string">&quot;GENIE-UHN&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> primary_site          <span class="hljs-operator">:</span>List of <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> TCGA<span class="hljs-operator">-</span>BRCA            <span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;Breast&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> GENIE<span class="hljs-operator">-</span>MSK            <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">49</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Connective, subcutaneous and other soft tissues&quot;</span> <span class="hljs-string">&quot;Kidney&quot;</span> <span class="hljs-string">&quot;Prostate gland&quot;</span> <span class="hljs-string">&quot;Other and unspecified major salivary glands&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> GENIE<span class="hljs-operator">-</span>VICC           <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">46</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Connective, subcutaneous and other soft tissues&quot;</span> <span class="hljs-string">&quot;Kidney&quot;</span> <span class="hljs-string">&quot;Prostate gland&quot;</span> <span class="hljs-string">&quot;Other and unspecified major salivary glands&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> GENIE<span class="hljs-operator">-</span>UHN            <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">42</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Connective, subcutaneous and other soft tissues&quot;</span> <span class="hljs-string">&quot;Kidney&quot;</span> <span class="hljs-string">&quot;Prostate gland&quot;</span> <span class="hljs-string">&quot;Other and unspecified major salivary glands&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> CPTAC<span class="hljs-operator">-</span><span class="hljs-number">2</span>              <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Ovary&quot;</span> <span class="hljs-string">&quot;Rectum&quot;</span> <span class="hljs-string">&quot;Other and unspecified female genital organs&quot;</span> <span class="hljs-string">&quot;Breast&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> CMI<span class="hljs-operator">-</span>ASC              <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Bladder&quot;</span> <span class="hljs-string">&quot;Other and ill-defined sites&quot;</span> <span class="hljs-string">&quot;Other and ill-defined digestive organs&quot;</span> <span class="hljs-string">&quot;Heart, mediastinum, and pleura&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> BEATAML1.0<span class="hljs-operator">-</span>COHORT    <span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;Hematopoietic and reticuloendothelial systems&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> CGCI<span class="hljs-operator">-</span>BLGSP           <span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;Hematopoietic and reticuloendothelial systems&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> BEATAML1.0<span class="hljs-operator">-</span>CRENOLANIB<span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;Hematopoietic and reticuloendothelial systems&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> CMI<span class="hljs-operator">-</span>MPC              <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Prostate gland&quot;</span> <span class="hljs-string">&quot;Lymph nodes&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> dbgap_accession_number<span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">NA</span> <span class="hljs-literal">NA</span> <span class="hljs-literal">NA</span> <span class="hljs-literal">NA</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> project_id            <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;TCGA-BRCA&quot;</span> <span class="hljs-string">&quot;GENIE-MSK&quot;</span> <span class="hljs-string">&quot;GENIE-VICC&quot;</span> <span class="hljs-string">&quot;GENIE-UHN&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> disease_type          <span class="hljs-operator">:</span>List of <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> TCGA<span class="hljs-operator">-</span>BRCA            <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Complex Epithelial Neoplasms&quot;</span> <span class="hljs-string">&quot;Fibroepithelial Neoplasms&quot;</span> <span class="hljs-string">&quot;Adnexal and Skin Appendage Neoplasms&quot;</span> <span class="hljs-string">&quot;Adenomas and Adenocarcinomas&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> GENIE<span class="hljs-operator">-</span>MSK            <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">49</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Miscellaneous Bone Tumors&quot;</span> <span class="hljs-string">&quot;Myeloid Leukemias&quot;</span> <span class="hljs-string">&quot;Gliomas&quot;</span> <span class="hljs-string">&quot;Lipomatous Neoplasms&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> GENIE<span class="hljs-operator">-</span>VICC           <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">43</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Leukemias, NOS&quot;</span> <span class="hljs-string">&quot;Chronic Myeloproliferative Disorders&quot;</span> <span class="hljs-string">&quot;Myeloid Leukemias&quot;</span> <span class="hljs-string">&quot;Gliomas&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> GENIE<span class="hljs-operator">-</span>UHN            <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">39</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Leukemias, NOS&quot;</span> <span class="hljs-string">&quot;Chronic Myeloproliferative Disorders&quot;</span> <span class="hljs-string">&quot;Miscellaneous Bone Tumors&quot;</span> <span class="hljs-string">&quot;Myeloid Leukemias&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> CPTAC<span class="hljs-operator">-</span><span class="hljs-number">2</span>              <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Not Reported&quot;</span> <span class="hljs-string">&quot;Cystic, Mucinous and Serous Neoplasms&quot;</span> <span class="hljs-string">&quot;Adenomas and Adenocarcinomas&quot;</span> <span class="hljs-string">&quot;Ductal and Lobular Neoplasms&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> CMI<span class="hljs-operator">-</span>ASC              <span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;Soft Tissue Tumors and Sarcomas, NOS&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> BEATAML1.0<span class="hljs-operator">-</span>COHORT    <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Leukemias, NOS&quot;</span> <span class="hljs-string">&quot;Chronic Myeloproliferative Disorders&quot;</span> <span class="hljs-string">&quot;Myeloid Leukemias&quot;</span> <span class="hljs-string">&quot;Plasma Cell Tumors&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> CGCI<span class="hljs-operator">-</span>BLGSP           <span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;Mature B-Cell Lymphomas&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> BEATAML1.0<span class="hljs-operator">-</span>CRENOLANIB<span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;Myeloid Leukemias&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> CMI<span class="hljs-operator">-</span>MPC              <span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;Adenomas and Adenocarcinomas&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> name                  <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Breast Invasive Carcinoma&quot;</span> <span class="hljs-string">&quot;AACR Project GENIE - Contributed by Memorial Sloan Kettering Cancer Center&quot;</span> <span class="hljs-string">&quot;AACR Project GENIE - Contributed by Vanderbilt-Ingram Cancer Center&quot;</span> <span class="hljs-string">&quot;AACR Project GENIE - Contributed by Princess Margaret Cancer Centre&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> releasable            <span class="hljs-operator">:</span> logi <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span> <span class="hljs-literal">FALSE</span> <span class="hljs-literal">FALSE</span> <span class="hljs-literal">FALSE</span> <span class="hljs-literal">TRUE</span> <span class="hljs-literal">TRUE</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> state                 <span class="hljs-operator">:</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;open&quot;</span> <span class="hljs-string">&quot;open&quot;</span> <span class="hljs-string">&quot;open&quot;</span> <span class="hljs-string">&quot;open&quot;</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> released              <span class="hljs-operator">:</span> logi <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span> <span class="hljs-literal">TRUE</span> <span class="hljs-literal">TRUE</span> <span class="hljs-literal">TRUE</span> <span class="hljs-literal">TRUE</span> <span class="hljs-literal">TRUE</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">-</span> <span class="hljs-built_in">attr</span><span class="hljs-punctuation">(</span><span class="hljs-operator">*</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;row.names&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> int <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">-</span> <span class="hljs-built_in">attr</span><span class="hljs-punctuation">(</span><span class="hljs-operator">*</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;class&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;GDCprojectsResults&quot;</span> <span class="hljs-string">&quot;GDCResults&quot;</span> <span class="hljs-string">&quot;list&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到默认只返回 10 条记录，我们可以使用 <code>results()</code> 的 <code>size</code> 和 <code>from</code> 参数来改变需要返回的数量（size 表示返回的记录数，from 表示从哪个索引开始返回数据）；也有一个简便的函数 <code>results_all()</code> 返回所有的请求结果，可想而知这种方法可能会导致下载的数据非常大，花费的时间比较久，因此尽量使用 <code>counts()</code> 和<code>results()</code> 来获取数据。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>ids<span class="hljs-punctuation">(</span>presults<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">10</span><br><br>presults <span class="hljs-operator">=</span> pquery <span class="hljs-operator">%&gt;%</span> results_all<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>ids<span class="hljs-punctuation">(</span>presults<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">70</span><br><br><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>ids<span class="hljs-punctuation">(</span>presults<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">==</span> count<span class="hljs-punctuation">(</span>pquery<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure><p>结果是以列表的形式存储的，可以使用 <code>purrr</code>，<code>rlist</code>，<code>data.tree</code> 等 R 包来操作复杂嵌套的列表，另外也可以使用 <code>listviewer</code> 包来交互式的查看列表的结构（其实和在 Rstudio 中直接打开差别不大）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">listviewer<span class="hljs-operator">::</span>jsonedit<span class="hljs-punctuation">(</span>presults<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220108121517890.png"></p><h3 id="字段和值"><a href="#字段和值" class="headerlink" title="字段和值"></a>字段和值</h3><p>前面也已经看到从 GDC 检索和获取数据的中心就是指定返回哪些字段，根据字段和值进行筛选并进行聚合统计。GenomicDataCommons 有两个简单的函数：<code>available_fields()</code> 和 <code>default_fields()</code>，这两个函数的参数可以是代表访问点（endpoint）名称的字符（“cases”, “files”, “annotations”, 或 “projects”）或者是 <code>GDCQuery</code> 对象，返回相应的字段名称：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r">default_fields<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;files&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;access&quot;</span>                         <span class="hljs-string">&quot;acl&quot;</span>                            <span class="hljs-string">&quot;average_base_quality&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;average_insert_size&quot;</span>            <span class="hljs-string">&quot;average_read_length&quot;</span>            <span class="hljs-string">&quot;channel&quot;</span>                       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">7</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;chip_id&quot;</span>                        <span class="hljs-string">&quot;chip_position&quot;</span>                  <span class="hljs-string">&quot;contamination&quot;</span>                 <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;contamination_error&quot;</span>            <span class="hljs-string">&quot;created_datetime&quot;</span>               <span class="hljs-string">&quot;data_category&quot;</span>                 <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">13</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;data_format&quot;</span>                    <span class="hljs-string">&quot;data_type&quot;</span>                      <span class="hljs-string">&quot;error_type&quot;</span>                    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">16</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;experimental_strategy&quot;</span>          <span class="hljs-string">&quot;file_autocomplete&quot;</span>              <span class="hljs-string">&quot;file_id&quot;</span>                       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">19</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;file_name&quot;</span>                      <span class="hljs-string">&quot;file_size&quot;</span>                      <span class="hljs-string">&quot;imaging_date&quot;</span>                  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">22</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;magnification&quot;</span>                  <span class="hljs-string">&quot;md5sum&quot;</span>                         <span class="hljs-string">&quot;mean_coverage&quot;</span>                 <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">25</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;msi_score&quot;</span>                      <span class="hljs-string">&quot;msi_status&quot;</span>                     <span class="hljs-string">&quot;pairs_on_diff_chr&quot;</span>             <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">28</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;plate_name&quot;</span>                     <span class="hljs-string">&quot;plate_well&quot;</span>                     <span class="hljs-string">&quot;platform&quot;</span>                      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">31</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;proportion_base_mismatch&quot;</span>       <span class="hljs-string">&quot;proportion_coverage_10x&quot;</span>        <span class="hljs-string">&quot;proportion_coverage_10X&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">34</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;proportion_coverage_30x&quot;</span>        <span class="hljs-string">&quot;proportion_coverage_30X&quot;</span>        <span class="hljs-string">&quot;proportion_reads_duplicated&quot;</span>   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">37</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;proportion_reads_mapped&quot;</span>        <span class="hljs-string">&quot;proportion_targets_no_coverage&quot;</span> <span class="hljs-string">&quot;read_pair_number&quot;</span>              <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">40</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;revision&quot;</span>                       <span class="hljs-string">&quot;stain_type&quot;</span>                     <span class="hljs-string">&quot;state&quot;</span>                         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">43</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;state_comment&quot;</span>                  <span class="hljs-string">&quot;submitter_id&quot;</span>                   <span class="hljs-string">&quot;tags&quot;</span>                          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">46</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;total_reads&quot;</span>                    <span class="hljs-string">&quot;tumor_ploidy&quot;</span>                   <span class="hljs-string">&quot;tumor_purity&quot;</span>                  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">49</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;type&quot;</span>                           <span class="hljs-string">&quot;updated_datetime&quot;</span><br><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>available_fields<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;files&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">981</span><br>head<span class="hljs-punctuation">(</span>available_fields<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;files&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;access&quot;</span>                      <span class="hljs-string">&quot;acl&quot;</span>                         <span class="hljs-string">&quot;analysis.analysis_id&quot;</span>        <span class="hljs-string">&quot;analysis.analysis_type&quot;</span>     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;analysis.created_datetime&quot;</span>   <span class="hljs-string">&quot;analysis.input_files.access&quot;</span><br></code></pre></td></tr></table></figure><p>知道有哪些字段后，我们就可以通过 <code>select</code> 动词来选择需要的字段；注意，这里的 <code>select</code> 和 <code>dplyr</code> 的<code>select</code> 并不是完全一样的，后者的 <code>select</code> 只能选择已经展示的字段，而这里的 <code>select</code> 可以所有的可选字段（也就是 default 和 available 的区别）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r">qcases <span class="hljs-operator">=</span> cases<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>qcases<span class="hljs-operator">$</span>fields<span class="hljs-comment">##Default fields </span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;aliquot_ids&quot;</span>              <span class="hljs-string">&quot;analyte_ids&quot;</span>              <span class="hljs-string">&quot;case_autocomplete&quot;</span>        <span class="hljs-string">&quot;case_id&quot;</span>                 <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;consent_type&quot;</span>             <span class="hljs-string">&quot;created_datetime&quot;</span>         <span class="hljs-string">&quot;days_to_consent&quot;</span>          <span class="hljs-string">&quot;days_to_lost_to_followup&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;diagnosis_ids&quot;</span>            <span class="hljs-string">&quot;disease_type&quot;</span>             <span class="hljs-string">&quot;index_date&quot;</span>               <span class="hljs-string">&quot;lost_to_followup&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">13</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;portion_ids&quot;</span>              <span class="hljs-string">&quot;primary_site&quot;</span>             <span class="hljs-string">&quot;sample_ids&quot;</span>               <span class="hljs-string">&quot;slide_ids&quot;</span>               <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">17</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;state&quot;</span>                    <span class="hljs-string">&quot;submitter_aliquot_ids&quot;</span>    <span class="hljs-string">&quot;submitter_analyte_ids&quot;</span>    <span class="hljs-string">&quot;submitter_diagnosis_ids&quot;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">21</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;submitter_id&quot;</span>             <span class="hljs-string">&quot;submitter_portion_ids&quot;</span>    <span class="hljs-string">&quot;submitter_sample_ids&quot;</span>     <span class="hljs-string">&quot;submitter_slide_ids&quot;</span>     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">25</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;updated_datetime&quot;</span><br><br>default_fields<span class="hljs-punctuation">(</span>qcases<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;aliquot_ids&quot;</span>              <span class="hljs-string">&quot;analyte_ids&quot;</span>              <span class="hljs-string">&quot;case_autocomplete&quot;</span>        <span class="hljs-string">&quot;case_id&quot;</span>                 <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;consent_type&quot;</span>             <span class="hljs-string">&quot;created_datetime&quot;</span>         <span class="hljs-string">&quot;days_to_consent&quot;</span>          <span class="hljs-string">&quot;days_to_lost_to_followup&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;diagnosis_ids&quot;</span>            <span class="hljs-string">&quot;disease_type&quot;</span>             <span class="hljs-string">&quot;index_date&quot;</span>               <span class="hljs-string">&quot;lost_to_followup&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">13</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;portion_ids&quot;</span>              <span class="hljs-string">&quot;primary_site&quot;</span>             <span class="hljs-string">&quot;sample_ids&quot;</span>               <span class="hljs-string">&quot;slide_ids&quot;</span>               <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">17</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;state&quot;</span>                    <span class="hljs-string">&quot;submitter_aliquot_ids&quot;</span>    <span class="hljs-string">&quot;submitter_analyte_ids&quot;</span>    <span class="hljs-string">&quot;submitter_diagnosis_ids&quot;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">21</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;submitter_id&quot;</span>             <span class="hljs-string">&quot;submitter_portion_ids&quot;</span>    <span class="hljs-string">&quot;submitter_sample_ids&quot;</span>     <span class="hljs-string">&quot;submitter_slide_ids&quot;</span>     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">25</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;updated_datetime&quot;</span><br><br><span class="hljs-comment">##可以选择default field中没有的字段</span><br>qcases <span class="hljs-operator">=</span> cases<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> GenomicDataCommons<span class="hljs-operator">::</span>select<span class="hljs-punctuation">(</span>available_fields<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cases&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>head<span class="hljs-punctuation">(</span>qcases<span class="hljs-operator">$</span>fields<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;case_id&quot;</span>                       <span class="hljs-string">&quot;aliquot_ids&quot;</span>                   <span class="hljs-string">&quot;analyte_ids&quot;</span>                  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;annotations.annotation_id&quot;</span>     <span class="hljs-string">&quot;annotations.case_id&quot;</span>           <span class="hljs-string">&quot;annotations.case_submitter_id&quot;</span><br></code></pre></td></tr></table></figure><p>由于检索字段在下载数据过程中是一个常用的操作，因此该包提供了一些函数来快速的找到想要的字段，如<br><code>grep_fields()</code> 和 <code>field_picker()</code> （貌似现在的版本已经把 <code>field_picker()</code> 函数给删了）。</p><h3 id="聚合统计"><a href="#聚合统计" class="headerlink" title="聚合统计"></a>聚合统计</h3><p>结合 <code>facet</code> 和 <code>aggregations()</code> 可以对一个或多个字段中的值进行统计，类似 base R 中的 <code>table</code> 操作（但是一次只能对一个字段操作，不能进行交叉操作），返回一个数据框（tibbles）:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r">res <span class="hljs-operator">=</span> files<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> facet<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;type&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;data_type&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> aggregations<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>res<span class="hljs-operator">$</span>type<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    doc_count                           key<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">151568</span>    annotated_somatic_mutation<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>      <span class="hljs-number">89689</span>       simple_somatic_mutation<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>      <span class="hljs-number">87849</span>                 aligned_reads<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>      <span class="hljs-number">66555</span>               gene_expression<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>      <span class="hljs-number">58540</span>           copy_number_segment<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>      <span class="hljs-number">45843</span>          copy_number_estimate<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span>      <span class="hljs-number">32268</span>              mirna_expression<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span>      <span class="hljs-number">30075</span>                   slide_image<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">9</span>      <span class="hljs-number">25837</span>        biospecimen_supplement<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>     <span class="hljs-number">14750</span>          structural_variation<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">11</span>     <span class="hljs-number">13732</span>        methylation_beta_value<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">12</span>     <span class="hljs-number">12962</span>           clinical_supplement<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">13</span>      <span class="hljs-number">7906</span>            protein_expression<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">14</span>      <span class="hljs-number">4410</span>   aggregated_somatic_mutation<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">15</span>      <span class="hljs-number">4368</span>       masked_somatic_mutation<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">16</span>      <span class="hljs-number">2746</span>      masked_methylation_array<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">17</span>        <span class="hljs-number">54</span> secondary_expression_analysis<br></code></pre></td></tr></table></figure><p>使用 <code>aggregations()</code> 可以方便的统计一个字段中有哪些值，有利于我们后续的针对字段的筛选。</p><h3 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h3><p>GenomicDataCommons 提供了和 dplyr 的 filter 同名且类似的函数 <code>filter()</code> 用来对特定的字段的值进行筛选，比如只想要上面的 <code>type</code> 中的 <code>gene_expression</code> 数据，就可以这样来筛选：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">qfiles <span class="hljs-operator">=</span> files<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> filter<span class="hljs-punctuation">(</span> type <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;gene_expression&#x27;</span><span class="hljs-punctuation">)</span><br>str<span class="hljs-punctuation">(</span>get_filter<span class="hljs-punctuation">(</span>qfiles<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> List of <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> op     <span class="hljs-operator">:</span> <span class="hljs-string">&#x27;scalar&#x27;</span> chr <span class="hljs-string">&quot;=&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> content<span class="hljs-operator">:</span>List of <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> field<span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;type&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> value<span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;gene_expression&quot;</span><br></code></pre></td></tr></table></figure><p>如果我们现在想要基于某个 TCGA 的测序项目来构建过滤器（比如 TCGA-OV），但是不知道具体的字段名称是什么，这时候就可以使用上面提到的 <code>grep_fields()</code> 来查找可能的字段：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">grep_fields<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;files&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;project&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;cases.project.dbgap_accession_number&quot;</span>         <span class="hljs-string">&quot;cases.project.disease_type&quot;</span>                  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;cases.project.intended_release_date&quot;</span>          <span class="hljs-string">&quot;cases.project.name&quot;</span>                          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;cases.project.primary_site&quot;</span>                   <span class="hljs-string">&quot;cases.project.program.dbgap_accession_number&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">7</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;cases.project.program.name&quot;</span>                   <span class="hljs-string">&quot;cases.project.program.program_id&quot;</span>            <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;cases.project.project_id&quot;</span>                     <span class="hljs-string">&quot;cases.project.releasable&quot;</span>                    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">11</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;cases.project.released&quot;</span>                       <span class="hljs-string">&quot;cases.project.state&quot;</span>                         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">13</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;cases.tissue_source_site.project&quot;</span><br></code></pre></td></tr></table></figure><p>看起来 <code>cases.project.project_id</code> 有可能符合我们的要求，接着再用 <code>facet</code> 和 <code>aggregations</code> 来检查该字段中有没有我们想要的值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs r">files<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>    facet<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cases.project.project_id&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>    aggregations<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>    head<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>cases.project.project_id<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    doc_count                   key<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>      <span class="hljs-number">36134</span>                 FM<span class="hljs-operator">-</span>AD<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>      <span class="hljs-number">34686</span>             TCGA<span class="hljs-operator">-</span>BRCA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>      <span class="hljs-number">45952</span>               CPTAC<span class="hljs-operator">-</span><span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>      <span class="hljs-number">18723</span>             TCGA<span class="hljs-operator">-</span>LUAD<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>      <span class="hljs-number">36470</span>             GENIE<span class="hljs-operator">-</span>MSK<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>      <span class="hljs-number">17717</span>             TCGA<span class="hljs-operator">-</span>UCEC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span>      <span class="hljs-number">16694</span>             TCGA<span class="hljs-operator">-</span>HNSC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span>      <span class="hljs-number">16776</span>               TCGA<span class="hljs-operator">-</span>OV<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">9</span>      <span class="hljs-number">15826</span>             TCGA<span class="hljs-operator">-</span>THCA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>     <span class="hljs-number">29433</span>         MMRF<span class="hljs-operator">-</span>COMMPASS<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">11</span>     <span class="hljs-number">16696</span>             TCGA<span class="hljs-operator">-</span>LUSC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">12</span>     <span class="hljs-number">16230</span>              TCGA<span class="hljs-operator">-</span>LGG<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">13</span>     <span class="hljs-number">16733</span>             TCGA<span class="hljs-operator">-</span>KIRC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">14</span>     <span class="hljs-number">28464</span>            GENIE<span class="hljs-operator">-</span>DFCI<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">15</span>     <span class="hljs-number">15648</span>             TCGA<span class="hljs-operator">-</span>PRAD<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">16</span>     <span class="hljs-number">15701</span>             TCGA<span class="hljs-operator">-</span>COAD<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">17</span>     <span class="hljs-number">13332</span>              TCGA<span class="hljs-operator">-</span>GBM<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">18</span>     <span class="hljs-number">20772</span>         TARGET<span class="hljs-operator">-</span>ALL<span class="hljs-operator">-</span>P2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">19</span>     <span class="hljs-number">14025</span>             TCGA<span class="hljs-operator">-</span>SKCM<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">20</span>     <span class="hljs-number">14096</span>             TCGA<span class="hljs-operator">-</span>STAD<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">21</span>     <span class="hljs-number">12856</span>             TCGA<span class="hljs-operator">-</span>BLCA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">22</span>     <span class="hljs-number">11762</span>             TCGA<span class="hljs-operator">-</span>LIHC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">23</span>      <span class="hljs-number">9373</span>             TCGA<span class="hljs-operator">-</span>CESC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">24</span>      <span class="hljs-number">9353</span>             TCGA<span class="hljs-operator">-</span>KIRP<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">25</span>      <span class="hljs-number">8228</span>             TCGA<span class="hljs-operator">-</span>SARC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">26</span>     <span class="hljs-number">14037</span>             REBC<span class="hljs-operator">-</span>THYR<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">27</span>      <span class="hljs-number">8142</span>            TARGET<span class="hljs-operator">-</span>AML<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">28</span>      <span class="hljs-number">5791</span>             TCGA<span class="hljs-operator">-</span>PAAD<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">29</span>      <span class="hljs-number">5783</span>             TCGA<span class="hljs-operator">-</span>ESCA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">30</span>      <span class="hljs-number">5460</span>             TCGA<span class="hljs-operator">-</span>PCPG<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">31</span>      <span class="hljs-number">5401</span>             TCGA<span class="hljs-operator">-</span>READ<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">32</span>      <span class="hljs-number">9888</span>               CPTAC<span class="hljs-operator">-</span><span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">33</span>      <span class="hljs-number">5978</span>             TCGA<span class="hljs-operator">-</span>TGCT<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">34</span>      <span class="hljs-number">8981</span>     BEATAML1.0<span class="hljs-operator">-</span>COHORT<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">35</span>      <span class="hljs-number">5792</span>            TARGET<span class="hljs-operator">-</span>NBL<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">36</span>      <span class="hljs-number">8167</span>             HCMI<span class="hljs-operator">-</span>CMDC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">37</span>      <span class="hljs-number">4814</span>             TCGA<span class="hljs-operator">-</span>LAML<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">38</span>      <span class="hljs-number">5771</span>         CGCI<span class="hljs-operator">-</span>HTMCP<span class="hljs-operator">-</span>CC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">39</span>      <span class="hljs-number">3781</span>             TCGA<span class="hljs-operator">-</span>THYM<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">40</span>      <span class="hljs-number">5941</span>               CMI<span class="hljs-operator">-</span>MBC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">41</span>      <span class="hljs-number">2782</span>              TCGA<span class="hljs-operator">-</span>ACC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">42</span>      <span class="hljs-number">2520</span>             TCGA<span class="hljs-operator">-</span>KICH<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">43</span>      <span class="hljs-number">2677</span>             TARGET<span class="hljs-operator">-</span>WT<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">44</span>      <span class="hljs-number">4805</span>          NCICCR<span class="hljs-operator">-</span>DLBCL<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">45</span>      <span class="hljs-number">2580</span>             TCGA<span class="hljs-operator">-</span>MESO<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">46</span>      <span class="hljs-number">2352</span>              TCGA<span class="hljs-operator">-</span>UVM<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">47</span>      <span class="hljs-number">3113</span>             TARGET<span class="hljs-operator">-</span>OS<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">48</span>      <span class="hljs-number">3982</span>         TARGET<span class="hljs-operator">-</span>ALL<span class="hljs-operator">-</span>P3<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">49</span>      <span class="hljs-number">3857</span>             GENIE<span class="hljs-operator">-</span>MDA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">50</span>      <span class="hljs-number">3833</span>            GENIE<span class="hljs-operator">-</span>VICC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">51</span>      <span class="hljs-number">1813</span>              TCGA<span class="hljs-operator">-</span>UCS<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">52</span>      <span class="hljs-number">3320</span>             GENIE<span class="hljs-operator">-</span>JHU<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">53</span>      <span class="hljs-number">1456</span>             TCGA<span class="hljs-operator">-</span>CHOL<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">54</span>      <span class="hljs-number">2632</span>             GENIE<span class="hljs-operator">-</span>UHN<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">55</span>      <span class="hljs-number">1358</span>             TCGA<span class="hljs-operator">-</span>DLBC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">56</span>      <span class="hljs-number">2477</span>            CGCI<span class="hljs-operator">-</span>BLGSP<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">57</span>      <span class="hljs-number">1049</span>             TARGET<span class="hljs-operator">-</span>RT<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">58</span>      <span class="hljs-number">1038</span>            GENIE<span class="hljs-operator">-</span>GRCC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">59</span>       <span class="hljs-number">994</span>            WCDT<span class="hljs-operator">-</span>MCRPC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">60</span>       <span class="hljs-number">934</span>               CMI<span class="hljs-operator">-</span>ASC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">61</span>       <span class="hljs-number">801</span>             GENIE<span class="hljs-operator">-</span>NKI<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">62</span>       <span class="hljs-number">798</span>              OHSU<span class="hljs-operator">-</span>CNL<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">63</span>       <span class="hljs-number">703</span>   ORGANOID<span class="hljs-operator">-</span>PANCREATIC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">64</span>       <span class="hljs-number">570</span>               CMI<span class="hljs-operator">-</span>MPC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">65</span>       <span class="hljs-number">417</span>           CTSP<span class="hljs-operator">-</span>DLBCL1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">66</span>       <span class="hljs-number">339</span>              TRIO<span class="hljs-operator">-</span>CRU<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">67</span>       <span class="hljs-number">222</span> BEATAML1.0<span class="hljs-operator">-</span>CRENOLANIB<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">68</span>       <span class="hljs-number">169</span>           TARGET<span class="hljs-operator">-</span>CCSK<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">69</span>       <span class="hljs-number">133</span>         TARGET<span class="hljs-operator">-</span>ALL<span class="hljs-operator">-</span>P1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">70</span>        <span class="hljs-number">21</span>        VAREPOP<span class="hljs-operator">-</span>APOLLO<br></code></pre></td></tr></table></figure><p>这个字段确实是有 <code>TCGA-OV</code> 的，然后就可以基于这个字段的值使用 <code>filter</code> 获取想要的数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r">qfiles <span class="hljs-operator">=</span> files<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span><br>    filter<span class="hljs-punctuation">(</span> cases.project.project_id <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;TCGA-OV&#x27;</span> <span class="hljs-operator">&amp;</span> type <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;gene_expression&#x27;</span><span class="hljs-punctuation">)</span><br>str<span class="hljs-punctuation">(</span>get_filter<span class="hljs-punctuation">(</span>qfiles<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> List of <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> op     <span class="hljs-operator">:</span> <span class="hljs-string">&#x27;scalar&#x27;</span> chr <span class="hljs-string">&quot;and&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">$</span> content<span class="hljs-operator">:</span>List of <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> <span class="hljs-operator">:</span>List of <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .. ..<span class="hljs-operator">$</span> op     <span class="hljs-operator">:</span> <span class="hljs-string">&#x27;scalar&#x27;</span> chr <span class="hljs-string">&quot;=&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .. ..<span class="hljs-operator">$</span> content<span class="hljs-operator">:</span>List of <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .. .. ..<span class="hljs-operator">$</span> field<span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;cases.project.project_id&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .. .. ..<span class="hljs-operator">$</span> value<span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;TCGA-OV&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..<span class="hljs-operator">$</span> <span class="hljs-operator">:</span>List of <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .. ..<span class="hljs-operator">$</span> op     <span class="hljs-operator">:</span> <span class="hljs-string">&#x27;scalar&#x27;</span> chr <span class="hljs-string">&quot;=&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .. ..<span class="hljs-operator">$</span> content<span class="hljs-operator">:</span>List of <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .. .. ..<span class="hljs-operator">$</span> field<span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;type&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .. .. ..<span class="hljs-operator">$</span> value<span class="hljs-operator">:</span> chr <span class="hljs-string">&quot;gene_expression&quot;</span><br><br>qfiles <span class="hljs-operator">%&gt;%</span> count<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1137</span><br><br><span class="hljs-comment">##使用多次filter也是可以的</span><br>qfiles2 <span class="hljs-operator">=</span> files<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span><br>    filter<span class="hljs-punctuation">(</span> cases.project.project_id <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;TCGA-OV&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>    filter<span class="hljs-punctuation">(</span> type <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;gene_expression&#x27;</span><span class="hljs-punctuation">)</span> <br>qfiles2 <span class="hljs-operator">%&gt;%</span> count<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1137</span><br></code></pre></td></tr></table></figure><p>检索到数据后就可以使用 <code>manidfest()</code>来基于当前的请求构建需要下载数据的元数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r">manifest_df <span class="hljs-operator">=</span> qfiles <span class="hljs-operator">%&gt;%</span> manifest<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">1137</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br>head<span class="hljs-punctuation">(</span>manifest_df<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 × 5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   id                                   filename                                             md5                      size state <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                                <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                                                <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>c099182<span class="hljs-operator">-</span><span class="hljs-number">703</span>f<span class="hljs-operator">-</span><span class="hljs-number">4</span>aaf<span class="hljs-operator">-</span>b1d6<span class="hljs-operator">-</span><span class="hljs-number">0</span>f9be5094b9a fea3c4d0<span class="hljs-operator">-</span><span class="hljs-number">7</span>b9f<span class="hljs-operator">-</span><span class="hljs-number">4279</span><span class="hljs-operator">-</span><span class="hljs-number">989e-535</span>aaefbdfeb.FPKM.txt.gz     a344c91e930a0217efa2b… <span class="hljs-number">506691</span> relea…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-number">02</span>ab2f95<span class="hljs-operator">-</span><span class="hljs-number">023</span>b<span class="hljs-operator">-</span><span class="hljs-number">492e-8</span>dc9<span class="hljs-operator">-</span><span class="hljs-number">20</span>b4f52f209f b1d5c444<span class="hljs-operator">-</span>da0d<span class="hljs-operator">-</span><span class="hljs-number">4360</span><span class="hljs-operator">-</span>bd45<span class="hljs-operator">-</span><span class="hljs-number">31</span>c94217adfc.FPKM<span class="hljs-operator">-</span>UQ.txt.gz  <span class="hljs-number">45</span>d6b0fcc30607948a53b… <span class="hljs-number">547204</span> relea…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-number">30</span>c9def0<span class="hljs-operator">-</span>c3b5<span class="hljs-operator">-</span><span class="hljs-number">45</span>b7<span class="hljs-operator">-</span>a427<span class="hljs-operator">-</span><span class="hljs-number">020</span>b735c836a ab8603dd<span class="hljs-operator">-</span><span class="hljs-number">2</span>f94<span class="hljs-operator">-</span><span class="hljs-number">4</span>c83<span class="hljs-operator">-</span><span class="hljs-number">9927</span><span class="hljs-operator">-</span><span class="hljs-number">455958</span>be0007.FPKM.txt.gz     c82b63def1fcc6b9d3b52… <span class="hljs-number">503463</span> relea…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> <span class="hljs-number">451</span>c9c6d<span class="hljs-operator">-</span>f062<span class="hljs-operator">-</span><span class="hljs-number">4</span>ca2<span class="hljs-operator">-</span><span class="hljs-number">8459</span><span class="hljs-operator">-</span>efed929bd305 <span class="hljs-number">9</span>c6f2d76<span class="hljs-operator">-</span><span class="hljs-number">7701</span><span class="hljs-operator">-</span><span class="hljs-number">434</span>e<span class="hljs-operator">-</span>a876<span class="hljs-operator">-</span>c04ab14cccea.htseq.counts.gz d296b0cb99d14b4b91383… <span class="hljs-number">263970</span> relea…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> <span class="hljs-number">75</span>c0968c<span class="hljs-operator">-</span><span class="hljs-number">51</span>aa<span class="hljs-operator">-</span><span class="hljs-number">4</span>f09<span class="hljs-operator">-</span><span class="hljs-number">812</span>f<span class="hljs-operator">-</span><span class="hljs-number">7</span>f85727d1e09 <span class="hljs-number">5</span>b23f813<span class="hljs-operator">-</span><span class="hljs-number">9970</span><span class="hljs-operator">-</span><span class="hljs-number">485</span>b<span class="hljs-operator">-</span><span class="hljs-number">8577</span><span class="hljs-operator">-</span>ab2f3c029c26.FPKM<span class="hljs-operator">-</span>UQ.txt.gz  <span class="hljs-number">736</span>a8c6706423a7c1ff40… <span class="hljs-number">559501</span> relea…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span> <span class="hljs-number">57</span>d791ef<span class="hljs-operator">-</span>c2cc<span class="hljs-operator">-</span><span class="hljs-number">4963</span><span class="hljs-operator">-</span>a618<span class="hljs-operator">-</span><span class="hljs-number">05</span>f92d5a4436 <span class="hljs-number">6</span>aa7225b<span class="hljs-operator">-</span><span class="hljs-number">3</span>d10<span class="hljs-operator">-</span><span class="hljs-number">4</span>b19<span class="hljs-operator">-</span>a472<span class="hljs-operator">-</span><span class="hljs-number">0</span>adeb21c26cf.FPKM<span class="hljs-operator">-</span>UQ.txt.gz  <span class="hljs-number">8</span>b44a1f944fc78b39e0f9… <span class="hljs-number">536734</span> relea…<br></code></pre></td></tr></table></figure><p>可以看到返回的结果中既有 FPKM 又有 FPKM-UQ 和 counts，比较混乱，可以进行进一步的筛选：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs r">grep_fields<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;files&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;workflow&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;analysis.metadata.read_groups.read_group_qcs.workflow_end_datetime&quot;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;analysis.metadata.read_groups.read_group_qcs.workflow_link&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;analysis.metadata.read_groups.read_group_qcs.workflow_start_datetime&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;analysis.metadata.read_groups.read_group_qcs.workflow_type&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;analysis.metadata.read_groups.read_group_qcs.workflow_version&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">6</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;analysis.workflow_end_datetime&quot;</span>                                      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">7</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;analysis.workflow_link&quot;</span>                                              <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">8</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;analysis.workflow_start_datetime&quot;</span>                                    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;analysis.workflow_type&quot;</span>                                              <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;analysis.workflow_version&quot;</span>                                           <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">11</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;downstream_analyses.workflow_end_datetime&quot;</span>                           <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">12</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;downstream_analyses.workflow_link&quot;</span>                                   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">13</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;downstream_analyses.workflow_start_datetime&quot;</span>                         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">14</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;downstream_analyses.workflow_type&quot;</span>                                   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">15</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;downstream_analyses.workflow_version&quot;</span><br><br><span class="hljs-comment">##analysis.workflow_type</span><br>files<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>    filter<span class="hljs-punctuation">(</span> cases.project.project_id <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;TCGA-OV&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>    filter<span class="hljs-punctuation">(</span> type <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;gene_expression&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>    facet<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;analysis.workflow_type&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>    aggregations<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>    head<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>analysis.workflow_type<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    doc_count                                           key<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>       <span class="hljs-number">2400</span>                                       DNAcopy<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>       <span class="hljs-number">1178</span>                                        ASCAT2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>       <span class="hljs-number">1051</span>       BWA with Mark Duplicates and Cocleaning<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>        <span class="hljs-number">998</span>                         BCGSC miRNA Profiling<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>        <span class="hljs-number">623</span>                                      Liftover<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>        <span class="hljs-number">610</span>                                       MuTect2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span>        <span class="hljs-number">610</span>                            MuTect2 Annotation<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span>        <span class="hljs-number">610</span>                                 SomaticSniper<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">9</span>        <span class="hljs-number">610</span>                      SomaticSniper Annotation<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>       <span class="hljs-number">610</span>                                      VarScan2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">11</span>       <span class="hljs-number">610</span>                           VarScan2 Annotation<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">12</span>       <span class="hljs-number">606</span>                                          MuSE<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">13</span>       <span class="hljs-number">606</span>                               MuSE Annotation<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">14</span>       <span class="hljs-number">499</span>                                       BWA<span class="hljs-operator">-</span>aln<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">15</span>       <span class="hljs-number">379</span>                                HTSeq <span class="hljs-operator">-</span> Counts<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">16</span>       <span class="hljs-number">379</span>                                  HTSeq <span class="hljs-operator">-</span> FPKM<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">17</span>       <span class="hljs-number">379</span>                               HTSeq <span class="hljs-operator">-</span> FPKM<span class="hljs-operator">-</span>UQ<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">18</span>       <span class="hljs-number">379</span>                                   STAR <span class="hljs-number">2</span><span class="hljs-operator">-</span>Pass<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">19</span>         <span class="hljs-number">2</span>          MuSE Variant Aggregation and Masking<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">20</span>         <span class="hljs-number">2</span>       MuTect2 Variant Aggregation and Masking<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">21</span>         <span class="hljs-number">2</span> SomaticSniper Variant Aggregation and Masking<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">22</span>         <span class="hljs-number">2</span>      VarScan2 Variant Aggregation and Masking<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">23</span>         <span class="hljs-number">1</span>                    GISTIC <span class="hljs-operator">-</span> Copy Number Score<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">24</span>      <span class="hljs-number">3630</span>                                      _<span class="hljs-built_in">missing</span><br><br><span class="hljs-comment">##HTSeq - Counts</span><br>qfiles <span class="hljs-operator">=</span> files<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> filter<span class="hljs-punctuation">(</span> <span class="hljs-operator">~</span> cases.project.project_id <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;TCGA-OV&#x27;</span> <span class="hljs-operator">&amp;</span><br>                            type <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;gene_expression&#x27;</span> <span class="hljs-operator">&amp;</span><br>                            analysis.workflow_type <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;HTSeq - Counts&#x27;</span><span class="hljs-punctuation">)</span><br>manifest_df <span class="hljs-operator">=</span> qfiles <span class="hljs-operator">%&gt;%</span> manifest<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">379</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br>nrow<span class="hljs-punctuation">(</span>manifest_df<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">379</span><br></code></pre></td></tr></table></figure><h2 id="设置-Token"><a href="#设置-Token" class="headerlink" title="设置 Token"></a>设置 Token</h2><p>GDC 的数据分为 <code>controlled-access</code> 和 <code>open</code> 两种类型；要下载 <code>controlled-access</code> 的数据，需要一个 Token 文件，该文件可以从 GDC 官网下载（登录账号之后）：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-01-08%20134754.png"></p><p>然后可以用 <code>gdc_token()</code> 函数来导入 Token，该函数以下面三种方式依次来找 token，如果没有找到则报错：</p><ul><li>以环境变量 <code>GDC_TOKEN</code> 保存字符形式的 token</li><li>以环境变量 <code>GDC_TOKEN_FILE</code> 保存的 token 文件名来找 token</li><li>在在家目录下找以文件名 <code>.gdc_token</code> 保存的 token 文件</li></ul><p>以第三种为例，将下载的 token 文件重命名为 <code>.gdc_token</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> data/gdc-user-token.2022-01-08T06_55_22.799Z.txt .gdc_token<br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">token <span class="hljs-operator">=</span> gdc_token<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h2 id="数据文件下载"><a href="#数据文件下载" class="headerlink" title="数据文件下载"></a>数据文件下载</h2><h3 id="通过-GDC-API-下载数据"><a href="#通过-GDC-API-下载数据" class="headerlink" title="通过 GDC API 下载数据"></a>通过 GDC API 下载数据</h3><p><code>gdcdata</code> 可以接受含有一个或多个文件 UUID 的字符向量进行文件的下载，生成该字符向量的简单方式就是把上面获得的元数据的第一列拿出来就行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">fnames <span class="hljs-operator">=</span> gdcdata<span class="hljs-punctuation">(</span>manifest_df<span class="hljs-operator">$</span>id<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>progress<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">2</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br></code></pre></td></tr></table></figure><p>如果要下载 control 的数据，则需要提供 token（上面通过 <code>gdc_token</code> 得到的字符串）；另外可以使用<code>BioCParallel</code> 进行多线程下载来缩短下载的时间。</p><h3 id="大数据的下载"><a href="#大数据的下载" class="headerlink" title="大数据的下载"></a>大数据的下载</h3><p>当需要下载体积巨大的数据，比如测序的 BAM 文件或者 较大的 VCF 文件时，可以使用 <code>client</code> 的下载方法：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">fnames <span class="hljs-operator">=</span> gdcdata<span class="hljs-punctuation">(</span>manifest_df<span class="hljs-operator">$</span>id<span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> access_method <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;client&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">8</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个包下载数据首先是要构建一个 query（请求），比如 <code>files()</code> 和 <code>cases()</code>，这些函数返回一个 GDCQuery 的 S3 对象，包含 filter, facets，和其他的参数；然后进行筛选，有几个重要的函数：filter 是根据 field 的值来选取记录；select 选择 field；expand 是 field 的聚合，提供了一些相关的 field 组成的 group，便于检索；facts 是统计 common vlaue，类似 table；接着就可以通过 <code>manifest()</code> 下载元数据，通过元数据下载真正的数据文件（<code>gdcdata</code>）</p><h1 id="案例：计算-TCGA-样本的测序深度"><a href="#案例：计算-TCGA-样本的测序深度" class="headerlink" title="案例：计算 TCGA 样本的测序深度"></a>案例：计算 TCGA 样本的测序深度</h1><p>测序深度的计算公式为：</p><p>$$<br>D&#x3D;\frac{L *N}{G}<br>$$<br>L 是 reads 的长度，N 是 reads 的数目，G 是测序目标区域的长度（比如全外显子，全基因组等）；因此对于 TCGA 的全外显子测序，我们需要知道样本测序读长的长度，reads 的总数目，目标区域就是外显子的长度。</p><p>首先需要得到样本测序读长的长度，也就是 reads length，这个信息可以从测序的元数据获取（代码参考<a href="https://support.bioconductor.org/p/107984/">这里</a>）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>GenomicDataCommons<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##筛选数据，方便演示只选了样本量比较少的ACC,前20个样本</span><br>q <span class="hljs-operator">=</span> files<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>    filter<span class="hljs-punctuation">(</span> cases.project.project_id <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;TCGA-ACC&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span><br>  filter<span class="hljs-punctuation">(</span>data_type <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;Aligned Reads&#x27;</span> <br>         <span class="hljs-operator">&amp;</span> experimental_strategy <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;WXS&#x27;</span> <br>         <span class="hljs-operator">&amp;</span> data_format <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;BAM&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  GenomicDataCommons<span class="hljs-operator">::</span>select<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;file_id&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  expand<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;analysis.metadata.read_groups&#x27;</span><span class="hljs-punctuation">)</span> <br><br>z <span class="hljs-operator">=</span> results<span class="hljs-punctuation">(</span>q<span class="hljs-punctuation">,</span>size<span class="hljs-operator">=</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><br><br>library<span class="hljs-punctuation">(</span>dplyr<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Attaching package<span class="hljs-operator">:</span> <span class="hljs-string">&#x27;dplyr&#x27;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> The following objects are masked from <span class="hljs-string">&#x27;package:GenomicDataCommons&#x27;</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     count<span class="hljs-punctuation">,</span> filter<span class="hljs-punctuation">,</span> select<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> The following objects are masked from <span class="hljs-string">&#x27;package:stats&#x27;</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     filter<span class="hljs-punctuation">,</span> lag<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> The following objects are masked from <span class="hljs-string">&#x27;package:base&#x27;</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     intersect<span class="hljs-punctuation">,</span> setdiff<span class="hljs-punctuation">,</span> setequal<span class="hljs-punctuation">,</span> union<br>t <span class="hljs-operator">&lt;-</span> z<span class="hljs-operator">$</span>analysis<span class="hljs-operator">$</span>metadata<span class="hljs-operator">$</span>read_groups<br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>t<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> z<span class="hljs-operator">$</span>file_id<br>a <span class="hljs-operator">&lt;-</span> t <span class="hljs-operator">%&gt;%</span> bind_rows<span class="hljs-punctuation">(</span>.id <span class="hljs-operator">=</span> <span class="hljs-string">&quot;file_ids&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> as_tibble<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>head<span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 × 19</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   file_ids   sequencing_date experiment_name  target_capture_… submitter_id  target_capture_kit_… is_paired_end target_capture_…<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>            <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>            <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                <span class="hljs-operator">&lt;</span>lgl<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>           <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-number">99818</span>fa6<span class="hljs-operator">-</span>… <span class="hljs-number">2013</span><span class="hljs-operator">-</span><span class="hljs-number">09</span><span class="hljs-operator">-</span><span class="hljs-number">12</span>T08   TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5KO<span class="hljs-operator">-</span><span class="hljs-number">01</span>… NimbleGen        efc0de29<span class="hljs-operator">-</span><span class="hljs-number">4</span>b5… http<span class="hljs-operator">:</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.nimblege… <span class="hljs-literal">TRUE</span>          <span class="hljs-number">06</span> <span class="hljs-number">465</span> <span class="hljs-number">668</span> <span class="hljs-number">001</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> a9f11831<span class="hljs-operator">-</span>… <span class="hljs-number">2013</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">05</span>T02   TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LD<span class="hljs-operator">-</span><span class="hljs-number">10</span>… NimbleGen        afc22b50<span class="hljs-operator">-</span><span class="hljs-number">442</span>… http<span class="hljs-operator">:</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.nimblege… <span class="hljs-literal">TRUE</span>          <span class="hljs-number">06</span> <span class="hljs-number">465</span> <span class="hljs-number">668</span> <span class="hljs-number">001</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>a14bcc9<span class="hljs-operator">-</span>… <span class="hljs-number">2013</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">12</span>T02   TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5JJ<span class="hljs-operator">-</span><span class="hljs-number">10</span>… NimbleGen        <span class="hljs-number">17</span>fa8960<span class="hljs-operator">-</span><span class="hljs-number">7</span>a4… http<span class="hljs-operator">:</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.nimblege… <span class="hljs-literal">TRUE</span>          <span class="hljs-number">06</span> <span class="hljs-number">465</span> <span class="hljs-number">668</span> <span class="hljs-number">001</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> f3af7cc5<span class="hljs-operator">-</span>… <span class="hljs-number">2013</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">12</span>T03   TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5JV<span class="hljs-operator">-</span><span class="hljs-number">10</span>… NimbleGen        b7c4c670<span class="hljs-operator">-</span><span class="hljs-number">624</span>… http<span class="hljs-operator">:</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.nimblege… <span class="hljs-literal">TRUE</span>          <span class="hljs-number">06</span> <span class="hljs-number">465</span> <span class="hljs-number">668</span> <span class="hljs-number">001</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> <span class="hljs-number">870</span>c0429<span class="hljs-operator">-</span>… <span class="hljs-number">2013</span><span class="hljs-operator">-</span><span class="hljs-number">07</span><span class="hljs-operator">-</span><span class="hljs-number">29</span>T11   TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LP<span class="hljs-operator">-</span><span class="hljs-number">01</span>… NimbleGen        b99240a5<span class="hljs-operator">-</span><span class="hljs-number">473</span>… http<span class="hljs-operator">:</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.nimblege… <span class="hljs-literal">TRUE</span>          <span class="hljs-number">06</span> <span class="hljs-number">465</span> <span class="hljs-number">668</span> <span class="hljs-number">001</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span> b1da0e48<span class="hljs-operator">-</span>… <span class="hljs-number">2013</span><span class="hljs-operator">-</span><span class="hljs-number">08</span><span class="hljs-operator">-</span><span class="hljs-number">06</span>T11   TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5L2<span class="hljs-operator">-</span><span class="hljs-number">01</span>… NimbleGen        b99bd79e<span class="hljs-operator">-</span>aa3… http<span class="hljs-operator">:</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.nimblege… <span class="hljs-literal">TRUE</span>          <span class="hljs-number">06</span> <span class="hljs-number">465</span> <span class="hljs-number">668</span> <span class="hljs-number">001</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># … with 11 more variables: library_strategy &lt;chr&gt;, platform &lt;chr&gt;, created_datetime &lt;chr&gt;, updated_datetime &lt;chr&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   read_group_name &lt;chr&gt;, library_name &lt;chr&gt;, target_capture_kit_name &lt;chr&gt;, sequencing_center &lt;chr&gt;, state &lt;chr&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   read_length &lt;int&gt;, read_group_id &lt;chr&gt;</span><br><br><span class="hljs-comment">##整理结果</span><br>re <span class="hljs-operator">&lt;-</span> a <span class="hljs-operator">%&gt;%</span> <br>  dplyr<span class="hljs-operator">::</span>select<span class="hljs-punctuation">(</span>experiment_name<span class="hljs-punctuation">,</span>read_length<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  mutate<span class="hljs-punctuation">(</span>sample<span class="hljs-operator">=</span>substr<span class="hljs-punctuation">(</span>experiment_name<span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">16</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  distinct<span class="hljs-punctuation">(</span>sample<span class="hljs-punctuation">,</span>read_length<span class="hljs-punctuation">,</span>.keep_all <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  dplyr<span class="hljs-operator">::</span>filter<span class="hljs-punctuation">(</span>grepl<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;TCGA&quot;</span><span class="hljs-punctuation">,</span>sample<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  dplyr<span class="hljs-operator">::</span>filter<span class="hljs-punctuation">(</span><span class="hljs-built_in">as.numeric</span><span class="hljs-punctuation">(</span>substr<span class="hljs-punctuation">(</span>sample<span class="hljs-punctuation">,</span><span class="hljs-number">14</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;=</span> <span class="hljs-number">9</span><span class="hljs-punctuation">)</span><br><br>table<span class="hljs-punctuation">(</span>re<span class="hljs-operator">$</span>read_length<span class="hljs-punctuation">)</span> <span class="hljs-comment">##read length都是101</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">101</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><p>然后需要根据 BAI 文件得到 reads 总数目（源代码来自<a href="https://www.biostars.org/p/9472253/">Coverage data for TCGA BAM files (biostars.org)</a>）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">#get BAM file manifest</span><br>manifest <span class="hljs-operator">=</span> GenomicDataCommons<span class="hljs-operator">::</span>files<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span>  <br>  GenomicDataCommons<span class="hljs-operator">::</span>filter<span class="hljs-punctuation">(</span> cases.project.project_id <span class="hljs-operator">==</span> <span class="hljs-string">&#x27;TCGA-ACC&#x27;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  GenomicDataCommons<span class="hljs-operator">::</span>filter<span class="hljs-punctuation">(</span>experimental_strategy <span class="hljs-operator">==</span> <span class="hljs-string">&quot;WXS&quot;</span> <span class="hljs-operator">&amp;</span><br>                               data_format <span class="hljs-operator">==</span> <span class="hljs-string">&quot;BAM&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span>   <br>  GenomicDataCommons<span class="hljs-operator">::</span>manifest<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Rows<span class="hljs-operator">:</span> <span class="hljs-number">184</span> Columns<span class="hljs-operator">:</span> <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ── Column specification ────────────────────────────────────────────────────────────────────────────────────────────────────────<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Delimiter<span class="hljs-operator">:</span> <span class="hljs-string">&quot;\t&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> chr <span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> id<span class="hljs-punctuation">,</span> filename<span class="hljs-punctuation">,</span> md5<span class="hljs-punctuation">,</span> state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dbl <span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> size<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Use `spec()` to retrieve the full column specification <span class="hljs-keyword">for</span> this data.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.<br><br>dt <span class="hljs-operator">&lt;-</span> manifest <span class="hljs-operator">%&gt;%</span> <br>  mutate<span class="hljs-punctuation">(</span>tmp<span class="hljs-operator">=</span>gsub<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;.+[.]TCGA&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;TCGA&quot;</span><span class="hljs-punctuation">,</span>filename<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  mutate<span class="hljs-punctuation">(</span>sample<span class="hljs-operator">=</span>substr<span class="hljs-punctuation">(</span>tmp<span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">16</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  dplyr<span class="hljs-operator">::</span>filter<span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>grepl<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hg19&quot;</span><span class="hljs-punctuation">,</span>filename<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  dplyr<span class="hljs-operator">::</span>filter<span class="hljs-punctuation">(</span>sample <span class="hljs-operator">%in%</span> re<span class="hljs-operator">$</span>sample<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>由于 BAM 文件较大，而计算 mapped 的总 reads 数只需要 BAM 的索引文件（也就是 BAI 文件），因此我们下载 BAI 文件就行，但是 TCGA 并没有直接提供 BAI 文件的 UUID，因此我们需要进行进一步的处理。根据 GDC 官方的<a href="https://gdc.cancer.gov/about-gdc/gdc-faqs">文档</a>显示，在用 api 下载 BAM 文件时在末尾加上 <code>?pretty=true&amp;expand=index_files</code>就可以得到一个含有 BAI 的 UUID 的 JSON 文件：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220108143545648.png"></p><p>因此我们可以利用这个特征来得到 BAI 的 UUID：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs r">res <span class="hljs-operator">&lt;-</span> vector<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;list&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>unique<span class="hljs-punctuation">(</span>dt<span class="hljs-operator">$</span>id<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>res<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  con <span class="hljs-operator">=</span> curl<span class="hljs-operator">::</span>curl<span class="hljs-punctuation">(</span>paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;https://api.gdc.cancer.gov/files/&quot;</span><span class="hljs-punctuation">,</span> dt<span class="hljs-operator">$</span>id<span class="hljs-punctuation">[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;?pretty=true&amp;expand=index_files&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  tbl <span class="hljs-operator">=</span> jsonlite<span class="hljs-operator">::</span>fromJSON<span class="hljs-punctuation">(</span>con<span class="hljs-punctuation">)</span><br>  bai <span class="hljs-operator">=</span> data.frame<span class="hljs-punctuation">(</span>id <span class="hljs-operator">=</span> tbl<span class="hljs-operator">$</span>data<span class="hljs-operator">$</span>index_files<span class="hljs-operator">$</span>file_id<span class="hljs-punctuation">,</span><br>                   filename <span class="hljs-operator">=</span> tbl<span class="hljs-operator">$</span>data<span class="hljs-operator">$</span>index_files<span class="hljs-operator">$</span>file_name<span class="hljs-punctuation">,</span><br>                   md5 <span class="hljs-operator">=</span> tbl<span class="hljs-operator">$</span>data<span class="hljs-operator">$</span>index_files<span class="hljs-operator">$</span>md5sum<span class="hljs-punctuation">,</span><br>                   size <span class="hljs-operator">=</span> tbl<span class="hljs-operator">$</span>data<span class="hljs-operator">$</span>index_files<span class="hljs-operator">$</span>file_size<span class="hljs-punctuation">,</span><br>                   state <span class="hljs-operator">=</span> tbl<span class="hljs-operator">$</span>data<span class="hljs-operator">$</span>index_files<span class="hljs-operator">$</span>state<span class="hljs-punctuation">)</span><br>  res<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> bai<br>  cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;complete&quot;</span><span class="hljs-punctuation">,</span>i<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">1</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">2</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">3</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">4</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">5</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">6</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">7</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">8</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">9</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">10</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">11</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">12</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> complete <span class="hljs-number">13</span><br>re <span class="hljs-operator">&lt;-</span> bind_rows<span class="hljs-punctuation">(</span>res<span class="hljs-punctuation">)</span><br>re<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>                                      id                                            filename                              md5<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>  a16a54a0<span class="hljs-operator">-</span>cd4a<span class="hljs-operator">-</span><span class="hljs-number">43</span>b7<span class="hljs-operator">-</span><span class="hljs-number">8272</span><span class="hljs-operator">-</span><span class="hljs-number">2565</span>b0930bda TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5KO<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai <span class="hljs-number">8</span>c6d16ebde6d101530ea3dcb7111fd9d<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>  <span class="hljs-number">327</span>a4450<span class="hljs-operator">-</span><span class="hljs-number">1</span>c36<span class="hljs-operator">-</span><span class="hljs-number">4677</span><span class="hljs-operator">-</span><span class="hljs-number">9288</span><span class="hljs-operator">-</span><span class="hljs-number">4</span>a54a7d0d842 TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LP<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai <span class="hljs-number">0214</span>ad9219ec0df5d324682b291427a7<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>  <span class="hljs-number">4278</span>fd34<span class="hljs-operator">-</span><span class="hljs-number">4</span>f28<span class="hljs-operator">-</span><span class="hljs-number">4768</span><span class="hljs-operator">-</span>bb8e<span class="hljs-operator">-</span>c9388a702d39 TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5L2<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A30A<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai <span class="hljs-number">271381422</span>b85433078fc95b9f5018dbd<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>  bf2a9bea<span class="hljs-operator">-</span>c1d6<span class="hljs-operator">-</span><span class="hljs-number">41</span>c4<span class="hljs-operator">-</span>a11c<span class="hljs-operator">-</span>acfb24916c4c TCGA<span class="hljs-operator">-</span>PK<span class="hljs-operator">-</span>A5HC<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A30A<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai <span class="hljs-number">70</span>c691fc38702fad1df7f10c97e0ce3c<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>  <span class="hljs-number">8047e7</span>a5<span class="hljs-operator">-</span><span class="hljs-number">4</span>eaf<span class="hljs-operator">-</span><span class="hljs-number">4518</span><span class="hljs-operator">-</span><span class="hljs-number">9</span>b8a<span class="hljs-operator">-</span><span class="hljs-number">76</span>c3c5bbd0c3 TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5JR<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai <span class="hljs-number">332</span>d7af2eb8c669670f55ab688e27f45<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>  <span class="hljs-number">8e4</span>e4082<span class="hljs-operator">-</span><span class="hljs-number">9856</span><span class="hljs-operator">-</span><span class="hljs-number">49</span>c8<span class="hljs-operator">-</span><span class="hljs-number">8</span>d69<span class="hljs-operator">-</span><span class="hljs-number">24</span>ac7351014a TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LS<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai be312d99dfcd1efe4a98814c0a1a48ed<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span>  <span class="hljs-number">907e80</span>da<span class="hljs-operator">-</span>c646<span class="hljs-operator">-</span><span class="hljs-number">414</span>f<span class="hljs-operator">-</span><span class="hljs-number">8</span>d98<span class="hljs-operator">-</span>d5e3e7b4686f TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5KZ<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai <span class="hljs-number">574</span>fec9fed318557d84435b043d947bf<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span>  <span class="hljs-number">29</span>daa003<span class="hljs-operator">-</span><span class="hljs-number">4169</span><span class="hljs-operator">-</span><span class="hljs-number">41</span>cf<span class="hljs-operator">-</span><span class="hljs-number">8452</span><span class="hljs-operator">-</span><span class="hljs-number">83</span>c06b6730e0 TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LA<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai c89f2e68dbf5bbf4cb1071ec7dbacfee<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">9</span>  <span class="hljs-number">7</span>f59ebcb<span class="hljs-operator">-</span>a57d<span class="hljs-operator">-</span><span class="hljs-number">458</span>d<span class="hljs-operator">-</span>ba7b<span class="hljs-operator">-</span><span class="hljs-number">9</span>b77abb1f3f7 TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LK<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai <span class="hljs-number">9330</span>ad033f2eabb6909d3e834d80d14e<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> <span class="hljs-number">00</span>fb3422<span class="hljs-operator">-</span><span class="hljs-number">6608</span><span class="hljs-operator">-</span><span class="hljs-number">44</span>ec<span class="hljs-operator">-</span><span class="hljs-number">9</span>afe<span class="hljs-operator">-</span><span class="hljs-number">39e7</span>bb0b52d4 TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5L5<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai <span class="hljs-number">67</span>feea2ef796f4dc872f3d344b59880e<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">11</span> c4595133<span class="hljs-operator">-</span><span class="hljs-number">679</span>a<span class="hljs-operator">-</span><span class="hljs-number">4967</span><span class="hljs-operator">-</span>beb3<span class="hljs-operator">-</span>df0d9867ffa6 TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5JJ<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai <span class="hljs-number">303</span>acd0b62ac94d46ce8ca7b46b0b874<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">12</span> <span class="hljs-number">8</span>fab8841<span class="hljs-operator">-</span><span class="hljs-number">35</span>f4<span class="hljs-operator">-</span><span class="hljs-number">4</span>c1e<span class="hljs-operator">-</span>a3f2<span class="hljs-operator">-</span><span class="hljs-number">83</span>a8d3fb4ab6 TCGA<span class="hljs-operator">-</span>OU<span class="hljs-operator">-</span>A5PI<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">12</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai e39845ba41c2ebe18f9bf9639a6962af<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">13</span> <span class="hljs-number">950</span>a115d<span class="hljs-operator">-</span><span class="hljs-number">8102</span><span class="hljs-operator">-</span><span class="hljs-number">47</span>bc<span class="hljs-operator">-</span>aec2<span class="hljs-operator">-</span><span class="hljs-number">5</span>c3425a929fd TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5JC<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.bai <span class="hljs-number">88</span>a3e25b655dcb9e3da954fd2b264192<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       size    state<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>  <span class="hljs-number">6810304</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>  <span class="hljs-number">6797480</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>  <span class="hljs-number">7075944</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>  <span class="hljs-number">6882408</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>  <span class="hljs-number">6929096</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>  <span class="hljs-number">6898896</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span>  <span class="hljs-number">8387160</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span>  <span class="hljs-number">6714080</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">9</span>  <span class="hljs-number">6785888</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> <span class="hljs-number">6834032</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">11</span> <span class="hljs-number">6675856</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">12</span> <span class="hljs-number">6776432</span> released<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">13</span> <span class="hljs-number">6707696</span> released<br><span class="hljs-comment"># write.table(re,file = &quot;~/data/TCGA_bai_manifest.txt&quot;,sep = &quot;\t&quot;,row.names = F,quote = F)</span><br></code></pre></td></tr></table></figure><p>然后基于 BAI 的 UUID 来下载 BAI 文件（这里还是使用了 gdc-client 来下载）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">../gdc-client download -m ../../TCGA_ACC_bai_manifest.txt -t ../gdc-user-token.2022-01-08T06_55_22.799Z.txt<br><br><span class="hljs-built_in">ls</span> &gt; files<br><span class="hljs-built_in">mkdir</span> BAI<br><span class="hljs-built_in">cat</span> files | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> i;<span class="hljs-keyword">do</span> <span class="hljs-built_in">cp</span> ./<span class="hljs-variable">$i</span>/*.bai ./BAI/;<span class="hljs-keyword">done</span><br><span class="hljs-built_in">ls</span> BAI/<br><span class="hljs-comment">#TCGA-OR-A5JC-01A-11D-A29I-10_Illumina_gdc_realn.bai  TCGA-OR-A5LA-01A-11D-A29I-10_Illumina_gdc_realn.bai</span><br><span class="hljs-comment">#TCGA-OR-A5JJ-01A-11D-A29I-10_Illumina_gdc_realn.bai  TCGA-OR-A5LK-01A-11D-A29I-10_Illumina_gdc_realn.bai</span><br><span class="hljs-comment">#TCGA-OR-A5JR-01A-11D-A29I-10_Illumina_gdc_realn.bai  TCGA-OR-A5LP-01A-11D-A29I-10_Illumina_gdc_realn.bai</span><br><span class="hljs-comment">#TCGA-OR-A5KO-01A-11D-A29I-10_Illumina_gdc_realn.bai  TCGA-OR-A5LS-01A-11D-A29I-10_Illumina_gdc_realn.bai</span><br><span class="hljs-comment">#TCGA-OR-A5KZ-01A-11D-A29I-10_Illumina_gdc_realn.bai  TCGA-OU-A5PI-01A-12D-A29I-10_Illumina_gdc_realn.bai</span><br><span class="hljs-comment">#TCGA-OR-A5L2-01A-11D-A30A-10_Illumina_gdc_realn.bai  TCGA-PK-A5HC-01A-11D-A30A-10_Illumina_gdc_realn.bai</span><br><span class="hljs-comment">#TCGA-OR-A5L5-01A-11D-A29I-10_Illumina_gdc_realn.bai</span><br></code></pre></td></tr></table></figure><p>再利用 <code>samtools</code> 的 idxstats 功能统计 reads（这里随便拿一个 BAM 文件就行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> *.bai &gt; bai_files<br><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">cat</span> bai_files | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> i<br><span class="hljs-keyword">do</span><br>  newname=`<span class="hljs-built_in">basename</span> <span class="hljs-variable">$i</span> .bai`<br>  <span class="hljs-built_in">mv</span> ../BAI/dummy.bam ../BAI/<span class="hljs-variable">$newname</span>.bam<br>  samtools idxstats ../BAI/<span class="hljs-variable">$newname</span>.bam &gt; ./stat_files/<span class="hljs-variable">$newname</span>.txt<br>  <span class="hljs-built_in">mv</span> ../BAI/<span class="hljs-variable">$newname</span>.bam ../BAI/dummy.bam<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> ~/data/TCGA_bai/test/stat_files/TCGA-OR-A5JC-01A-11D-A29I-10_Illumina_gdc_realn.txt<br>&gt;&gt; chr1 248956422   8655782 9484<br>&gt;&gt; chr10    133797422   6282801 6836<br>&gt;&gt; chr11    135086622   4863250 5439<br>&gt;&gt; chr11_KI270721v1_random  100316  3985679 4321<br>&gt;&gt; chr12    133275309   7341751 8237<br>&gt;&gt; chr13    114364328   5048809 5472<br>&gt;&gt; chr14    107043718   4231568 4745<br>&gt;&gt; chr14_GL000009v2_random  201709  3673268 4058<br>&gt;&gt; chr14_GL000225v1_random  211173  3236746 3564<br>&gt;&gt; chr14_KI270722v1_random  194050  4261146 4737<br></code></pre></td></tr></table></figure><p>得到的文件的第三列就是各个染色体 mapped 的总 reads，然后就可以利用上面的公式进行计算测序深度了：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r">files <span class="hljs-operator">&lt;-</span> list.files<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;~/data/TCGA_bai/test/stat_files/&quot;</span><span class="hljs-punctuation">)</span><br>dt <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>file<span class="hljs-operator">=</span>files<span class="hljs-punctuation">)</span><br>dt<span class="hljs-operator">$</span>samples <span class="hljs-operator">&lt;-</span> gsub<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;.+[.]TCGA&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;TCGA&quot;</span><span class="hljs-punctuation">,</span>files<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  gsub<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;[.][0-9].+[_gdc_realn.txt]&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>.<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  substr<span class="hljs-punctuation">(</span>.<span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">16</span><span class="hljs-punctuation">)</span><br>dt<span class="hljs-operator">$</span>depth <span class="hljs-operator">&lt;-</span> <span class="hljs-literal">NA</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span>nrow<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  a <span class="hljs-operator">&lt;-</span> data.table<span class="hljs-operator">::</span>fread<span class="hljs-punctuation">(</span>paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;~/data/TCGA_bai/test/stat_files/&quot;</span><span class="hljs-punctuation">,</span>dt<span class="hljs-operator">$</span>file<span class="hljs-punctuation">[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>data.table <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">)</span><br>  depth <span class="hljs-operator">&lt;-</span> <span class="hljs-punctuation">(</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">sum</span><span class="hljs-punctuation">(</span>a<span class="hljs-operator">$</span>V3<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">/</span><span class="hljs-punctuation">(</span><span class="hljs-number">38000000</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">*</span> <span class="hljs-number">101</span><br>  dt<span class="hljs-operator">$</span>depth<span class="hljs-punctuation">[</span>i<span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> depth<br><span class="hljs-punctuation">&#125;</span><br>dt<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>                                                   file          samples    depth<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>  TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5JC<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5JC<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">253.7207</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>  TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5JJ<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5JJ<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">242.3565</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>  TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5JR<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5JR<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">290.4985</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>  TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5KO<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5KO<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">304.1783</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>  TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5KZ<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5KZ<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">463.0472</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>  TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5L2<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A30A<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5L2<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">301.6314</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span>  TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5L5<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5L5<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">283.6341</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span>  TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LA<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LA<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">195.8037</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">9</span>  TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LK<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LK<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">267.7285</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LP<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LP<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">272.8540</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">11</span> TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LS<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5LS<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">313.4699</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">12</span> TCGA<span class="hljs-operator">-</span>OU<span class="hljs-operator">-</span>A5PI<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">12</span>D<span class="hljs-operator">-</span>A29I<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>OU<span class="hljs-operator">-</span>A5PI<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">260.9008</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">13</span> TCGA<span class="hljs-operator">-</span>PK<span class="hljs-operator">-</span>A5HC<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">-</span>A30A<span class="hljs-operator">-</span><span class="hljs-number">10</span>_Illumina_gdc_realn.txt TCGA<span class="hljs-operator">-</span>PK<span class="hljs-operator">-</span>A5HC<span class="hljs-operator">-</span><span class="hljs-number">01</span>A <span class="hljs-number">329.6680</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>生物信息</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>对抗生成网络</title>
    <link href="/2021/12/15/GAN/"/>
    <url>/2021/12/15/GAN/</url>
    
    <content type="html"><![CDATA[<ul><li>为什么需要 GAN</li><li>什么是 GAN</li><li>如何实现 GAN</li></ul><p>一般的判别问题都是给定一个输出，通过一定的模型来预测其属于哪个类（分类），或者对应的值应该是多少（回归），也就是这些模型评判的是要预测的样本与训练样本的相似性。但是如果我们想要做一些更具有“创造力”的工作，比如让模型去绘画或者创造一种对话机器人，这时单纯的判别模型就不能很好的发挥作用，而生成模型此时就可以派上用场。</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20211210085819179.png"></p><p>上图展示的是生成模型的工作流程：生成模型是一种概率模型，输入的是真实数据以及随机噪声，期望通过学习得到真实数据的<strong>分布</strong>，然后在这个分布中采样得到最终的输出；比如上面的生成模型生成一幅马的图像，但是这个图像并不属于训练数据（分布抽样，不是样本抽样）。</p><p>生成模型有很多，比如混合高斯模型，隐马尔可夫模型，这里主要讲生成对抗网络（Generative Adversarial Networks，GAN）</p><p>例子：</p><ul><li><p>[apchenstu&#x2F;sofgan: <a href="https://github.com/apchenstu/sofgan">TOG 2021] SofGAN: A Portrait Image Generator with Dynamic Styling (github.com)</a></p></li><li><p><a href="https://github.com/hindupuravinash/the-gan-zoo">hindupuravinash&#x2F;the-gan-zoo: A list of all named GANs! (github.com)</a></p></li></ul><p>对抗生成网络的思想和进化生物学上的共进化（Coevolution）类似：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20211210092455743.png"></p><p>下面举一个更具体的例子来说明 GAN 的思想：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20211210092925900.png"></p><p>我们可以比较容易的训练一个分类器来区分真猫咪和假猫咪的图像，但是我们现在用一个生成器来自动地生成假猫咪的图像，关心的问题是如何使这个生成器能生成以假乱真的猫咪图像，也就是生成器的输出可以骗过分类器，与此同时分类器也必须持续的进步来分辨出真猫咪和逐渐进步的生成器生成的假猫咪：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20211210093714155.png" alt="image-20211210093714155"></p><p>这里的分类器（一般叫做鉴别器，discriminator）和生成器（generator）之间是竞争对手（adversary）的关系，双方都想要超越对方，在这个过程中逐渐提高鉴别和生成的能力，因此这种模型架构叫做对抗生成网络。</p><p>下面来看一下如何训练 GAN：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20211210094015805.png"></p><p>第一步固定生成器 G，向判别器输入真实数据，并且这些真实数据的标签为 1，来训练判别器；</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20211210094027666.png"></p><p>第二步还是固定生成器 G，这次向判别器输入生成器生成的假数据，这些假数据的标签为0，来训练鉴别器（上面两步其实就是一步）；</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20211210094040997.png"></p><p>第三步是固定判别器，向判别器输入生成器生成的假数据，但是要注意这时的数据的标签为 1（因为我们想要生成器 ”骗过“ 鉴别器，通过更新生成器让鉴别器认为生成器生成的假数据是真实数据），然后根据损失来训练更新生成器，<strong>不更新判别器</strong>。</p><p>使用 <code>pytorch</code> 来实现 GAN 生成手写数字图像：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20211210122801632.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><br><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># dataset class</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MnistDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>  <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, csv_file</span>):<br>    self.data_df = pandas.read_csv(csv_file, header=<span class="hljs-literal">None</span>)<br>    <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.data_df)<br>  <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>    <span class="hljs-comment"># image target (label)</span><br>    label = self.data_df.iloc[index,<span class="hljs-number">0</span>]<br>    target = torch.zeros((<span class="hljs-number">10</span>))<br>    target[label] = <span class="hljs-number">1.0</span><br>    <br>    <span class="hljs-comment"># image data, normalised from 0-255 to 0-1</span><br>    image_values = torch.FloatTensor(self.data_df.iloc[index,<span class="hljs-number">1</span>:].values) / <span class="hljs-number">255.0</span><br>    <br>    <span class="hljs-comment"># return label, image data tensor and target tensor</span><br>    <span class="hljs-keyword">return</span> label, image_values, target<br>  <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_image</span>(<span class="hljs-params">self, index</span>):<br>    img = self.data_df.iloc[index,<span class="hljs-number">1</span>:].values.reshape(<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>    plt.title(<span class="hljs-string">&quot;label = &quot;</span> + <span class="hljs-built_in">str</span>(self.data_df.iloc[index,<span class="hljs-number">0</span>]))<br>    plt.imshow(img, interpolation=<span class="hljs-string">&#x27;none&#x27;</span>, cmap=<span class="hljs-string">&#x27;Blues&#x27;</span>)<br><br>mnist_dataset = MnistDataset(<span class="hljs-string">&#x27;/home/wt/useful_data/mnist_train.csv&#x27;</span>)<br>mnist_dataset.plot_image(<span class="hljs-number">9</span>)<br>plt.show()<br><br>mnist_dataset[<span class="hljs-number">100</span>]<br><br><span class="hljs-comment"># functions to generate random data</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_random_seed</span>(<span class="hljs-params">size</span>):<br>  random_data = torch.randn(size)<br>  <span class="hljs-keyword">return</span> random_data<br>  <br><br><span class="hljs-comment"># discriminator class</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Discriminator</span>(nn.Module):<br>  <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># initialise parent pytorch class</span><br>    <span class="hljs-built_in">super</span>().__init__()<br>    <br>    <span class="hljs-comment"># define neural network layers</span><br>    self.model = nn.Sequential(<br>        nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">200</span>),<br>        nn.LeakyReLU(<span class="hljs-number">0.02</span>),<br><br>        nn.LayerNorm(<span class="hljs-number">200</span>),<br><br>        nn.Linear(<span class="hljs-number">200</span>, <span class="hljs-number">1</span>),<br>        nn.Sigmoid()<br>    )<br>    <br>    <span class="hljs-comment"># create loss function</span><br>    self.loss_function = nn.BCELoss()<br><br>    <span class="hljs-comment"># create optimiser, simple stochastic gradient descent</span><br>    self.optimiser = torch.optim.Adam(self.parameters(), lr=<span class="hljs-number">0.0001</span>)<br><br>    <span class="hljs-comment"># counter and accumulator for progress</span><br>    self.counter = <span class="hljs-number">0</span>;<br>    self.progress = []<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):<br>    <span class="hljs-comment"># simply run model</span><br>    <span class="hljs-keyword">return</span> self.model(inputs)<br>  <br>  <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, inputs, targets</span>):<br>    <span class="hljs-comment"># calculate the output of the network</span><br>    outputs = self.forward(inputs)<br>    <br>    <span class="hljs-comment"># calculate loss</span><br>    loss = self.loss_function(outputs, targets)<br><br>    <span class="hljs-comment"># increase counter and accumulate error every 10</span><br>    self.counter += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (self.counter % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>):<br>        self.progress.append(loss.item())<br>    <span class="hljs-keyword">if</span> (self.counter % <span class="hljs-number">10000</span> == <span class="hljs-number">0</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;counter = &quot;</span>, self.counter)<br><br>    <span class="hljs-comment"># zero gradients, perform a backward pass, update weights</span><br>    self.optimiser.zero_grad()<br>    loss.backward()<br>    self.optimiser.step()<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_progress</span>(<span class="hljs-params">self</span>):<br>    df = pandas.DataFrame(self.progress, columns=[<span class="hljs-string">&#x27;loss&#x27;</span>])<br>    df.plot(ylim=(<span class="hljs-number">0</span>), figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">8</span>), alpha=<span class="hljs-number">0.1</span>, marker=<span class="hljs-string">&#x27;.&#x27;</span>, grid=<span class="hljs-literal">True</span>, yticks=(<span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">5.0</span>))<br>    <br><span class="hljs-comment"># generator class</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Generator</span>(nn.Module):<br>    <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># initialise parent pytorch class</span><br>    <span class="hljs-built_in">super</span>().__init__()<br>    <br>    <span class="hljs-comment"># define neural network layers</span><br>    self.model = nn.Sequential(<br>        nn.Linear(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>),<br>        nn.LeakyReLU(<span class="hljs-number">0.02</span>),<br><br>        nn.LayerNorm(<span class="hljs-number">200</span>),<br><br>        nn.Linear(<span class="hljs-number">200</span>, <span class="hljs-number">784</span>),<br>        nn.Sigmoid()<br>    )<br>    <br>    <span class="hljs-comment"># create optimiser, simple stochastic gradient descent</span><br>    self.optimiser = torch.optim.Adam(self.parameters(), lr=<span class="hljs-number">0.0001</span>)<br><br>    <span class="hljs-comment"># counter and accumulator for progress</span><br>    self.counter = <span class="hljs-number">0</span>;<br>    self.progress = []<br>    <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):        <br>    <span class="hljs-comment"># simply run model</span><br>    <span class="hljs-keyword">return</span> self.model(inputs)<br><br>  <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, D, inputs, targets</span>):<br>    <span class="hljs-comment"># calculate the output of the network</span><br>    g_output = self.forward(inputs)<br>    <br>    <span class="hljs-comment"># pass onto Discriminator</span><br>    d_output = D.forward(g_output)<br>    <br>    <span class="hljs-comment"># calculate error</span><br>    loss = D.loss_function(d_output, targets)<br><br>    <span class="hljs-comment"># increase counter and accumulate error every 10</span><br>    self.counter += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (self.counter % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>):<br>        self.progress.append(loss.item())<br><br>    <span class="hljs-comment"># zero gradients, perform a backward pass, update weights</span><br>    self.optimiser.zero_grad()<br>    loss.backward()<br>    self.optimiser.step()<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_progress</span>(<span class="hljs-params">self</span>):<br>    df = pandas.DataFrame(self.progress, columns=[<span class="hljs-string">&#x27;loss&#x27;</span>])<br>    df.plot(ylim=(<span class="hljs-number">0</span>), figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">8</span>), alpha=<span class="hljs-number">0.1</span>, marker=<span class="hljs-string">&#x27;.&#x27;</span>, grid=<span class="hljs-literal">True</span>, yticks=(<span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">5.0</span>))<br><br>G = Generator()<br>output = G.forward(generate_random_seed(<span class="hljs-number">100</span>))<br>img = output.detach().numpy().reshape(<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>plt.imshow(img, interpolation=<span class="hljs-string">&#x27;none&#x27;</span>, cmap=<span class="hljs-string">&#x27;Blues&#x27;</span>)<br>plt.show()<br><span class="hljs-comment">##训练</span><br><span class="hljs-comment"># create Discriminator and Generator</span><br><br>D = Discriminator()<br>G = Generator()<br><br>epochs = <span class="hljs-number">4</span><br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>  <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;epoch = &quot;</span>, epoch + <span class="hljs-number">1</span>)<br><br>  <span class="hljs-comment"># train Discriminator and Generator</span><br><br>  <span class="hljs-keyword">for</span> label, image_data_tensor, target_tensor <span class="hljs-keyword">in</span> mnist_dataset:<br>    <span class="hljs-comment"># train discriminator on true</span><br>    D.train(image_data_tensor, torch.FloatTensor([<span class="hljs-number">1.0</span>]))<br>    <span class="hljs-comment"># train discriminator on false</span><br>    <span class="hljs-comment"># use detach() so gradients in G are not calculated</span><br>    D.train(G.forward(generate_random_seed(<span class="hljs-number">100</span>)).detach(), torch.FloatTensor([<span class="hljs-number">0.0</span>]))<br>    <span class="hljs-comment"># train generator</span><br>    G.train(D, generate_random_seed(<span class="hljs-number">100</span>), torch.FloatTensor([<span class="hljs-number">1.0</span>]))<br><br><span class="hljs-comment"># plot several outputs from the trained generator</span><br><br><span class="hljs-comment"># plot a 3 column, 2 row array of generated images</span><br>f, axarr = plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>, figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">8</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    output = G.forward(generate_random_seed(<span class="hljs-number">100</span>))<br>    img = output.detach().numpy().reshape(<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>    axarr[i,j].imshow(img, interpolation=<span class="hljs-string">&#x27;none&#x27;</span>, cmap=<span class="hljs-string">&#x27;Blues&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20211210122128264.png"></p><p>当我们训练出一个比较好的生成器时，loss 应该是多少？</p><p>对于 MSE Loss：一个好的生成器，鉴别器的输出值应该是 0.5，因为其无法分辨是真实的还是假的，所以给了0.5 的预测值，这个时候标签要么是 0 要么是 1，算出来的 LOSS 都是 0.25。</p><p>对于交叉熵损失 (BCEloss)：<br>$$<br>Loss &#x3D; \sum-y*ln(x)&#x3D;-(1.0)*ln(0.5)-(0)*ln(1-0.5)&#x3D;0.693<br>$$</p><p>我们可以看一下训练的 Loss：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">D.plot_progress()<br>plt.show()<br>G.plot_progress()<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分类模型评估指标</title>
    <link href="/2021/11/06/classification_evalution/"/>
    <url>/2021/11/06/classification_evalution/</url>
    
    <content type="html"><![CDATA[<p>分类模型评估的基本概念</p><span id="more"></span><p>机器学习的一个重要步骤是模型性能的评估，特别是分类模型，有一些概念容易混淆。这里做一些记录并用 R&#x2F;python 进行简单实现。</p><p>分类模型评估的指标大都是根据混淆矩阵来计算的，对于二分类问题，混淆矩阵是将模型预测结果和真实结果以 2 × 2 的列联表的形式展示，从而比较分类结果和实例的真实信息。矩阵的行表示预测类别的数量，列表示真实类别的数量：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20211005154111695.png"></p><p>从这个混淆矩阵中我们可以直接得到假阳性率，真阳性率，假阴性率和真阴性率：</p><p>假阳性率（FPR）：实际是阴性的，但是预测出来是阳性的比率</p><p>$$<br>FPR &#x3D; \frac{FP}{FP+TN}<br>$$<br>真阳性率（TPR）：实际是阳性的，预测也是阳性的比例</p><p>$$<br>TPR &#x3D; \frac{TP}{TP+FN}<br>$$<br>假阴性率（FNR）：实际是阳性的，但是预测是阴性的比例</p><p>$$<br>FNR &#x3D; \frac{FN}{FN+TP}<br>$$<br>真阴性率（TNR）：实际是阴性，预测也是阴性的比例：</p><p>$$<br>TNR &#x3D; \frac{TN}{TN+FP}<br>$$</p><h2 id="Accuracy"><a href="#Accuracy" class="headerlink" title="Accuracy"></a>Accuracy</h2><p>精度（accuracy）衡量的是所有样本中正确分类（包括正类和负类）的比例：</p><p>$$<br>ACC &#x3D; \frac{TP + TN }{TP + FP + TN + FN}<br>$$<br>但是在类别非平衡的数据集中使用精度会带来问题，因为将数据归类到多数类就会得到高的精度。</p><p><code>yardstick</code> 包是 <code>tidymodel</code> 系列中用来进行模型评估的包，可以使用这个包中的一系列函数进行分类模型评估指标的计算：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>yardstick<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>dplyr<span class="hljs-punctuation">)</span><br>dt <span class="hljs-operator">&lt;-</span> two_class_example<br>head<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    truth      Class1       Class2 predicted<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> Class2 <span class="hljs-number">0.003589243</span> <span class="hljs-number">0.9964107574</span>    Class2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> Class1 <span class="hljs-number">0.678621054</span> <span class="hljs-number">0.3213789460</span>    Class1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> Class2 <span class="hljs-number">0.110893522</span> <span class="hljs-number">0.8891064779</span>    Class2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> Class1 <span class="hljs-number">0.735161703</span> <span class="hljs-number">0.2648382969</span>    Class1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> Class2 <span class="hljs-number">0.016239960</span> <span class="hljs-number">0.9837600397</span>    Class2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span> Class1 <span class="hljs-number">0.999275071</span> <span class="hljs-number">0.0007249286</span>    Class1<br><br><br>accuracy<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span> truth <span class="hljs-operator">=</span> truth<span class="hljs-punctuation">,</span> estimate <span class="hljs-operator">=</span> predicted<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .metric  .estimator .estimate<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> accuracy binary         <span class="hljs-number">0.838</span><br></code></pre></td></tr></table></figure><p>从上面的公式中也可以看出，精度是根据预测的标签和真实的标签进行计算的，所以如果模型输出的是概率值，那么选择不同的阈值也会得到不同的精度：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">threshold <span class="hljs-operator">&lt;-</span> seq<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">0.01</span><span class="hljs-punctuation">)</span><br>df <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>threshold<span class="hljs-operator">=</span>threshold<span class="hljs-punctuation">,</span>acc<span class="hljs-operator">=</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span><br>df<span class="hljs-operator">$</span>acc <span class="hljs-operator">&lt;-</span> sapply<span class="hljs-punctuation">(</span>df<span class="hljs-operator">$</span>threshold<span class="hljs-punctuation">,</span><br>                 <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>                   dt <span class="hljs-operator">%&gt;%</span> <br>                     mutate<span class="hljs-punctuation">(</span>predicted<span class="hljs-operator">=</span>ifelse<span class="hljs-punctuation">(</span>Class1<span class="hljs-operator">&lt;</span>x<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Class2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Class1&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>                     mutate<span class="hljs-punctuation">(</span>predicted<span class="hljs-operator">=</span>factor<span class="hljs-punctuation">(</span>predicted<span class="hljs-punctuation">,</span>levels <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Class1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Class2&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>                     accuracy<span class="hljs-punctuation">(</span>.<span class="hljs-punctuation">,</span>truth<span class="hljs-operator">=</span>truth<span class="hljs-punctuation">,</span>estimate<span class="hljs-operator">=</span>predicted<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>                     select<span class="hljs-punctuation">(</span>.estimate<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <span class="hljs-built_in">as.numeric</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>                 <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><br>library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>ggprism<span class="hljs-punctuation">)</span><br>ggplot<span class="hljs-punctuation">(</span>data<span class="hljs-operator">=</span>df<span class="hljs-punctuation">,</span>aes<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span>threshold<span class="hljs-punctuation">,</span>y<span class="hljs-operator">=</span>acc<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  geom_line<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  theme_prism<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-2-1.png"></p><p>在 python 中使用 <code>scikit-learn</code> 也可以方便的计算一系列的分类评估指标：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrix, accuracy_score<br><br>y_pred_class = r.dt[<span class="hljs-string">&quot;predicted&quot;</span>]<br>y_true  = r.dt[<span class="hljs-string">&quot;truth&quot;</span>]<br>tn, fp, fn, tp = confusion_matrix(y_true, y_pred_class).ravel()<br>accuracy = (tp + tn) / (tp + fp + fn + tn)<br><br><span class="hljs-comment"># or simply</span><br><br>accuracy_score(y_true, y_pred_class)<br>&gt;&gt; <span class="hljs-number">0.838</span><br></code></pre></td></tr></table></figure><h2 id="Precision、Recall-Sensitivity-、Specificity，F1-score"><a href="#Precision、Recall-Sensitivity-、Specificity，F1-score" class="headerlink" title="Precision、Recall (Sensitivity)、Specificity，F1 score"></a>Precision、Recall (Sensitivity)、Specificity，F1 score</h2><p>Precision 表示预测出来的正类中有多少是真实正类，即该分类器预测的正类有多少是准确的；Recall (Sensitivity，也叫真阳性率 TPR) 表示真实正类有多少被分类器预测出来，即真实的正类有多少被该分类器“召回” (比如所有实际患癌的人群中检测出阳性的比例，代表了模型对患者的检出能力水平)：<br>$$<br>Precision &#x3D; \frac{TP}{TP+FP}<br>$$<br>$$<br>Recall &#x3D; \frac{TP}{TP+FN}<br>$$<br>Specificity 关注的是负类样本，表示的是真实的负类中有多少是被预测为负类（比如所有实际未患癌的人群中检测出阴性的比例，代表了模型对健康人群的排除能力水平），也就是真阴性率（TNR）：</p><p>$$<br>Specificity &#x3D; \frac{TN}{FP+TN}<br>$$<br>F1 score 是对 precision 和 recall 的调和，F1 其实是 F-beta 的一种特殊情况 (beta&#x3D;1):</p><p>$$<br>F_{beta} &#x3D; (1+\beta ^2)\frac{precison \times recall }{\beta ^2 \times precision + recall}<br>$$</p><p><code>yardstick</code> 中的 <code>sens()</code>，<code>spec()</code>，<code>recall()</code>，<code>precision()</code>，可以用来计算上面的指标：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###sensitivity</span><br>sens<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span>truth <span class="hljs-operator">=</span> truth<span class="hljs-punctuation">,</span>estimate <span class="hljs-operator">=</span> predicted<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .metric .estimator .estimate<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> sens    binary         <span class="hljs-number">0.880</span><br><span class="hljs-comment">##和recall一样</span><br>recall<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span>truth <span class="hljs-operator">=</span> truth<span class="hljs-punctuation">,</span>estimate <span class="hljs-operator">=</span> predicted<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .metric .estimator .estimate<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> recall  binary         <span class="hljs-number">0.880</span><br><span class="hljs-comment">##两个向量形式</span><br>sens_vec<span class="hljs-punctuation">(</span>dt<span class="hljs-operator">$</span>truth<span class="hljs-punctuation">,</span>dt<span class="hljs-operator">$</span>predicted<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">0.879845</span><br><br><span class="hljs-comment">###Specificity</span><br>spec<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span>truth <span class="hljs-operator">=</span> truth<span class="hljs-punctuation">,</span>estimate <span class="hljs-operator">=</span> predicted<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .metric .estimator .estimate<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> spec    binary         <span class="hljs-number">0.793</span><br><br><span class="hljs-comment">###precision</span><br>precision<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span>truth <span class="hljs-operator">=</span> truth<span class="hljs-punctuation">,</span>estimate <span class="hljs-operator">=</span> predicted<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .metric   .estimator .estimate<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> precision binary         <span class="hljs-number">0.819</span><br></code></pre></td></tr></table></figure><p><code>f_meas</code> 可以用来计算 F-beta，其中的 <em>β</em> 参数指定上面公式中的 <em>β</em> 值，表示给 recall 的权重是 precision 的 <em>β</em> 倍:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">f_meas<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span>truth<span class="hljs-punctuation">,</span>predicted<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .metric .estimator .estimate<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> f_meas  binary         <span class="hljs-number">0.849</span><br></code></pre></td></tr></table></figure><p>对于 python，<code>metrics</code> 模块中的一些方法可以计算上述的指标：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br>y_pred = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>y_true = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>metrics.precision_score(y_true,y_pred)<br>&gt;&gt; <span class="hljs-number">1.0</span><br>metrics.recall_score(y_true, y_pred)<br>&gt;&gt; <span class="hljs-number">0.5</span><br>metrics.f1_score(y_true, y_pred)<br>&gt;&gt; <span class="hljs-number">0.6666666666666666</span><br>metrics.fbeta_score(y_true, y_pred, beta=<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-number">0.6666666666666666</span><br></code></pre></td></tr></table></figure><h2 id="ROC-PRC"><a href="#ROC-PRC" class="headerlink" title="ROC, PRC"></a>ROC, PRC</h2><p>ROC 曲线的横纵坐标分别是假阳性率（FPR，也叫 1 - Specificity）和真阳性率（TPR，recall 或 sensitivity）；PRC 曲线的的横纵坐标分别是 recall 和 precision；这两种曲线都是在不同的预测概率阈值下计算横纵坐标的值，然后绘制相应的曲线。</p><p>R 里面可以使用 <code>roc_curve</code> 计算不同阈值处的 TPR 和 FPR，然后再使用 ggplot2 可视化，也可以直接用 <code>autoplot</code> 函数一步到位：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r">roc_curve<span class="hljs-punctuation">(</span>two_class_example<span class="hljs-punctuation">,</span> truth<span class="hljs-punctuation">,</span> Class1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 502 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    .threshold specificity sensitivity<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> <span class="hljs-operator">-</span><span class="hljs-literal">Inf</span>           <span class="hljs-number">0</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>    <span class="hljs-number">1.79e-7</span>     <span class="hljs-number">0</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>    <span class="hljs-number">4.50e-6</span>     <span class="hljs-number">0.00413</span>           <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>    <span class="hljs-number">5.81e-6</span>     <span class="hljs-number">0.00826</span>           <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>    <span class="hljs-number">5.92e-6</span>     <span class="hljs-number">0.0124</span>            <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>    <span class="hljs-number">1.22e-5</span>     <span class="hljs-number">0.0165</span>            <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>    <span class="hljs-number">1.40e-5</span>     <span class="hljs-number">0.0207</span>            <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>    <span class="hljs-number">1.43e-5</span>     <span class="hljs-number">0.0248</span>            <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>    <span class="hljs-number">2.38e-5</span>     <span class="hljs-number">0.0289</span>            <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>    <span class="hljs-number">3.30e-5</span>     <span class="hljs-number">0.0331</span>            <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 492 more rows</span><br><br>library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br>roc_curve<span class="hljs-punctuation">(</span>two_class_example<span class="hljs-punctuation">,</span> truth<span class="hljs-punctuation">,</span> Class1<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span><br>  ggplot<span class="hljs-punctuation">(</span>aes<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-operator">-</span> specificity<span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> sensitivity<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  geom_path<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  geom_abline<span class="hljs-punctuation">(</span>lty <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  coord_equal<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  theme_bw<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-7-1.png"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">autoplot<span class="hljs-punctuation">(</span>roc_curve<span class="hljs-punctuation">(</span>two_class_example<span class="hljs-punctuation">,</span> truth<span class="hljs-punctuation">,</span> Class1<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-7-2.png"></p><p>PR 曲线也是类似，使用函数 <code>pr_curve</code> ：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r">pr_curve<span class="hljs-punctuation">(</span>two_class_example<span class="hljs-punctuation">,</span> truth<span class="hljs-punctuation">,</span> Class1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 501 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    .threshold  recall precision<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>     <span class="hljs-literal">Inf</span>    <span class="hljs-number">0</span>               <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>       <span class="hljs-number">1.00</span> <span class="hljs-number">0.00388</span>         <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>       <span class="hljs-number">1.00</span> <span class="hljs-number">0.00775</span>         <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>       <span class="hljs-number">1.00</span> <span class="hljs-number">0.0116</span>          <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>       <span class="hljs-number">1.00</span> <span class="hljs-number">0.0155</span>          <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>       <span class="hljs-number">1.00</span> <span class="hljs-number">0.0194</span>          <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>       <span class="hljs-number">1.00</span> <span class="hljs-number">0.0233</span>          <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>       <span class="hljs-number">1.00</span> <span class="hljs-number">0.0271</span>          <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>       <span class="hljs-number">1.00</span> <span class="hljs-number">0.0310</span>          <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>       <span class="hljs-number">1.00</span> <span class="hljs-number">0.0349</span>          <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 491 more rows</span><br>pr_curve<span class="hljs-punctuation">(</span>two_class_example<span class="hljs-punctuation">,</span> truth<span class="hljs-punctuation">,</span> Class1<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span><br>  ggplot<span class="hljs-punctuation">(</span>aes<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> recall<span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> precision<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  geom_path<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  coord_equal<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  theme_bw<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-8-1.png"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">autoplot<span class="hljs-punctuation">(</span>pr_curve<span class="hljs-punctuation">(</span>two_class_example<span class="hljs-punctuation">,</span> truth<span class="hljs-punctuation">,</span> Class1<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-8-2.png"></p><p>除了画曲线之外，也可以使用曲线下面积来比较两个不同模型的预测性能，使用的函数是 <code>roc_auc</code> 和 <code>pr_auc</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">roc_auc<span class="hljs-punctuation">(</span>two_class_example<span class="hljs-punctuation">,</span> truth<span class="hljs-punctuation">,</span> Class1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .metric .estimator .estimate<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> roc_auc binary         <span class="hljs-number">0.939</span><br>pr_auc<span class="hljs-punctuation">(</span>two_class_example<span class="hljs-punctuation">,</span> truth<span class="hljs-punctuation">,</span> Class1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   .metric .estimator .estimate<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> pr_auc  binary         <span class="hljs-number">0.946</span><br></code></pre></td></tr></table></figure><p>Python 的 sklearn.metrics 模块中提供了计算 ROC 和 PR 曲线以及曲线下面积的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##roc_curve 会返回FPR, TPR以及相应的阈值</span><br><span class="hljs-comment">##roc_auc_score 计算ROC 曲线下面积</span><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_auc_score<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>y = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])<br>scores = np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.35</span>, <span class="hljs-number">0.8</span>])<span class="hljs-comment">##正类的概率或者由classifier.decision_function返回的决策函数的值</span><br>fpr, tpr, thresholds = roc_curve(y, scores, pos_label=<span class="hljs-number">2</span>)<span class="hljs-comment">##当类别是&#123;-1, 1&#125; 或者 &#123;0, 1&#125; 时，不需要设定pos_label，默认是 1 类，不然就需要设定</span><br><br>roc_auc = roc_auc_score(y, scores)<span class="hljs-comment">##scores 是较大类的概率</span><br><br>lw = <span class="hljs-number">2</span><br>plt.plot(<br>    fpr,<br>    tpr,<br>    color=<span class="hljs-string">&quot;darkorange&quot;</span>,<br>    lw=lw,<br>    label=<span class="hljs-string">&quot;ROC curve (area = %0.2f)&quot;</span> % roc_auc,<br>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000013642AC81C0</span>&gt;]<br>plt.plot([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], color=<span class="hljs-string">&quot;navy&quot;</span>, lw=lw, linestyle=<span class="hljs-string">&quot;--&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000013642AC8610</span>&gt;]<br>plt.xlim([<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>])<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)<br>plt.ylim([<span class="hljs-number">0.0</span>, <span class="hljs-number">1.05</span>])<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">1.05</span>)<br>plt.xlabel(<span class="hljs-string">&quot;False Positive Rate&quot;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;False Positive Rate&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;True Positive Rate&quot;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;True Positive Rate&#x27;</span>)<br>plt.title(<span class="hljs-string">&quot;Receiver operating characteristic example&quot;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;Receiver operating characteristic example&#x27;</span>)<br>plt.legend(loc=<span class="hljs-string">&quot;lower right&quot;</span>)<br>&gt;&gt; &lt;matplotlib.legend.Legend <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000013642412D00</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-3-1.png" width="672" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###一个逻辑回归的例子</span><br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_breast_cancer<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br>X, y = load_breast_cancer(return_X_y=<span class="hljs-literal">True</span>)<br>clf = LogisticRegression(solver=<span class="hljs-string">&quot;liblinear&quot;</span>).fit(X, y)<br>clf.classes_<br>&gt;&gt; array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>y_score = clf.predict_proba(X)[:, <span class="hljs-number">1</span>]<br>roc_auc_score(y, y_score)<br>&gt;&gt; <span class="hljs-number">0.9948073569050262</span><br>roc_auc_score(y, clf.decision_function(X))<br>&gt;&gt; <span class="hljs-number">0.9948073569050262</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##precision_recall_curve 会返回precision, recall以及相应的阈值</span><br><span class="hljs-comment">##average_precision_score 计算的就是PR 曲线的 AUC</span><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_recall_curve<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> average_precision_score<br>y = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])<br>scores = np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.35</span>, <span class="hljs-number">0.8</span>])<br>precision, recall, thresholds = precision_recall_curve(y_true, scores)<br>precision<br>&gt;&gt; array([<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>])<br>recall<br>&gt;&gt; array([<span class="hljs-number">1.</span> , <span class="hljs-number">0.5</span>, <span class="hljs-number">0.</span> ])<br>thresholds<br>&gt;&gt; array([<span class="hljs-number">0.4</span>, <span class="hljs-number">0.8</span>])<br>average_precision_score(y,scores)<br>&gt;&gt; <span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><p>对于绘制 PR 曲线， scikit-learn 提供了两个函数：</p><ul><li>PrecisionRecallDisplay.from_estimator：可以输入分类器</li><li>PrecisionRecallDisplay.from_predictions：输入分类器的结果</li></ul><p>也可以直接使用 <code>PrecisionRecallDisplay</code>，参数是 precision 和 recall：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> make_classification<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> (precision_recall_curve,<br>                             PrecisionRecallDisplay)<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br>X, y = make_classification(random_state=<span class="hljs-number">0</span>)<br>X_train, X_test, y_train, y_test = train_test_split(X, y,                       random_state=<span class="hljs-number">0</span>)<br>clf = SVC(random_state=<span class="hljs-number">0</span>)<br>clf.fit(X_train, y_train)<br>&gt;&gt; SVC(random_state=<span class="hljs-number">0</span>)<br>predictions = clf.predict(X_test)<br>precision, recall, _ = precision_recall_curve(y_test, predictions)<br>disp = PrecisionRecallDisplay(precision=precision, recall=recall)<br>disp.plot()<br>&gt;&gt; &lt;sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000013642EAB8E0</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-3-3.png" width="672" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">PrecisionRecallDisplay.from_estimator(clf, X_test, y_test)<br>&gt;&gt; &lt;sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay <span class="hljs-built_in">object</span> at <span class="hljs-number">0x00000136441ADC40</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-3-5.png" width="672" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">PrecisionRecallDisplay.from_predictions(y_test, predictions)<br>&gt;&gt; &lt;sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay <span class="hljs-built_in">object</span> at <span class="hljs-number">0x00000136444D8040</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-3-7.png" width="672" /><p>ROC 曲线绘制也有一个类似的函数 <code>RocCurveDisplay</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> RocCurveDisplay<br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_wine<br><br>X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="hljs-number">42</span>)<br>svc = SVC(random_state=<span class="hljs-number">42</span>)<br>svc.fit(X_train, y_train)<br>&gt;&gt; SVC(random_state=<span class="hljs-number">42</span>)<br>svc_disp = RocCurveDisplay.from_estimator(svc, X_test, y_test)<br>svc_disp.plot<br>&gt;&gt; &lt;bound method RocCurveDisplay.plot of &lt;sklearn.metrics._plot.roc_curve.RocCurveDisplay <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001364441FC40</span>&gt;&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-3-9.png" width="672" />]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>加权共表达网络分析（WGCNA）</title>
    <link href="/2021/10/14/wgcna/"/>
    <url>/2021/10/14/wgcna/</url>
    
    <content type="html"><![CDATA[<p>WGCNA R包学习</p><span id="more"></span><p>WGCNA 的主要思想就是将基因聚合成一个一个的模块，然后再计算一个值（eigengene）来代表这些模块，这样就相当于将几万维的基因降维成几十维的模块，然后就可以把这些模块和样本的特征联系起来（通过计算 eigengene与特征的相关性），从而筛选出我们感兴趣的模块，对其中的基因进行研究。</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20211015123442050.png"></p><h2 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h2><ul><li><p>Co-expression network，共表达网络：网络的节点是基因，边是基因与基因之间表达的相关性，但是这个相关性加上了权重 <em>β</em> （所以叫加权基因共表达网络分析）：<br>$$<br>a_{ij} &#x3D; |cor(x_i, x_j )|^β<br>$$<br>在 WGCNA 的分析中，一个关键步骤就是选择这个权重 <em>β</em></p></li><li><p>Scale-free network，无标度网络：大多数 “普通” 节点拥有很少的连接，而少数 “热门” 节点拥有极其多的连接，节点的连接度和其频率之间呈现一种幂律分布（长拖尾分布）：</p></li></ul><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/Scale-free_network_sample.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/785692-20180807161527827-890797957.png"></p><p>判断一个网络是不是无标度网络的方法：对 x 轴的连接度和 y 轴的频率取 log，然后看转化后的这两个值之间是否满足线性关系：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/785692-20180807160901235-1197112370.png"></p><ul><li><p>Connectivity，连接度，也叫度（degree）：一个基因和网络中其他基因之间的连接强度的和</p></li><li><p>Module，模块：模块就是基因的聚类，在一个模块内，基因与基因之间的连接度（表达相关性）是比较高的，在两个模块间的基因的连接度比较低</p></li><li><p>Module eigengene：一个基因模块中的基因表达的第一主成分，用这个值来代表该模块的基因表达谱</p></li><li><p>Eigengene significance：当我们有样本信息时，我们可以计算 eigengene 与这些样本特征的相关性，相关系数就是 eigengene significance</p></li><li><p>Module Membership &#x2F; eigengene-based connectivity：每一个基因都可以和每一个模块的 eigengene 做相关性，如果这个相关性是 0，说明这个基因不属于这个模块，如果是 1 或者 -1，那么说明这个基因和该模块是正相关或者负相关的关系，可以用这种方法来寻找模块的 hub 基因</p></li><li><p>Hub gene：连接度比较高的基因</p></li></ul><h2 id="分析流程"><a href="#分析流程" class="headerlink" title="分析流程"></a>分析流程</h2><p>主要流程如下：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20211015094913989.png"></p><h3 id="读取数据，进行样本和基因筛选"><a href="#读取数据，进行样本和基因筛选" class="headerlink" title="读取数据，进行样本和基因筛选"></a>读取数据，进行样本和基因筛选</h3><p>输入数据需要标准化，对于芯片表达数据，可以使用 RMA ，log 的 MAS5 数据（RMA 已经经过 log2 转化了）或其他的标准化方法，对于 RNA-seq 数据，可以使用 FPKM&#x2F;TPM （需要 log 转化） 或者使用 DESeq2 的 varianceStabilizingTransformation 函数进行标准化后的数据（官方推荐的方法）。一般情况下，我们可以筛选掉一些在大部分样本中表达比较低的基因，对于样本可以进行聚类，然后删除一些离群的样本：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>WGCNA<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>dplyr<span class="hljs-punctuation">)</span><br>options<span class="hljs-punctuation">(</span>stringsAsFactors <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>femData <span class="hljs-operator">=</span> read.csv<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;../test/LiverFemale3600.csv&quot;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##输入格式为行是样本，列是基因</span><br>datExpr0 <span class="hljs-operator">=</span> as.data.frame<span class="hljs-punctuation">(</span>t<span class="hljs-punctuation">(</span>femData<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>datExpr0<span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> femData<span class="hljs-operator">$</span>substanceBXH<br>rownames<span class="hljs-punctuation">(</span>datExpr0<span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>femData<span class="hljs-punctuation">)</span><span class="hljs-punctuation">[</span><span class="hljs-operator">-</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment">##进行样本和基因的基本筛选，将缺失值过多的样本或基因或方差为0的基因标记</span><br>gsg <span class="hljs-operator">=</span> goodSamplesGenes<span class="hljs-punctuation">(</span>datExpr0<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  Flagging genes and samples with too many <span class="hljs-built_in">missing</span> values...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   ..step <span class="hljs-number">1</span><br>gsg<span class="hljs-operator">$</span>allOK<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br><br><span class="hljs-comment">##如果有不符合标准的基因或样本，就要进行筛选</span><br><span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>gsg<span class="hljs-operator">$</span>allOK<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment"># Optionally, print the gene and sample names that were removed:</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">sum</span><span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>gsg<span class="hljs-operator">$</span>goodGenes<span class="hljs-punctuation">)</span><span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span> <br>     printFlush<span class="hljs-punctuation">(</span>paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Removing genes:&quot;</span><span class="hljs-punctuation">,</span> paste<span class="hljs-punctuation">(</span><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>datExpr0<span class="hljs-punctuation">)</span><span class="hljs-punctuation">[</span><span class="hljs-operator">!</span>gsg<span class="hljs-operator">$</span>goodGenes<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> collapse <span class="hljs-operator">=</span> <span class="hljs-string">&quot;, &quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br>  <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">sum</span><span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>gsg<span class="hljs-operator">$</span>goodSamples<span class="hljs-punctuation">)</span><span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span> <br>     printFlush<span class="hljs-punctuation">(</span>paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Removing samples:&quot;</span><span class="hljs-punctuation">,</span> paste<span class="hljs-punctuation">(</span>rownames<span class="hljs-punctuation">(</span>datExpr0<span class="hljs-punctuation">)</span><span class="hljs-punctuation">[</span><span class="hljs-operator">!</span>gsg<span class="hljs-operator">$</span>goodSamples<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> collapse <span class="hljs-operator">=</span> <span class="hljs-string">&quot;, &quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br>  <span class="hljs-comment"># Remove the offending genes and samples from the data:</span><br>  datExpr0 <span class="hljs-operator">=</span> datExpr0<span class="hljs-punctuation">[</span>gsg<span class="hljs-operator">$</span>goodSamples<span class="hljs-punctuation">,</span> gsg<span class="hljs-operator">$</span>goodGenes<span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br>sd_gene <span class="hljs-operator">&lt;-</span> apply<span class="hljs-punctuation">(</span>datExpr0<span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>sd<span class="hljs-punctuation">,</span>na.rm<span class="hljs-operator">=</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> sort<span class="hljs-punctuation">(</span>decreasing <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><br>sd_gene<span class="hljs-punctuation">[</span><span class="hljs-number">3000</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> MMT00030800 <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">0.07940613</span><br>need_genes <span class="hljs-operator">&lt;-</span> sd_gene<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3000</span><span class="hljs-punctuation">]</span><br>datExpr0 <span class="hljs-operator">&lt;-</span> datExpr0<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span>which<span class="hljs-punctuation">(</span>colnames<span class="hljs-punctuation">(</span>datExpr0<span class="hljs-punctuation">)</span> <span class="hljs-operator">%in%</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>need_genes<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment">##对样本进行聚类</span><br>sampleTree <span class="hljs-operator">=</span> hclust<span class="hljs-punctuation">(</span>dist<span class="hljs-punctuation">(</span>datExpr0<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;average&quot;</span><span class="hljs-punctuation">)</span>;<br>par<span class="hljs-punctuation">(</span>cex <span class="hljs-operator">=</span> <span class="hljs-number">0.6</span><span class="hljs-punctuation">)</span>;<br>par<span class="hljs-punctuation">(</span>mar <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>plot<span class="hljs-punctuation">(</span>sampleTree<span class="hljs-punctuation">,</span> main <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Sample clustering to detect outliers&quot;</span><span class="hljs-punctuation">,</span> sub<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> xlab<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> cex.lab <span class="hljs-operator">=</span> <span class="hljs-number">1.5</span><span class="hljs-punctuation">,</span> <br>     cex.axis <span class="hljs-operator">=</span> <span class="hljs-number">1.5</span><span class="hljs-punctuation">,</span> cex.main <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##去掉离群的样本</span><br>abline<span class="hljs-punctuation">(</span>h <span class="hljs-operator">=</span> <span class="hljs-number">15</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">)</span>;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-105-1.png"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r">clust <span class="hljs-operator">=</span> cutreeStatic<span class="hljs-punctuation">(</span>sampleTree<span class="hljs-punctuation">,</span> cutHeight <span class="hljs-operator">=</span> <span class="hljs-number">15</span><span class="hljs-punctuation">,</span> minSize <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>table<span class="hljs-punctuation">(</span>clust<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> clust<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-number">1</span> <span class="hljs-number">134</span><br>keepSamples <span class="hljs-operator">=</span> <span class="hljs-punctuation">(</span>clust<span class="hljs-operator">==</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>datExpr <span class="hljs-operator">=</span> datExpr0<span class="hljs-punctuation">[</span>keepSamples<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">]</span><br>nGenes <span class="hljs-operator">=</span> ncol<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">)</span><br>nSamples <span class="hljs-operator">=</span> nrow<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">)</span><br><br>sampleTree2 <span class="hljs-operator">=</span> hclust<span class="hljs-punctuation">(</span>dist<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;average&quot;</span><span class="hljs-punctuation">)</span><br>plot<span class="hljs-punctuation">(</span>sampleTree2<span class="hljs-punctuation">,</span> main <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Sample clustering after remove outliers&quot;</span><span class="hljs-punctuation">,</span> sub<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> xlab<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> cex.lab <span class="hljs-operator">=</span> <span class="hljs-number">1.5</span><span class="hljs-punctuation">,</span> <br>     cex.axis <span class="hljs-operator">=</span> <span class="hljs-number">1.5</span><span class="hljs-punctuation">,</span> cex.main <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-105-2.png"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##读入表型数据</span><br>traitData <span class="hljs-operator">=</span> read.csv<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;../test/ClinicalTraits.csv&quot;</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-built_in">dim</span><span class="hljs-punctuation">(</span>traitData<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">361</span>  <span class="hljs-number">38</span><br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>traitData<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;X&quot;</span>                  <span class="hljs-string">&quot;Mice&quot;</span>               <span class="hljs-string">&quot;Number&quot;</span>             <span class="hljs-string">&quot;Mouse_ID&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Strain&quot;</span>             <span class="hljs-string">&quot;sex&quot;</span>                <span class="hljs-string">&quot;DOB&quot;</span>                <span class="hljs-string">&quot;parents&quot;</span>           <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Western_Diet&quot;</span>       <span class="hljs-string">&quot;Sac_Date&quot;</span>           <span class="hljs-string">&quot;weight_g&quot;</span>           <span class="hljs-string">&quot;length_cm&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">13</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;ab_fat&quot;</span>             <span class="hljs-string">&quot;other_fat&quot;</span>          <span class="hljs-string">&quot;total_fat&quot;</span>          <span class="hljs-string">&quot;comments&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">17</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;X100xfat_weight&quot;</span>    <span class="hljs-string">&quot;Trigly&quot;</span>             <span class="hljs-string">&quot;Total_Chol&quot;</span>         <span class="hljs-string">&quot;HDL_Chol&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">21</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;UC&quot;</span>                 <span class="hljs-string">&quot;FFA&quot;</span>                <span class="hljs-string">&quot;Glucose&quot;</span>            <span class="hljs-string">&quot;LDL_plus_VLDL&quot;</span>     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">25</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;MCP_1_phys&quot;</span>         <span class="hljs-string">&quot;Insulin_ug_l&quot;</span>       <span class="hljs-string">&quot;Glucose_Insulin&quot;</span>    <span class="hljs-string">&quot;Leptin_pg_ml&quot;</span>      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">29</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Adiponectin&quot;</span>        <span class="hljs-string">&quot;Aortic.lesions&quot;</span>     <span class="hljs-string">&quot;Note&quot;</span>               <span class="hljs-string">&quot;Aneurysm&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">33</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Aortic_cal_M&quot;</span>       <span class="hljs-string">&quot;Aortic_cal_L&quot;</span>       <span class="hljs-string">&quot;CoronaryArtery_Cal&quot;</span> <span class="hljs-string">&quot;Myocardial_cal&quot;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">37</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;BMD_all_limbs&quot;</span>      <span class="hljs-string">&quot;BMD_femurs_only&quot;</span><br><br><span class="hljs-comment"># remove columns that hold information we do not need.</span><br>allTraits <span class="hljs-operator">=</span> traitData<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">31</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span>;<br>allTraits <span class="hljs-operator">=</span> allTraits<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">11</span><span class="hljs-operator">:</span><span class="hljs-number">36</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">]</span>;<br><span class="hljs-built_in">dim</span><span class="hljs-punctuation">(</span>allTraits<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">361</span>  <span class="hljs-number">27</span><br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>allTraits<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Mice&quot;</span>               <span class="hljs-string">&quot;weight_g&quot;</span>           <span class="hljs-string">&quot;length_cm&quot;</span>          <span class="hljs-string">&quot;ab_fat&quot;</span>            <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;other_fat&quot;</span>          <span class="hljs-string">&quot;total_fat&quot;</span>          <span class="hljs-string">&quot;X100xfat_weight&quot;</span>    <span class="hljs-string">&quot;Trigly&quot;</span>            <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Total_Chol&quot;</span>         <span class="hljs-string">&quot;HDL_Chol&quot;</span>           <span class="hljs-string">&quot;UC&quot;</span>                 <span class="hljs-string">&quot;FFA&quot;</span>               <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">13</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Glucose&quot;</span>            <span class="hljs-string">&quot;LDL_plus_VLDL&quot;</span>      <span class="hljs-string">&quot;MCP_1_phys&quot;</span>         <span class="hljs-string">&quot;Insulin_ug_l&quot;</span>      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">17</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Glucose_Insulin&quot;</span>    <span class="hljs-string">&quot;Leptin_pg_ml&quot;</span>       <span class="hljs-string">&quot;Adiponectin&quot;</span>        <span class="hljs-string">&quot;Aortic.lesions&quot;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">21</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Aneurysm&quot;</span>           <span class="hljs-string">&quot;Aortic_cal_M&quot;</span>       <span class="hljs-string">&quot;Aortic_cal_L&quot;</span>       <span class="hljs-string">&quot;CoronaryArtery_Cal&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">25</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Myocardial_cal&quot;</span>     <span class="hljs-string">&quot;BMD_all_limbs&quot;</span>      <span class="hljs-string">&quot;BMD_femurs_only&quot;</span><br><br><span class="hljs-comment"># Form a data frame analogous to expression data that will hold the clinical traits.</span><br><br>femaleSamples <span class="hljs-operator">=</span> rownames<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">)</span>;<br>traitRows <span class="hljs-operator">=</span> match<span class="hljs-punctuation">(</span>femaleSamples<span class="hljs-punctuation">,</span> allTraits<span class="hljs-operator">$</span>Mice<span class="hljs-punctuation">)</span>;<br>datTraits <span class="hljs-operator">=</span> allTraits<span class="hljs-punctuation">[</span>traitRows<span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>;<br>rownames<span class="hljs-punctuation">(</span>datTraits<span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> allTraits<span class="hljs-punctuation">[</span>traitRows<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><br>traitColors <span class="hljs-operator">=</span> numbers2colors<span class="hljs-punctuation">(</span>datTraits<span class="hljs-punctuation">,</span> signed <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># Plot the sample dendrogram and the colors underneath.</span><br>plotDendroAndColors<span class="hljs-punctuation">(</span>sampleTree2<span class="hljs-punctuation">,</span> traitColors<span class="hljs-punctuation">,</span><br>                    groupLabels <span class="hljs-operator">=</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>datTraits<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>                    main <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Sample dendrogram and trait heatmap&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-105-3.png"></p><h3 id="构建共表达网络，发现模块"><a href="#构建共表达网络，发现模块" class="headerlink" title="构建共表达网络，发现模块"></a>构建共表达网络，发现模块</h3><p>这一步主要就是选择合适的软阈值 <em>β</em> 来构建无标度的基因共表达网络，然后基于网络的邻接矩阵进行聚类来发现模块：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Choose a set of soft-thresholding powers</span><br>powers <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> seq<span class="hljs-punctuation">(</span>from <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span> to<span class="hljs-operator">=</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span> by<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># Call the network topology analysis function</span><br>sft <span class="hljs-operator">=</span> pickSoftThreshold<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">,</span> powerVector <span class="hljs-operator">=</span> powers<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> pickSoftThreshold<span class="hljs-operator">:</span> will use block size <span class="hljs-number">3000.</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  pickSoftThreshold<span class="hljs-operator">:</span> calculating connectivity <span class="hljs-keyword">for</span> given powers...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    ..working on genes <span class="hljs-number">1</span> through <span class="hljs-number">3000</span> of <span class="hljs-number">3000</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>      <span class="hljs-number">1</span>   <span class="hljs-number">0.0402</span>  <span class="hljs-number">0.416</span>          <span class="hljs-number">0.444</span>  <span class="hljs-number">606.00</span>  <span class="hljs-number">625.0000</span>  <span class="hljs-number">958.0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>      <span class="hljs-number">2</span>   <span class="hljs-number">0.0976</span> <span class="hljs-operator">-</span><span class="hljs-number">0.504</span>          <span class="hljs-number">0.797</span>  <span class="hljs-number">205.00</span>  <span class="hljs-number">205.0000</span>  <span class="hljs-number">445.0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>      <span class="hljs-number">3</span>   <span class="hljs-number">0.2750</span> <span class="hljs-operator">-</span><span class="hljs-number">0.861</span>          <span class="hljs-number">0.943</span>   <span class="hljs-number">90.00</span>   <span class="hljs-number">83.3000</span>  <span class="hljs-number">245.0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>      <span class="hljs-number">4</span>   <span class="hljs-number">0.4050</span> <span class="hljs-operator">-</span><span class="hljs-number">1.150</span>          <span class="hljs-number">0.921</span>   <span class="hljs-number">46.40</span>   <span class="hljs-number">39.4000</span>  <span class="hljs-number">151.0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>      <span class="hljs-number">5</span>   <span class="hljs-number">0.7500</span> <span class="hljs-operator">-</span><span class="hljs-number">1.180</span>          <span class="hljs-number">0.926</span>   <span class="hljs-number">26.90</span>   <span class="hljs-number">21.2000</span>   <span class="hljs-number">99.9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>      <span class="hljs-number">6</span>   <span class="hljs-number">0.8710</span> <span class="hljs-operator">-</span><span class="hljs-number">1.590</span>          <span class="hljs-number">0.876</span>   <span class="hljs-number">17.00</span>   <span class="hljs-number">12.2000</span>   <span class="hljs-number">86.8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span>      <span class="hljs-number">7</span>   <span class="hljs-number">0.8600</span> <span class="hljs-operator">-</span><span class="hljs-number">1.700</span>          <span class="hljs-number">0.820</span>   <span class="hljs-number">11.50</span>    <span class="hljs-number">7.5000</span>   <span class="hljs-number">78.1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span>      <span class="hljs-number">8</span>   <span class="hljs-number">0.8190</span> <span class="hljs-operator">-</span><span class="hljs-number">1.700</span>          <span class="hljs-number">0.791</span>    <span class="hljs-number">8.26</span>    <span class="hljs-number">4.7800</span>   <span class="hljs-number">71.8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">9</span>      <span class="hljs-number">9</span>   <span class="hljs-number">0.7320</span> <span class="hljs-operator">-</span><span class="hljs-number">1.640</span>          <span class="hljs-number">0.743</span>    <span class="hljs-number">6.21</span>    <span class="hljs-number">3.1700</span>   <span class="hljs-number">66.9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>    <span class="hljs-number">10</span>   <span class="hljs-number">0.7010</span> <span class="hljs-operator">-</span><span class="hljs-number">1.590</span>          <span class="hljs-number">0.757</span>    <span class="hljs-number">4.85</span>    <span class="hljs-number">2.1500</span>   <span class="hljs-number">62.7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">11</span>    <span class="hljs-number">12</span>   <span class="hljs-number">0.7340</span> <span class="hljs-operator">-</span><span class="hljs-number">1.420</span>          <span class="hljs-number">0.849</span>    <span class="hljs-number">3.24</span>    <span class="hljs-number">1.0500</span>   <span class="hljs-number">55.8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">12</span>    <span class="hljs-number">14</span>   <span class="hljs-number">0.8200</span> <span class="hljs-operator">-</span><span class="hljs-number">1.320</span>          <span class="hljs-number">0.942</span>    <span class="hljs-number">2.36</span>    <span class="hljs-number">0.5480</span>   <span class="hljs-number">50.1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">13</span>    <span class="hljs-number">16</span>   <span class="hljs-number">0.8480</span> <span class="hljs-operator">-</span><span class="hljs-number">1.230</span>          <span class="hljs-number">0.953</span>    <span class="hljs-number">1.82</span>    <span class="hljs-number">0.2980</span>   <span class="hljs-number">45.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">14</span>    <span class="hljs-number">18</span>   <span class="hljs-number">0.8860</span> <span class="hljs-operator">-</span><span class="hljs-number">1.190</span>          <span class="hljs-number">0.976</span>    <span class="hljs-number">1.46</span>    <span class="hljs-number">0.1650</span>   <span class="hljs-number">41.3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">15</span>    <span class="hljs-number">20</span>   <span class="hljs-number">0.9040</span> <span class="hljs-operator">-</span><span class="hljs-number">1.150</span>          <span class="hljs-number">0.972</span>    <span class="hljs-number">1.21</span>    <span class="hljs-number">0.0972</span>   <span class="hljs-number">37.7</span><br><span class="hljs-comment"># Plot the results:</span><br>par<span class="hljs-punctuation">(</span>mfrow <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br>cex1 <span class="hljs-operator">=</span> <span class="hljs-number">0.9</span>;<br><span class="hljs-comment"># Scale-free topology fit index as a function of the soft-thresholding power</span><br>plot<span class="hljs-punctuation">(</span>sft<span class="hljs-operator">$</span>fitIndices<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span><span class="hljs-built_in">sign</span><span class="hljs-punctuation">(</span>sft<span class="hljs-operator">$</span>fitIndices<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-operator">*</span>sft<span class="hljs-operator">$</span>fitIndices<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>     xlab<span class="hljs-operator">=</span><span class="hljs-string">&quot;Soft Threshold (power)&quot;</span><span class="hljs-punctuation">,</span>ylab<span class="hljs-operator">=</span><span class="hljs-string">&quot;Scale Free Topology Model Fit,signed R^2&quot;</span><span class="hljs-punctuation">,</span>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span><br>     main <span class="hljs-operator">=</span> paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Scale independence&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br>text<span class="hljs-punctuation">(</span>sft<span class="hljs-operator">$</span>fitIndices<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span><span class="hljs-built_in">sign</span><span class="hljs-punctuation">(</span>sft<span class="hljs-operator">$</span>fitIndices<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-operator">*</span>sft<span class="hljs-operator">$</span>fitIndices<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>     labels<span class="hljs-operator">=</span>powers<span class="hljs-punctuation">,</span>cex<span class="hljs-operator">=</span>cex1<span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># this line corresponds to using an R^2 cut-off of h</span><br>abline<span class="hljs-punctuation">(</span>h<span class="hljs-operator">=</span><span class="hljs-number">0.90</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># Mean connectivity as a function of the soft-thresholding power</span><br>plot<span class="hljs-punctuation">(</span>sft<span class="hljs-operator">$</span>fitIndices<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> sft<span class="hljs-operator">$</span>fitIndices<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>     xlab<span class="hljs-operator">=</span><span class="hljs-string">&quot;Soft Threshold (power)&quot;</span><span class="hljs-punctuation">,</span>ylab<span class="hljs-operator">=</span><span class="hljs-string">&quot;Mean Connectivity&quot;</span><span class="hljs-punctuation">,</span> type<span class="hljs-operator">=</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span><br>     main <span class="hljs-operator">=</span> paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Mean connectivity&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>text<span class="hljs-punctuation">(</span>sft<span class="hljs-operator">$</span>fitIndices<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> sft<span class="hljs-operator">$</span>fitIndices<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> labels<span class="hljs-operator">=</span>powers<span class="hljs-punctuation">,</span> cex<span class="hljs-operator">=</span>cex1<span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-106-1.png"></p><p>选择阈值有两个标准：</p><ul><li>基于左边的图选择尽可能构建无标度网络的值（R方）</li><li>基于右边的图选择尽可能高的 mean connectivity，从而在检测 module 和 hub gene 的时候 power比较高</li></ul><p>选择好阈值之后就可以来进行构建邻接矩阵（行列都是基因，每个 cell 是基因表达之间的相关性）和 TOM（Topological Overlap）矩阵，并进行聚类：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">softPower <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>adjacency <span class="hljs-operator">=</span> adjacency<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">,</span> power <span class="hljs-operator">=</span> softPower<span class="hljs-punctuation">)</span>;<br><br><span class="hljs-comment"># Turn adjacency into topological overlap</span><br><span class="hljs-comment">##计算 TOM 是最耗时的步骤</span><br>TOM <span class="hljs-operator">=</span> TOMsimilarity<span class="hljs-punctuation">(</span>adjacency<span class="hljs-punctuation">)</span>;<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ..connectivity..<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ..matrix multiplication <span class="hljs-punctuation">(</span>system BLAS<span class="hljs-punctuation">)</span>..<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ..normalization..<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> ..done.<br>dissTOM <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">-</span>TOM<br><br><span class="hljs-comment">###进行聚类</span><br><span class="hljs-comment"># Call the hierarchical clustering function</span><br>geneTree <span class="hljs-operator">=</span> hclust<span class="hljs-punctuation">(</span>as.dist<span class="hljs-punctuation">(</span>dissTOM<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;average&quot;</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># Plot the resulting clustering tree (dendrogram)</span><br>plot<span class="hljs-punctuation">(</span>geneTree<span class="hljs-punctuation">,</span> xlab<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> sub<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> main <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Gene clustering on TOM-based dissimilarity&quot;</span><span class="hljs-punctuation">,</span><br>     labels <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span> hang <span class="hljs-operator">=</span> <span class="hljs-number">0.04</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-107-1.png"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs r"><br><span class="hljs-comment"># We like large modules, so we set the minimum module size relatively high:</span><br>minModuleSize <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><span class="hljs-comment"># Module identification using dynamic tree cut:</span><br>dynamicMods <span class="hljs-operator">=</span> cutreeDynamic<span class="hljs-punctuation">(</span>dendro <span class="hljs-operator">=</span> geneTree<span class="hljs-punctuation">,</span> distM <span class="hljs-operator">=</span> dissTOM<span class="hljs-punctuation">,</span><br>                deepSplit <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> pamRespectsDendro <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span><br>                minClusterSize <span class="hljs-operator">=</span> minModuleSize<span class="hljs-punctuation">)</span>;<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  ..cutHeight not given<span class="hljs-punctuation">,</span> setting it to <span class="hljs-number">0.995</span>  <span class="hljs-operator">==</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">99</span>% of the <span class="hljs-punctuation">(</span>truncated<span class="hljs-punctuation">)</span> height <span class="hljs-built_in">range</span> <span class="hljs-keyword">in</span> dendro.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  ..done.<br>table<span class="hljs-punctuation">(</span>dynamicMods<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dynamicMods<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">88</span> <span class="hljs-number">496</span> <span class="hljs-number">319</span> <span class="hljs-number">316</span> <span class="hljs-number">241</span> <span class="hljs-number">208</span> <span class="hljs-number">188</span> <span class="hljs-number">151</span> <span class="hljs-number">149</span> <span class="hljs-number">115</span> <span class="hljs-number">112</span>  <span class="hljs-number">95</span>  <span class="hljs-number">91</span>  <span class="hljs-number">86</span>  <span class="hljs-number">77</span>  <span class="hljs-number">67</span>  <span class="hljs-number">62</span>  <span class="hljs-number">56</span>  <span class="hljs-number">49</span>  <span class="hljs-number">34</span><br><span class="hljs-comment"># Convert numeric lables into colors</span><br>dynamicColors <span class="hljs-operator">=</span> labels2colors<span class="hljs-punctuation">(</span>dynamicMods<span class="hljs-punctuation">)</span><br>table<span class="hljs-punctuation">(</span>dynamicColors<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> dynamicColors<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        black         blue        brown         cyan        green  greenyellow         grey <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-number">151</span>          <span class="hljs-number">319</span>          <span class="hljs-number">316</span>           <span class="hljs-number">77</span>          <span class="hljs-number">208</span>           <span class="hljs-number">95</span>           <span class="hljs-number">88</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       grey60    lightcyan   lightgreen  lightyellow      magenta midnightblue         pink <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-number">56</span>           <span class="hljs-number">62</span>           <span class="hljs-number">49</span>           <span class="hljs-number">34</span>          <span class="hljs-number">115</span>           <span class="hljs-number">67</span>          <span class="hljs-number">149</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       purple          red       salmon          <span class="hljs-built_in">tan</span>    turquoise       yellow <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-number">112</span>          <span class="hljs-number">188</span>           <span class="hljs-number">86</span>           <span class="hljs-number">91</span>          <span class="hljs-number">496</span>          <span class="hljs-number">241</span><br><span class="hljs-comment"># Plot the dendrogram and colors underneath</span><br>plotDendroAndColors<span class="hljs-punctuation">(</span>geneTree<span class="hljs-punctuation">,</span> dynamicColors<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Dynamic Tree Cut&quot;</span><span class="hljs-punctuation">,</span><br>                    dendroLabels <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span> hang <span class="hljs-operator">=</span> <span class="hljs-number">0.03</span><span class="hljs-punctuation">,</span><br>                    addGuide <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> guideHang <span class="hljs-operator">=</span> <span class="hljs-number">0.05</span><span class="hljs-punctuation">,</span><br>                    main <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Gene dendrogram and module colors&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-107-2.png"></p><h3 id="计算模块的-eigengene-并与样本特征相关联"><a href="#计算模块的-eigengene-并与样本特征相关联" class="headerlink" title="计算模块的 eigengene 并与样本特征相关联"></a>计算模块的 eigengene 并与样本特征相关联</h3><p>接下来就可以计算每个模块的 eigengene，并基于这些 eigengene 进行聚类从而将相似的模块进行合并，接着对新模块的 eigengene 和样本特征计算相关性，来找到我们感兴趣的模块：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Calculate eigengenes</span><br>MEList <span class="hljs-operator">=</span> moduleEigengenes<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">,</span> colors <span class="hljs-operator">=</span> dynamicColors<span class="hljs-punctuation">)</span><br>MEs <span class="hljs-operator">=</span> MEList<span class="hljs-operator">$</span>eigengenes<br><span class="hljs-comment"># Calculate dissimilarity of module eigengenes</span><br>MEDiss <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">-</span>cor<span class="hljs-punctuation">(</span>MEs<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># Cluster module eigengenes</span><br>METree <span class="hljs-operator">=</span> hclust<span class="hljs-punctuation">(</span>as.dist<span class="hljs-punctuation">(</span>MEDiss<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;average&quot;</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># Plot the result</span><br>plot<span class="hljs-punctuation">(</span>METree<span class="hljs-punctuation">,</span> main <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Clustering of module eigengenes&quot;</span><span class="hljs-punctuation">,</span><br>     xlab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> sub <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##合并模块</span><br>MEDissThres <span class="hljs-operator">=</span> <span class="hljs-number">0.25</span><br><span class="hljs-comment"># Plot the cut line into the dendrogram</span><br>abline<span class="hljs-punctuation">(</span>h<span class="hljs-operator">=</span>MEDissThres<span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-108-1.png"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Call an automatic merging function</span><br>merge <span class="hljs-operator">=</span> mergeCloseModules<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">,</span> dynamicColors<span class="hljs-punctuation">,</span> cutHeight <span class="hljs-operator">=</span> MEDissThres<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  mergeCloseModules<span class="hljs-operator">:</span> Merging modules whose distance is less than <span class="hljs-number">0.25</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    multiSetMEs<span class="hljs-operator">:</span> Calculating module MEs.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      Working on set <span class="hljs-number">1</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      moduleEigengenes<span class="hljs-operator">:</span> Calculating <span class="hljs-number">20</span> module eigengenes <span class="hljs-keyword">in</span> given set.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    multiSetMEs<span class="hljs-operator">:</span> Calculating module MEs.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      Working on set <span class="hljs-number">1</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      moduleEigengenes<span class="hljs-operator">:</span> Calculating <span class="hljs-number">15</span> module eigengenes <span class="hljs-keyword">in</span> given set.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Calculating new MEs...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    multiSetMEs<span class="hljs-operator">:</span> Calculating module MEs.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      Working on set <span class="hljs-number">1</span> ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      moduleEigengenes<span class="hljs-operator">:</span> Calculating <span class="hljs-number">15</span> module eigengenes <span class="hljs-keyword">in</span> given set.<br><span class="hljs-comment"># The merged module colors</span><br>mergedColors <span class="hljs-operator">=</span> merge<span class="hljs-operator">$</span>colors;<br><span class="hljs-comment"># Eigengenes of the new merged modules:</span><br>mergedMEs <span class="hljs-operator">=</span> merge<span class="hljs-operator">$</span>newMEs<br><br>plotDendroAndColors<span class="hljs-punctuation">(</span>geneTree<span class="hljs-punctuation">,</span> cbind<span class="hljs-punctuation">(</span>dynamicColors<span class="hljs-punctuation">,</span> mergedColors<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Dynamic Tree Cut&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Merged dynamic&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                    dendroLabels <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span> hang <span class="hljs-operator">=</span> <span class="hljs-number">0.03</span><span class="hljs-punctuation">,</span><br>                    addGuide <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> guideHang <span class="hljs-operator">=</span> <span class="hljs-number">0.05</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-108-2.png"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs r">moduleColors <span class="hljs-operator">=</span> mergedColors<br><span class="hljs-comment"># Construct numerical labels corresponding to the colors</span><br>colorOrder <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;grey&quot;</span><span class="hljs-punctuation">,</span> standardColors<span class="hljs-punctuation">(</span><span class="hljs-number">50</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br>moduleLabels <span class="hljs-operator">=</span> match<span class="hljs-punctuation">(</span>moduleColors<span class="hljs-punctuation">,</span> colorOrder<span class="hljs-punctuation">)</span><span class="hljs-operator">-</span><span class="hljs-number">1</span>;<br>MEs <span class="hljs-operator">=</span> mergedMEs<br><br><span class="hljs-comment"># Define numbers of genes and samples</span><br>nGenes <span class="hljs-operator">=</span> ncol<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">)</span>;<br>nSamples <span class="hljs-operator">=</span> nrow<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># Recalculate MEs with color labels</span><br>MEs0 <span class="hljs-operator">=</span> moduleEigengenes<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">,</span> moduleColors<span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>eigengenes<br>MEs <span class="hljs-operator">=</span> orderMEs<span class="hljs-punctuation">(</span>MEs0<span class="hljs-punctuation">)</span><br><span class="hljs-comment">##计算相关性</span><br>datTraits <span class="hljs-operator">&lt;-</span> datTraits<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br>moduleTraitCor <span class="hljs-operator">=</span> cor<span class="hljs-punctuation">(</span>MEs<span class="hljs-punctuation">,</span> datTraits<span class="hljs-punctuation">,</span> use <span class="hljs-operator">=</span> <span class="hljs-string">&quot;p&quot;</span><span class="hljs-punctuation">)</span>;<br>moduleTraitPvalue <span class="hljs-operator">=</span> corPvalueStudent<span class="hljs-punctuation">(</span>moduleTraitCor<span class="hljs-punctuation">,</span> nSamples<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##画图</span><br>textMatrix <span class="hljs-operator">=</span>  paste<span class="hljs-punctuation">(</span><span class="hljs-built_in">signif</span><span class="hljs-punctuation">(</span>moduleTraitCor<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;\n(&quot;</span><span class="hljs-punctuation">,</span><br>                           <span class="hljs-built_in">signif</span><span class="hljs-punctuation">(</span>moduleTraitPvalue<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;)&quot;</span><span class="hljs-punctuation">,</span> sep <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-built_in">dim</span><span class="hljs-punctuation">(</span>textMatrix<span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">dim</span><span class="hljs-punctuation">(</span>moduleTraitCor<span class="hljs-punctuation">)</span><br>par<span class="hljs-punctuation">(</span>mar <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># Display the correlation values within a heatmap plot</span><br>labeledHeatmap<span class="hljs-punctuation">(</span>Matrix <span class="hljs-operator">=</span> moduleTraitCor<span class="hljs-punctuation">,</span><br>               xLabels <span class="hljs-operator">=</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>datTraits<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>               yLabels <span class="hljs-operator">=</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>MEs<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>               ySymbols <span class="hljs-operator">=</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>MEs<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>               colorLabels <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span><br>               colors <span class="hljs-operator">=</span> greenWhiteRed<span class="hljs-punctuation">(</span><span class="hljs-number">50</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>               textMatrix <span class="hljs-operator">=</span> textMatrix<span class="hljs-punctuation">,</span><br>               setStdMargins <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span><br>               cex.text <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span><br>               zlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>               main <span class="hljs-operator">=</span> paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Module-trait relationships&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Warning <span class="hljs-keyword">in</span> greenWhiteRed<span class="hljs-punctuation">(</span><span class="hljs-number">50</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> WGCNA<span class="hljs-operator">::</span>greenWhiteRed<span class="hljs-operator">:</span> this palette is not suitable <span class="hljs-keyword">for</span> people<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> with green<span class="hljs-operator">-</span>red color blindness <span class="hljs-punctuation">(</span>the most common kind of color blindness<span class="hljs-punctuation">)</span>.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Consider using the <span class="hljs-keyword">function</span> blueWhiteRed instead.<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-108-3.png"></p><p>我们就可以选取和感兴趣的特征相关性强的模块进行后续的研究，比如这里面的 black 模块和病人的体重变量显著正相关，就可以将这个模块中的基因提取出来：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs r">black <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">)</span><span class="hljs-punctuation">[</span>moduleColors<span class="hljs-operator">==</span><span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">]</span><br>annot <span class="hljs-operator">=</span> read.csv<span class="hljs-punctuation">(</span>file <span class="hljs-operator">=</span> <span class="hljs-string">&quot;../test/GeneAnnotation.csv&quot;</span><span class="hljs-punctuation">)</span><br>annot<span class="hljs-operator">$</span>gene_symbol<span class="hljs-punctuation">[</span>which<span class="hljs-punctuation">(</span>annot<span class="hljs-operator">$</span>substanceBXH <span class="hljs-operator">%in%</span> black<span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">%&gt;%</span> na.omit<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Ngfrap1&quot;</span>       <span class="hljs-string">&quot;Nrarp&quot;</span>         <span class="hljs-string">&quot;9930023K05Rik&quot;</span> <span class="hljs-string">&quot;Unc5b&quot;</span>         <span class="hljs-string">&quot;Sulf1&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">6</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Ltbp1&quot;</span>         <span class="hljs-string">&quot;Tusc3&quot;</span>         <span class="hljs-string">&quot;Prg4&quot;</span>          <span class="hljs-string">&quot;Efemp2&quot;</span>        <span class="hljs-string">&quot;2310046G15Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">11</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;1200003C23Rik&quot;</span> <span class="hljs-string">&quot;Art4&quot;</span>          <span class="hljs-string">&quot;Ctps&quot;</span>          <span class="hljs-string">&quot;A830073O21Rik&quot;</span> <span class="hljs-string">&quot;Sparc&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">16</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;A530057A03Rik&quot;</span> <span class="hljs-string">&quot;Timp1&quot;</span>         <span class="hljs-string">&quot;Eltd1&quot;</span>         <span class="hljs-string">&quot;Jun&quot;</span>           <span class="hljs-string">&quot;Mogat1&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">21</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;1200009I06Rik&quot;</span> <span class="hljs-string">&quot;Osbpl5&quot;</span>        <span class="hljs-string">&quot;Jam2&quot;</span>          <span class="hljs-string">&quot;Npn3&quot;</span>          <span class="hljs-string">&quot;5031439A09Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">26</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Bmp5&quot;</span>          <span class="hljs-string">&quot;D4st1&quot;</span>         <span class="hljs-string">&quot;Zfp521&quot;</span>        <span class="hljs-string">&quot;Ppic&quot;</span>          <span class="hljs-string">&quot;Tagln&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">31</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;3222401M22Rik&quot;</span> <span class="hljs-string">&quot;Aard&quot;</span>          <span class="hljs-string">&quot;BC029214&quot;</span>      <span class="hljs-string">&quot;2600017H02Rik&quot;</span> <span class="hljs-string">&quot;Arsa&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">36</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Ehd2&quot;</span>          <span class="hljs-string">&quot;Gal3st1&quot;</span>       <span class="hljs-string">&quot;Npdc1&quot;</span>         <span class="hljs-string">&quot;Sdcbp2&quot;</span>        <span class="hljs-string">&quot;Sh3bp4&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">41</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Rtn1&quot;</span>          <span class="hljs-string">&quot;Kitl&quot;</span>          <span class="hljs-string">&quot;Pdir&quot;</span>          <span class="hljs-string">&quot;Ggta1&quot;</span>         <span class="hljs-string">&quot;9230112O05Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">46</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Fbln2&quot;</span>         <span class="hljs-string">&quot;Sgce&quot;</span>          <span class="hljs-string">&quot;Serpina1d&quot;</span>     <span class="hljs-string">&quot;Col16a1&quot;</span>       <span class="hljs-string">&quot;Atp8b2&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">51</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Zfp503&quot;</span>        <span class="hljs-string">&quot;Tnfsf13b&quot;</span>      <span class="hljs-string">&quot;0610039N19Rik&quot;</span> <span class="hljs-string">&quot;4632428N05Rik&quot;</span> <span class="hljs-string">&quot;Cpxm1&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">56</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Fmo3&quot;</span>          <span class="hljs-string">&quot;2810489O06Rik&quot;</span> <span class="hljs-string">&quot;Nbea&quot;</span>          <span class="hljs-string">&quot;Mat1a&quot;</span>         <span class="hljs-string">&quot;Numbl&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">61</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;6230427J02Rik&quot;</span> <span class="hljs-string">&quot;9030624L02Rik&quot;</span> <span class="hljs-string">&quot;Cnr2&quot;</span>          <span class="hljs-string">&quot;Pam&quot;</span>           <span class="hljs-string">&quot;1500041B16Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">66</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Akr1b8&quot;</span>        <span class="hljs-string">&quot;Loxl1&quot;</span>         <span class="hljs-string">&quot;Ppm1l&quot;</span>         <span class="hljs-string">&quot;Lum&quot;</span>           <span class="hljs-string">&quot;Agpt2&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">71</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;E230026N22Rik&quot;</span> <span class="hljs-string">&quot;Gpld1&quot;</span>         <span class="hljs-string">&quot;Kcnq1&quot;</span>         <span class="hljs-string">&quot;Ian6&quot;</span>          <span class="hljs-string">&quot;Itgbl1&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">76</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;E430007K15Rik&quot;</span> <span class="hljs-string">&quot;Lgi2&quot;</span>          <span class="hljs-string">&quot;Tek&quot;</span>           <span class="hljs-string">&quot;C1qr1&quot;</span>         <span class="hljs-string">&quot;9030408N13Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">81</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Slc39a14&quot;</span>      <span class="hljs-string">&quot;C86987&quot;</span>        <span class="hljs-string">&quot;Ccdc3&quot;</span>         <span class="hljs-string">&quot;Cxcl14&quot;</span>        <span class="hljs-string">&quot;Pcolce&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">86</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Cldn5&quot;</span>         <span class="hljs-string">&quot;Adamts2&quot;</span>       <span class="hljs-string">&quot;1300018K11Rik&quot;</span> <span class="hljs-string">&quot;Ctla2a&quot;</span>        <span class="hljs-string">&quot;Thbd&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">91</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Adam8&quot;</span>         <span class="hljs-string">&quot;Kit&quot;</span>           <span class="hljs-string">&quot;Xbp1&quot;</span>          <span class="hljs-string">&quot;Plxnb1&quot;</span>        <span class="hljs-string">&quot;Sorbs1&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">96</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Fgd5&quot;</span>          <span class="hljs-string">&quot;Rab15&quot;</span>         <span class="hljs-string">&quot;Cfh&quot;</span>           <span class="hljs-string">&quot;Igfbp7&quot;</span>        <span class="hljs-string">&quot;Bcl6b&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">101</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Prss21&quot;</span>        <span class="hljs-string">&quot;C8b&quot;</span>           <span class="hljs-string">&quot;Bmp2&quot;</span>          <span class="hljs-string">&quot;BC025446&quot;</span>      <span class="hljs-string">&quot;Itga8&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">106</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Ccl2&quot;</span>          <span class="hljs-string">&quot;5730485H21Rik&quot;</span> <span class="hljs-string">&quot;Clstn3&quot;</span>        <span class="hljs-string">&quot;Cyp2c40&quot;</span>       <span class="hljs-string">&quot;F2r&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">111</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Raet1e&quot;</span>        <span class="hljs-string">&quot;Pdgfrb&quot;</span>        <span class="hljs-string">&quot;Inhbb&quot;</span>         <span class="hljs-string">&quot;Sctr&quot;</span>          <span class="hljs-string">&quot;Ctsd&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">116</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Gmpr&quot;</span>          <span class="hljs-string">&quot;Vtn&quot;</span>           <span class="hljs-string">&quot;Socs3&quot;</span>         <span class="hljs-string">&quot;Tgm1&quot;</span>          <span class="hljs-string">&quot;AI324046&quot;</span>     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">121</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Plekha4&quot;</span>       <span class="hljs-string">&quot;Tm4sf1&quot;</span>        <span class="hljs-string">&quot;Col1a2&quot;</span>        <span class="hljs-string">&quot;Zfpm2&quot;</span>         <span class="hljs-string">&quot;Gpm6b&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">126</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Itih3&quot;</span>         <span class="hljs-string">&quot;5430432M24Rik&quot;</span> <span class="hljs-string">&quot;Slc3a1&quot;</span>        <span class="hljs-string">&quot;Hspa5bp1&quot;</span>      <span class="hljs-string">&quot;Slc38a2&quot;</span>      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">131</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Orm2&quot;</span>          <span class="hljs-string">&quot;BC014805&quot;</span>      <span class="hljs-string">&quot;Pparg&quot;</span>         <span class="hljs-string">&quot;Tfpi&quot;</span>          <span class="hljs-string">&quot;Frzb&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">136</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Mfng&quot;</span>          <span class="hljs-string">&quot;Mest&quot;</span>          <span class="hljs-string">&quot;Gja1&quot;</span>          <span class="hljs-string">&quot;3110041P15Rik&quot;</span> <span class="hljs-string">&quot;Car3&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">141</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Lamb3&quot;</span>         <span class="hljs-string">&quot;Cxcl5&quot;</span>         <span class="hljs-string">&quot;Tesc&quot;</span>          <span class="hljs-string">&quot;Gpx7&quot;</span>          <span class="hljs-string">&quot;1200013A08Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">146</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Plvap&quot;</span>         <span class="hljs-string">&quot;4833409A17Rik&quot;</span> <span class="hljs-string">&quot;Gdf10&quot;</span>         <span class="hljs-string">&quot;Ramp2&quot;</span>         <span class="hljs-string">&quot;Apom&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">151</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;AU041783&quot;</span>      <span class="hljs-string">&quot;Krt1-23&quot;</span>       <span class="hljs-string">&quot;Avpr1a&quot;</span>        <span class="hljs-string">&quot;Tuba1&quot;</span>         <span class="hljs-string">&quot;Dsip1&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">156</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Ces2&quot;</span>          <span class="hljs-string">&quot;Tnc&quot;</span>           <span class="hljs-string">&quot;Eml1&quot;</span>          <span class="hljs-string">&quot;Rasip1&quot;</span>        <span class="hljs-string">&quot;Emilin1&quot;</span>      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">161</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Fa2h&quot;</span>          <span class="hljs-string">&quot;Vwf&quot;</span>           <span class="hljs-string">&quot;Tm4sf6&quot;</span>        <span class="hljs-string">&quot;Esam1&quot;</span>         <span class="hljs-string">&quot;Mt1&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">166</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Dcn&quot;</span>           <span class="hljs-string">&quot;Serpina11&quot;</span>     <span class="hljs-string">&quot;Prss11&quot;</span>        <span class="hljs-string">&quot;Cbr3&quot;</span>          <span class="hljs-string">&quot;E130307J04Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">171</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;BC011468&quot;</span>      <span class="hljs-string">&quot;Cygb&quot;</span>          <span class="hljs-string">&quot;Pcdhb17&quot;</span>       <span class="hljs-string">&quot;Cyp2g1&quot;</span>        <span class="hljs-string">&quot;5730469M10Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">176</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Tgfb1i1&quot;</span>       <span class="hljs-string">&quot;Tcf21&quot;</span>         <span class="hljs-string">&quot;Cyp4b1&quot;</span>        <span class="hljs-string">&quot;D10Ucla2&quot;</span>      <span class="hljs-string">&quot;Slc9a9&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">181</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;D6Ertd32e&quot;</span>     <span class="hljs-string">&quot;Sept4&quot;</span>         <span class="hljs-string">&quot;Trem2&quot;</span>         <span class="hljs-string">&quot;Serpina10&quot;</span>     <span class="hljs-string">&quot;Art3&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">186</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Ifitm2&quot;</span>        <span class="hljs-string">&quot;Akap12&quot;</span>        <span class="hljs-string">&quot;Fsp27&quot;</span>         <span class="hljs-string">&quot;Timp3&quot;</span>         <span class="hljs-string">&quot;F11&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">191</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Cyp2c40&quot;</span>       <span class="hljs-string">&quot;Igfals&quot;</span>        <span class="hljs-string">&quot;Postn&quot;</span>         <span class="hljs-string">&quot;D19Wsu12e&quot;</span>     <span class="hljs-string">&quot;Heph&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">196</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Plk2&quot;</span>          <span class="hljs-string">&quot;Upp1&quot;</span>          <span class="hljs-string">&quot;Lbp&quot;</span>           <span class="hljs-string">&quot;Aox1&quot;</span>          <span class="hljs-string">&quot;Sytl2&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">201</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Col6a3&quot;</span>        <span class="hljs-string">&quot;Gpihbp1&quot;</span>       <span class="hljs-string">&quot;Lxn&quot;</span>           <span class="hljs-string">&quot;Mmrn2&quot;</span>         <span class="hljs-string">&quot;2610020H15Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">206</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Pex11a&quot;</span>        <span class="hljs-string">&quot;Stat3&quot;</span>         <span class="hljs-string">&quot;BC025600&quot;</span>      <span class="hljs-string">&quot;Zfp423&quot;</span>        <span class="hljs-string">&quot;Scd2&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">211</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Slc16a10&quot;</span>      <span class="hljs-string">&quot;Orm1&quot;</span>          <span class="hljs-string">&quot;Armcx1&quot;</span>        <span class="hljs-string">&quot;Phlda3&quot;</span>        <span class="hljs-string">&quot;1500004A08Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">216</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;BC024988&quot;</span>      <span class="hljs-string">&quot;Gpnmb&quot;</span>         <span class="hljs-string">&quot;Spp1&quot;</span>          <span class="hljs-string">&quot;C530028O21Rik&quot;</span> <span class="hljs-string">&quot;Ccbl1&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">221</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;2600006K01Rik&quot;</span> <span class="hljs-string">&quot;Kcne3&quot;</span>         <span class="hljs-string">&quot;Matn2&quot;</span>         <span class="hljs-string">&quot;A230035L05Rik&quot;</span> <span class="hljs-string">&quot;Map4k4&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">226</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;4631416L12Rik&quot;</span> <span class="hljs-string">&quot;1600015H20Rik&quot;</span> <span class="hljs-string">&quot;Egfr&quot;</span>          <span class="hljs-string">&quot;Scara3&quot;</span>        <span class="hljs-string">&quot;CRAD-L&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">231</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Rgs5&quot;</span>          <span class="hljs-string">&quot;D330037A14Rik&quot;</span> <span class="hljs-string">&quot;Proz&quot;</span>          <span class="hljs-string">&quot;Polydom&quot;</span>       <span class="hljs-string">&quot;Armcx2&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">236</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Nnmt&quot;</span>          <span class="hljs-string">&quot;Daf1&quot;</span>          <span class="hljs-string">&quot;Antxr1&quot;</span>        <span class="hljs-string">&quot;Synpo&quot;</span>         <span class="hljs-string">&quot;Edn1&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">241</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Mrc1&quot;</span>          <span class="hljs-string">&quot;Ptprb&quot;</span>         <span class="hljs-string">&quot;BC038881&quot;</span>      <span class="hljs-string">&quot;Sgk&quot;</span>           <span class="hljs-string">&quot;Slc22a7&quot;</span>      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">246</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;1110039C07Rik&quot;</span> <span class="hljs-string">&quot;Serpina3n&quot;</span>     <span class="hljs-string">&quot;AA960558&quot;</span>      <span class="hljs-string">&quot;Trfr2&quot;</span>         <span class="hljs-string">&quot;Defb1&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">251</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Bicc1&quot;</span>         <span class="hljs-string">&quot;2310016C16Rik&quot;</span> <span class="hljs-string">&quot;Dok4&quot;</span>          <span class="hljs-string">&quot;Dnaic1&quot;</span>        <span class="hljs-string">&quot;C730007L20Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">256</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;5430416O09Rik&quot;</span> <span class="hljs-string">&quot;Ehd3&quot;</span>          <span class="hljs-string">&quot;Fscn1&quot;</span>         <span class="hljs-string">&quot;Ctsk&quot;</span>          <span class="hljs-string">&quot;Plxnd1&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">261</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Fgb&quot;</span>           <span class="hljs-string">&quot;Chst7&quot;</span>         <span class="hljs-string">&quot;9330129D05Rik&quot;</span> <span class="hljs-string">&quot;1110032E23Rik&quot;</span> <span class="hljs-string">&quot;Osbpl3&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">266</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Slc43a1&quot;</span>       <span class="hljs-string">&quot;Dll4&quot;</span>          <span class="hljs-string">&quot;Fabp4&quot;</span>         <span class="hljs-string">&quot;9430059P22Rik&quot;</span> <span class="hljs-string">&quot;Ppm1f&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">271</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Arhgap18&quot;</span>      <span class="hljs-string">&quot;Lama2&quot;</span>         <span class="hljs-string">&quot;Rragd&quot;</span>         <span class="hljs-string">&quot;Jam3&quot;</span>          <span class="hljs-string">&quot;Cpb2&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">276</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Ntf3&quot;</span>          <span class="hljs-string">&quot;Rnase4&quot;</span>        <span class="hljs-string">&quot;Hc&quot;</span>            <span class="hljs-string">&quot;AI428795&quot;</span>      <span class="hljs-string">&quot;1110028A07Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">281</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Agxt&quot;</span>          <span class="hljs-string">&quot;Flt1&quot;</span>          <span class="hljs-string">&quot;Ang1&quot;</span>          <span class="hljs-string">&quot;Rcn3&quot;</span>          <span class="hljs-string">&quot;Vim&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">286</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Mylip&quot;</span>         <span class="hljs-string">&quot;1200009O22Rik&quot;</span> <span class="hljs-string">&quot;Cd34&quot;</span>          <span class="hljs-string">&quot;Ehhadh&quot;</span>        <span class="hljs-string">&quot;Fbn1&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">291</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Cdc42ep3&quot;</span>      <span class="hljs-string">&quot;Kng2&quot;</span>          <span class="hljs-string">&quot;Cav2&quot;</span>          <span class="hljs-string">&quot;Prdc&quot;</span>          <span class="hljs-string">&quot;Fetub&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">296</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Stk39&quot;</span>         <span class="hljs-string">&quot;Emcn&quot;</span>          <span class="hljs-string">&quot;Serpinf2&quot;</span>      <span class="hljs-string">&quot;Pdgfra&quot;</span>        <span class="hljs-string">&quot;Cml1&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">301</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Ddah2&quot;</span>         <span class="hljs-string">&quot;Anxa2&quot;</span>         <span class="hljs-string">&quot;Mlp&quot;</span>           <span class="hljs-string">&quot;Entpd5&quot;</span>        <span class="hljs-string">&quot;Oit3&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">306</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Cd63&quot;</span>          <span class="hljs-string">&quot;Fbln5&quot;</span>         <span class="hljs-string">&quot;Acyp2&quot;</span>         <span class="hljs-string">&quot;Icam2&quot;</span>         <span class="hljs-string">&quot;Npl&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">311</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Il1r1&quot;</span>         <span class="hljs-string">&quot;0610039P13Rik&quot;</span> <span class="hljs-string">&quot;A930021O22&quot;</span>    <span class="hljs-string">&quot;2610001E17Rik&quot;</span> <span class="hljs-string">&quot;Slc30a2&quot;</span>      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">316</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;AI428936&quot;</span>      <span class="hljs-string">&quot;Col4a2&quot;</span>        <span class="hljs-string">&quot;2410004L22Rik&quot;</span> <span class="hljs-string">&quot;AI173486&quot;</span>      <span class="hljs-string">&quot;Col14a1&quot;</span>      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">321</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Col4a1&quot;</span>        <span class="hljs-string">&quot;Wisp1&quot;</span>         <span class="hljs-string">&quot;Drctnnb1a&quot;</span>     <span class="hljs-string">&quot;Calcrl&quot;</span>        <span class="hljs-string">&quot;1700021K02Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">326</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Plat&quot;</span>          <span class="hljs-string">&quot;Itih4&quot;</span>         <span class="hljs-string">&quot;Rgs10&quot;</span>         <span class="hljs-string">&quot;Slc37a1&quot;</span>       <span class="hljs-string">&quot;Fmnl2&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">331</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Epb4.1l2&quot;</span>      <span class="hljs-string">&quot;Rgs3&quot;</span>          <span class="hljs-string">&quot;Pdlim2&quot;</span>        <span class="hljs-string">&quot;Mbl1&quot;</span>          <span class="hljs-string">&quot;Scnn1a&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">336</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Notch4&quot;</span>        <span class="hljs-string">&quot;Hey1&quot;</span>          <span class="hljs-string">&quot;2810004A10Rik&quot;</span> <span class="hljs-string">&quot;Thbs2&quot;</span>         <span class="hljs-string">&quot;Tm4sf2&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">341</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;3732412D22Rik&quot;</span> <span class="hljs-string">&quot;Slc6a8&quot;</span>        <span class="hljs-string">&quot;Nr2f1&quot;</span>         <span class="hljs-string">&quot;Col5a1&quot;</span>        <span class="hljs-string">&quot;Casp12&quot;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">346</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Hoxb2&quot;</span>         <span class="hljs-string">&quot;Hey2&quot;</span>          <span class="hljs-string">&quot;mKIAA1236&quot;</span>     <span class="hljs-string">&quot;Maged2&quot;</span>        <span class="hljs-string">&quot;Lox&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">351</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Col1a1&quot;</span>        <span class="hljs-string">&quot;Ptpn13&quot;</span>        <span class="hljs-string">&quot;Serpina3c&quot;</span>     <span class="hljs-string">&quot;Crat&quot;</span>          <span class="hljs-string">&quot;Kcnj8&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">356</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Mmp2&quot;</span>          <span class="hljs-string">&quot;Olfml3&quot;</span>        <span class="hljs-string">&quot;F7&quot;</span>            <span class="hljs-string">&quot;Cd36&quot;</span>          <span class="hljs-string">&quot;D330012D11Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">361</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Pde6h&quot;</span>         <span class="hljs-string">&quot;Anxa1&quot;</span>         <span class="hljs-string">&quot;Fkhl18&quot;</span>        <span class="hljs-string">&quot;Sdc4&quot;</span>          <span class="hljs-string">&quot;9630050M13Rik&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">366</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Ltbp3&quot;</span>         <span class="hljs-string">&quot;Cmya4&quot;</span>         <span class="hljs-string">&quot;Itih1&quot;</span>         <span class="hljs-string">&quot;Fhl2&quot;</span>          <span class="hljs-string">&quot;Sdpr&quot;</span>         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">371</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;Nptxr&quot;</span>         <span class="hljs-string">&quot;Dnajc12&quot;</span>       <span class="hljs-string">&quot;Lrg1&quot;</span>          <span class="hljs-string">&quot;Lrat&quot;</span>          <span class="hljs-string">&quot;Boc&quot;</span>          <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">attr</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;na.action&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>   <span class="hljs-number">1</span>   <span class="hljs-number">9</span>  <span class="hljs-number">18</span>  <span class="hljs-number">20</span>  <span class="hljs-number">41</span>  <span class="hljs-number">50</span>  <span class="hljs-number">52</span> <span class="hljs-number">133</span> <span class="hljs-number">176</span> <span class="hljs-number">177</span> <span class="hljs-number">196</span> <span class="hljs-number">207</span> <span class="hljs-number">236</span> <span class="hljs-number">239</span> <span class="hljs-number">307</span> <span class="hljs-number">324</span> <span class="hljs-number">326</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">attr</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;class&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;omit&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Define variable weight containing the weight column of datTrait</span><br>weight <span class="hljs-operator">=</span> as.data.frame<span class="hljs-punctuation">(</span>datTraits<span class="hljs-operator">$</span>weight_g<span class="hljs-punctuation">)</span>;<br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>weight<span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;weight&quot;</span><br><span class="hljs-comment"># names (colors) of the modules</span><br>modNames <span class="hljs-operator">=</span> substring<span class="hljs-punctuation">(</span><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>MEs<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><br>geneModuleMembership <span class="hljs-operator">=</span> as.data.frame<span class="hljs-punctuation">(</span>cor<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">,</span> MEs<span class="hljs-punctuation">,</span> use <span class="hljs-operator">=</span> <span class="hljs-string">&quot;p&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br>MMPvalue <span class="hljs-operator">=</span> as.data.frame<span class="hljs-punctuation">(</span>corPvalueStudent<span class="hljs-punctuation">(</span>as.matrix<span class="hljs-punctuation">(</span>geneModuleMembership<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> nSamples<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br><br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>geneModuleMembership<span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;MM&quot;</span><span class="hljs-punctuation">,</span> modNames<span class="hljs-punctuation">,</span> sep<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>MMPvalue<span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;p.MM&quot;</span><span class="hljs-punctuation">,</span> modNames<span class="hljs-punctuation">,</span> sep<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span>;<br><br>geneTraitSignificance <span class="hljs-operator">=</span> as.data.frame<span class="hljs-punctuation">(</span>cor<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">,</span> weight<span class="hljs-punctuation">,</span> use <span class="hljs-operator">=</span> <span class="hljs-string">&quot;p&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br>GSPvalue <span class="hljs-operator">=</span> as.data.frame<span class="hljs-punctuation">(</span>corPvalueStudent<span class="hljs-punctuation">(</span>as.matrix<span class="hljs-punctuation">(</span>geneTraitSignificance<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> nSamples<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br><br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>geneTraitSignificance<span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;GS.&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>weight<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> sep<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>GSPvalue<span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;p.GS.&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>weight<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> sep<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span>;<br><br>module <span class="hljs-operator">=</span> <span class="hljs-string">&quot;black&quot;</span><br>column <span class="hljs-operator">=</span> match<span class="hljs-punctuation">(</span>module<span class="hljs-punctuation">,</span> modNames<span class="hljs-punctuation">)</span>;<br>moduleGenes <span class="hljs-operator">=</span> moduleColors<span class="hljs-operator">==</span>module;<br><br>par<span class="hljs-punctuation">(</span>mfrow <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br>verboseScatterplot<span class="hljs-punctuation">(</span><span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>geneModuleMembership<span class="hljs-punctuation">[</span>moduleGenes<span class="hljs-punctuation">,</span> column<span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                   <span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>geneTraitSignificance<span class="hljs-punctuation">[</span>moduleGenes<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                   xlab <span class="hljs-operator">=</span> paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Module Membership in&quot;</span><span class="hljs-punctuation">,</span> module<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;module&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                   ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Gene significance for body weight&quot;</span><span class="hljs-punctuation">,</span><br>                   main <span class="hljs-operator">=</span> paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Module membership vs. gene significance\n&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                   cex.main <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span><span class="hljs-punctuation">,</span> cex.lab <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span><span class="hljs-punctuation">,</span> cex.axis <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> module<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-110-1.png"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##找 hub 基因</span><br>MM  <span class="hljs-operator">&lt;-</span> geneModuleMembership<span class="hljs-punctuation">[</span>moduleGenes<span class="hljs-punctuation">,</span> column<span class="hljs-punctuation">]</span><br>MMP <span class="hljs-operator">&lt;-</span> MMPvalue<span class="hljs-punctuation">[</span>moduleGenes<span class="hljs-punctuation">,</span> column<span class="hljs-punctuation">]</span><br>GS <span class="hljs-operator">&lt;-</span>  geneTraitSignificance<span class="hljs-punctuation">[</span>moduleGenes<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br>GSP <span class="hljs-operator">&lt;-</span> GSPvalue<span class="hljs-punctuation">[</span>moduleGenes<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><br>mydata <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>moduleGenes<span class="hljs-operator">=</span>colnames<span class="hljs-punctuation">(</span>datExpr<span class="hljs-punctuation">)</span><span class="hljs-punctuation">[</span>moduleGenes<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>MM<span class="hljs-punctuation">,</span>MMP<span class="hljs-punctuation">,</span>GS<span class="hljs-punctuation">,</span>GSP<span class="hljs-punctuation">)</span><br><br>mydata <span class="hljs-operator">&lt;-</span> mydata <span class="hljs-operator">%&gt;%</span> <br>  filter<span class="hljs-punctuation">(</span>MMP <span class="hljs-operator">&lt;</span> <span class="hljs-number">0.05</span><span class="hljs-punctuation">,</span>GSP <span class="hljs-operator">&lt;</span> <span class="hljs-number">0.05</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  arrange<span class="hljs-punctuation">(</span>desc<span class="hljs-punctuation">(</span>MM<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>desc<span class="hljs-punctuation">(</span>GS<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>生物信息</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>下载EGA数据</title>
    <link href="/2021/09/08/download_ega_data/"/>
    <url>/2021/09/08/download_ega_data/</url>
    
    <content type="html"><![CDATA[<p>通过 pyEGA3 下载 EGA 数据</p><span id="more"></span><p>目前比较简单的方法是利用<a href="https://github.com/EGA-archive/ega-download-client">EGA download client—pyEGA3</a>来下载</p><h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><p>这个工具是python版本的，在下载的时候需要端口8443和8052开启，可以通过下面的命令来检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs &#123;bash&#125;">openssl s_client -connect ega.ebi.ac.uk:8443<br>openssl s_client -connect ega.ebi.ac.uk:8052<br></code></pre></td></tr></table></figure><p>如果返回CONNECTED就表示端口可以连接： <img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210125182954515.png"></p><p>接下来就需要安装pyEGA3，可以通过pip，conda或者克隆github仓库来安装，这里选择使用mamba来安装(加速版的conda)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs &#123;bash&#125;">mamba install pyega3<br></code></pre></td></tr></table></figure><p>要下载controlled的数据，需要先配置一下EGA的用户名和密码：新建一个<strong>credential_file.json</strong>文件(在pyEGA3运行的文件夹下)，在里面填入用户名和密码(需要在EGA上申请)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs &#123;bash&#125;">&#123;<br>    &quot;username&quot;: &quot;ega-test-data@ebi.ac.uk&quot;,<br>    &quot;password&quot;: &quot;egarocks&quot;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>查看当前账号下有权限的数据集，会列出可以下载的数据集(如果想要下载的数据集不在里面，需要在EGA上申请)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs &#123;bash&#125;">pyega3 -cf ./credential_file.json datasets<br></code></pre></td></tr></table></figure><p>这个工具命令运行后的输出会输出到<code>pyega3_output.log</code>中，方便我们查看</p><p>也可以查看某个数据集下有哪些文件可以下载(一般是EGAF****)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs &#123;bash&#125;">pyega3 -cf credential_file.json files EGAD*****<br></code></pre></td></tr></table></figure><p>接下来就可以下载某个样本的测序数据了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs &#123;bash&#125;">nohup pyega3 -c 30 -cf credential_file.json fetch EGAF***** --saveto &lt;要保存的文件名&gt; &gt; nohup.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><p><code>-c</code>表示要使用的连接数(<strong>connections</strong>)</p>]]></content>
    
    
    <categories>
      
      <category>生物信息</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一致性聚类（Consensus Clustering）</title>
    <link href="/2021/08/31/ConsensusCluster/"/>
    <url>/2021/08/31/ConsensusCluster/</url>
    
    <content type="html"><![CDATA[<p>一致性聚类概念及R实现</p><span id="more"></span><h2 id="什么是一致性聚类"><a href="#什么是一致性聚类" class="headerlink" title="什么是一致性聚类"></a>什么是一致性聚类</h2><p>聚类方法一般分为两大类：划分聚类（如 k-means，k-medoids 等）和层次聚类，对于划分聚类我们需要指定聚类的数量，并且初始值的随机选取也会带来聚类结果的不稳定；对于层次聚类，尽管不需要随机选取初始值，但是我们仍然需要选择如何切割聚类树得到最终的聚类结果，因此聚类分析中一个重要的过程就是如何选择聚类的数量以及聚类结果的稳定性。</p><p>一致性聚类并不是一种聚类方法，而是通过在数据子集上多次迭代运行我们选择的聚类方法，从而提供关于聚类稳定性和参数选择（比如类的数量）的一种指标。一致性聚类的一般步骤为：</p><ul><li>选择想要测试的一系列 k 值（类别数），和迭代的次数</li><li>对于每个 k，在每次迭代中选择一定比例的样本子集（如 80%），在该子集上运行需要测试的聚类方法（k-means 等）</li><li>对每个 k，迭代完后创建一个一致性矩阵（consensus matrix）</li><li>基于一致性分布选择最优的矩阵</li></ul><p>下面举一个简单的例子说明上述过程：假设现在想要使用 k-means 聚类来对四个用户进行聚类，迭代次数为 4 次，K&#x3D;2 时结果如下（0 表示在这次迭代中该用户没有被抽到）：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/1K80zNAiLjMAO6WcgNqh1GA.png"></p><p>可以看到 Brian 和 Sally 在第 1 次和第 4 次迭代中被聚在一类，Brian 和 James 在第 3 次迭代中聚在一类，而 Sally 和 James 在第 2 次中聚在一类，Alice 在四次迭代中没有和任何用户聚在一类。接下来就要生成一致性矩阵，这个矩阵表示两两样本间的关系；矩阵中的每个值表示对于两个样本，在他们同时被抽到的迭代中有几次是被聚在一类中的，比如 Brian 和 Sally 在三次迭代中同时被抽中（1，2，4）并且在这三次中有两次是被聚到一类的（第 1 和 4 次迭代），所以对应矩阵的值就是 2&#x2F;3 &#x3D; 0.67：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/1SD5g5G3Sv2-HXxgZLlIsw.png"></p><p>然后对于每个 k，我们都可以生成一个这样的矩阵 M；一致性矩阵可以提供另一种样本间相似性的度量，因此我们可以将 M 视为新的距离矩阵进行层次聚类来将样本进行分类，下图是 k&#x3D;3 时的例子：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/t8fuK051LqMw0wtjw8wayw.png"></p><p>接着检查每个矩阵的一半（上三角或下三角）中的值的分布，选择分布 “最好” 的矩阵；“最好” 指的是大部分值接近 0 或者 1，这个结果说明比较一致，比如下面的分布：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/UvsYV8moEE9SnPfx89ufQQ.png"><br>对于一致性聚类还有一些重要的汇总统计量： </p><ul><li>聚类一致性（cluster consensus）：在每个类别（<em>I</em><sub><em>k</em></sub>）中，样本对的平均一致性值 Nk是该类的样本数)，聚类一致性可以用来衡量聚类的稳定性：</li></ul><p>$$<br>m(k)&#x3D;\frac{1}{N(k)(N(k)-1)&#x2F;2}\sum_{i,j\in I_k,i&lt;j}M(i,j)<br>$$</p><ul><li>样本一致性（item consensus）：某个样本与在某个类别中的其他所有样本的平均一致性值，样本一致性可以用来对类别中样本进行排序，找到有代表性的样本有哪些：</li></ul><p>$$<br>m_i(k)&#x3D;\frac{1}{N_k-1{ei ∈ I_k }}\sum_{j\in I_k,j\neq i}   M(i,j)<br>$$</p><h2 id="用-R-包-ConsensusClusterPlus-实现一致性聚类"><a href="#用-R-包-ConsensusClusterPlus-实现一致性聚类" class="headerlink" title="用 R 包 ConsensusClusterPlus  实现一致性聚类"></a>用 R 包 ConsensusClusterPlus  实现一致性聚类</h2><h3 id="准备输入数据"><a href="#准备输入数据" class="headerlink" title="准备输入数据"></a>准备输入数据</h3><p>输入数据需要是一个矩阵，列是样本，行是特征，这里使用 ALL 的基因表达数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>ALL<span class="hljs-punctuation">)</span><br>data<span class="hljs-punctuation">(</span>ALL<span class="hljs-punctuation">)</span><br>d<span class="hljs-operator">=</span>exprs<span class="hljs-punctuation">(</span>ALL<span class="hljs-punctuation">)</span><br>d<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>              <span class="hljs-number">01005</span>    <span class="hljs-number">01010</span>    <span class="hljs-number">03002</span>    <span class="hljs-number">04006</span>    <span class="hljs-number">04007</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1000</span>_at   <span class="hljs-number">7.597323</span> <span class="hljs-number">7.479445</span> <span class="hljs-number">7.567593</span> <span class="hljs-number">7.384684</span> <span class="hljs-number">7.905312</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1001</span>_at   <span class="hljs-number">5.046194</span> <span class="hljs-number">4.932537</span> <span class="hljs-number">4.799294</span> <span class="hljs-number">4.922627</span> <span class="hljs-number">4.844565</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1002</span>_f_at <span class="hljs-number">3.900466</span> <span class="hljs-number">4.208155</span> <span class="hljs-number">3.886169</span> <span class="hljs-number">4.206798</span> <span class="hljs-number">3.416923</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1003</span>_s_at <span class="hljs-number">5.903856</span> <span class="hljs-number">6.169024</span> <span class="hljs-number">5.860459</span> <span class="hljs-number">6.116890</span> <span class="hljs-number">5.687997</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1004</span>_at   <span class="hljs-number">5.925260</span> <span class="hljs-number">5.912780</span> <span class="hljs-number">5.893209</span> <span class="hljs-number">6.170245</span> <span class="hljs-number">5.615210</span><br></code></pre></td></tr></table></figure><p>为了选择更有信息的基因进行样本的分类，我们依据 MAD（median absolute deviation，中位数绝对偏差，每个样本点离中位数的绝对值的中位数）来选择变化最大的前5000个基因（也可以使用其他的筛选指标）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">mads<span class="hljs-operator">=</span>apply<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>mad<span class="hljs-punctuation">)</span><br>d<span class="hljs-operator">=</span>d<span class="hljs-punctuation">[</span>rev<span class="hljs-punctuation">(</span>order<span class="hljs-punctuation">(</span>mads<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5000</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment">##中位数中心化</span><br>d <span class="hljs-operator">=</span> sweep<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> apply<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>median<span class="hljs-punctuation">,</span>na.rm<span class="hljs-operator">=</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="运行-ConsensusClusterPlus"><a href="#运行-ConsensusClusterPlus" class="headerlink" title="运行 ConsensusClusterPlus"></a>运行 <code>ConsensusClusterPlus</code></h3><p>接下来就需要选择参数来运行一致性聚类：</p><ul><li>pItem：重抽样样本的比例，设置为 80%</li><li>pFeature：重抽样特征的比例，设置为 80%</li><li>maxK：最大评估的类别数（k），设为 6</li><li>reps：对每个 k 的迭代次数，选择 50</li><li>clusterAlg：聚类算法，选择层次聚类</li><li>distance：聚类距离，选择 Pearson 相关距离</li><li>title：图和文件存放的位置</li></ul><p>在实际情况中需要设置更高的迭代次数（一般可以设 1000）和更大的聚类数量。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>ConsensusClusterPlus<span class="hljs-punctuation">)</span><br>title<span class="hljs-operator">=</span><span class="hljs-string">&quot;./fig&quot;</span><br>results <span class="hljs-operator">=</span> ConsensusClusterPlus<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">,</span>maxK<span class="hljs-operator">=</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span>reps<span class="hljs-operator">=</span><span class="hljs-number">50</span><span class="hljs-punctuation">,</span>pItem<span class="hljs-operator">=</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">,</span>pFeature<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>title<span class="hljs-operator">=</span>title<span class="hljs-punctuation">,</span>clusterAlg<span class="hljs-operator">=</span><span class="hljs-string">&quot;hc&quot;</span><span class="hljs-punctuation">,</span>distance<span class="hljs-operator">=</span><span class="hljs-string">&quot;pearson&quot;</span><span class="hljs-punctuation">,</span>seed<span class="hljs-operator">=</span><span class="hljs-number">1262118388.71279</span><span class="hljs-punctuation">,</span>plot<span class="hljs-operator">=</span><span class="hljs-string">&quot;png&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> end fraction<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> clustered<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> clustered<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> clustered<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> clustered<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> clustered<br></code></pre></td></tr></table></figure><p>输出是一个列表，其中的元素是每个 k 的运行结果，包括一致性矩阵，一致性聚类结果等：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##我们可以获取其一致性矩阵</span><br>results<span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;consensusMatrix&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>      <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>      <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span>      <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span>     <span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">0.8947368</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">1.000000</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">0.9142857</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">1.000000</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">0.8947368</span> <span class="hljs-number">0.9142857</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">0.8857143</span> <span class="hljs-number">0.969697</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">0.8857143</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">1.000000</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">0.9696970</span> <span class="hljs-number">1.0000000</span> <span class="hljs-number">1.000000</span><br><br><span class="hljs-comment">##一致性聚类结果</span><br>results<span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;consensusClass&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">01005</span> <span class="hljs-number">01010</span> <span class="hljs-number">03002</span> <span class="hljs-number">04006</span> <span class="hljs-number">04007</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="计算一致性汇总统计量"><a href="#计算一致性汇总统计量" class="headerlink" title="计算一致性汇总统计量"></a>计算一致性汇总统计量</h3><p>汇总统计量包括：聚类一致性（cluster consensus）和样本一致性（item consensus）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs r">icl <span class="hljs-operator">=</span> calcICL<span class="hljs-punctuation">(</span>results<span class="hljs-punctuation">,</span>title<span class="hljs-operator">=</span>title<span class="hljs-punctuation">,</span>plot<span class="hljs-operator">=</span><span class="hljs-string">&quot;png&quot;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##返回有两个元素的列表</span><br>icl<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;clusterConsensus&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       k cluster clusterConsensus<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span>       <span class="hljs-number">1</span>        <span class="hljs-number">0.7681668</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span>       <span class="hljs-number">2</span>        <span class="hljs-number">0.9788274</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span>       <span class="hljs-number">1</span>        <span class="hljs-number">0.6176820</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span>       <span class="hljs-number">2</span>        <span class="hljs-number">0.9190744</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span>       <span class="hljs-number">3</span>        <span class="hljs-number">1.0000000</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span>       <span class="hljs-number">1</span>        <span class="hljs-number">0.8446083</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span>       <span class="hljs-number">2</span>        <span class="hljs-number">0.9067267</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span>       <span class="hljs-number">3</span>        <span class="hljs-number">0.6612850</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span>       <span class="hljs-number">4</span>        <span class="hljs-number">1.0000000</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span>       <span class="hljs-number">1</span>        <span class="hljs-number">0.8175802</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">11</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span>       <span class="hljs-number">2</span>        <span class="hljs-number">0.9066489</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">12</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span>       <span class="hljs-number">3</span>        <span class="hljs-number">0.6062040</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">13</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span>       <span class="hljs-number">4</span>        <span class="hljs-number">0.8154580</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">14</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span>       <span class="hljs-number">5</span>        <span class="hljs-number">1.0000000</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">6</span>       <span class="hljs-number">1</span>        <span class="hljs-number">0.7511726</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">16</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">6</span>       <span class="hljs-number">2</span>        <span class="hljs-number">0.8802040</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">17</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">6</span>       <span class="hljs-number">3</span>        <span class="hljs-number">0.7410730</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">18</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">6</span>       <span class="hljs-number">4</span>        <span class="hljs-number">0.8154580</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">19</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">6</span>       <span class="hljs-number">5</span>        <span class="hljs-number">0.7390864</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span> <span class="hljs-number">6</span>       <span class="hljs-number">6</span>        <span class="hljs-number">1.0000000</span><br>icl<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;itemConsensus&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   k cluster  item itemConsensus<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>       <span class="hljs-number">1</span> <span class="hljs-number">28031</span>     <span class="hljs-number">0.6173782</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>       <span class="hljs-number">1</span> <span class="hljs-number">28023</span>     <span class="hljs-number">0.5797202</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span>       <span class="hljs-number">1</span> <span class="hljs-number">43012</span>     <span class="hljs-number">0.5961974</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span>       <span class="hljs-number">1</span> <span class="hljs-number">28042</span>     <span class="hljs-number">0.5644619</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span>       <span class="hljs-number">1</span> <span class="hljs-number">28047</span>     <span class="hljs-number">0.6259350</span><br></code></pre></td></tr></table></figure><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><p>在我们运行上面的 <code>ConsensusClusterPlus</code> 时指定输出的路径（title）和 plot 不为 None 时，就会在指定的路径中生成图片：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210831191516691.png"></p><p>第一个图（consensus001）是依据一致性矩阵生成的热图的图例，后面（002-006）是不同 k 的一致性矩阵热图：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210831192023694.png"></p><h3 id="决定聚类的数目"><a href="#决定聚类的数目" class="headerlink" title="决定聚类的数目"></a>决定聚类的数目</h3><p>前面也讲过，对于一个 “完美” 的一致性矩阵，里面的值应该只有 0 和 1，因此我们可以看在不同的 k 时得到的一致性矩阵偏离这个完美状态的程度来衡量聚类的稳定性。对于一致性矩阵中值的分布可以使用累计密度函数（CDF）来衡量（生成文件 consensus007）：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/consensus007.png"><br>更进一步量化可以计算随着聚类数量的增加 CDF 的曲线下面积的相对变化值，然后根据 “拐点法” 来选择最优的聚类数量（consensus008)：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/consensus008.png"><br>上图说明可以选择 4 或者 5 类作为最终的聚类数量。</p><p>另一个图是 Tracking Plot（consensus009），列是样本，行是每个 k 值，颜色表示在一致性矩阵中的类别，因此这个图展示了在不同的 k 的情况下，样本所属的类的变化，如果样本的类别经常变化，说明该样本是不稳定的样本，含有大量这种样本的类也是不稳定的类：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/consensus009.png"></p><p>还有两个图就是前面展示的汇总统计量，聚类一致性和样本一致性的可视化：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/icl003.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/icl001.png"></p>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
      <category>统计学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【hands on ML Ch7】- 集成学习</title>
    <link href="/2021/08/24/hands_on_ml_ch7/"/>
    <url>/2021/08/24/hands_on_ml_ch7/</url>
    
    <content type="html"><![CDATA[<p>hands on ML 第七章，集成学习和随机森林</p><span id="more"></span><p>集成学习就是将一系列的预测器按照某种方式聚合在一起，从而期望结果比单个预测器的效果要好；比如我们可以在训练集中随机选取的子集上训练一系列的决策树分类器，然后获取所有树的预测，对于某一个实例，将其多数分类器预测的结果作为最终的预测结果(这种集成学习方法也叫做随机森林)，这一章将讲解常用的集成方法，包括：bagging，boosting 和 stacking。</p><h2 id="Voting-Classifiers"><a href="#Voting-Classifiers" class="headerlink" title="Voting Classifiers"></a>Voting Classifiers</h2><p>上面那个例子就是一个多数表决分类器( majority-vote classifier)，更一般的说就是在训练集上训练多个不同的模型，最后对某个实例的预测是基于所有模型预测值的 “投票结果” 来决定，多数表决分类器又叫硬投票分类器(hard voting classifier)：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210309170505986.png"></p><p>为什么集成学习比单个的(弱)学习器的效果要好？可以从下面这个例子来理解：</p><p>假设我们有一个硬币,每次抛硬币有51%的可能是正面朝上,有49%的可能是反面朝上;扔1000次,大部分朝上(朝上的硬币数目大于500)的概率为：</p><p>$$<br>P(X&gt;500) &#x3D; 1-binom(500,1000,0.51)<br>$$<br>在R里面计算得到概率为：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-number">1</span><span class="hljs-operator">-</span>pbinom<span class="hljs-punctuation">(</span><span class="hljs-number">500</span><span class="hljs-punctuation">,</span><span class="hljs-number">1000</span><span class="hljs-punctuation">,</span><span class="hljs-number">0.51</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">0.7260986</span><br></code></pre></td></tr></table></figure><p>同理在扔10000次后，得到硬币大部分朝上的概率为：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-number">1</span><span class="hljs-operator">-</span>pbinom<span class="hljs-punctuation">(</span><span class="hljs-number">5000</span><span class="hljs-punctuation">,</span><span class="hljs-number">10000</span><span class="hljs-punctuation">,</span><span class="hljs-number">0.51</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">0.9767183</span><br></code></pre></td></tr></table></figure><p>进行的实验次数越多，这个概率就越大(大数定理)</p><p>现在我们想像：有1000个分类器,每个分类器正确预测的概率为51%,如果我们按照多数投票规则来整合1000个分类器，那么准确率可以达到72%(有超过一半预测的是正确的概率);但是这个前提是这些分类器是相互独立的,但在实际情况中很难保证这一点(因为我们的模型都是在同一个数据上训练的，一种增强独立性的策略就是使用多个非常不同的分类器)。</p><p>下面以 moons 数据集为例，训练 3 个不同的分类器（随机森林，逻辑回归和支持向量机），然后再使用硬投票的方式得到最终的预测结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier <br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> VotingClassifier <br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression <br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> make_moons<br><br>X, y = make_moons(n_samples=<span class="hljs-number">500</span>, noise=<span class="hljs-number">0.30</span>, random_state=<span class="hljs-number">42</span>)<br>X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="hljs-number">42</span>)<br><br><br>log_clf = LogisticRegression(random_state=<span class="hljs-number">42</span>) <br>rnd_clf = RandomForestClassifier(random_state=<span class="hljs-number">42</span>) <br>svm_clf = SVC(random_state=<span class="hljs-number">42</span>) <br>voting_clf = VotingClassifier(estimators=[(<span class="hljs-string">&#x27;lr&#x27;</span>, log_clf),<br>                                          (<span class="hljs-string">&#x27;rf&#x27;</span>, rnd_clf), <br>                                          (<span class="hljs-string">&#x27;svc&#x27;</span>, svm_clf)], <br>                              voting=<span class="hljs-string">&#x27;hard&#x27;</span>) <br><br>voting_clf.fit(X_train, y_train)<br>&gt;&gt; VotingClassifier(estimators=[(<span class="hljs-string">&#x27;lr&#x27;</span>, LogisticRegression(random_state=<span class="hljs-number">42</span>)),<br>&gt;&gt;                              (<span class="hljs-string">&#x27;rf&#x27;</span>, RandomForestClassifier(random_state=<span class="hljs-number">42</span>)),<br>&gt;&gt;                              (<span class="hljs-string">&#x27;svc&#x27;</span>, SVC(random_state=<span class="hljs-number">42</span>))])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><span class="hljs-keyword">for</span> clf <span class="hljs-keyword">in</span> (log_clf, rnd_clf, svm_clf, voting_clf):<br>  clf.fit(X_train, y_train)<br>  y_pred = clf.predict(X_test)<br>  <span class="hljs-built_in">print</span>(clf.__class__.__name__, accuracy_score(y_test, y_pred))<br>&gt;&gt; LogisticRegression(random_state=<span class="hljs-number">42</span>)<br>&gt;&gt; LogisticRegression <span class="hljs-number">0.864</span><br>&gt;&gt; RandomForestClassifier(random_state=<span class="hljs-number">42</span>)<br>&gt;&gt; RandomForestClassifier <span class="hljs-number">0.896</span><br>&gt;&gt; SVC(random_state=<span class="hljs-number">42</span>)<br>&gt;&gt; SVC <span class="hljs-number">0.896</span><br>&gt;&gt; VotingClassifier(estimators=[(<span class="hljs-string">&#x27;lr&#x27;</span>, LogisticRegression(random_state=<span class="hljs-number">42</span>)),<br>&gt;&gt;                              (<span class="hljs-string">&#x27;rf&#x27;</span>, RandomForestClassifier(random_state=<span class="hljs-number">42</span>)),<br>&gt;&gt;                              (<span class="hljs-string">&#x27;svc&#x27;</span>, SVC(random_state=<span class="hljs-number">42</span>))])<br>&gt;&gt; VotingClassifier <span class="hljs-number">0.912</span><br></code></pre></td></tr></table></figure><p>可以看到投票分类器的精度比 3 个单独的模型都有提升。</p><p>如果单独的模型都可以估计每个类的概率（也就是有 <code>predict_proba()</code>方法），那么就可以对每个类取所有分类器的概率的均值，然后取均值最大的那一类（也可以通过 <code>weights</code> 来指定每个分类器的权重），比如有 3 个分类器进行 3 分类的问题，<code>weight</code> 使用默认的（每个分类器权重一样）：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210803182813097.png"></p><p>最终加权平均后的有最大概率的类为 2，所以分类的结果是 2，这种投票方式叫做软投票。</p><p>将上面的例子改为软投票，需要将 <code>voting</code> 参数改为 <code>soft</code>，并且注意支持向量机默认是不计算概率的，需要设置 <code>probability</code> 参数为 True（用交叉验证来估计类的概率）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">svm_clf = SVC(probability=<span class="hljs-literal">True</span>,random_state=<span class="hljs-number">42</span>) <br><br><br>voting_clf = VotingClassifier(estimators=[(<span class="hljs-string">&#x27;lr&#x27;</span>, log_clf),          (<span class="hljs-string">&#x27;rf&#x27;</span>, rnd_clf), (<span class="hljs-string">&#x27;svc&#x27;</span>, svm_clf)], <br>         voting=<span class="hljs-string">&#x27;soft&#x27;</span>) <br><br>voting_clf.fit(X_train, y_train)<br>&gt;&gt; VotingClassifier(estimators=[(<span class="hljs-string">&#x27;lr&#x27;</span>, LogisticRegression(random_state=<span class="hljs-number">42</span>)),<br>&gt;&gt;                              (<span class="hljs-string">&#x27;rf&#x27;</span>, RandomForestClassifier(random_state=<span class="hljs-number">42</span>)),<br>&gt;&gt;                              (<span class="hljs-string">&#x27;svc&#x27;</span>, SVC(probability=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">42</span>))],<br>&gt;&gt;                  voting=<span class="hljs-string">&#x27;soft&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> clf <span class="hljs-keyword">in</span> (log_clf, rnd_clf, svm_clf, voting_clf):<br>  clf.fit(X_train, y_train)<br>  y_pred = clf.predict(X_test)<br>  <span class="hljs-built_in">print</span>(clf.__class__.__name__, accuracy_score(y_test, y_pred))<br>&gt;&gt; LogisticRegression(random_state=<span class="hljs-number">42</span>)<br>&gt;&gt; LogisticRegression <span class="hljs-number">0.864</span><br>&gt;&gt; RandomForestClassifier(random_state=<span class="hljs-number">42</span>)<br>&gt;&gt; RandomForestClassifier <span class="hljs-number">0.896</span><br>&gt;&gt; SVC(probability=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">42</span>)<br>&gt;&gt; SVC <span class="hljs-number">0.896</span><br>&gt;&gt; VotingClassifier(estimators=[(<span class="hljs-string">&#x27;lr&#x27;</span>, LogisticRegression(random_state=<span class="hljs-number">42</span>)),<br>&gt;&gt;                              (<span class="hljs-string">&#x27;rf&#x27;</span>, RandomForestClassifier(random_state=<span class="hljs-number">42</span>)),<br>&gt;&gt;                              (<span class="hljs-string">&#x27;svc&#x27;</span>, SVC(probability=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">42</span>))],<br>&gt;&gt;                  voting=<span class="hljs-string">&#x27;soft&#x27;</span>)<br>&gt;&gt; VotingClassifier <span class="hljs-number">0.92</span><br></code></pre></td></tr></table></figure><p>可以看到精度进一步提升了。</p><h2 id="Bagging-and-Pasting"><a href="#Bagging-and-Pasting" class="headerlink" title="Bagging and Pasting"></a>Bagging and Pasting</h2><p>前面讲过可以通过选择不同的预测器来增加模型间的独立性，另一种方法是使用同一种预测器，但是在训练集的随机选择的不同子集上进行训练；当这种随机选择为有放回的抽样时，这种方法叫做 <strong>bagging</strong>（bootstrap aggregating 缩写），当为不放回抽样时，这种方法叫做 <strong>pasting</strong>（也就是说对于 bagging ，一个预测器的训练样本中可能会有相同的样本点）。</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210803185335885.png"></p><p>当所有的预测器都被训练之后，新的实例进入时就可以聚合所有的预测器的结果做出最终的预测。对于分类问题，这个聚合函数就是和前面类似的硬投票方法（如果可以预测概率，还是使用软投票），对于回归问题，聚合函数就是所有预测值的平均。通常来说，聚合后的模型和单个模型有个相似的偏差（bias），但是 variance 更小，另外从上面图也可以看出：预测器可以并行地训练（在不同的 CPU，甚至不同的服务器上）。</p><p>在 Scikit-Learn 中可以使用 <code>BaggingClassifier</code> 类（或者 <code>BaggingRegressor</code> 回归）来进行 bagging 和 pasting；下面的代码训练了 500 个决策树模型，每一个在随机抽取的 100 个样本（有放回，如果将 <code>bootstrap</code><br>设为 False，那么进行的就是无放回的 pasting）中训练，<code>n_jobs</code> 表示使用的 CPU 核数（-1 表示使用所有的 CPU，在windows 上好像不行）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> BaggingClassifier<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br><br>bag_clf = BaggingClassifier( DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>),<br>                             n_estimators=<span class="hljs-number">500</span>, <br>                             max_samples=<span class="hljs-number">100</span>, <br>                             bootstrap=<span class="hljs-literal">True</span>,random_state=<span class="hljs-number">42</span>)<br>                             <br>bag_clf.fit(X_train, y_train)<br>&gt;&gt; BaggingClassifier(base_estimator=DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>),<br>&gt;&gt;                   max_samples=<span class="hljs-number">100</span>, n_estimators=<span class="hljs-number">500</span>, random_state=<span class="hljs-number">42</span>)<br>y_pred = bag_clf.predict(X_test)<br>accuracy_score(y_test, y_pred)<br>&gt;&gt; <span class="hljs-number">0.904</span><br></code></pre></td></tr></table></figure><p>在使用 bagging 时，有些实例可能会被抽到多次而另一些实例可能根本不会被抽到；在 <code>BaggingClassifier</code> 中默认是有放回地抽取 n 个训练实例（n 也是训练集的大小），因此平均来说，对于每个预测器大概只有 63% 的实例被抽到，剩下的 37% 的实例就叫做 out-of-bag (oob) 实例；由于这些实例没有被抽取作为训练样本，所以可以在这些实例上进行模型的评估。</p><blockquote><p>为什么是 63%？</p></blockquote><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/473522c600135107452b432799ecabd.jpg"></p><p>可以设置 <code>obb_score</code> 为 True 来让 <code>BaggingClassifier</code> 进行自动的 oob 评估，计算的结果保存在 <code>oob_score_</code> 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">bag_clf = BaggingClassifier(<br>  DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>),<br>  n_estimators=<span class="hljs-number">500</span>, <br>  bootstrap=<span class="hljs-literal">True</span>,random_state=<span class="hljs-number">42</span>,oob_score=<span class="hljs-literal">True</span><br>)<br><br>bag_clf.fit(X_train,y_train)<br>&gt;&gt; BaggingClassifier(base_estimator=DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>),<br>&gt;&gt;                   n_estimators=<span class="hljs-number">500</span>, oob_score=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">42</span>)<br>bag_clf.oob_score_<br>&gt;&gt; <span class="hljs-number">0.896</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##验证一下</span><br>y_pred = bag_clf.predict(X_test)<br>accuracy_score(y_test,y_pred)<br>&gt;&gt; <span class="hljs-number">0.92</span><br></code></pre></td></tr></table></figure><p><code>BaggingClassifier</code> 除了可以对实例进行抽样外，还支持对特征进行抽样，需要将 <code>max_samples</code> 和<code>bootstrap</code> 替换成 <code>max_features</code> 和 <code>bootstrap_features</code> ，这种方法对处理高维数据时是比较有用的。同时对实例和特征进行抽样的方法叫做 Random Patches，只对特征抽样的方法叫做 Random Subspaces。</p><h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h2><p>随机森林是决策树的集成，通常是通过 bagging 方法进行训练，max_sample 设置为全部的训练集大小。可以使用 <code>RandomForestClassifier</code> 类来训练随机森林模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><br>rnd_clf = RandomForestClassifier(n_estimators=<span class="hljs-number">500</span>, max_leaf_nodes=<span class="hljs-number">16</span>)<br>rnd_clf.fit(X_train, y_train)<br>&gt;&gt; RandomForestClassifier(max_leaf_nodes=<span class="hljs-number">16</span>, n_estimators=<span class="hljs-number">500</span>)<br>y_pred_rf = rnd_clf.predict(X_test)<br></code></pre></td></tr></table></figure><p><code>RandomForestClassifier</code> 类除了有着 <code>DecisionTreeClassifier</code> 类的控制树生长的超参数外，还有<code>BaggingClassifier</code> 类中控制集成的超参数，但是在随机森林中有一些超参数被固定下来：<code>splitter</code> 被固定为 <code>random</code>（在随机选取的部分特征中寻找最优分割点），<code>max_samples</code> 设定为 1，<code>base_estimator</code> 设定为 <code>DecisionTreeClassifier</code>。因此下面的 <code>BaggingClassifier</code> 和上面的随机森林几乎是一样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">bag_clf = BaggingClassifier( DecisionTreeClassifier(splitter=<span class="hljs-string">&quot;random&quot;</span>, max_leaf_nodes=<span class="hljs-number">16</span>), n_estimators=<span class="hljs-number">500</span>, max_samples=<span class="hljs-number">1.0</span>, bootstrap=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>随机森林是在随机选取的一部分特征中寻找最优分割点构建决策树，还有一种更随机的情况：在选取的特征中使用随机的分割点来构建树（两次随机）；这种方法叫做 Extremely Randomized Trees （Extra-Trees），具有更高的 bias 和 更低的 variance（随机性越大，越容易 “脱靶” ，也就是偏离要找的真实的函数空间，但是由于各个树模型之间的相关性降低，整个模型的 variance 也会降低），另外这种方法的训练时间也比较短（不需要花费大量时间来寻找最优分割点）。在 <code>Scikit-learn</code> 中可以使用 <code>ExtraTreesClassifier</code> 或 <code>ExtraTreesRegressor</code> 类进行训练 <code>Extra-Trees</code> 模型。</p><p>随机森林另一个比较好的特性是可以比较容易的衡量特征的相对重要性。Scikit-learn 通过计算<strong>在森林的所有的树中使用某个特征的树节点平均减少的不纯度来衡量特征的重要性</strong> （使用该特征来分割的所有节点的基尼指数变化量的平均值）。Scikit-learn 在训练之后会自动计算这个值，然后再进行归一化使得所有的重要性加和为 1，可以通过 <code>feature_importances_</code> 来获取特征重要性的值，下面是在鸢尾花数据集上使用随机森林计算特征重要性的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_iris<br>iris = load_iris()<br>rnd_clf = RandomForestClassifier(n_estimators=<span class="hljs-number">500</span>)<br>rnd_clf.fit(iris[<span class="hljs-string">&quot;data&quot;</span>], iris[<span class="hljs-string">&quot;target&quot;</span>])<br>&gt;&gt; RandomForestClassifier(n_estimators=<span class="hljs-number">500</span>)<br><span class="hljs-keyword">for</span> name, score <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(iris[<span class="hljs-string">&quot;feature_names&quot;</span>], rnd_clf.feature_importances_):<br>  <span class="hljs-built_in">print</span>(name, score)<br>&gt;&gt; sepal length (cm) <span class="hljs-number">0.10814410934379921</span><br>&gt;&gt; sepal width (cm) <span class="hljs-number">0.023458740913181834</span><br>&gt;&gt; petal length (cm) <span class="hljs-number">0.4285690228014531</span><br>&gt;&gt; petal width (cm) <span class="hljs-number">0.43982812694156587</span><br></code></pre></td></tr></table></figure><h2 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h2><p>Boosting 指的是能够将多个弱学习器聚合成一个强的学习器的任何集成方法；大部分 Boosting 方法的思想是：依次训练预测器，每一个预测器都力求在前一个基础上有所提升。目前有很多 boosting 方法，最流行的是 <strong>AdaBoost</strong> 和 梯度提升  <strong>Gradient Boosting</strong>）。</p><h3 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h3><p>对于一个新的预测器要去纠正前面的预测器的一种方法就是更关注那些前一个预测器欠拟合的实例，因此新的预测器就会越来越关注那些难分类的实例，这种技术就叫做 AdaBoost。</p><p>简单来说：当训练一个 AdaBoost 分类器的时候，首先训练一个基分类器，用这个基分类器在训练集上做预测，然后上调这个分类器误分类样本的权重，接着基于这些更新的权重训练第二个分类器，重复这个步骤直到错误率不再降低；当所有的预测器都训练完了，就可以组合这些预测器得到最终的集成模型（每个预测器的权重由该预测器的错误率计算得到）如下图：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210822103038087.png"></p><p>用数学表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210822111723135.png"></p><p>在 Scikit-learn 中 AdaBoost 的多分类版本为 SAMME （Stagewise Additive Modeling using a Multiclass Exponential loss function），当需要估计类别概率时使用的是 SAMME 的变体 SAMME.R。下面的代码使用了 <code>AdaBoostClassifier</code> 类，基分类器为深度为 1 的决策树（只有一个节点）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> AdaBoostClassifier<br><br>ada_clf = AdaBoostClassifier(<br>  DecisionTreeClassifier(max_depth=<span class="hljs-number">1</span>),<br>  n_estimators=<span class="hljs-number">200</span>, <br>  algorithm=<span class="hljs-string">&quot;SAMME.R&quot;</span>,<br>  learning_rate=<span class="hljs-number">0.5</span>) <br><br>ada_clf.fit(X_train, y_train)<br>&gt;&gt; AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=<span class="hljs-number">1</span>),<br>&gt;&gt;                    learning_rate=<span class="hljs-number">0.5</span>, n_estimators=<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><h3 id="Gradient-Boosting"><a href="#Gradient-Boosting" class="headerlink" title="Gradient Boosting"></a>Gradient Boosting</h3><p>Gradient Boosting 和 AdaBoost 类似，也是通过逐步加入新的预测器，每一个预测器对前一个进行矫正使结果变好，但是和 AdaBoost 不同的是 Gradient Boosting 并不是通过更新实例的权重而是通过<strong>拟合前一个预测器的残差（residual errors）</strong>。</p><p>下面以一个回归的任务为例，使用决策树作为基预测器（这样的模型叫做<strong>Gradient Tree Boosting</strong> 或 **Gradient Boosted Regression Trees (GBRT)**），首先对训练数据应用决策树回归，然后计算残差，接着再对残差应用第二个决策树回归，计算第二个模型的残差，再用第三个决策树回归：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##创建数据</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>np.random.seed(<span class="hljs-number">42</span>)<br>X = np.random.rand(<span class="hljs-number">100</span>, <span class="hljs-number">1</span>) - <span class="hljs-number">0.5</span><br>y = <span class="hljs-number">3</span>*X[:, <span class="hljs-number">0</span>]**<span class="hljs-number">2</span> + <span class="hljs-number">0.05</span> * np.random.randn(<span class="hljs-number">100</span>)<br><br><span class="hljs-comment">##对训练集应用决策树回归</span><br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeRegressor<br><br>tree_reg1 = DecisionTreeRegressor(max_depth=<span class="hljs-number">2</span>, random_state=<span class="hljs-number">42</span>)<br>tree_reg1.fit(X, y)<br><br><span class="hljs-comment">##计算残差，应用决策树到残差</span><br>&gt;&gt; DecisionTreeRegressor(max_depth=<span class="hljs-number">2</span>, random_state=<span class="hljs-number">42</span>)<br>y2 = y - tree_reg1.predict(X)<br>tree_reg2 = DecisionTreeRegressor(max_depth=<span class="hljs-number">2</span>, random_state=<span class="hljs-number">42</span>)<br>tree_reg2.fit(X, y2)<br><br><span class="hljs-comment">##继续</span><br>&gt;&gt; DecisionTreeRegressor(max_depth=<span class="hljs-number">2</span>, random_state=<span class="hljs-number">42</span>)<br>y3 = y2 - tree_reg2.predict(X)<br>tree_reg3 = DecisionTreeRegressor(max_depth=<span class="hljs-number">2</span>, random_state=<span class="hljs-number">42</span>)<br>tree_reg3.fit(X, y3)<br>&gt;&gt; DecisionTreeRegressor(max_depth=<span class="hljs-number">2</span>, random_state=<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><p>现在我们有 3 个决策树集成的模型，在预测时只需要将 3 个树的预测相加就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">X_new = np.array([[<span class="hljs-number">0.8</span>]])<br>y_pred = <span class="hljs-built_in">sum</span>(tree.predict(X_new) <span class="hljs-keyword">for</span> tree <span class="hljs-keyword">in</span> (tree_reg1, tree_reg2, tree_reg3))<br>y_pred<br>&gt;&gt; array([<span class="hljs-number">0.75026781</span>])<br></code></pre></td></tr></table></figure><p>下图是各个树以及其集成的结果：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210823084836674.png"></p><p>训练 GBRT 的更简单的方式是调用 Scikit-learn 中的 <code>GradientBoostingRegressor</code> 类，和随机森林一样，这个类也有控制决策树生长的参数（深度，最小叶子节点大小等）和控制集成训练的参数（预测器的数量等）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> GradientBoostingRegressor<br><br>gbrt = GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">3</span>, learning_rate=<span class="hljs-number">1.0</span>, random_state=<span class="hljs-number">42</span>)<br>gbrt.fit(X, y)<br>&gt;&gt; GradientBoostingRegressor(learning_rate=<span class="hljs-number">1.0</span>, max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">3</span>,<br>&gt;&gt;                           random_state=<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><p>注意这个 <code>learning_rate</code> 超参数，这个超参数会缩放每个预测器的贡献，它是和 <code>n_estimators</code> 超参数相对应的，当学习率设的较小时，就需要更多的预测器来拟合数据，这种正则化的技术叫做收缩（shrinkage）。<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210823090136193.png"></p><p><code>GradientBoostingRegressor</code> 也有 <code>subsample</code> 超参数，来指定训练每个树时随机抽取的实例数量，使用随机抽取的样本来训练 Gradient Boosting 的方法叫做 <strong>Stochastic Gradient Boosting</strong>。</p><h4 id="Early-stopping"><a href="#Early-stopping" class="headerlink" title="Early stopping"></a>Early stopping</h4><p>为了找到较优的树数量，我们可以使用 early stop 的方法，对于 GBRT 有两种策略：</p><ol><li>使用 <code>staged_predict()</code> 方法，该方法返回一个在集成模型训练的每个步骤（逐步增加树的数量）做出的预测的迭代器，然后在这些步骤中挑出最好的一步，接着使用这个最佳的参数来训练模型：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><br>X_train, X_val, y_train, y_val = train_test_split(X, y, random_state=<span class="hljs-number">49</span>)<br><br>gbrt = GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">120</span>, random_state=<span class="hljs-number">42</span>)<br>gbrt.fit(X_train, y_train)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">120</span>, random_state=<span class="hljs-number">42</span>)<br>errors = [mean_squared_error(y_val, y_pred)<br>          <span class="hljs-keyword">for</span> y_pred <span class="hljs-keyword">in</span> gbrt.staged_predict(X_val)]<br>bst_n_estimators = np.argmin(errors) + <span class="hljs-number">1</span><br><br>gbrt_best = GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=bst_n_estimators, random_state=<span class="hljs-number">42</span>)<br>gbrt_best.fit(X_train, y_train)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">56</span>, random_state=<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">bst_n_estimators<br>&gt;&gt; <span class="hljs-number">56</span><br></code></pre></td></tr></table></figure><p>下面是每一个步骤的验证误差以及使用最佳树数量训练的模型：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210823091010369.png"></p><ol start="2"><li>上面讲到的方法实际上不是真正的 early stop，因为它是训练完所有的模型后再选出来的；我们可以使用<br><code>warm_start=True</code> 来进行<strong>增量学习</strong>，也就是在增加树的数量时是在之前已经训练好的结果上增加树继续训练，下面的例子展示了当验证误差在 5 轮迭代中（每一次迭代增加树的数量）没有减少时就停止训练：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs python">gbrt = GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, warm_start=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">42</span>)<br><br>min_val_error = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>)<br>error_going_up = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> n_estimators <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">120</span>):<br>    gbrt.n_estimators = n_estimators<br>    gbrt.fit(X_train, y_train)<br>    y_pred = gbrt.predict(X_val)<br>    val_error = mean_squared_error(y_val, y_pred)<br>    <span class="hljs-keyword">if</span> val_error &lt; min_val_error:<br>        min_val_error = val_error<br>        error_going_up = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        error_going_up += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> error_going_up == <span class="hljs-number">5</span>:<br>            <span class="hljs-keyword">break</span>  <span class="hljs-comment"># early </span><br>          <br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">1</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">2</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">3</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">4</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">5</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">6</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">7</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">8</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">9</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">10</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">11</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">12</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">13</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">14</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">15</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">16</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">17</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">18</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">19</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">20</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">21</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">22</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">23</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">24</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">25</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">26</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">27</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">28</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">29</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">30</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">31</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">32</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">33</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">34</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">35</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">36</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">37</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">38</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">39</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">40</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">41</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">42</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">43</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">44</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">45</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">46</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">47</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">48</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">49</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">50</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">51</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">52</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">53</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">54</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">55</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">56</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">57</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">58</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">59</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">60</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br>&gt;&gt; GradientBoostingRegressor(max_depth=<span class="hljs-number">2</span>, n_estimators=<span class="hljs-number">61</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                           warm_start=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(gbrt.n_estimators)<br>&gt;&gt; <span class="hljs-number">61</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Minimum validation MSE:&quot;</span>, min_val_error)<br>&gt;&gt; Minimum validation MSE: <span class="hljs-number">0.002712853325235463</span><br></code></pre></td></tr></table></figure><p>除了 Scikit-learn 中提供的接口之外，我们还可以使用 <code>XGBoost</code> 提供的优化的梯度提升实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xgboost<br>xgb_reg = xgboost.XGBRegressor(random_state=<span class="hljs-number">42</span>)<br>xgb_reg.fit(X_train, y_train)<br>&gt;&gt; XGBRegressor(base_score=<span class="hljs-number">0.5</span>, booster=<span class="hljs-string">&#x27;gbtree&#x27;</span>, colsample_bylevel=<span class="hljs-number">1</span>,<br>&gt;&gt;              colsample_bynode=<span class="hljs-number">1</span>, colsample_bytree=<span class="hljs-number">1</span>, gamma=<span class="hljs-number">0</span>, gpu_id=-<span class="hljs-number">1</span>,<br>&gt;&gt;              importance_type=<span class="hljs-string">&#x27;gain&#x27;</span>, interaction_constraints=<span class="hljs-string">&#x27;&#x27;</span>,<br>&gt;&gt;              learning_rate=<span class="hljs-number">0.300000012</span>, max_delta_step=<span class="hljs-number">0</span>, max_depth=<span class="hljs-number">6</span>,<br>&gt;&gt;              min_child_weight=<span class="hljs-number">1</span>, missing=nan, monotone_constraints=<span class="hljs-string">&#x27;()&#x27;</span>,<br>&gt;&gt;              n_estimators=<span class="hljs-number">100</span>, n_jobs=<span class="hljs-number">12</span>, num_parallel_tree=<span class="hljs-number">1</span>, random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;              reg_alpha=<span class="hljs-number">0</span>, reg_lambda=<span class="hljs-number">1</span>, scale_pos_weight=<span class="hljs-number">1</span>, subsample=<span class="hljs-number">1</span>,<br>&gt;&gt;              tree_method=<span class="hljs-string">&#x27;exact&#x27;</span>, validate_parameters=<span class="hljs-number">1</span>, verbosity=<span class="hljs-literal">None</span>)<br>y_pred = xgb_reg.predict(X_val)<br>val_error = mean_squared_error(y_val, y_pred) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Validation MSE:&quot;</span>, val_error) <br>&gt;&gt; Validation MSE: <span class="hljs-number">0.004000408205406276</span><br></code></pre></td></tr></table></figure><h2 id="Stacking"><a href="#Stacking" class="headerlink" title="Stacking"></a>Stacking</h2><p>之前讲到的集成方法都是基于某些预定的规则，比如硬投票等，另一个策略是另外训练一个模型来聚合所有预测器的预测结果，这种方法就叫做 stacking （stacked generalization），进行聚合的模型叫做 <code>blending</code> 预测器或者元学习器（meta learner）：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210823105022753.png"></p><p>通常是使用一个 <strong>hold-out set</strong> 的方法来训练<br>blender：首先将训练集分成两个子集，第一个子集用来训练上面那个图中第一层的预测器，如下图：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210823183715857.png"></p><p>当第一层的预测器训练好之后，使用这些预测器在刚刚分出来的第二个子集上（hold out set）做预测，因此对于这个 hold-out 集上的实例都有 3 个预测值，我们可以把这些预测值当成新的特征构建一个新的训练集，然后使用这个新的训练集训练出 blender：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210823184105821.png"></p><p>这个过程总结如下：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210823190812406.png"></p><p>实际上也可以使用不同的模型训练不同的 blender 构成一个 blender 层，最后再训练一个 blender 来聚合这些 blenders：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210823191304050.png"></p><p>这个时候就需要将数据集分成 3 个部分，第一部分用来训练第一层，然后用第一层的预测器在第二部分数据中做预测，基于这些预测值构建新的训练集来训练第二层（可以使用不同的模型来训练），接着用第二层的预测器在第三部分数据中做预测，基于这些预测值构建新的训练集来训练第三层，得到最终的 blender。</p><p>在 Scikit-learn 0.22 的版本中已经支持通过 <code>StackingClassifier</code>和 <code>StackingRegressor</code> 类来 直接使用stacking 了，需要注意的是 scikit-learn在训练基预测器时是使用了交叉验证的方式计算数据的预测值，然后利用不同基预测器的预测值构成新的训练集训练最后的 blender，下面是一个回归的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> RidgeCV, LassoCV<br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsRegressor<br>estimators = [(<span class="hljs-string">&#x27;ridge&#x27;</span>, RidgeCV()),<br>              (<span class="hljs-string">&#x27;lasso&#x27;</span>, LassoCV(random_state=<span class="hljs-number">42</span>)),<br>              (<span class="hljs-string">&#x27;knr&#x27;</span>, KNeighborsRegressor(n_neighbors=<span class="hljs-number">20</span>,<br>              metric=<span class="hljs-string">&#x27;euclidean&#x27;</span>))]<br>              <br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> GradientBoostingRegressor<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> StackingRegressor<br><br>final_estimator = GradientBoostingRegressor(<br>  n_estimators=<span class="hljs-number">25</span>, subsample=<span class="hljs-number">0.5</span>, min_samples_leaf=<span class="hljs-number">25</span>,<br>  max_features=<span class="hljs-number">1</span>,random_state=<span class="hljs-number">42</span>)<br>  <br>reg = StackingRegressor(<br>  estimators=estimators,<br>  final_estimator=final_estimator)<br>  <br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_diabetes<br>X, y = load_diabetes(return_X_y=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br>X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="hljs-number">42</span>)<br><br>reg.fit(X_train, y_train)<br>&gt;&gt; StackingRegressor(estimators=[(<span class="hljs-string">&#x27;ridge&#x27;</span>,<br>&gt;&gt;                                RidgeCV(alphas=array([ <span class="hljs-number">0.1</span>,  <span class="hljs-number">1.</span> , <span class="hljs-number">10.</span> ]))),<br>&gt;&gt;                               (<span class="hljs-string">&#x27;lasso&#x27;</span>, LassoCV(random_state=<span class="hljs-number">42</span>)),<br>&gt;&gt;                               (<span class="hljs-string">&#x27;knr&#x27;</span>,<br>&gt;&gt;                                KNeighborsRegressor(metric=<span class="hljs-string">&#x27;euclidean&#x27;</span>,<br>&gt;&gt;                                                    n_neighbors=<span class="hljs-number">20</span>))],<br>&gt;&gt;                   final_estimator=GradientBoostingRegressor(max_features=<span class="hljs-number">1</span>,<br>&gt;&gt;                                                             min_samples_leaf=<span class="hljs-number">25</span>,<br>&gt;&gt;                                                             n_estimators=<span class="hljs-number">25</span>,<br>&gt;&gt;                                                             random_state=<span class="hljs-number">42</span>,<br>&gt;&gt;                                                             subsample=<span class="hljs-number">0.5</span>))<br>y_pred = reg.predict(X_test)<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> r2_score<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;R2 score: &#123;:.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r2_score(y_test, y_pred)))<br>&gt;&gt; R2 score: <span class="hljs-number">0.53</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据预处理</title>
    <link href="/2021/08/20/data_preprocess/"/>
    <url>/2021/08/20/data_preprocess/</url>
    
    <content type="html"><![CDATA[<p>数据预处理相关知识及 Scikit-learn 的实现，包括 Data transformation，Encoding categorical features，和 Imputation of missing values</p><span id="more"></span><h2 id="数据转化"><a href="#数据转化" class="headerlink" title="数据转化"></a>数据转化</h2><p>为什么要做数据转化（data transformation）：</p><ul><li>转化数据可以来满足某些模型的统计学假设，比如正态性，同质性，线性等</li><li>数据转化可以将不同变量的数据缩放到可以比较的范围上，比如数据中一个变量是价格，另一个变量是重量。</li></ul><p>数据转化就是在原数据上使用某个函数将原数据进行运算得到转化后的数据，数据转化的方法：</p><ul><li>单调转化：不改变数据的秩，不依赖于其他数据</li><li>相对转化（Standardization）</li><li>概率转化（Smoothing）</li></ul><h3 id="Standardization"><a href="#Standardization" class="headerlink" title="Standardization"></a>Standardization</h3><p>Standardization 指的是将数据减去其均值，除以标准差，使得数据的均值为 0，方差为 1. 注意 Standardization 处理后的数据并不一定服从正态分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> preprocessing<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>X_train = np.array([[ <span class="hljs-number">1.</span>, -<span class="hljs-number">1.</span>,  <span class="hljs-number">2.</span>],<br>                    [ <span class="hljs-number">2.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>],<br>                    [ <span class="hljs-number">0.</span>,  <span class="hljs-number">1.</span>, -<span class="hljs-number">1.</span>]])<br>scaler = preprocessing.StandardScaler().fit(X_train)<br>scaler<br>&gt;&gt; StandardScaler()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">scaler.mean_<br>&gt;&gt; array([<span class="hljs-number">1.</span>        , <span class="hljs-number">0.</span>        , <span class="hljs-number">0.33333333</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">scaler.scale_<br>&gt;&gt; array([<span class="hljs-number">0.81649658</span>, <span class="hljs-number">0.81649658</span>, <span class="hljs-number">1.24721913</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">scaler.scale_ == X_train.std(axis=<span class="hljs-number">0</span>) <span class="hljs-comment">##这里的scale_就是std</span><br>&gt;&gt; array([ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>])<br></code></pre></td></tr></table></figure><p><strong>fit</strong> 就是从数据中学到东西，这里就是mean 和 std，<strong>transform</strong> 就是利用学到的东西对数据进行转化，这两步也可以合为一步：<strong>fit_transform</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">X_scaled = scaler.transform(X_train)<br>X_scaled<br>&gt;&gt; array([[ <span class="hljs-number">0.</span>        , -<span class="hljs-number">1.22474487</span>,  <span class="hljs-number">1.33630621</span>],<br>&gt;&gt;        [ <span class="hljs-number">1.22474487</span>,  <span class="hljs-number">0.</span>        , -<span class="hljs-number">0.26726124</span>],<br>&gt;&gt;        [-<span class="hljs-number">1.22474487</span>,  <span class="hljs-number">1.22474487</span>, -<span class="hljs-number">1.06904497</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##验证一下</span><br><span class="hljs-built_in">print</span>(X_scaled.mean(axis=<span class="hljs-number">0</span>))<br>&gt;&gt; [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]<br><span class="hljs-built_in">print</span>(X_scaled.std(axis=<span class="hljs-number">0</span>))<br>&gt;&gt; [<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]<br></code></pre></td></tr></table></figure><p>另一种 Scale 的方法为将特征缩放到给定的范围，可以是规定最小最大值，如在 [0,1] 之间，或者是规定数值的范围，比如最大值和最小值的差在 1 之内，分别通过 <code>MinMaxScaler</code> 和 <code>MaxAbsScaler</code> 实现。<code>MinMaxScaler(feature_range=0, 1)</code> 进行的操作是:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">X_std = (X - X.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">0</span>)) / (X.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">0</span>) - X.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">0</span>))<br>X_scaled = X_std * (<span class="hljs-built_in">max</span> - <span class="hljs-built_in">min</span>) + <span class="hljs-built_in">min</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">X_train = np.array([[ <span class="hljs-number">1.</span>, -<span class="hljs-number">1.</span>,  <span class="hljs-number">2.</span>],<br>                    [ <span class="hljs-number">2.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>],<br>                    [ <span class="hljs-number">0.</span>,  <span class="hljs-number">1.</span>, -<span class="hljs-number">1.</span>]])<br>min_max_scaler = preprocessing.MinMaxScaler()<br>X_train_minmax = min_max_scaler.fit_transform(X_train)<br>X_train_minmax<br>&gt;&gt; array([[<span class="hljs-number">0.5</span>       , <span class="hljs-number">0.</span>        , <span class="hljs-number">1.</span>        ],<br>&gt;&gt;        [<span class="hljs-number">1.</span>        , <span class="hljs-number">0.5</span>       , <span class="hljs-number">0.33333333</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>        , <span class="hljs-number">1.</span>        , <span class="hljs-number">0.</span>        ]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##用训练集中“学习”到的最大值和最小值来对测试集进行 transform</span><br>X_test = np.array([[-<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">4</span>]])<br>X_test_minmax = min_max_scaler.transform(X_test)<br>X_test_minmax<br>&gt;&gt; array([[-<span class="hljs-number">1.5</span>       ,  <span class="hljs-number">0.</span>        ,  <span class="hljs-number">1.66666667</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##获取scale 和 min （学习到的内容）</span><br><span class="hljs-built_in">print</span>(min_max_scaler.scale_)<br>&gt;&gt; [<span class="hljs-number">0.5</span>        <span class="hljs-number">0.5</span>        <span class="hljs-number">0.33333333</span>]<br><span class="hljs-built_in">print</span>(min_max_scaler.min_)<br>&gt;&gt; [<span class="hljs-number">0.</span>         <span class="hljs-number">0.5</span>        <span class="hljs-number">0.33333333</span>]<br></code></pre></td></tr></table></figure><p><code>MaxAbsScaler</code> 将每个特征除以该特征的最大值，因此使得特征的数值范围在 [-1,1] ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">max_abs_scaler = preprocessing.MaxAbsScaler()<br>X_train_maxabs = max_abs_scaler.fit_transform(X_train)<br>X_train_maxabs<br>&gt;&gt; array([[ <span class="hljs-number">0.5</span>, -<span class="hljs-number">1.</span> ,  <span class="hljs-number">1.</span> ],<br>&gt;&gt;        [ <span class="hljs-number">1.</span> ,  <span class="hljs-number">0.</span> ,  <span class="hljs-number">0.</span> ],<br>&gt;&gt;        [ <span class="hljs-number">0.</span> ,  <span class="hljs-number">1.</span> , -<span class="hljs-number">0.5</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(max_abs_scaler.scale_ == max_abs_scaler.max_abs_)<br>&gt;&gt; [ <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span>]<br><span class="hljs-built_in">print</span>(max_abs_scaler.scale_)<br>&gt;&gt; [<span class="hljs-number">2.</span> <span class="hljs-number">1.</span> <span class="hljs-number">2.</span>]<br></code></pre></td></tr></table></figure><h3 id="非线性转化"><a href="#非线性转化" class="headerlink" title="非线性转化"></a>非线性转化</h3><p>有两类常用的非线性转化：分位数转化（quantile transforms）和幂转化（power transforms）；这两种转化都是单调转化，因此会保留原始数据的排序信息。在 scikit-learn 中分别使用 <code>QuantileTransformer</code> 和 <code>PowerTransformer</code> 来进行分位数转化和幂转化。</p><h4 id="分位数转化（quantile-transforms）"><a href="#分位数转化（quantile-transforms）" class="headerlink" title="分位数转化（quantile transforms）"></a>分位数转化（quantile transforms）</h4><p><code>QuantileTransformer</code> 是一种非参数的数据转化技术，可以将数据转化到特定的分布（一般是高斯分布或者均匀分布），通过分位数函数来实现。</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/1280px-Quantile_distribution_function.svg.png" style="zoom:50%" /><p>The cumulative distribution function (shown as F(x)) gives the p values as a function of the q values. The quantile function does the opposite: it gives the q values as a function of the p values.<br>也就是累积分布函数的自变量是 X 轴，给定一个数可以得到一个概率，而分位数函数是累计分布函数的逆函数，自变量是 y轴。 分位数转化是通过下面的函数作用于原数据得到转化后的数据：<br>$$<br>G^{-1}(F(X))<br>$$<br>其中 F(X) 是原始数据的累积分布函数，G 是我们想要转化得到的分布的分位数函数。比如我们想要将原始数据转化为均值为0， 方差为 1 的正态分布，那么首先要得到 F(X)，也就是原数据中对应的分位数，然后再用正态分布的分位数函数进行转化。</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210818215720349(1).png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> QuantileTransformer<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-comment">#Using mpg data</span><br>mpg = pd.read_csv(<span class="hljs-string">&quot;mpg.csv&quot;</span>)<br><br>quantile_transformer = QuantileTransformer(random_state=<span class="hljs-number">0</span>,  output_distribution=<span class="hljs-string">&#x27;normal&#x27;</span>)<br>mpg[<span class="hljs-string">&#x27;mpg_trans&#x27;</span>] = pd.Series(quantile_transformer.fit_transform(np.array(mpg[<span class="hljs-string">&#x27;mpg&#x27;</span>]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))[:,<span class="hljs-number">0</span>])<br>&gt;&gt; C:\Users\lenovo\AppData\Local\Programs\Python\Python39\lib\site-packages\sklearn\preprocessing\_data.py:<span class="hljs-number">2612</span>: UserWarning: n_quantiles (<span class="hljs-number">1000</span>) <span class="hljs-keyword">is</span> greater than the total number of samples (<span class="hljs-number">398</span>). n_quantiles <span class="hljs-keyword">is</span> <span class="hljs-built_in">set</span> to n_samples.<br>&gt;&gt;   warnings.warn(<span class="hljs-string">&quot;n_quantiles (%s) is greater than the total number &quot;</span><br>mpg[[<span class="hljs-string">&#x27;mpg&#x27;</span>, <span class="hljs-string">&#x27;mpg_trans&#x27;</span>]].head()<br>&gt;&gt;     mpg  mpg_trans<br>&gt;&gt; <span class="hljs-number">0</span>  <span class="hljs-number">18.0</span>  -<span class="hljs-number">0.554342</span><br>&gt;&gt; <span class="hljs-number">1</span>  <span class="hljs-number">15.0</span>  -<span class="hljs-number">1.020894</span><br>&gt;&gt; <span class="hljs-number">2</span>  <span class="hljs-number">18.0</span>  -<span class="hljs-number">0.554342</span><br>&gt;&gt; <span class="hljs-number">3</span>  <span class="hljs-number">16.0</span>  -<span class="hljs-number">0.831765</span><br>&gt;&gt; <span class="hljs-number">4</span>  <span class="hljs-number">17.0</span>  -<span class="hljs-number">0.708573</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = mpg[<span class="hljs-string">&quot;mpg&quot;</span>] &lt;= <span class="hljs-number">18.0</span> <span class="hljs-comment">##得到在原数据上的分位数</span><br>a.mean()<br>&gt;&gt; <span class="hljs-number">0.31155778894472363</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> norm<br>norm.ppf(a.mean()) <span class="hljs-comment">##精度不够 </span><br>&gt;&gt; -<span class="hljs-number">0.49143957727661874</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dt = np.random.randn(<span class="hljs-number">2000</span>) + np.random.rand(<span class="hljs-number">2000</span>)<br>quantile_transformer = QuantileTransformer(random_state=<span class="hljs-number">1</span>,  output_distribution=<span class="hljs-string">&#x27;normal&#x27;</span>,n_quantiles=<span class="hljs-number">2000</span>)<br>dt_t = quantile_transformer.fit_transform(dt.reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)) <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">dt_all = pd.DataFrame(dt,columns=[<span class="hljs-string">&quot;original_data&quot;</span>])<br>dt_all[<span class="hljs-string">&quot;transformed_data&quot;</span>] = dt_t<br>dt_all<br>&gt;&gt;       original_data  transformed_data<br>&gt;&gt; <span class="hljs-number">0</span>          <span class="hljs-number">0.851973</span>          <span class="hljs-number">0.328715</span><br>&gt;&gt; <span class="hljs-number">1</span>         -<span class="hljs-number">0.250760</span>         -<span class="hljs-number">0.743418</span><br>&gt;&gt; <span class="hljs-number">2</span>          <span class="hljs-number">1.597457</span>          <span class="hljs-number">1.027570</span><br>&gt;&gt; <span class="hljs-number">3</span>          <span class="hljs-number">1.169616</span>          <span class="hljs-number">0.638326</span><br>&gt;&gt; <span class="hljs-number">4</span>          <span class="hljs-number">0.206968</span>         -<span class="hljs-number">0.274902</span><br>&gt;&gt; ...             ...               ...<br>&gt;&gt; <span class="hljs-number">1995</span>       <span class="hljs-number">0.127027</span>         -<span class="hljs-number">0.349967</span><br>&gt;&gt; <span class="hljs-number">1996</span>       <span class="hljs-number">2.971422</span>          <span class="hljs-number">2.273244</span><br>&gt;&gt; <span class="hljs-number">1997</span>      -<span class="hljs-number">0.211433</span>         -<span class="hljs-number">0.709138</span><br>&gt;&gt; <span class="hljs-number">1998</span>      -<span class="hljs-number">0.113255</span>         -<span class="hljs-number">0.601851</span><br>&gt;&gt; <span class="hljs-number">1999</span>       <span class="hljs-number">0.566198</span>          <span class="hljs-number">0.063366</span><br>&gt;&gt; <br>&gt;&gt; [<span class="hljs-number">2000</span> rows x <span class="hljs-number">2</span> columns]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = dt &lt;= (dt_all[<span class="hljs-string">&quot;original_data&quot;</span>][<span class="hljs-number">0</span>])<br>norm.ppf(a.mean())<br>&gt;&gt; <span class="hljs-number">0.32920598430265113</span><br></code></pre></td></tr></table></figure><h4 id="幂转化（power-transforms）"><a href="#幂转化（power-transforms）" class="headerlink" title="幂转化（power transforms）"></a>幂转化（power transforms）</h4><p>Quantile Transformer 是通过 Quantile Function 进行转化，幂转化则是通过 power function 对数据进行转化成正态分布；<code>PowerTransformer</code> 提供了两种方法进行转化：Yeo-Johnson transform 和 Box-Cox transform。</p><p>Yeo-Johnson transform：<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210818221510696.png"></p><p>Box-Cox transform：<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210818221517896.png"></p><p>可以看到 Box-Cox 只能用到正值上；参数 <em>λ</em> 通过最大似然估计得出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">pt = preprocessing.PowerTransformer(method=<span class="hljs-string">&#x27;box-cox&#x27;</span>, standardize=<span class="hljs-literal">False</span>)<br>X_lognormal = np.random.RandomState(<span class="hljs-number">616</span>).lognormal(size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br>X_lognormal<br>&gt;&gt; array([[<span class="hljs-number">1.28331718</span>, <span class="hljs-number">1.18092228</span>, <span class="hljs-number">0.84160269</span>],<br>&gt;&gt;        [<span class="hljs-number">0.94293279</span>, <span class="hljs-number">1.60960836</span>, <span class="hljs-number">0.3879099</span> ],<br>&gt;&gt;        [<span class="hljs-number">1.35235668</span>, <span class="hljs-number">0.21715673</span>, <span class="hljs-number">1.09977091</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">pt.fit_transform(X_lognormal)<br>&gt;&gt; array([[ <span class="hljs-number">0.49024349</span>,  <span class="hljs-number">0.17881995</span>, -<span class="hljs-number">0.1563781</span> ],<br>&gt;&gt;        [-<span class="hljs-number">0.05102892</span>,  <span class="hljs-number">0.58863195</span>, -<span class="hljs-number">0.57612414</span>],<br>&gt;&gt;        [ <span class="hljs-number">0.69420009</span>, -<span class="hljs-number">0.84857822</span>,  <span class="hljs-number">0.10051454</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pt.lambdas_<br>&gt;&gt; array([<span class="hljs-number">4.92011847</span>, <span class="hljs-number">0.86296593</span>, <span class="hljs-number">1.15354435</span>])<br></code></pre></td></tr></table></figure><h3 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h3><p>Normalization 将样本缩放到具有单位范数，是对单个样本的操作，方法是：对每个样本计算其 p-范数，然后对该样本中每个元素除以该范数。p-范数的定义为：</p><p>$$<br>||X||_p&#x3D;(|x_1|^p+|x_2|^p+…+|x_n|^p)^{\frac{1}{p}}<br>$$</p><p>sklearn 中有两种方法可以进行 Normalization：<code>normalize</code> 函数和 <code>Normalizer</code> 类，可以通过 <code>norm</code> 参数指定使用的范数类型（l1,l2,max）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##normalize</span><br>X = [[ <span class="hljs-number">1.</span>, -<span class="hljs-number">1.</span>,  <span class="hljs-number">2.</span>],<br>     [ <span class="hljs-number">2.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>],<br>     [ <span class="hljs-number">0.</span>,  <span class="hljs-number">1.</span>, -<span class="hljs-number">1.</span>]]<br>X_normalized = preprocessing.normalize(X, norm=<span class="hljs-string">&#x27;max&#x27;</span>)<br>X_normalized <br>&gt;&gt; array([[ <span class="hljs-number">0.5</span>, -<span class="hljs-number">0.5</span>,  <span class="hljs-number">1.</span> ],<br>&gt;&gt;        [ <span class="hljs-number">1.</span> ,  <span class="hljs-number">0.</span> ,  <span class="hljs-number">0.</span> ],<br>&gt;&gt;        [ <span class="hljs-number">0.</span> ,  <span class="hljs-number">1.</span> , -<span class="hljs-number">1.</span> ]])<br></code></pre></td></tr></table></figure><p>Normalizer 和一般的 Transformer 类一样，都有 <code>fit</code> 和 <code>transform</code> 方法，但是这里的fit其实没有作用，因为Normalization是对单个样本作用的，不需要从数据中“学习”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##Normalizer</span><br>normalizer = preprocessing.Normalizer().fit(X)<br>normalizer<br>&gt;&gt; Normalizer()<br>normalizer.transform(X)<br>&gt;&gt; array([[ <span class="hljs-number">0.40824829</span>, -<span class="hljs-number">0.40824829</span>,  <span class="hljs-number">0.81649658</span>],<br>&gt;&gt;        [ <span class="hljs-number">1.</span>        ,  <span class="hljs-number">0.</span>        ,  <span class="hljs-number">0.</span>        ],<br>&gt;&gt;        [ <span class="hljs-number">0.</span>        ,  <span class="hljs-number">0.70710678</span>, -<span class="hljs-number">0.70710678</span>]])<br></code></pre></td></tr></table></figure><h3 id="自定义转化"><a href="#自定义转化" class="headerlink" title="自定义转化"></a>自定义转化</h3><p>有些时候我们想要进行的转化可能是数据特异的，scikit learn 中可能没有预置的方法供我们使用，但是其提供了<code>FunctionTransformer</code> 来将已经写好的函数转化成 transformer。比如想要把一个数据框中的所有数值变量中大于 5 的数值都变成5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> FunctionTransformer<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trunc_5</span>(<span class="hljs-params">x</span>):<br>    num_cols = [col <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> x.columns <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(x[col].dtype) != <span class="hljs-string">&quot;object&quot;</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num_cols:<br>        x[i] = [<span class="hljs-number">5</span> <span class="hljs-keyword">if</span> j &gt; <span class="hljs-number">5</span> <span class="hljs-keyword">else</span> j <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> x[i]]<br>    <span class="hljs-keyword">return</span> x<br><br>trunc5_transformer = FunctionTransformer(trunc_5)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],<br>     [<span class="hljs-number">4</span>,<span class="hljs-number">6</span>],<br>     [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]]<br>X = pd.DataFrame(x)<br>trunc5_transformer.fit_transform(X)<br>&gt;&gt;    <span class="hljs-number">0</span>  <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span><br>&gt;&gt; <span class="hljs-number">2</span>  <span class="hljs-number">5</span>  <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="编码类别变量"><a href="#编码类别变量" class="headerlink" title="编码类别变量"></a>编码类别变量</h2><p>对于类别变量，通常有 3 种处理策略： </p><ul><li>直接丢弃 </li><li>顺序编码 – OrdinalEncoder  </li><li>One hot 编码 – OneHotEncoder</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = preprocessing.OrdinalEncoder()<br>X = [[<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;from US&#x27;</span>, <span class="hljs-string">&#x27;uses Safari&#x27;</span>], <br>     [<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;from Europe&#x27;</span>, <span class="hljs-string">&#x27;uses Firefox&#x27;</span>]]<br>enc.fit(X)<br>&gt;&gt; OrdinalEncoder()<br>enc.transform([[<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;from US&#x27;</span>, <span class="hljs-string">&#x27;uses Safari&#x27;</span>]])<br>&gt;&gt; array([[<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]])<br></code></pre></td></tr></table></figure><p>One hot 编码是将有 n 个类别的变量转化为 n 个 0，1的特征，每个特征中只有一个值为 1 其他都是 0 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = preprocessing.OneHotEncoder()<br>enc.fit(X)<br>&gt;&gt; OneHotEncoder()<br>enc.transform([[<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;from US&#x27;</span>, <span class="hljs-string">&#x27;uses Safari&#x27;</span>],<br>               [<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;from Europe&#x27;</span>, <span class="hljs-string">&#x27;uses Safari&#x27;</span>]]).toarray()<br>&gt;&gt; array([[<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>]])<br></code></pre></td></tr></table></figure><p>默认是自动推断每个特征的类别值，可以通过 <code>categories_</code> 属性来获取，也可以通过 <code>categories</code> 参数来指定，好处是不局限于训练数据（使用 fit 的数据）的类别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">genders = [<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;male&#x27;</span>]<br>locations = [<span class="hljs-string">&#x27;from Africa&#x27;</span>, <span class="hljs-string">&#x27;from Asia&#x27;</span>, <span class="hljs-string">&#x27;from Europe&#x27;</span>, <span class="hljs-string">&#x27;from US&#x27;</span>]<br>browsers = [<span class="hljs-string">&#x27;uses Chrome&#x27;</span>, <span class="hljs-string">&#x27;uses Firefox&#x27;</span>, <span class="hljs-string">&#x27;uses IE&#x27;</span>, <span class="hljs-string">&#x27;uses Safari&#x27;</span>]<br>enc = preprocessing.OneHotEncoder(categories=[genders, <br>                                              locations, <br>                                              browsers])<br><br>X = [[<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;from US&#x27;</span>, <span class="hljs-string">&#x27;uses Safari&#x27;</span>], <br>     [<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;from Europe&#x27;</span>, <span class="hljs-string">&#x27;uses Firefox&#x27;</span>]]<br>enc.fit(X)<br>&gt;&gt; OneHotEncoder(categories=[[<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;male&#x27;</span>],<br>&gt;&gt;                           [<span class="hljs-string">&#x27;from Africa&#x27;</span>, <span class="hljs-string">&#x27;from Asia&#x27;</span>, <span class="hljs-string">&#x27;from Europe&#x27;</span>,<br>&gt;&gt;                            <span class="hljs-string">&#x27;from US&#x27;</span>],<br>&gt;&gt;                           [<span class="hljs-string">&#x27;uses Chrome&#x27;</span>, <span class="hljs-string">&#x27;uses Firefox&#x27;</span>, <span class="hljs-string">&#x27;uses IE&#x27;</span>,<br>&gt;&gt;                            <span class="hljs-string">&#x27;uses Safari&#x27;</span>]])<br>enc.transform([[<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;from Asia&#x27;</span>, <span class="hljs-string">&#x27;uses Chrome&#x27;</span>]]).toarray() <br>&gt;&gt; array([[<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br></code></pre></td></tr></table></figure><p>还有一种可能发生的情况就是：在需要 transform 的数据中出现了在训练数据中没有学习到的类别或者在 <code>categories</code> 中没有指定的类别，这个时候可以设置 <code>handle_unknown</code> 参数为 <code>ignore</code>（默认是 error），会将所有的 one hot 特征设为 0：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = preprocessing.OneHotEncoder(handle_unknown=<span class="hljs-string">&quot;ignore&quot;</span>)<br>X = [[<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;from US&#x27;</span>, <span class="hljs-string">&#x27;uses Safari&#x27;</span>], [<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;from Europe&#x27;</span>, <span class="hljs-string">&#x27;uses Firefox&#x27;</span>]]<br>enc.fit(X)<br>&gt;&gt; OneHotEncoder(handle_unknown=<span class="hljs-string">&#x27;ignore&#x27;</span>)<br>enc.transform([[<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;from Asia&#x27;</span>, <span class="hljs-string">&#x27;uses Chrome&#x27;</span>]]).toarray()<br>&gt;&gt; array([[<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br></code></pre></td></tr></table></figure><p>也可以使用 <code>drop</code> 参数将类别变量编码成 n-1 个新的变量而不是 n 个新的变量（n 是类别变量的类别数），也就是通过 <code>drop</code> 指定在编码时要丢弃的类别。这种方法可以有效的避免输入数据的共线性，比如在（非正则化的）线性回归中共线性会造成协方差矩阵不可逆。  <code>drop</code> 参数可以取 <code>first</code>，表示丢弃每个特征的第一个类别，如果只有一个类别那么这个特征会被丢弃，也可以取 <code>if_binary</code>，表示只丢弃有两个类别的特征的第一个类别，有一个类别或者多于两个类别的特征的类别不会被丢弃，还可以是一个数组（array），表示某个特征中要丢弃的类别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##first</span><br>X = [[<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;from US&#x27;</span>, <span class="hljs-string">&#x27;uses Safari&#x27;</span>], <br>     [<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;from Europe&#x27;</span>, <span class="hljs-string">&#x27;uses Firefox&#x27;</span>]]<br>drop_enc = preprocessing.OneHotEncoder(drop=<span class="hljs-string">&#x27;first&#x27;</span>).fit(X)<br>drop_enc.categories_<br>&gt;&gt; [array([<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;male&#x27;</span>], dtype=<span class="hljs-built_in">object</span>), array([<span class="hljs-string">&#x27;from Europe&#x27;</span>, <span class="hljs-string">&#x27;from US&#x27;</span>], dtype=<span class="hljs-built_in">object</span>), array([<span class="hljs-string">&#x27;uses Firefox&#x27;</span>, <span class="hljs-string">&#x27;uses Safari&#x27;</span>], dtype=<span class="hljs-built_in">object</span>)]<br>drop_enc.transform(X).toarray()<br>&gt;&gt; array([[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##if_binary</span><br>X = [[<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;US&#x27;</span>, <span class="hljs-string">&#x27;Safari&#x27;</span>],<br>     [<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;Europe&#x27;</span>, <span class="hljs-string">&#x27;Firefox&#x27;</span>],<br>     [<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;Asia&#x27;</span>, <span class="hljs-string">&#x27;Chrome&#x27;</span>]]<br>drop_enc = preprocessing.OneHotEncoder(drop=<span class="hljs-string">&#x27;if_binary&#x27;</span>).fit(X)<br>drop_enc.categories_<br>&gt;&gt; [array([<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;male&#x27;</span>], dtype=<span class="hljs-built_in">object</span>), array([<span class="hljs-string">&#x27;Asia&#x27;</span>, <span class="hljs-string">&#x27;Europe&#x27;</span>, <span class="hljs-string">&#x27;US&#x27;</span>], dtype=<span class="hljs-built_in">object</span>), array([<span class="hljs-string">&#x27;Chrome&#x27;</span>, <span class="hljs-string">&#x27;Firefox&#x27;</span>, <span class="hljs-string">&#x27;Safari&#x27;</span>], dtype=<span class="hljs-built_in">object</span>)]<br>drop_enc.transform(X).toarray()<br>&gt;&gt; array([[<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br></code></pre></td></tr></table></figure><p><code>OneHotEncoder</code> 也支持对缺失值的处理，将缺失值作为一个新的类别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">X = [[<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;Safari&#x27;</span>],<br>     [<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-literal">None</span>],<br>     [np.nan, <span class="hljs-string">&#x27;Firefox&#x27;</span>]]<br>enc = preprocessing.OneHotEncoder(handle_unknown=<span class="hljs-string">&#x27;error&#x27;</span>).fit(X)<br>enc.categories_<br>&gt;&gt; [array([<span class="hljs-string">&#x27;female&#x27;</span>, <span class="hljs-string">&#x27;male&#x27;</span>, nan], dtype=<span class="hljs-built_in">object</span>), array([<span class="hljs-string">&#x27;Firefox&#x27;</span>, <span class="hljs-string">&#x27;Safari&#x27;</span>, <span class="hljs-literal">None</span>], dtype=<span class="hljs-built_in">object</span>)]<br>enc.transform(X).toarray() <br>&gt;&gt; array([[<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##如果一个特征同时含有 np.nan 和 None， 会被视为两个不一样的类别</span><br>X = [[<span class="hljs-string">&#x27;Safari&#x27;</span>], [<span class="hljs-literal">None</span>], [np.nan], [<span class="hljs-string">&#x27;Firefox&#x27;</span>]]<br>enc = preprocessing.OneHotEncoder(handle_unknown=<span class="hljs-string">&#x27;error&#x27;</span>).fit(X)<br>enc.transform(X).toarray()<br>&gt;&gt; array([[<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br></code></pre></td></tr></table></figure><h2 id="缺失值的填充"><a href="#缺失值的填充" class="headerlink" title="缺失值的填充"></a>缺失值的填充</h2><p>缺失值填充有两类方法：</p><ul><li>单变量：对第 i 个特征中的缺失值只使用该特征的某些信息来进行填充（<code>impute.SimpleImputer</code>）</li><li>多变量：对第 i 个特征中的缺失值使用整个数据集的信息来填充（<code>impute.IterativeImputer</code>）</li></ul><h3 id="单变量填充"><a href="#单变量填充" class="headerlink" title="单变量填充"></a>单变量填充</h3><p><code>SimpleImputer</code> 可以将缺失值填充为提供的固定值，或者使用缺失值所在列的某些统计量（比如均值，中位值，出现最多的值等）来填充缺失值。主要参数有 3 个：</p><ul><li><code>missing_values</code>：int, float, str, np.nan or None 默认np.nan，指定缺失值的类型</li><li><code>strategy</code>：mean, median, most_frequent, constant</li><li><code>fill_value</code>：当 <code>strategy</code> 为 constant 时填充的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.impute <span class="hljs-keyword">import</span> SimpleImputer<br>imp = SimpleImputer(missing_values=np.nan, strategy=<span class="hljs-string">&#x27;mean&#x27;</span>)<br>imp.fit([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [np.nan, <span class="hljs-number">3</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">6</span>]])<br>&gt;&gt; SimpleImputer()<br>X = [[np.nan, <span class="hljs-number">2</span>], [<span class="hljs-number">6</span>, np.nan], [<span class="hljs-number">7</span>, <span class="hljs-number">6</span>]]<br><span class="hljs-built_in">print</span>(X)<br>&gt;&gt; [[nan, <span class="hljs-number">2</span>], [<span class="hljs-number">6</span>, nan], [<span class="hljs-number">7</span>, <span class="hljs-number">6</span>]]<br><span class="hljs-built_in">print</span>(imp.transform(X))<br>&gt;&gt; [[<span class="hljs-number">4.</span>         <span class="hljs-number">2.</span>        ]<br>&gt;&gt;  [<span class="hljs-number">6.</span>         <span class="hljs-number">3.66666667</span>]<br>&gt;&gt;  [<span class="hljs-number">7.</span>         <span class="hljs-number">6.</span>        ]]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##分类变量</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>df = pd.DataFrame([[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>],<br>                   [np.nan, <span class="hljs-string">&quot;y&quot;</span>],<br>                   [<span class="hljs-string">&quot;a&quot;</span>, np.nan],<br>                   [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>]], dtype=<span class="hljs-string">&quot;category&quot;</span>)<br>imp = SimpleImputer(strategy=<span class="hljs-string">&quot;most_frequent&quot;</span>)<br><span class="hljs-built_in">print</span>(imp.fit_transform(df))<br>&gt;&gt; [[<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;x&#x27;</span>]<br>&gt;&gt;  [<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;y&#x27;</span>]<br>&gt;&gt;  [<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;y&#x27;</span>]<br>&gt;&gt;  [<span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-string">&#x27;y&#x27;</span>]]<br></code></pre></td></tr></table></figure><h3 id="多变量填充"><a href="#多变量填充" class="headerlink" title="多变量填充"></a>多变量填充</h3><p>多变量填充是使用全部数据建模的方式进行填充缺失值：含有缺失值的特征被视为 y，而其他特征当作 x，对 （x, y）拟合回归模型，然后利用这个模型来预测 y 中的缺失值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.experimental <span class="hljs-keyword">import</span> enable_iterative_imputer<br><span class="hljs-keyword">from</span> sklearn.impute <span class="hljs-keyword">import</span> IterativeImputer<br>imp = IterativeImputer(max_iter=<span class="hljs-number">10</span>, random_state=<span class="hljs-number">0</span>)<br>imp.fit([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>], [np.nan, <span class="hljs-number">3</span>], [<span class="hljs-number">7</span>, np.nan]])<br>&gt;&gt; IterativeImputer(random_state=<span class="hljs-number">0</span>)<br>X_test = [[np.nan, <span class="hljs-number">2</span>], [<span class="hljs-number">6</span>, np.nan], [np.nan, <span class="hljs-number">6</span>]]<br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">round</span>(imp.transform(X_test)))<br>&gt;&gt; [[ <span class="hljs-number">1.</span>  <span class="hljs-number">2.</span>]<br>&gt;&gt;  [ <span class="hljs-number">6.</span> <span class="hljs-number">12.</span>]<br>&gt;&gt;  [ <span class="hljs-number">3.</span>  <span class="hljs-number">6.</span>]]<br></code></pre></td></tr></table></figure><h3 id="标记缺失值"><a href="#标记缺失值" class="headerlink" title="标记缺失值"></a>标记缺失值</h3><p>除了对缺失值进行填充，标记缺失值也是一种有用的方法，通常和填充一起使用，在 Scikit-learn 中通过 <code>MissingIndicator</code> 实现（前面的 <code>SimpleImputer</code> 和 <code>IterativeImputer</code> 都有一个 <code>add_indicator</code> 的参数，设置为 True 时可以直接将<code>MissingIndicator</code> 的结果和原来的数据合并）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.impute <span class="hljs-keyword">import</span> MissingIndicator<br>X = np.array([[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>],<br>              [<span class="hljs-number">4</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>],<br>              [<span class="hljs-number">8</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])<br>indicator = MissingIndicator(missing_values=-<span class="hljs-number">1</span>)<br>mask_missing_values_only = indicator.fit_transform(X)<br>mask_missing_values_only <span class="hljs-comment">##默认只返回有缺失值的列</span><br>&gt;&gt; array([[ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>],<br>&gt;&gt;        [<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>],<br>&gt;&gt;        [<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##可以设置 feature 指定返回的列或者所有列</span><br>indicator = MissingIndicator(missing_values=-<span class="hljs-number">1</span>, features=<span class="hljs-string">&quot;all&quot;</span>)<br>mask_all = indicator.fit_transform(X)<br>mask_all<br>&gt;&gt; array([[ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>],<br>&gt;&gt;        [<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>],<br>&gt;&gt;        [<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]])<br></code></pre></td></tr></table></figure><p>当在 Pipeline 中使用 <code>MissingIndicator</code> 时需要改用 <code>FeatureUnion</code> （或者 <code>ColumnTransformer</code>）来将标记生成的列和原数据合并:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_iris<br><span class="hljs-keyword">from</span> sklearn.impute <span class="hljs-keyword">import</span> SimpleImputer, MissingIndicator<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.pipeline <span class="hljs-keyword">import</span> FeatureUnion, make_pipeline<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br>X, y = load_iris(return_X_y=<span class="hljs-literal">True</span>)<br>mask = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, size=X.shape).astype(<span class="hljs-built_in">bool</span>)<span class="hljs-comment">##随机生成 0 1，转化成 T F</span><br>X[mask] = np.nan<br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">100</span>,<br>                                               random_state=<span class="hljs-number">0</span>)<br><br>transformer = FeatureUnion(<br>      transformer_list=[<br>            (<span class="hljs-string">&#x27;features&#x27;</span>, SimpleImputer(strategy=<span class="hljs-string">&#x27;mean&#x27;</span>)),<br>            (<span class="hljs-string">&#x27;indicators&#x27;</span>, MissingIndicator())])<br>transformer = transformer.fit(X_train, y_train)<br>results = transformer.transform(X_test)<br><span class="hljs-built_in">print</span>(X_test.shape)<br>&gt;&gt; (<span class="hljs-number">100</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(results.shape) <br>&gt;&gt; (<span class="hljs-number">100</span>, <span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##然后就可以在 pipeline 中使用：</span><br>clf = make_pipeline(transformer, DecisionTreeClassifier())<br>clf = clf.fit(X_train, y_train)<br>results = clf.predict(X_test)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>数据处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux &amp; R Tips</title>
    <link href="/2021/08/05/linux_tips/"/>
    <url>/2021/08/05/linux_tips/</url>
    
    <content type="html"><![CDATA[<p>常用的 Linux Shell ，R 命令&#x2F;脚本和报错解决方法</p><span id="more"></span><h3 id="添加用户，改密码，改权限"><a href="#添加用户，改密码，改权限" class="headerlink" title="添加用户，改密码，改权限"></a>添加用户，改密码，改权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">添加用户组dev</span><br>groupadd dev<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加libb用户，并归属于dev组</span><br>useradd -g dev libb<br><span class="hljs-meta prompt_">#</span><span class="language-bash">给libb用户改密码</span><br>passwd libb<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#更改文件权限</span></span><br>chown -R user:group filename<br>chown -R wt wt/ ##改变文件主<br>chmod -R 741 wt/ ##3个数字分别表示User、Group、及Other的权限。 r=4，w=2，x=1<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#查看用户</span></span><br>cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F&quot;:&quot; &#x27;&#123; print $1&quot;|&quot;$3&quot;|&quot;$4 &#125;&#x27;|more<br></code></pre></td></tr></table></figure><h3 id="动态库无法载入"><a href="#动态库无法载入" class="headerlink" title="动态库无法载入"></a>动态库无法载入</h3><p>有时候在 R 里面加载包会出现下面的报错：</p><blockquote><p>Error: package or namespace load failed for ‘NeoEnrichment’ in dyn.load(file, DLLpath &#x3D; DLLpath, …): unable to load shared object ‘&#x2F;home&#x2F;public&#x2F;R&#x2F;library&#x2F;Rsamtools&#x2F;libs&#x2F;Rsamtools.so’: &#x2F;lib64&#x2F;libstdc++.so.6: version &#96;GLIBCXX_3.4.20’ not found (required by &#x2F;home&#x2F;public&#x2F;R&#x2F;library&#x2F;Rsamtools&#x2F;libs&#x2F;Rsamtools.so)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#错误提示在/lib64/libstdc++.so.6中无法找到GLIBCXX_3.4.20，所以先检查一下/lib64/libstdc++.so.6 链接的库</span></span><br>strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX<br>GLIBCXX_3.4<br>GLIBCXX_3.4.1<br>GLIBCXX_3.4.2<br>GLIBCXX_3.4.3<br>GLIBCXX_3.4.4<br>GLIBCXX_3.4.5<br>GLIBCXX_3.4.6<br>GLIBCXX_3.4.7<br>GLIBCXX_3.4.8<br>GLIBCXX_3.4.9<br>GLIBCXX_3.4.10<br>GLIBCXX_3.4.11<br>GLIBCXX_3.4.12<br>GLIBCXX_3.4.13<br>GLIBCXX_3.4.14<br>GLIBCXX_3.4.15<br>GLIBCXX_3.4.16<br>GLIBCXX_3.4.17<br>GLIBCXX_3.4.18<br>GLIBCXX_3.4.19<br>GLIBCXX_DEBUG_MESSAGE_LENGTH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#然后再在别的地方找找有么有</span></span><br>sudo find / -name &quot;libstdc++.so.6*&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#检查一下</span></span><br>ll 有需要版本的GLIBCXX的库<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#将有需要版本的GLIBCXX的库替换掉/lib64/libstdc++.so.6就行了</span></span><br></code></pre></td></tr></table></figure><p>参考：[搞定 libstdc++.so.6: version &#96;GLIBCXX_3.4.21’ not found_phd的专栏-CSDN博客](<a href="https://blog.csdn.net/phdsky/article/details/84104769">https://blog.csdn.net/phdsky/article/details/84104769</a>)</p><h3 id="安装-miniconda-和-mamba"><a href="#安装-miniconda-和-mamba" class="headerlink" title="安装 miniconda 和 mamba"></a>安装 miniconda 和 mamba</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh<br>bash Miniconda3-py39_4.9.2-Linux-x86_64.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#重启</span></span><br>conda install mamba -n base -c conda-forge<br>mamba install -c conda-forge htop<br>conda create -n your_env_name python=x.x<br></code></pre></td></tr></table></figure><h3 id="设置-history-文件显示时间"><a href="#设置-history-文件显示时间" class="headerlink" title="设置 history 文件显示时间"></a>设置 history 文件显示时间</h3><p>更改前：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210816153240709.png"></p><p>更改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#显示时间</span></span><br>HISTTIMEFORMAT=&quot;%d/%m/%y %T &quot;<br>source ~/.bash_profile<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#命令数量</span></span><br>HISTFILESIZE=100000<br><span class="hljs-meta prompt_"># </span><span class="language-bash">append to the <span class="hljs-built_in">history</span> file, don<span class="hljs-string">&#x27;t overwrite it</span></span><br>shopt -s histappend<br></code></pre></td></tr></table></figure><p>更改后：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210816153333074.png"></p><h3 id="不改变时间戳移动文件"><a href="#不改变时间戳移动文件" class="headerlink" title="不改变时间戳移动文件"></a>不改变时间戳移动文件</h3><p>不改变时间戳（创建，更改文件的时间）在服务器间移动文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp -p <br></code></pre></td></tr></table></figure><h3 id="安装-HDF5Array-编译错误"><a href="#安装-HDF5Array-编译错误" class="headerlink" title="安装 HDF5Array 编译错误"></a>安装 HDF5Array 编译错误</h3><p>报错： <code>cannot find -lcrypto</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/bin/ld: cannot find -lcrypto<br>collect2: error: ld returned 1 exit status<br>make: *** [HDF5Array.so] Error 1<br>ERROR: compilation failed for package ‘HDF5Array’<br><br><br>[root@localhost ~]# ll /usr/lib64/libssl*<br>-rwxr-xr-x 1 root root 387696 Apr 28 09:40 /usr/lib64/libssl3.so<br>lrwxrwxrwx 1 root root     16 Jun  2 01:56 /usr/lib64/libssl.so.10 -&gt; libssl.so.1.0.2k<br>-rwxr-xr-x 1 root root 470376 Dec 16  2020 /usr/lib64/libssl.so.1.0.2k<br>[root@localhost ~]# ln -s /usr/lib64/libssl.so.1.0.2k /usr/lib64/libssl.so<br>[root@localhost ~]# ll /usr/lib64/libssl*<br>-rwxr-xr-x 1 root root 387696 Apr 28 09:40 /usr/lib64/libssl3.so<br>lrwxrwxrwx 1 root root     27 Jul 20 01:42 /usr/lib64/libssl.so -&gt; /usr/lib64/libssl.so.1.0.2k<br>lrwxrwxrwx 1 root root     16 Jun  2 01:56 /usr/lib64/libssl.so.10 -&gt; libssl.so.1.0.2k<br>-rwxr-xr-x 1 root root 470376 Dec 16  2020 /usr/lib64/libssl.so.1.0.2k<br>[root@localhost ~]# ln -s /usr/lib64/libcrypto.so.1.0.2k /usr/lib64/libcrypto.so<br></code></pre></td></tr></table></figure><h3 id="释放-swap-内存："><a href="#释放-swap-内存：" class="headerlink" title="释放 swap 内存："></a>释放 swap 内存：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sync<br>swapoff -a<br>swapon -a<br>free -m<br></code></pre></td></tr></table></figure><h3 id="Win10-右键添加新建-markdown-文件"><a href="#Win10-右键添加新建-markdown-文件" class="headerlink" title="Win10 右键添加新建 markdown 文件"></a>Win10 右键添加新建 markdown 文件</h3><p>新建一个 txt 文件，填入以下内容:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">Windows Registry Editor Version 5.00<br><br>[HKEY_CLASSES_ROOT\.md]<br>@=&quot;markdown&quot;<br><br>[HKEY_CLASSES_ROOT\.md\ShellNew]<br>&quot;NullFile&quot;=&quot;&quot;<br><br>[HKEY_CLASSES_ROOT\markdown]<br>@=&quot;Blank Markdown file&quot;<br></code></pre></td></tr></table></figure><p>然后把后缀改成 <code>.reg</code> 双击 一路点是 就可以了</p><h3 id="xargs命令"><a href="#xargs命令" class="headerlink" title="xargs命令"></a><code>xargs</code>命令</h3><p>使用管道可以方便地将一个命令的输出作为下一个命令的输入，但是有些命令并不支持管道输入，如<code>ls</code>,<code>mkdir</code>等，这时就可以用<code>xargs</code>命令。</p><p><code>xargs</code>可以接受文件或者命令的输出，将其传递给其他命令，默认是<code>echo</code>；<code>xargs</code>可以将多行的输出转化成一行，这就是其可以将输出传递给其他命令的基础（当然也可以用不同的参数得到不同格式的输出），看几个例子：</p><h4 id="xargs和wc"><a href="#xargs和wc" class="headerlink" title="xargs和wc"></a><code>xargs</code>和<code>wc</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls *.gtf | xargs wc -l<br> 42252 1-6.gtf<br>   42252 1.gtf<br>       8 test.gtf<br>   84512 total<br>   <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#ls 将后缀为gtf的文件名给xargs ，xargs将这些文件名传给wc作为其参数</span></span><br></code></pre></td></tr></table></figure><h4 id="使用-p选项，在执行的时候会询问"><a href="#使用-p选项，在执行的时候会询问" class="headerlink" title="使用-p选项，在执行的时候会询问"></a>使用<code>-p</code>选项，在执行的时候会询问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;one two three&#x27; | xargs -p touch<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">touch</span> one two three ?...y</span><br></code></pre></td></tr></table></figure><h4 id="使用-I选项，执行多个命令"><a href="#使用-I选项，执行多个命令" class="headerlink" title="使用-I选项，执行多个命令"></a>使用<code>-I</code>选项，执行多个命令</h4><p><code>-I</code>后面跟一个字符，在后面的命令中出现相同的字符会被替换掉：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat directories.txt | xargs -I [  echo [ ## [也可以是其他字符<br></code></pre></td></tr></table></figure><p>如果我们要同时执行多个命令，可以使用<code>sh -c</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat directories.txt | xargs -I [ sh -c &#x27;echo [;mkdir [&#x27;<br></code></pre></td></tr></table></figure><p>用这个我们可以改变<code>xargs</code>传递的参数的位置（默认是最后一个参数）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls *.jpg | xargs -n1 -I &#123;&#125; cp &#123;&#125; /data/images ##将当前目录下的所有jpg文件复制到/data/images<br></code></pre></td></tr></table></figure><h4 id="使用-n选项，复制文件到多个位置"><a href="#使用-n选项，复制文件到多个位置" class="headerlink" title="使用-n选项，复制文件到多个位置"></a>使用<code>-n</code>选项，复制文件到多个位置</h4><p><code>-n</code>后面接数字，表示一次传递的参数的数目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"> echo ./dir_one/ ./dir_two/ | xargs -n 1 cp -v *.gtf ##-v 报告复制过程<br> &#x27;1-6.gtf&#x27; -&gt; &#x27;./dir_one/1-6.gtf&#x27;<br>&#x27;1.gtf&#x27; -&gt; &#x27;./dir_one/1.gtf&#x27;<br>&#x27;test.gtf&#x27; -&gt; &#x27;./dir_one/test.gtf&#x27;<br>&#x27;1-6.gtf&#x27; -&gt; &#x27;./dir_two/1-6.gtf&#x27;<br>&#x27;1.gtf&#x27; -&gt; &#x27;./dir_two/1.gtf&#x27;<br>&#x27;test.gtf&#x27; -&gt; &#x27;./dir_two/test.gtf&#x27;<br></code></pre></td></tr></table></figure><h4 id="结合find使用"><a href="#结合find使用" class="headerlink" title="结合find使用"></a>结合<code>find</code>使用</h4><p>用 <code>rm</code> 删除太多的文件时候，可能得到一个错误信息：<code>/bin/rm Argument list too long</code>,用 <code>xargs </code>去避免这个问题:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -name &quot;*.log&quot; -print0 | xargs -0 rm -f<br></code></pre></td></tr></table></figure><h3 id="如何将和文件夹同名但是有后缀的文件一次全部移动到相应的文件夹"><a href="#如何将和文件夹同名但是有后缀的文件一次全部移动到相应的文件夹" class="headerlink" title="如何将和文件夹同名但是有后缀的文件一次全部移动到相应的文件夹"></a>如何将和文件夹同名但是有后缀的文件一次全部移动到相应的文件夹</h3><p><img src="https://raw.githubusercontent.com/wt12318/picgo/master/img/20200403174510.png"></p><p>如何将<code>.pbs</code>文件一次全部移动到相应的文件夹，<code>cancer</code>文件中是这些<code>pbs</code>的名字,是下面的命令产生的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in ./*.pbs ;do basename $i;done &gt; cancer<br></code></pre></td></tr></table></figure><p>由于<code>xargs</code>默认将结果作为下个命令的最后的参数，所以：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat cancer |while read i;do basename $i .pbs | xargs -n 1 mv $i;done<br></code></pre></td></tr></table></figure><h3 id="一次得到所有癌症类型的样本名"><a href="#一次得到所有癌症类型的样本名" class="headerlink" title="一次得到所有癌症类型的样本名"></a>一次得到所有癌症类型的样本名</h3><p>我的所有癌症的<code>maf</code>文件都存在一个相应的文件夹中，怎么将这些文件夹中的样本名提取出来，就是去掉后缀名，对一个癌症可以这样做：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in ./luad/*;do basename $i .maf;done &gt; luadsample.txt<br></code></pre></td></tr></table></figure><p>批量做：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>for i in /public/home/wangshx/wt/tcga_pancancer_dcc_mafs_082115/mafs/maf/*<br>do <br>   for j in $i/*<br>   do <br>     basename $j .maf &gt;&gt; $(echo $i.txt)<br>   done<br>done<br><br></code></pre></td></tr></table></figure><h3 id="遍历文件每一行进行操作"><a href="#遍历文件每一行进行操作" class="headerlink" title="遍历文件每一行进行操作"></a>遍历文件每一行进行操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat success_submitted_list.txt |while read i ;do mv $i ./02 ;done<br></code></pre></td></tr></table></figure><h3 id="提取文件名并去掉后缀"><a href="#提取文件名并去掉后缀" class="headerlink" title="提取文件名并去掉后缀"></a>提取文件名并去掉后缀</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in ./luad/*;do basename $i _out.txt;done &gt; sample<br></code></pre></td></tr></table></figure><h3 id="grep匹配"><a href="#grep匹配" class="headerlink" title="grep匹配"></a><code>grep</code>匹配</h3><p><code>grep</code>的基本模式是：<code>grep &#39;pattern&#39; file_to_search</code> 并且会打印出匹配上<code>pattern</code>的行</p><p><code>gerp</code>常用的参数有：</p><ul><li><p><code>grep -w</code> 匹配整个字符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;my dog is brown&#x27; &gt; sample.txt<br><br>grep -w &#x27;dog&#x27; sample.txt ##my dog is brown<br>grep -w &#x27;do&#x27; sample.txt ##not output<br></code></pre></td></tr></table></figure></li><li><p><code>grep -i</code> 匹配时大小写不敏感</p></li><li><p><code>grep -v</code>返回不匹配的行</p></li><li><p><code>grep -o</code> 只返回匹配的字符，而不是一整行</p></li><li><p><code>grep -c</code> 对匹配的行进行计数，相当于：<code>grep &#39;pattern&#39; file | wc -l</code></p></li><li><p>一些参数返回匹配行的前&#x2F;后行：</p><ul><li><code>grep -A [n] </code> 返回匹配的行和之后的n行</li><li><code>grep -B [n]</code> 返回匹配的行和之前的n行</li><li><code>grep -C [n]</code> 返回匹配的行和之前的n行，之后的n行</li></ul></li><li><p><code>grep -f </code> 后面可以接一个文件，里面有多个要匹配的模式，一个模式一行，也就是：<code>grep -f patterns.txt file.txt</code></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep -v &quot;#&quot; 1.gtf | grep -v &quot;^$&quot; | wc -l ##除去注释行和空行之后的行数，因为`$`是行尾的标记<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep -v &#x27;^#&#x27; 1.gtf | awk &#x27;&#123;print $3, $5-$4+1&#125;&#x27; | head ##计算每种特征的长度<br>gene 1152<br>transcript 1152<br>exon 1152<br>CDS 1149<br>start_codon 3<br>stop_codon 3<br>gene 75<br>transcript 75<br>exon 75<br>CDS 72<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep -v &#x27;^#&#x27; 1.gtf | awk &#x27;&#123;print $3&#125;&#x27; | sort | uniq -c ##这个就是看gtf文件中的feature类型的数量<br>   7050 CDS<br>   7553 exon<br>   7126 gene<br>   6700 start_codon<br>   6692 stop_codon<br>   7126 transcript<br></code></pre></td></tr></table></figure><p>找出文件2中有而文件1中没有的行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep -vf file1 file2<br></code></pre></td></tr></table></figure><h3 id="文件上下翻转和左右翻转"><a href="#文件上下翻转和左右翻转" class="headerlink" title="文件上下翻转和左右翻转"></a>文件上下翻转和左右翻转</h3><ul><li><p><code>tac</code> 文件上下翻转，也就是第一行变为最后一行，第二行 变成倒数第二行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#首先创建一个文本</span></span><br>touch taccommand<br>vi taccommand<br><span class="hljs-meta prompt_">#</span><span class="language-bash">first</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">second</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">third</span><br>cat taccommand | tac<br><span class="hljs-meta prompt_">#</span><span class="language-bash">third</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">second</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">first</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#我们也可以直接输入文本，使用&lt;&lt;命令</span></span><br>cat &lt;&lt;END | tac##&lt;&lt;后接的就是终止符,这种方式并不创建一个文本<br><br></code></pre></td></tr></table></figure></li><li><p><code>rev</code> 将每列反转，也就是将第一个字符变成最后一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;a | rev<br><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt; abcde</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt; xyz</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt; a</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">edcba</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">zyx</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="使用rename批量重命名"><a href="#使用rename批量重命名" class="headerlink" title="使用rename批量重命名"></a>使用<code>rename</code>批量重命名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch test1.fa test2.fa <br>rename &#x27;test&#x27; &#x27;new&#x27; test*.fa<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#批量提取一定长度的文件名，不改变后缀，重命名</span></span><br>for i in *.pbs ; do rename `basename $i .pbs` `echo $&#123;i:0:8&#125;` $i ;done <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可以使用</span><br>rename &#x27;s/names/replace/&#x27; file<br></code></pre></td></tr></table></figure><h3 id="一些有用的快捷操作"><a href="#一些有用的快捷操作" class="headerlink" title="一些有用的快捷操作"></a>一些有用的快捷操作</h3><ul><li>! 加之前输入过的命令的前几个字母，快速获取前面的命令</li><li>回到命令的行首可以用<code>ctrl a</code>或者<code>home</code>键，回到行尾可以用<code>ctrl e</code>或者<code>end</code>键；比如我写好一个命令但是却不想运行了可以回到行首加上#再回车</li><li><code>!!</code>表示上一条命令</li><li>替换上一个命令中的字符，再运行一遍命令，用于需要对多个文件执行同样的命令，又不想写循环的情况，使用<code>:gs(global substitute)</code> 如：<code>!!:gs/test1/test2</code> 将上一条命令中的test1替换成test2再运行一次</li></ul><h3 id="标准输入，标准输出与标准错误"><a href="#标准输入，标准输出与标准错误" class="headerlink" title="标准输入，标准输出与标准错误"></a>标准输入，标准输出与标准错误</h3><p>主要是3个符号：<code>&lt;</code> <code>&gt;</code> <code>-</code>；标准输出与标准错误都是输出到屏幕上的；可以用<code>&gt;</code> 将标准输出重定向到某个文件；<code>2 &gt;&amp;1</code> 将标准错误重定向到标准输出，如果已经将标准输出定向到某个文件，那么这个命令可以将标准错误与标准输出定向到一个文件（<strong>Linux 终端用 2 表示标准错误，1 表示标准输出</strong>）；<code>&lt;</code>表示标准输入 后面接可以产生输出的命令 可以将输出转为输入；也可以用<code>-</code>表示标准输入，下面看一个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#我们先写一个脚本</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;i am std output&quot;<br>unexisted_command<br><br>bash stdout_error.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">i am std output,这个就是标准输出</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">stdout_error.sh: line 4: unexisted_command: <span class="hljs-built_in">command</span> not found，这个就是标准错误</span><br><br>bash stdout_error.sh &gt; stdout_error.stdout##将标准输出重定向到文件，但是标准错误还会在屏幕上显示<br>bash stdout_error.sh &gt; stdout_error.stdout 2&gt; stdout_error.stderr#将输出和错误都重定向到文件，注意2和&gt;之间没有空格<br>bash stdout_error.sh &gt; stdout_error.stdout 2&gt;&amp;1 ##将输出和错误重定向到一个文件<br><br>cat &lt;&lt;END | diff - &lt;(echo &quot;1 2 3&quot; | tr &#x27; &#x27; &#x27;\n&#x27;) ##diff有两个输入，一个是上一个命令的输出，一个是&lt;后的输出,tr是用来替换字符的<br></code></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>解压用<code>unzip</code> ,压缩用<code>zip</code></p><h4 id="gz"><a href="#gz" class="headerlink" title="gz"></a>gz</h4><p>解压用<code>gunzip</code>，压缩用<code>gzip</code></p><h4 id="tar-gz"><a href="#tar-gz" class="headerlink" title="tar.gz"></a>tar.gz</h4><p>一些参数：</p><ul><li><code>-c</code>压缩</li><li><code>-x</code>解压</li><li><code>-t</code>查看压缩包的文件名</li><li><code>-z</code>指定<code>.gz</code></li><li><code>-f</code>指定压缩和解压缩的文件名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zcv -f cp_folder.tar.gz cp_folder       #打包压缩文件夹（gzip格式）<br><br>tar -ztv -f cp_folder.tar.gz                 #查看压缩文件夹中的文件名（gzip格式）<br><br>tar -zxv -f cp_folder.tar.gz                 #打开包并解压缩（gzip格式）<br></code></pre></td></tr></table></figure><h4 id="bz2"><a href="#bz2" class="headerlink" title="bz2"></a>bz2</h4><p>压缩：<code>bzip2</code>;解压：<code>bunzip2</code></p><p>也可以用<code>tar</code> 使用<code>-j</code>参数调用bzip，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xjf a.tar.bz2<br></code></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="文件生成"><a href="#文件生成" class="headerlink" title="文件生成"></a>文件生成</h4><p><code>seq()</code>生成序列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">seq 1 10 ##默认分割符为换行符\n<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>seq -s &quot; &quot; 1 2 10 #也可以指定分隔符和步长<br>1 3 5 7 9<br>cat &lt;(seq 0 3 17) &lt;(seq 3 6 18) &gt; text##用标准输入和标准输出<br>0<br>3<br>6<br>9<br>12<br>15<br>3<br>9<br>15<br></code></pre></td></tr></table></figure><h4 id="文件排序"><a href="#文件排序" class="headerlink" title="文件排序"></a>文件排序</h4><p>使用<code>sort</code>进行排序，常用参数有：</p><ul><li><code>-n</code> 数值排序</li><li><code>-r</code>逆序</li><li><code>-c</code> 检测文件是否已经排序</li><li><code>-k</code>指定使用哪几列排序</li><li><code>-m</code>合并排序好的文件</li><li><code>-u</code>删除重复行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs shell">sort test ##直接排序<br>1<br>12<br>13<br>14<br>14<br>15<br>16<br>2<br>24<br>3<br>35<br>4<br><br> sort -n test ## 按照数值排序<br>1<br>2<br>3<br>4<br>12<br>13<br>14<br>14<br>15<br>16<br>24<br>35<br><br>sort test &gt; on_test<br>sort -n test &gt; n_test<br><br>sort -cn on_test ##注意用cn就表示检查是否按照数值排序的<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">sort</span>: on_test:9: disorder: 2</span><br>sort -cn n_test ##没有输出，表示排序了<br><br>sort -nu test<br>sort -n test | uniq##两种相同，都是将重复元素去掉<br>1<br>2<br>3<br>4<br>12<br>13<br>14<br>15<br>16<br>24<br>35<br><br>sort -n test | uniq -d##获取重复的行<br>14<br><br>sort -n test | uniq -c ##获取重复的行重复的次数<br>      1<br>      1 1<br>      1 2<br>      1 3<br>      1 4<br>      1 12<br>      1 13<br>      2 14<br>      1 15<br>      1 16<br>      1 24<br>      1 35<br></code></pre></td></tr></table></figure><h4 id="一个例子，fasta序列提取"><a href="#一个例子，fasta序列提取" class="headerlink" title="一个例子，fasta序列提取"></a>一个例子，<code>fasta</code>序列提取</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat test.fasta<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">SOX2</span><br>ACGAGGGACGCATCGGACGACTGCAGGACTGTC<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">POU5F1</span><br>ACGAGGGACGCATCGGACGACTGCAGGACTGTC<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">NANOG</span><br>CGGAAGGTAGTCGTCAGTGCAGCGAGTCCGT<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#提取含有SOX2的序列信息</span></span><br>grep -A 1 &quot;SOX2&quot; test.fasta<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">SOX2</span><br>ACGAGGGACGCATCGGACGACTGCAGGACTGTC<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#-A 1表示输出匹配的行和其后一行after</span></span><br></code></pre></td></tr></table></figure><p>也可以用<code>awk</code>来操作:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27;BEGIN&#123;OFS=FS=&quot;\t&quot;&#125;&#123;if($0 ~ /&gt;/) &#123;name=$0;sub(&quot;&gt;&quot;,&quot;&quot;,name);&#125;\<br>else seq[name]=$0;&#125;END&#123;print &quot;&gt;SOX2&quot;; print seq[&quot;SOX2&quot;]&#125;&#x27; test.fasta<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#$0 ~ /&gt;/ ~表示模式匹配的运算符，看这一行里面有没有&gt;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#sub 是进行替换的：sub(要替换的部分，要替换成的部分，要替换的字符串</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#seq[name] 相当于一个字典，name就是key</span></span><br></code></pre></td></tr></table></figure><h3 id="判断某个文件夹下是否有某个文件名-在一个文件中-，如果有将其移动到另一个文件夹"><a href="#判断某个文件夹下是否有某个文件名-在一个文件中-，如果有将其移动到另一个文件夹" class="headerlink" title="判断某个文件夹下是否有某个文件名(在一个文件中)，如果有将其移动到另一个文件夹"></a>判断某个文件夹下是否有某个文件名(在一个文件中)，如果有将其移动到另一个文件夹</h3><p>首先要对含有文件名的文件进行遍历：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat all.txt |<br>while read file_name;<br>do<br>...<br>done<br></code></pre></td></tr></table></figure><p>然后判断是否有某个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>cat SRR_Acc_List.txt |<br>while read file_name<br>do<br>if [ -e ./fastq_gz_2/$&#123;file_name&#125;_1.fastq.gz ]<br>then<br>mv ./fastq_gz_2/$&#123;file_name&#125;_1.fastq.gz ./liu_2019<br>else<br>echo &quot;not exist: $file_name&quot;<br>fi<br>done<br></code></pre></td></tr></table></figure><p>判断文件夹下是否有某个后缀的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in ./SRR*/;do file=$(ls $i/*.tmp 2&gt;/dev/null | wc -l);if [ $file != 0 ];then echo $i;fi;done ##判断是否有后缀为tmp的文件<br></code></pre></td></tr></table></figure><h3 id="删除空文件夹"><a href="#删除空文件夹" class="headerlink" title="删除空文件夹"></a>删除空文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>for i in ./SRR*<br>do <br>a=$(ls $i | wc -l)<br>if [ $a -eq 0 ]<br>then <br>    rm -rf $i<br>fi<br>done<br></code></pre></td></tr></table></figure><h3 id="几个取整函数：ceiling-floor-trunc-round-signif"><a href="#几个取整函数：ceiling-floor-trunc-round-signif" class="headerlink" title="几个取整函数：ceiling ; floor ; trunc ; round; signif"></a>几个取整函数：ceiling ; floor ; trunc ; round; signif</h3><p><code>ceiling</code> 返回不小于该数字的最小整数，即向上取整</p><p><code>floor</code> 返回不大于该数字的最大整数，即向下取整</p><p><code>trunc</code> 返回距离0最近的整数，即向零取整</p><p><img src="https://raw.githubusercontent.com/wt12318/picgo/master/img/20200128111606.png"></p><p><code>round</code> 采取<strong>四舍六入五成双</strong>的原则：</p><ul><li><code>&lt;=</code>4舍去</li><li><code>&gt;=</code>6进一位</li><li>五成双：<ul><li>当5后面有数字的时候，舍5进一位</li><li>当5后面没有数字的时候：<ul><li>当5前一位为奇数时，舍5进一位</li><li>当5前一位为偶数时，舍5不进位</li></ul></li></ul></li></ul><p><code>round</code>也可以指定保留小数点的位数：<code>round(x,digits=0)</code></p><p><code>signif</code> 保留有效数字，<code>signif(x,digits=6)</code> 默认保留6位</p><h3 id="安装github上的包"><a href="#安装github上的包" class="headerlink" title="安装github上的包"></a>安装<code>github</code>上的包</h3><p>首先使用<code>devtools</code>来安装：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">devtools<span class="hljs-operator">::</span>install_github<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;gadenbuie/regexplain&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>结果报错，应该是网不行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">Error<span class="hljs-operator">:</span> Failed to install <span class="hljs-string">&#x27;unknown package&#x27;</span> from GitHub<span class="hljs-operator">:</span><br>  Timeout was reached<span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span>api.github.com<span class="hljs-punctuation">]</span> Resolving timed out after <span class="hljs-number">10000</span> milliseconds<br></code></pre></td></tr></table></figure><p>上github将包的zip下载下来，用devtools的本地安装：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">devtools<span class="hljs-operator">::</span>install_local<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;~/packages/regexplain-master.zip&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>还是不行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">Error<span class="hljs-operator">:</span> Failed to install <span class="hljs-string">&#x27;regexplain-master.zip&#x27;</span> from local<span class="hljs-operator">:</span><br>  Timeout was reached<span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span>api.github.com<span class="hljs-punctuation">]</span> Resolving timed out after <span class="hljs-number">10000</span> milliseconds<br></code></pre></td></tr></table></figure><p>只能用一般的本地安装包的方法：先解压</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;~/packages/regexplain-master/&quot;</span><span class="hljs-punctuation">,</span>repos<span class="hljs-operator">=</span><span class="hljs-literal">NULL</span><span class="hljs-punctuation">,</span>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;source&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="配置国内-R镜像"><a href="#配置国内-R镜像" class="headerlink" title="配置国内 R镜像"></a>配置国内 R镜像</h3><p>使用 <code>usethis::edit_r_profile()</code> 打开 <code>.Rprofile</code>, 然后在末尾添加相应的镜像。</p><p><a href="https://mirror.nju.edu.cn/help/bioconductor">南大</a>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">options<span class="hljs-punctuation">(</span>BioC_mirror<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://mirror.nju.edu.cn/bioconductor&quot;</span><span class="hljs-punctuation">)</span><br>options<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;repos&quot;</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>CRAN<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://mirror.nju.edu.cn/CRAN/&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/CRAN/">清华</a>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">options<span class="hljs-punctuation">(</span>BioC_mirror<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/bioconductor&quot;</span><span class="hljs-punctuation">)</span><br>options<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;repos&quot;</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>CRAN<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><a href="https://mirrors.ustc.edu.cn/help/">中科大</a>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">options<span class="hljs-punctuation">(</span>repos <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>USTC<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://mirrors.ustc.edu.cn/CRAN/&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>如果改了镜像安装包时还是会出现下载失败，可以尝试修改 <code>download.file.method</code> (Rprofile):</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">options<span class="hljs-punctuation">(</span>download.file.method<span class="hljs-operator">=</span><span class="hljs-string">&quot;libcurl&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##添加到.Rprofile</span><br></code></pre></td></tr></table></figure><h3 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h3><p>参考：<a href="https://www.r-bloggers.com/four-ways-to-reverse-a-string-in-r/">https://www.r-bloggers.com/four-ways-to-reverse-a-string-in-r/</a></p><p>翻转字符串是一项常见的操作，比如我们想要找与一条DNA序列的互补序列就需要用到翻转</p><p>先生成一个短序列：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>dna <span class="hljs-operator">&lt;-</span> paste<span class="hljs-punctuation">(</span>sample<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;T&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;C&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;G&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <br>                    replace <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> collapse <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>第一种方法：先用<code>strsplit()</code>将序列拆分成单个字符向量，再用<code>rev()</code>翻转向量，最后用<code>paste()</code>连起来：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R">start <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">proc.time</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>splits <span class="hljs-operator">&lt;-</span> strsplit<span class="hljs-punctuation">(</span>dna<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br>reversed <span class="hljs-operator">&lt;-</span> rev<span class="hljs-punctuation">(</span>splits<span class="hljs-punctuation">)</span><br>final_result <span class="hljs-operator">&lt;-</span> paste<span class="hljs-punctuation">(</span>reversed<span class="hljs-punctuation">,</span> collapse <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><br>end <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">proc.time</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br>print<span class="hljs-punctuation">(</span>end <span class="hljs-operator">-</span> start<span class="hljs-punctuation">)</span><br><span class="hljs-comment">#  用户   系统   流逝 </span><br><span class="hljs-comment">#12.931  0.860 13.862 </span><br></code></pre></td></tr></table></figure><p>第二种方法：先用R 内置的<code>utf8ToInt()</code>将字符转化成整数向量，再用<code>rev()</code>进行翻转,最后再用<code>intToUtf8</code>转化成字符</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">utf8ToInt<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;abc&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">#[1] 97 98 99</span><br><br>start <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">proc.time</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>final_result <span class="hljs-operator">&lt;-</span> intToUtf8<span class="hljs-punctuation">(</span>rev<span class="hljs-punctuation">(</span>utf8ToInt<span class="hljs-punctuation">(</span>dna<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>end <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">proc.time</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br>print<span class="hljs-punctuation">(</span>end <span class="hljs-operator">-</span> start<span class="hljs-punctuation">)</span><br><span class="hljs-comment">#用户  系统  流逝 </span><br><span class="hljs-comment">#1.569 0.538 2.136 </span><br></code></pre></td></tr></table></figure><p>第三种方法就是用<code>stringi</code>包的<code>stri_reverse</code>函数进行翻转：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">start <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">proc.time</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>final_result <span class="hljs-operator">&lt;-</span> stringi<span class="hljs-operator">::</span>stri_reverse<span class="hljs-punctuation">(</span>dna<span class="hljs-punctuation">)</span><br>end <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">proc.time</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br>print<span class="hljs-punctuation">(</span>end <span class="hljs-operator">-</span> start<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 用户  系统  流逝 </span><br><span class="hljs-comment">#0.295 0.028 0.336 </span><br></code></pre></td></tr></table></figure><p>第四种方法就是使用<code>Biostrings</code>包里面的<code>str_rev()</code>函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-keyword">if</span><span class="hljs-punctuation">(</span>require<span class="hljs-punctuation">(</span>Biostrings<span class="hljs-punctuation">)</span><span class="hljs-operator">==</span><span class="hljs-built_in">F</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  BiocManager<span class="hljs-operator">::</span>install<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Biostrings&quot;</span><span class="hljs-punctuation">)</span><br>  library<span class="hljs-punctuation">(</span>Biostrings<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-keyword">else</span><span class="hljs-punctuation">&#123;</span>library<span class="hljs-punctuation">(</span>Biostrings<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#125;</span><br>start <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">proc.time</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>final_result <span class="hljs-operator">&lt;-</span> str_rev<span class="hljs-punctuation">(</span>dna<span class="hljs-punctuation">)</span><br>end <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">proc.time</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br>print<span class="hljs-punctuation">(</span>end <span class="hljs-operator">-</span> start<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 用户  系统  流逝 </span><br><span class="hljs-comment">#0.031 0.001 0.032 </span><br></code></pre></td></tr></table></figure><h3 id="Centos7-编译安装-R"><a href="#Centos7-编译安装-R" class="headerlink" title="Centos7 编译安装 R"></a>Centos7 编译安装 R</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://mirrors.sjtug.sjtu.edu.cn/cran/src/base/R-4/R-4.1.0.tar.gz<br><br>sudo yum install gcc-c++<br>sudo yum -y install gcc-gfortran<br>sudo yum install readline-devel<br>sudo yum install zlib-devel<br>sudo yum install bzip2-devel<br>sudo yum -y install xz-devel.x86_64<br>sudo yum install pcre pcre-devel<br>sudo yum install libcurl libcurl-devel<br>sudo yum install pcre2 pcre2-devel<br>sudo yum install java-1.8.0-openjdk-devel.x86_64<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#安装perl</span></span><br>sudo yum install perl*<br>cpan install XML::Simple<br>cpan install XML::LibXML<br>wget https://www.cpan.org/src/5.0/perl-5.34.0.tar.gz<br>tar zxf perl-5.34.0.tar.gz<br>./Configure -des -D -prefix=/usr/local/<br>make<br>make install<br><br>sudo yum install libpng-devel<br>sudo yum install libjpeg-devel<br>sudo yum install libtiff-devel<br>sudo yum install libcairo-devel<br>sudo yum search libcair<br>sudo yum search cairo<br>sudo yum install cairo-devel.x86_64<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">configure: WARNING: you cannot build info or HTML versions of the R manuals</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">configure: WARNING: you cannot build PDF versions of the R manuals</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">configure: WARNING: you cannot build PDF versions of vignettes and <span class="hljs-built_in">help</span> pages</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#https://stackoverflow.com/questions/24983906/configure-warning-you-cannot-build-info-or-html-versions-of-the-r-manuals</span></span><br>sudo yum install texinfo.x86_64<br>sudo yum install texlive.x86_64<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">configure: WARNING: neither inconsolata.sty nor zi4.sty found: PDF vignettes and package manuals will not be rendered optimally</span> <br>wget http://mirrors.ctan.org/fonts/inconsolata.zip<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压 ：</span><br>unzip inconsolata.zip <br><span class="hljs-meta prompt_">#</span><span class="language-bash">将文件拷贝到目录下：</span><br>cp -Rfp inconsolata/* /usr/share/texmf/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">刷新sty ：</span><br>mktexlsr<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#最后编译安装</span></span><br>./configure --with-cairo --enable-memory-profiling --enable-R-shlib <br>            --with-blas --with-lapack --prefix=/opt/R/4.1 -with-x=no<br>make<br>make install<br></code></pre></td></tr></table></figure><h3 id="设置了-SSH-key-但是-Github-push-仍然需要密码"><a href="#设置了-SSH-key-但是-Github-push-仍然需要密码" class="headerlink" title="设置了 SSH key 但是 Github push 仍然需要密码"></a>设置了 SSH key 但是 Github push 仍然需要密码</h3><p>设置了 SSH key 但是 Github push 仍然需要密码，而 github 在 8 月 13 后只支持已 token 的形式 push：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin main<br>Username for &#x27;https://github.com&#x27;: wt12318<br>Password for &#x27;https://wt12318@github.com&#x27;:<br>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.<br>fatal: unable to access &#x27;https://github.com/wt12318/Blog_2.git/&#x27;: The requested URL returned error: 403<br></code></pre></td></tr></table></figure><p>需要输入密码是由于使用了 <code>https</code> 的 url，参考<a href="https://stackoverflow.com/questions/21095054/ssh-key-still-asking-for-password-and-passphrase">git - SSH Key - Still asking for password and passphrase - Stack Overflow</a>，所以需要从 <code>https</code> 转到 <code>ssh</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote -v<br>origin  https://github.com/wt12318/Blog_2.git (fetch)<br>origin  https://github.com/wt12318/Blog_2.git (push)<br><br>git remote set-url origin git@github.com:wt12318/Blog_2.git<br>git remote -v<br>origin  git@github.com:wt12318/Blog_2.git (fetch)<br>origin  git@github.com:wt12318/Blog_2.git (push)<br><br>git push origin main<br></code></pre></td></tr></table></figure><h3 id="如何将-PPT-无损转成-PDF"><a href="#如何将-PPT-无损转成-PDF" class="headerlink" title="如何将 PPT 无损转成 PDF"></a>如何将 PPT 无损转成 PDF</h3><p>用 Office Powerpoint 打开 PPT （前提是电脑已经装了 Adobe Acrobat）。</p><p>首先点击 ACROBAT 插件首选项–高级设置进行设置：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210821102156796.png" style="zoom:50%;" /><p>接着将一般里面的对象级压缩和图像中三类图像的采样和压缩都关闭：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210821102401529.png" style="zoom:50%;" /><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210821102503066.png" style="zoom:50%;" /><p>接着就可以确定并导出 PDF 了。一个好用的在线 PDF 编辑工具：<a href="https://tools.pdf24.org/zh/">PDF24 Tools: 免费且易于使用的在线PDF工具</a></p><h3 id="如何使用-FTP-下载-ENA-的-FASTQ-数据"><a href="#如何使用-FTP-下载-ENA-的-FASTQ-数据" class="headerlink" title="如何使用 FTP 下载 ENA 的 FASTQ 数据"></a>如何使用 FTP 下载 ENA 的 FASTQ 数据</h3><p>先安装ftp服务（centos 7）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum -y install lftp<br></code></pre></td></tr></table></figure><p>没有权限的可以手动编译：<a href="http://lftp.yar.ru/get.html">http://lftp.yar.ru/get.html</a></p><p>安装好了之后就可以使用ENA上的ftp地址进行下载，比如这里的CCLE的一个细胞系的RNA-seq数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lftp ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR861/006/SRR8615916 <span class="hljs-comment">##注意要加上ftp://</span><br></code></pre></td></tr></table></figure><p>ls 一下就可以看到我们要下载的数据：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210923093125983.png"></p><p>然后使用 <code>pget</code> 就可以进行多线程下载了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pget -n 10 SRR8615916_1.fastq.gz<br></code></pre></td></tr></table></figure><p>下载速度还是比较快的：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210923093222640.png"></p><h3 id="如何用-R-一次性读入一个文件夹下所有的文件并合并"><a href="#如何用-R-一次性读入一个文件夹下所有的文件并合并" class="headerlink" title="如何用 R 一次性读入一个文件夹下所有的文件并合并"></a>如何用 R 一次性读入一个文件夹下所有的文件并合并</h3><p>先生成一些文件：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">dir.create<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">##在 test 下生成一些csv文件</span><br>df <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span><br>  x<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  y<span class="hljs-operator">=</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;c&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;d&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>each<span class="hljs-operator">=</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>dt_list <span class="hljs-operator">&lt;-</span> split<span class="hljs-punctuation">(</span>df<span class="hljs-punctuation">,</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>df<span class="hljs-operator">$</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>dt_list<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  write.csv<span class="hljs-punctuation">(</span>dt_list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test/&quot;</span><span class="hljs-punctuation">,</span>i<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.csv&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>最直接的方法就是使用 <code>for</code> 循环将每个文件读入并存为 <code>list</code> 的一个元素，接着可以使用 <code>dplyr</code> 的 <code>bind_rows</code> 函数进行合并：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">files <span class="hljs-operator">&lt;-</span>  list.files<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test/&quot;</span><span class="hljs-punctuation">,</span>pattern<span class="hljs-operator">=</span><span class="hljs-string">&quot;*.csv&quot;</span><span class="hljs-punctuation">,</span>full.names <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><br>res <span class="hljs-operator">&lt;-</span> vector<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;list&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-built_in">seq_along</span><span class="hljs-punctuation">(</span>files<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  res<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> read.csv<span class="hljs-punctuation">(</span>files<span class="hljs-punctuation">[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>res <span class="hljs-operator">&lt;-</span> dplyr<span class="hljs-operator">::</span>bind_rows<span class="hljs-punctuation">(</span>res<span class="hljs-punctuation">)</span><br><span class="hljs-comment">##也可以使用 data.table 的 rbindlist 函数</span><br><span class="hljs-comment">##res &lt;- data.table::rbindlist(res)</span><br></code></pre></td></tr></table></figure><p>能用 <code>for</code> 循环的地方就可以使用 <code>apply</code> 簇函数进行替代简化：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>dplyr<span class="hljs-punctuation">)</span><br>files <span class="hljs-operator">&lt;-</span>  list.files<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test/&quot;</span><span class="hljs-punctuation">,</span>pattern<span class="hljs-operator">=</span><span class="hljs-string">&quot;*.csv&quot;</span><span class="hljs-punctuation">,</span>full.names <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><br>res <span class="hljs-operator">&lt;-</span> lapply<span class="hljs-punctuation">(</span>files<span class="hljs-punctuation">,</span> read.csv<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  bind_rows<span class="hljs-punctuation">(</span>.<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>也可以使用 <code>do.call</code> 结合 <code>rbind</code> 直接将读入的数据按行合并：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">files <span class="hljs-operator">&lt;-</span>  list.files<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test/&quot;</span><span class="hljs-punctuation">,</span>pattern<span class="hljs-operator">=</span><span class="hljs-string">&quot;*.csv&quot;</span><span class="hljs-punctuation">,</span>full.names <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><br>res <span class="hljs-operator">&lt;-</span> do.call<span class="hljs-punctuation">(</span>rbind<span class="hljs-punctuation">,</span>lapply<span class="hljs-punctuation">(</span>files<span class="hljs-punctuation">,</span>read.csv<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="如何在-Shell-中并行"><a href="#如何在-Shell-中并行" class="headerlink" title="如何在 Shell 中并行"></a>如何在 Shell 中并行</h3><p>首先需要安装 <code>GNU parallel</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://ftp.gnu.org/gnu/parallel/parallel-latest.tar.bz2<br>tar xjf parallel-latest.tar.bz2<br>cd parallel-20211022/<br>./configure --prefix=$HOME<br>make<br>make install<br></code></pre></td></tr></table></figure><p>最简单的使用方法就是：<code>cat list | parallel do_something | process_output</code>，可以通过 <code>-j</code> 参数来指定需要调用的核数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> `<span class="hljs-built_in">cat</span> /home/wt/common_driver/data/hla.txt`<br><span class="hljs-keyword">do</span><br>  hla=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$line</span> | awk -F<span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br>  hla_alt=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$line</span> | awk -F<span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br>  <span class="hljs-built_in">cat</span> /home/wt/common_driver/data/pep8/files | parallel -j 15 netMHCpan -p /home/wt/common_driver/data/pep8/split/&#123;&#125; -BA -l 8 -xls -a <span class="hljs-variable">$hla</span> -xlsfile /home/wt/common_driver/data/pep8/results/<span class="hljs-variable">$&#123;hla_alt&#125;</span>_&#123;&#125;.xls<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="Shell-如何按行把文件拼起来"><a href="#Shell-如何按行把文件拼起来" class="headerlink" title="Shell 如何按行把文件拼起来"></a>Shell 如何按行把文件拼起来</h2><p>使用 <code>column</code> 命令：<code>paste file1 file2 | column -s $&#39;\t&#39; -t</code>, <code>-s</code> 表示分割符<a href="https://linux.die.net/man/1/column">column(1): columnate lists - Linux man page (die.net)</a></p><h2 id="启动-Rstudio-server-报错"><a href="#启动-Rstudio-server-报错" class="headerlink" title="启动 Rstudio-server 报错"></a>启动 Rstudio-server 报错</h2><p>先 <code>rstudio-server stop</code> 再 <code>rstudio-server start</code> 报错：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220228084453167.png"></p><p>找到占用8787端口的进程，然后kill掉：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsof -i tcp:8787<br>sudo kill -9 PID<br></code></pre></td></tr></table></figure><p>接着重启 Rstudio 就可以了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rstudio-server restart<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220228084711556.png"></p><h2 id="安装-tensorflow-额外包-CURL-CA-BUNDLE-设置"><a href="#安装-tensorflow-额外包-CURL-CA-BUNDLE-设置" class="headerlink" title="安装 tensorflow 额外包 CURL_CA_BUNDLE 设置"></a>安装 tensorflow 额外包 CURL_CA_BUNDLE 设置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">install.packages(&quot;tensorflow&quot;)<br>tensorflow::install_tensorflow(extra_packages=&#x27;tensorflow-probability&#x27;)<br></code></pre></td></tr></table></figure><p>报错：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220225122450-ebc8ilw.png"></p><p>安装官方的指示：</p><hr><p>Hi, can you please follow the instructions on the Issue Template that, I believe, was presented to you when you filed the issue? Issue template reproduced here for convenience:</p><p>Many installation issues are resolved by running the following in a <strong>fresh R session</strong> (you can restart R in Rstudio with Ctrl+Shift+F10):</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">#installthedevelopmentversionofpackages,incasethe</span><br><span class="hljs-comment">#issueisalreadyfixedbutnotonCRANyet.</span><br>install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;remotes&quot;</span><span class="hljs-punctuation">)</span><br>remotes<span class="hljs-operator">::</span>install_github<span class="hljs-punctuation">(</span>sprintf<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rstudio/%s&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;reticulate&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;tensorflow&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;keras&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>reticulate<span class="hljs-operator">::</span>miniconda_uninstall<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-comment">#startwithablankslate</span><br>reticulate<span class="hljs-operator">::</span>install_miniconda<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>keras<span class="hljs-operator">::</span>install_keras<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>Test to see if installation was successful.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">tensorflow<span class="hljs-operator">::</span>as_tensor<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;HelloWorld&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>If the above snippet succeeded and you saw something like <code>tf.Tensor(b&#39;Hello World&#39;, shape=(), dtype=string)</code>, then 🎉, you’ve successfully installed Tensorflow.</p><p>If the above installation failed, please gather some diagnostic info:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">reticulate<span class="hljs-operator">::</span>py_config<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>tensorflow<span class="hljs-operator">::</span>tf_config<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>reticulate<span class="hljs-operator">::</span>import<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;tensorflow&quot;</span><span class="hljs-punctuation">)</span><br>reticulate<span class="hljs-operator">::</span>py_last_error<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>sessionInfo<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>Please copy and paste the FULL OUTPUT of running all three snippets, and be sure to enclose the output lines with three backticks (&#96;&#96;&#96;) for monospace formatting.</p><hr><p>但是重新安装 conda 时出错：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> reticulate<span class="hljs-operator">::</span>install_miniconda<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">*</span> Installing Miniconda <span class="hljs-operator">-</span><span class="hljs-operator">-</span> please wait a moment ...<br><span class="hljs-operator">*</span> Downloading <span class="hljs-string">&#x27;https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&#x27;</span> ...<br>trying URL <span class="hljs-string">&#x27;https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&#x27;</span><br>Error <span class="hljs-keyword">in</span> download.file<span class="hljs-punctuation">(</span>url<span class="hljs-punctuation">,</span> destfile <span class="hljs-operator">=</span> installer<span class="hljs-punctuation">,</span> mode <span class="hljs-operator">=</span> <span class="hljs-string">&quot;wb&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">:</span> <br>  cannot open URL <span class="hljs-string">&#x27;https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&#x27;</span><br>In addition<span class="hljs-operator">:</span> Warning message<span class="hljs-operator">:</span><br>In download.file<span class="hljs-punctuation">(</span>url<span class="hljs-punctuation">,</span> destfile <span class="hljs-operator">=</span> installer<span class="hljs-punctuation">,</span> mode <span class="hljs-operator">=</span> <span class="hljs-string">&quot;wb&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">:</span><br>  URL <span class="hljs-string">&#x27;https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&#x27;</span><span class="hljs-operator">:</span> status was <span class="hljs-string">&#x27;Problem with the SSL CA cert (path? access rights?)&#x27;</span><br></code></pre></td></tr></table></figure><p>查看这个函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> reticulate<span class="hljs-operator">::</span>install_miniconda<br><span class="hljs-keyword">function</span> <span class="hljs-punctuation">(</span>path <span class="hljs-operator">=</span> miniconda_path<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> update <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> force <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span> <br><span class="hljs-punctuation">&#123;</span><br>    check_forbidden_install<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Miniconda&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>grepl<span class="hljs-punctuation">(</span><span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span> path<span class="hljs-punctuation">,</span> fixed <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <br>        stop<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;cannot install Miniconda into a path containing spaces&quot;</span><span class="hljs-punctuation">)</span><br>    install_miniconda_preflight<span class="hljs-punctuation">(</span>path<span class="hljs-punctuation">,</span> force<span class="hljs-punctuation">)</span><br>    message<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;* Installing Miniconda -- please wait a moment ...&quot;</span><span class="hljs-punctuation">)</span><br>    url <span class="hljs-operator">&lt;-</span> miniconda_installer_url<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>    installer <span class="hljs-operator">&lt;-</span> miniconda_installer_download<span class="hljs-punctuation">(</span>url<span class="hljs-punctuation">)</span><br>    miniconda_installer_run<span class="hljs-punctuation">(</span>installer<span class="hljs-punctuation">,</span> update<span class="hljs-punctuation">,</span> path<span class="hljs-punctuation">)</span><br>    ok <span class="hljs-operator">&lt;-</span> miniconda_exists<span class="hljs-punctuation">(</span>path<span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;&amp;</span> miniconda_test<span class="hljs-punctuation">(</span>path<span class="hljs-punctuation">)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>ok<span class="hljs-punctuation">)</span> <br>        stopf<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Miniconda installation failed [unknown reason]&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>update<span class="hljs-punctuation">)</span> <br>        miniconda_update<span class="hljs-punctuation">(</span>path<span class="hljs-punctuation">)</span><br>    conda <span class="hljs-operator">&lt;-</span> miniconda_conda<span class="hljs-punctuation">(</span>path<span class="hljs-punctuation">)</span><br>    python <span class="hljs-operator">&lt;-</span> miniconda_python_package<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>    conda_create<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;r-reticulate&quot;</span><span class="hljs-punctuation">,</span> packages <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>python<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;numpy&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>        conda <span class="hljs-operator">=</span> conda<span class="hljs-punctuation">)</span><br>    messagef<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;* Miniconda has been successfully installed at %s.&quot;</span><span class="hljs-punctuation">,</span> <br>        pretty_path<span class="hljs-punctuation">(</span>path<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    path<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>关键在于这3句：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">url <span class="hljs-operator">&lt;-</span> miniconda_installer_url<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>installer <span class="hljs-operator">&lt;-</span> miniconda_installer_download<span class="hljs-punctuation">(</span>url<span class="hljs-punctuation">)</span><br>miniconda_installer_run<span class="hljs-punctuation">(</span>installer<span class="hljs-punctuation">,</span> update<span class="hljs-punctuation">,</span> path<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> url <span class="hljs-operator">&lt;-</span> reticulate<span class="hljs-operator">:::</span>miniconda_installer_url<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> url<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&quot;</span><br><br><span class="hljs-operator">&gt;</span> reticulate<span class="hljs-operator">:::</span>miniconda_installer_download<br><span class="hljs-keyword">function</span> <span class="hljs-punctuation">(</span>url<span class="hljs-punctuation">)</span> <br><span class="hljs-punctuation">&#123;</span><br>    installer <span class="hljs-operator">&lt;-</span> file.path<span class="hljs-punctuation">(</span>tempdir<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> basename<span class="hljs-punctuation">(</span>url<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>file.exists<span class="hljs-punctuation">(</span>installer<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <br>        <span class="hljs-built_in">return</span><span class="hljs-punctuation">(</span>installer<span class="hljs-punctuation">)</span><br>    messagef<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;* Downloading %s ...&quot;</span><span class="hljs-punctuation">,</span> shQuote<span class="hljs-punctuation">(</span>url<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    status <span class="hljs-operator">&lt;-</span> download.file<span class="hljs-punctuation">(</span>url<span class="hljs-punctuation">,</span> destfile <span class="hljs-operator">=</span> installer<span class="hljs-punctuation">,</span> mode <span class="hljs-operator">=</span> <span class="hljs-string">&quot;wb&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>file.exists<span class="hljs-punctuation">(</span>installer<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>        fmt <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;download of Miniconda installer failed [status = %i]&quot;</span><br>        stopf<span class="hljs-punctuation">(</span>fmt<span class="hljs-punctuation">,</span> status<span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>    installer<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>所以 <code>miniconda_installer_download </code> 返回的就是 miniconda 的 sh 文件的路劲，我们提供一下应该就可以了：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">&gt;</span> path <span class="hljs-operator">=</span> miniconda_path<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> update <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-operator">&gt;</span> installer <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;/home/wt/software/Miniconda3-latest-Linux-x86_64.sh&quot;</span><br><span class="hljs-operator">&gt;</span> reticulate<span class="hljs-operator">:::</span>miniconda_installer_run<span class="hljs-punctuation">(</span>installer<span class="hljs-punctuation">,</span> update<span class="hljs-punctuation">,</span> path<span class="hljs-punctuation">)</span><br>PREFIX<span class="hljs-operator">=</span><span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>wt<span class="hljs-operator">/</span>.local<span class="hljs-operator">/</span>share<span class="hljs-operator">/</span>r<span class="hljs-operator">-</span>miniconda<br>Unpacking payload ...<br>Collecting package metadata <span class="hljs-punctuation">(</span>current_repodata.json<span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> ...working... done                      <br>Solving environment<span class="hljs-operator">:</span> ...working... done<br><br><span class="hljs-comment">## Package Plan ##</span><br><br>  environment location<span class="hljs-operator">:</span> <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>wt<span class="hljs-operator">/</span>.local<span class="hljs-operator">/</span>share<span class="hljs-operator">/</span>r<span class="hljs-operator">-</span>miniconda<br><br>  added <span class="hljs-operator">/</span> updated specs<span class="hljs-operator">:</span><br>    <span class="hljs-operator">-</span> _libgcc_mutex<span class="hljs-operator">==</span><span class="hljs-number">0.1</span><span class="hljs-operator">=</span>main<br>    <span class="hljs-operator">-</span> _openmp_mutex<span class="hljs-operator">==</span><span class="hljs-number">4.5</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>_gnu<br>    <span class="hljs-operator">-</span> brotlipy<span class="hljs-operator">==</span><span class="hljs-number">0.7</span>.0<span class="hljs-operator">=</span>py39h27cfd23_1003<br>    <span class="hljs-operator">-</span> ca<span class="hljs-operator">-</span>certificates<span class="hljs-operator">==</span><span class="hljs-number">2021.10</span>.26<span class="hljs-operator">=</span>h06a4308_2<br>    <span class="hljs-operator">-</span> certifi<span class="hljs-operator">==</span><span class="hljs-number">2021.10</span>.8<span class="hljs-operator">=</span>py39h06a4308_2<br>    <span class="hljs-operator">-</span> cffi<span class="hljs-operator">==</span><span class="hljs-number">1.15</span>.0<span class="hljs-operator">=</span>py39hd667e15_1<br>    <span class="hljs-operator">-</span> charset<span class="hljs-operator">-</span>normalizer<span class="hljs-operator">==</span><span class="hljs-number">2.0</span>.4<span class="hljs-operator">=</span>pyhd3eb1b0_0<br>    <span class="hljs-operator">-</span> conda<span class="hljs-operator">-</span>content<span class="hljs-operator">-</span>trust<span class="hljs-operator">==</span><span class="hljs-number">0.1</span>.1<span class="hljs-operator">=</span>pyhd3eb1b0_0<br>    <span class="hljs-operator">-</span> conda<span class="hljs-operator">-</span>package<span class="hljs-operator">-</span>handling<span class="hljs-operator">==</span><span class="hljs-number">1.7</span>.3<span class="hljs-operator">=</span>py39h27cfd23_1<br>    <span class="hljs-operator">-</span> conda<span class="hljs-operator">==</span><span class="hljs-number">4.11</span>.0<span class="hljs-operator">=</span>py39h06a4308_0<br>    <span class="hljs-operator">-</span> cryptography<span class="hljs-operator">==</span><span class="hljs-number">36.0</span>.0<span class="hljs-operator">=</span>py39h9ce1e76_0<br>    <span class="hljs-operator">-</span> idna<span class="hljs-operator">==</span><span class="hljs-number">3.3</span><span class="hljs-operator">=</span>pyhd3eb1b0_0<br>    <span class="hljs-operator">-</span> ld_impl_linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">==</span><span class="hljs-number">2.35</span>.1<span class="hljs-operator">=</span>h7274673_9<br>    <span class="hljs-operator">-</span> libffi<span class="hljs-operator">==</span><span class="hljs-number">3.3</span><span class="hljs-operator">=</span>he6710b0_2<br>    <span class="hljs-operator">-</span> libgcc<span class="hljs-operator">-</span>ng<span class="hljs-operator">==</span><span class="hljs-number">9.3</span>.0<span class="hljs-operator">=</span>h5101ec6_17<br>    <span class="hljs-operator">-</span> libgomp<span class="hljs-operator">==</span><span class="hljs-number">9.3</span>.0<span class="hljs-operator">=</span>h5101ec6_17<br>    <span class="hljs-operator">-</span> libstdcxx<span class="hljs-operator">-</span>ng<span class="hljs-operator">==</span><span class="hljs-number">9.3</span>.0<span class="hljs-operator">=</span>hd4cf53a_17<br>    <span class="hljs-operator">-</span> ncurses<span class="hljs-operator">==</span><span class="hljs-number">6.3</span><span class="hljs-operator">=</span>h7f8727e_2<br>    <span class="hljs-operator">-</span> openssl<span class="hljs-operator">==</span><span class="hljs-number">1.1</span>.1m<span class="hljs-operator">=</span>h7f8727e_0<br>    <span class="hljs-operator">-</span> pip<span class="hljs-operator">==</span><span class="hljs-number">21.2</span>.4<span class="hljs-operator">=</span>py39h06a4308_0<br>    <span class="hljs-operator">-</span> pycosat<span class="hljs-operator">==</span><span class="hljs-number">0.6</span>.3<span class="hljs-operator">=</span>py39h27cfd23_0<br>    <span class="hljs-operator">-</span> pycparser<span class="hljs-operator">==</span><span class="hljs-number">2.21</span><span class="hljs-operator">=</span>pyhd3eb1b0_0<br>    <span class="hljs-operator">-</span> pyopenssl<span class="hljs-operator">==</span><span class="hljs-number">21.0</span>.0<span class="hljs-operator">=</span>pyhd3eb1b0_1<br>    <span class="hljs-operator">-</span> pysocks<span class="hljs-operator">==</span><span class="hljs-number">1.7</span>.1<span class="hljs-operator">=</span>py39h06a4308_0<br>    <span class="hljs-operator">-</span> python<span class="hljs-operator">==</span><span class="hljs-number">3.9</span>.7<span class="hljs-operator">=</span>h12debd9_1<br>    <span class="hljs-operator">-</span> readline<span class="hljs-operator">==</span><span class="hljs-number">8.1</span>.2<span class="hljs-operator">=</span>h7f8727e_1<br>    <span class="hljs-operator">-</span> requests<span class="hljs-operator">==</span><span class="hljs-number">2.27</span>.1<span class="hljs-operator">=</span>pyhd3eb1b0_0<br>    <span class="hljs-operator">-</span> ruamel_yaml<span class="hljs-operator">==</span><span class="hljs-number">0.15</span>.100<span class="hljs-operator">=</span>py39h27cfd23_0<br>    <span class="hljs-operator">-</span> setuptools<span class="hljs-operator">==</span><span class="hljs-number">58.0</span>.4<span class="hljs-operator">=</span>py39h06a4308_0<br>    <span class="hljs-operator">-</span> six<span class="hljs-operator">==</span><span class="hljs-number">1.16</span>.0<span class="hljs-operator">=</span>pyhd3eb1b0_0<br>    <span class="hljs-operator">-</span> sqlite<span class="hljs-operator">==</span><span class="hljs-number">3.37</span>.0<span class="hljs-operator">=</span>hc218d9a_0<br>    <span class="hljs-operator">-</span> tk<span class="hljs-operator">==</span><span class="hljs-number">8.6</span>.11<span class="hljs-operator">=</span>h1ccaba5_0<br>    <span class="hljs-operator">-</span> tqdm<span class="hljs-operator">==</span><span class="hljs-number">4.62</span>.3<span class="hljs-operator">=</span>pyhd3eb1b0_1<br>    <span class="hljs-operator">-</span> tzdata<span class="hljs-operator">==</span><span class="hljs-number">2021</span>e<span class="hljs-operator">=</span>hda174b7_0<br>    <span class="hljs-operator">-</span> urllib3<span class="hljs-operator">==</span><span class="hljs-number">1.26</span>.7<span class="hljs-operator">=</span>pyhd3eb1b0_0<br>    <span class="hljs-operator">-</span> wheel<span class="hljs-operator">==</span><span class="hljs-number">0.37</span>.1<span class="hljs-operator">=</span>pyhd3eb1b0_0<br>    <span class="hljs-operator">-</span> xz<span class="hljs-operator">==</span><span class="hljs-number">5.2</span>.5<span class="hljs-operator">=</span>h7b6447c_0<br>    <span class="hljs-operator">-</span> yaml<span class="hljs-operator">==</span><span class="hljs-number">0.2</span>.5<span class="hljs-operator">=</span>h7b6447c_0<br>    <span class="hljs-operator">-</span> zlib<span class="hljs-operator">==</span><span class="hljs-number">1.2</span>.11<span class="hljs-operator">=</span>h7f8727e_4<br><br><br>The following NEW packages will be INSTALLED<span class="hljs-operator">:</span><br><br>  _libgcc_mutex      pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>_libgcc_mutex<span class="hljs-operator">-</span><span class="hljs-number">0.1</span><span class="hljs-operator">-</span>main<br>  _openmp_mutex      pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>_openmp_mutex<span class="hljs-operator">-</span><span class="hljs-number">4.5</span><span class="hljs-operator">-</span><span class="hljs-number">1</span>_gnu<br>  brotlipy           pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>brotlipy<span class="hljs-operator">-</span><span class="hljs-number">0.7</span>.0<span class="hljs-operator">-</span>py39h27cfd23_1003<br>  ca<span class="hljs-operator">-</span>certificates    pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>ca<span class="hljs-operator">-</span>certificates<span class="hljs-operator">-</span><span class="hljs-number">2021.10</span>.26<span class="hljs-operator">-</span>h06a4308_2<br>  certifi            pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>certifi<span class="hljs-operator">-</span><span class="hljs-number">2021.10</span>.8<span class="hljs-operator">-</span>py39h06a4308_2<br>  cffi               pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>cffi<span class="hljs-operator">-</span><span class="hljs-number">1.15</span>.0<span class="hljs-operator">-</span>py39hd667e15_1<br>  charset<span class="hljs-operator">-</span>normalizer pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>noarch<span class="hljs-operator">::</span>charset<span class="hljs-operator">-</span>normalizer<span class="hljs-operator">-</span><span class="hljs-number">2.0</span>.4<span class="hljs-operator">-</span>pyhd3eb1b0_0<br>  conda              pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>conda<span class="hljs-operator">-</span><span class="hljs-number">4.11</span>.0<span class="hljs-operator">-</span>py39h06a4308_0<br>  conda<span class="hljs-operator">-</span>content<span class="hljs-operator">-</span>tru<span class="hljs-operator">~</span> pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>noarch<span class="hljs-operator">::</span>conda<span class="hljs-operator">-</span>content<span class="hljs-operator">-</span>trust<span class="hljs-operator">-</span><span class="hljs-number">0.1</span>.1<span class="hljs-operator">-</span>pyhd3eb1b0_0<br>  conda<span class="hljs-operator">-</span>package<span class="hljs-operator">-</span>han<span class="hljs-operator">~</span> pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>conda<span class="hljs-operator">-</span>package<span class="hljs-operator">-</span>handling<span class="hljs-operator">-</span><span class="hljs-number">1.7</span>.3<span class="hljs-operator">-</span>py39h27cfd23_1<br>  cryptography       pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>cryptography<span class="hljs-operator">-</span><span class="hljs-number">36.0</span>.0<span class="hljs-operator">-</span>py39h9ce1e76_0<br>  idna               pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>noarch<span class="hljs-operator">::</span>idna<span class="hljs-operator">-</span><span class="hljs-number">3.3</span><span class="hljs-operator">-</span>pyhd3eb1b0_0<br>  ld_impl_linux<span class="hljs-operator">-</span><span class="hljs-number">64</span>   pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>ld_impl_linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">-</span><span class="hljs-number">2.35</span>.1<span class="hljs-operator">-</span>h7274673_9<br>  libffi             pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>libffi<span class="hljs-operator">-</span><span class="hljs-number">3.3</span><span class="hljs-operator">-</span>he6710b0_2<br>  libgcc<span class="hljs-operator">-</span>ng          pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>libgcc<span class="hljs-operator">-</span>ng<span class="hljs-operator">-</span><span class="hljs-number">9.3</span>.0<span class="hljs-operator">-</span>h5101ec6_17<br>  libgomp            pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>libgomp<span class="hljs-operator">-</span><span class="hljs-number">9.3</span>.0<span class="hljs-operator">-</span>h5101ec6_17<br>  libstdcxx<span class="hljs-operator">-</span>ng       pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>libstdcxx<span class="hljs-operator">-</span>ng<span class="hljs-operator">-</span><span class="hljs-number">9.3</span>.0<span class="hljs-operator">-</span>hd4cf53a_17<br>  ncurses            pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>ncurses<span class="hljs-operator">-</span><span class="hljs-number">6.3</span><span class="hljs-operator">-</span>h7f8727e_2<br>  openssl            pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>openssl<span class="hljs-operator">-</span><span class="hljs-number">1.1</span>.1m<span class="hljs-operator">-</span>h7f8727e_0<br>  pip                pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>pip<span class="hljs-operator">-</span><span class="hljs-number">21.2</span>.4<span class="hljs-operator">-</span>py39h06a4308_0<br>  pycosat            pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>pycosat<span class="hljs-operator">-</span><span class="hljs-number">0.6</span>.3<span class="hljs-operator">-</span>py39h27cfd23_0<br>  pycparser          pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>noarch<span class="hljs-operator">::</span>pycparser<span class="hljs-operator">-</span><span class="hljs-number">2.21</span><span class="hljs-operator">-</span>pyhd3eb1b0_0<br>  pyopenssl          pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>noarch<span class="hljs-operator">::</span>pyopenssl<span class="hljs-operator">-</span><span class="hljs-number">21.0</span>.0<span class="hljs-operator">-</span>pyhd3eb1b0_1<br>  pysocks            pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>pysocks<span class="hljs-operator">-</span><span class="hljs-number">1.7</span>.1<span class="hljs-operator">-</span>py39h06a4308_0<br>  python             pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>python<span class="hljs-operator">-</span><span class="hljs-number">3.9</span>.7<span class="hljs-operator">-</span>h12debd9_1<br>  readline           pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>readline<span class="hljs-operator">-</span><span class="hljs-number">8.1</span>.2<span class="hljs-operator">-</span>h7f8727e_1<br>  requests           pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>noarch<span class="hljs-operator">::</span>requests<span class="hljs-operator">-</span><span class="hljs-number">2.27</span>.1<span class="hljs-operator">-</span>pyhd3eb1b0_0<br>  ruamel_yaml        pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>ruamel_yaml<span class="hljs-operator">-</span><span class="hljs-number">0.15</span>.100<span class="hljs-operator">-</span>py39h27cfd23_0<br>  setuptools         pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>setuptools<span class="hljs-operator">-</span><span class="hljs-number">58.0</span>.4<span class="hljs-operator">-</span>py39h06a4308_0<br>  six                pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>noarch<span class="hljs-operator">::</span>six<span class="hljs-operator">-</span><span class="hljs-number">1.16</span>.0<span class="hljs-operator">-</span>pyhd3eb1b0_0<br>  sqlite             pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>sqlite<span class="hljs-operator">-</span><span class="hljs-number">3.37</span>.0<span class="hljs-operator">-</span>hc218d9a_0<br>  tk                 pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>tk<span class="hljs-operator">-</span><span class="hljs-number">8.6</span>.11<span class="hljs-operator">-</span>h1ccaba5_0<br>  tqdm               pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>noarch<span class="hljs-operator">::</span>tqdm<span class="hljs-operator">-</span><span class="hljs-number">4.62</span>.3<span class="hljs-operator">-</span>pyhd3eb1b0_1<br>  tzdata             pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>noarch<span class="hljs-operator">::</span>tzdata<span class="hljs-operator">-</span><span class="hljs-number">2021</span>e<span class="hljs-operator">-</span>hda174b7_0<br>  urllib3            pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>noarch<span class="hljs-operator">::</span>urllib3<span class="hljs-operator">-</span><span class="hljs-number">1.26</span>.7<span class="hljs-operator">-</span>pyhd3eb1b0_0<br>  wheel              pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>noarch<span class="hljs-operator">::</span>wheel<span class="hljs-operator">-</span><span class="hljs-number">0.37</span>.1<span class="hljs-operator">-</span>pyhd3eb1b0_0<br>  xz                 pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>xz<span class="hljs-operator">-</span><span class="hljs-number">5.2</span>.5<span class="hljs-operator">-</span>h7b6447c_0<br>  yaml               pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>yaml<span class="hljs-operator">-</span><span class="hljs-number">0.2</span>.5<span class="hljs-operator">-</span>h7b6447c_0<br>  zlib               pkgs<span class="hljs-operator">/</span>main<span class="hljs-operator">/</span>linux<span class="hljs-operator">-</span><span class="hljs-number">64</span><span class="hljs-operator">::</span>zlib<span class="hljs-operator">-</span><span class="hljs-number">1.2</span>.11<span class="hljs-operator">-</span>h7f8727e_4<br><br><br>Preparing transaction<span class="hljs-operator">:</span> ...working... done<br>Executing transaction<span class="hljs-operator">:</span> ...working... done<br>installation finished.<br></code></pre></td></tr></table></figure><p>但是安装<code>tensorflow::install_tensorflow(extra_packages=&#39;tensorflow-probability&#39;)</code> 的时候还是有同样的错误，找了半天，原来是环境变量的问题：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">usethis<span class="hljs-operator">::</span>edit_r_environ<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">##把CURL_CA_BUNDLE=/opt/microsoft/ropen/4.0.2/lib64/R/lib/microsoft-r-cacert.pem给注释掉</span><br></code></pre></td></tr></table></figure><p>接下来可以正常安装了：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">tensorflow<span class="hljs-operator">::</span>install_tensorflow<span class="hljs-punctuation">(</span>extra_packages<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tensorflow-probability&#x27;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-operator">&gt;</span> tensorflow<span class="hljs-operator">::</span>tf_config<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-number">2022</span><span class="hljs-operator">-</span><span class="hljs-number">03</span><span class="hljs-operator">-</span><span class="hljs-number">03</span> <span class="hljs-number">19</span><span class="hljs-operator">:</span><span class="hljs-number">34</span><span class="hljs-operator">:</span><span class="hljs-number">09.642406</span><span class="hljs-operator">:</span> W tensorflow<span class="hljs-operator">/</span>stream_executor<span class="hljs-operator">/</span>platform<span class="hljs-operator">/</span>default<span class="hljs-operator">/</span>dso_loader.cc<span class="hljs-operator">:</span><span class="hljs-number">64</span><span class="hljs-punctuation">]</span> Could not load dynamic library <span class="hljs-string">&#x27;libcudart.so.11.0&#x27;</span>; dlerror<span class="hljs-operator">:</span> libcudart.so.11.0<span class="hljs-operator">:</span> cannot open shared object file<span class="hljs-operator">:</span> No such file or directory; LD_LIBRARY_PATH<span class="hljs-operator">:</span> <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>R<span class="hljs-operator">/</span>R<span class="hljs-operator">-</span><span class="hljs-number">4.1</span>.0<span class="hljs-operator">/</span>lib<span class="hljs-operator">::</span><span class="hljs-operator">/</span>lib<span class="hljs-operator">:</span><span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>local<span class="hljs-operator">/</span>lib64<span class="hljs-operator">:</span><span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>jvm<span class="hljs-operator">/</span>java<span class="hljs-operator">-</span><span class="hljs-number">1.8</span>.0<span class="hljs-operator">-</span>openjdk<span class="hljs-operator">-</span><span class="hljs-number">1.8</span>.0.292.b10<span class="hljs-operator">-</span><span class="hljs-number">1.</span>el7_9.x86_64<span class="hljs-operator">/</span>jre<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>amd64<span class="hljs-operator">/</span>server<span class="hljs-operator">:</span><span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>local<span class="hljs-operator">/</span>lib<br><span class="hljs-number">2022</span><span class="hljs-operator">-</span><span class="hljs-number">03</span><span class="hljs-operator">-</span><span class="hljs-number">03</span> <span class="hljs-number">19</span><span class="hljs-operator">:</span><span class="hljs-number">34</span><span class="hljs-operator">:</span><span class="hljs-number">09.642611</span><span class="hljs-operator">:</span> I tensorflow<span class="hljs-operator">/</span>stream_executor<span class="hljs-operator">/</span>cuda<span class="hljs-operator">/</span>cudart_stub.cc<span class="hljs-operator">:</span><span class="hljs-number">29</span><span class="hljs-punctuation">]</span> Ignore above cudart dlerror <span class="hljs-keyword">if</span> you do not have a GPU set up on your machine.<br>Loaded Tensorflow version <span class="hljs-number">2.8</span>.0<br>TensorFlow v2.8.0 <span class="hljs-punctuation">(</span><span class="hljs-operator">~</span><span class="hljs-operator">/</span>miniconda3<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>python3.9<span class="hljs-operator">/</span>site<span class="hljs-operator">-</span>packages<span class="hljs-operator">/</span>tensorflow<span class="hljs-punctuation">)</span><br>Python v3.9 <span class="hljs-punctuation">(</span><span class="hljs-operator">~</span><span class="hljs-operator">/</span>miniconda3<span class="hljs-operator">/</span>bin<span class="hljs-operator">/</span>python<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">#devtools::install_github(&quot;Irrationone/cellassign&quot;) 网不行</span><br>BiocManager<span class="hljs-operator">::</span>install<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;scran&quot;</span><span class="hljs-punctuation">)</span><br>install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;~/software/cellassign/&quot;</span><span class="hljs-punctuation">,</span>repos<span class="hljs-operator">=</span><span class="hljs-literal">NULL</span><span class="hljs-punctuation">,</span>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;source&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h2 id="安装-magick-没有-Magick-pc"><a href="#安装-magick-没有-Magick-pc" class="headerlink" title="安装 magick 没有 Magick++.pc"></a>安装 magick 没有 Magick++.pc</h2><p>在安装 <code>UniprotR</code> 时会安装依赖包 <code>magick</code>, 报错信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">* installing *source* package ‘magick’ ...<br>** package ‘magick’ successfully unpacked and MD5 sums checked<br>** using staged installation<br>Package Magick++ was not found in the pkg-config search path.<br>Perhaps you should add the directory containing `Magick++.pc&#x27;<br>to the PKG_CONFIG_PATH environment variable<br>No package &#x27;Magick++&#x27; found<br>Using PKG_CFLAGS=<br>Using PKG_LIBS=-lMagick++-6.Q16<br>--------------------------- [ANTICONF] --------------------------------<br>Configuration failed to find the Magick++ library. Try installing:<br> - deb: libmagick++-dev (Debian, Ubuntu)<br> - rpm: ImageMagick-c++-devel (Fedora, CentOS, RHEL)<br> - csw: imagemagick_dev (Solaris)<br> - brew imagemagick@6 (MacOS)<br>For Ubuntu versions Trusty (14.04) and Xenial (16.04) use our PPA:<br>   sudo add-apt-repository -y ppa:cran/imagemagick<br>   sudo apt-get update<br>   sudo apt-get install -y libmagick++-dev<br>If Magick++ is already installed, check that &#x27;pkg-config&#x27; is in your<br>PATH and PKG_CONFIG_PATH contains a Magick++.pc file. If pkg-config<br>is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:<br>R CMD INSTALL --configure-vars=&#x27;INCLUDE_DIR=... LIB_DIR=...&#x27;<br>-------------------------- [ERROR MESSAGE] ---------------------------<br>&lt;stdin&gt;:1:10: fatal error: Magick++.h: No such file or directory<br>compilation terminated.<br>--------------------------------------------------------------------<br>ERROR: configuration failed for package ‘magick’<br>* removing ‘/home/data/public/R/library/magick’<br>Warning in install.packages :<br>  installation of package ‘magick’ had non-zero exit status<br></code></pre></td></tr></table></figure><p>安装 <code>ImageMagick</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install  ImageMagick-devel ImageMagick-c++-devel<br></code></pre></td></tr></table></figure><p>网不行，从源码安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/ImageMagick/ImageMagick.git ImageMagick-7.1.0<br>cd ImageMagick-7.1.0<br></code></pre></td></tr></table></figure><p>编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ./configure<br>[sudo] password for wt: <br>checking build system type... x86_64-pc-linux-gnu<br>checking host system type... x86_64-pc-linux-gnu<br>checking target system type... x86_64-pc-linux-gnu<br>checking for a BSD-compatible install... /bin/install -c<br>checking whether build environment is sane... yes<br>checking for a thread-safe mkdir -p... /bin/mkdir -p<br>checking for gawk... gawk<br>checking whether make sets $(MAKE)... yes<br>checking whether make supports nested variables... yes<br>checking whether UID &#x27;0&#x27; is supported by ustar format... yes<br>checking whether GID &#x27;0&#x27; is supported by ustar format... yes<br>checking how to create a ustar tar archive... gnutar<br>checking whether make supports nested variables... (cached) yes<br>Configuring ImageMagick 7.1.0-26<br>checking whether build environment is sane... yes<br>checking whether make supports the include directive... yes (GNU style)<br>checking for gcc... gcc<br>checking whether the C compiler works... no<br>configure: error: in `/home/data/public/ImageMagick-7.1.0-26&#x27;:<br>configure: error: C compiler cannot create executables<br>See `config.log&#x27; for more details<br></code></pre></td></tr></table></figure><p>查看 <code>config.log</code> 发现找不到共享库 <code>error while loading shared libraries: libisl.so.15: cannot open shared object file</code>，但是LD_LIBRARY_PATH已经添加了（这个库在 <code>/usr/local/lib</code> 中，这个路径已经是LD_LIBRARY_PATH了，但是就是找不到），采用第二种方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/ld.so.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">include ld.so.conf.d/*.conf</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">include /usr/local/lib</span><br>cd /etc/ld.so.conf.d<br>sudo me.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#把 /usr/local/lib 添加到me.conf</span></span><br>sudo ldconfig<br></code></pre></td></tr></table></figure><p>然后就可以编译安装了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ./configure<br>sudo make<br>sudo make install <br></code></pre></td></tr></table></figure><p>还是会报错，确实没有 <code>Magick++.pc</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Perhaps you should add the directory containing `Magick++.pc&#x27;<br></code></pre></td></tr></table></figure><p><a href="https://www.fujieace.com/kali-linux/pkg_config_path.html">pkg_config_path 环境变量设置 教程 - 付杰博客 (fujieace.com)</a></p><p>先用conda安装，然后把<code>Magick++.pc</code>所在的路径添加到<code>PKG_CONFIG_PATH</code> 环境变量（.Renviron）中:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install -c conda-forge imagemagick<br>cd miniconda3/<br>find Magick++.pc *<br><span class="hljs-meta prompt_">#</span><span class="language-bash">./lib/pkgconfig/Magick++.pc</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">./pkgs/imagemagick-7.0.11_14-pl5320hb118871_0/lib/pkgconfig/Magick++.pc</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">bash 中 添加<span class="hljs-built_in">export</span> PKG_CONFIG_PATH=/home/wt/miniconda3/lib/pkgconfig:<span class="hljs-variable">$PKG_CONFIG_PATH</span></span><br>usethis::edit_r_environ()<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加 PKG_CONFIG_PATH=/home/wt/miniconda3/lib/pkgconfig</span><br>install.packages(&quot;~/software/magick_2.7.3.tar.gz&quot;,repos=NULL,type=&quot;source&quot;)<br></code></pre></td></tr></table></figure><h2 id="如何使用-MobaXterm-jupyter-lab-实现远程连接"><a href="#如何使用-MobaXterm-jupyter-lab-实现远程连接" class="headerlink" title="如何使用 MobaXterm + jupyter lab 实现远程连接"></a>如何使用 MobaXterm + jupyter lab 实现远程连接</h2><ol><li><p><code>jupyter-lab --generate-config</code> 生成配置文件</p></li><li><p>生成密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> notebook.auth <span class="hljs-keyword">import</span> passwd<br>passwd():<br></code></pre></td></tr></table></figure></li><li><p>修改配置文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c.ServerApp.allow_remote_access</span> = <span class="hljs-literal">True</span><br><span class="hljs-attr">c.ServerApp.ip</span> = <span class="hljs-string">&#x27;*&#x27;</span><br><span class="hljs-attr">c.ServerApp.password</span> = <span class="hljs-string">&#x27;刚刚生成的序列&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>后台运行 jupyter-lab：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup jupyter-lab --no-browser --port 8889 &gt; jupyter.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure></li></ol><p>接下来就可以使用 MobaXterm 进行端口转发，点击 Tunneling-New SHH tunnel</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220329211156635.png"></p><p>为了防止断连，可以在设置里面设定 ssh keepalive:</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220329211307841.png"></p><p>此时在浏览器中输入 <code>http://localhost:8899/</code> 就可以访问服务器的 jupyter-lab 了。</p><p>如果输入密码提示错误的话，可以先 kill 掉 jupyter-lab 的进程，然后 <code> jupyter-lab password</code> 修改密码，然后重新启动。</p><h2 id="如何删除文件中特定的列"><a href="#如何删除文件中特定的列" class="headerlink" title="如何删除文件中特定的列"></a>如何删除文件中特定的列</h2><p>[Deleting a Specific Line From a Text File in Command Line in Linux - SysTutorials](<a href="https://www.systutorials.com/how-to-delete-a-specific-line-from-a-text-file-in-command-line-on-linux/#:~:text=Deleting">https://www.systutorials.com/how-to-delete-a-specific-line-from-a-text-file-in-command-line-on-linux/#:~:text=Deleting</a> a Specific Line From a Text File in Command Line in Linux,-Posted on Mar&amp;text&#x3D;You can use the “stream,filtering and transforming text” sed.&amp;text&#x3D;Here%2C -i means edit the,%3B immediately start next cycle”.)</p><h2 id="GEOquery-报错"><a href="#GEOquery-报错" class="headerlink" title="GEOquery 报错"></a>GEOquery 报错</h2><p>在运行 <code>getGEO</code> 下载 GEO 数据集时报错：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">Error <span class="hljs-keyword">in</span> `.rowNamesDF&lt;-`<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> value<span class="hljs-punctuation">)</span> <span class="hljs-operator">:</span> <span class="hljs-string">&#x27;row.names&#x27;</span>的长度不对<br></code></pre></td></tr></table></figure><p>根据 Github 上的解决方法：<a href="https://github.com/seandavi/GEOquery/issues/114">Github issue</a>，在运行这句代码之前加上：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">readr<span class="hljs-operator">::</span>local_edition<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>原因是 readr 的版本问题。</p><h2 id="获取字符串长度时报错：invalid-multibyte-string"><a href="#获取字符串长度时报错：invalid-multibyte-string" class="headerlink" title="获取字符串长度时报错：invalid multibyte string"></a>获取字符串长度时报错：invalid multibyte string</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> nchar<span class="hljs-punctuation">(</span>alldb<span class="hljs-operator">$</span>CDR3_a<span class="hljs-punctuation">)</span><br>Error <span class="hljs-keyword">in</span> nchar<span class="hljs-punctuation">(</span>alldb<span class="hljs-operator">$</span>CDR3_a<span class="hljs-punctuation">)</span> <span class="hljs-operator">:</span> invalid multibyte string<span class="hljs-punctuation">,</span> element <span class="hljs-number">1741</span><br><span class="hljs-operator">&gt;</span> alldb<span class="hljs-operator">$</span>CDR3_a<span class="hljs-punctuation">[</span><span class="hljs-number">1741</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;LGTGNQFYF&lt;a0&gt;&quot;</span><br><span class="hljs-operator">&gt;</span> gsub<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;[&lt;a0&gt;]&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>alldb<span class="hljs-operator">$</span>CDR3_a<span class="hljs-punctuation">[</span><span class="hljs-number">1741</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span> <br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;LGTGNQFYF&lt;a0&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到这个字符末尾有一个 <code>&lt;a0&gt;</code> ，在 Stackoverflow 上找到一个方法 <a href="https://stackoverflow.com/questions/4993837/r-invalid-multibyte-string">issue</a>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> iconv<span class="hljs-punctuation">(</span>alldb<span class="hljs-operator">$</span>CDR3_a<span class="hljs-punctuation">[</span><span class="hljs-number">1741</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>from<span class="hljs-operator">=</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span> to<span class="hljs-operator">=</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span> sub<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;LGTGNQFYF&quot;</span><br></code></pre></td></tr></table></figure><p>iconv 可以在不同的编码方式间进行转化，sub 参数就是将那些无法转化的字符转化成 sub 参数中的字符：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> iconv<span class="hljs-punctuation">(</span>alldb<span class="hljs-operator">$</span>CDR3_a<span class="hljs-punctuation">[</span><span class="hljs-number">1741</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>from<span class="hljs-operator">=</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span> to<span class="hljs-operator">=</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span> sub<span class="hljs-operator">=</span><span class="hljs-string">&quot;++&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;LGTGNQFYF++&quot;</span><br></code></pre></td></tr></table></figure><h2 id="获取指定版本的-Ensembl-gene-ID-和-symbol-ID-的对应关系"><a href="#获取指定版本的-Ensembl-gene-ID-和-symbol-ID-的对应关系" class="headerlink" title="获取指定版本的 Ensembl gene ID 和 symbol ID 的对应关系"></a>获取指定版本的 Ensembl gene ID 和 symbol ID 的对应关系</h2><p>比如想要获取 Ensembl V75 版本的对应关系来转化 ENST 的 gene ID 到 gene symbol：</p><ul><li><p>进入 Ensembl 官网，在右边选择指定的版本：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220520221329570.png"></p></li><li><p>选择下载</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220520221709122.png"></p></li><li><p>接着点击 <code>Customise your download</code> 就可以进入 Biomart 的界面：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220520221813333.png"></p></li><li><p>根据需要选择：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220520221859751.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220520221946118.png"></p></li><li><p>点击 result 输出 tsv 文件就行了</p></li></ul><h2 id="展示好看的模型汇总表"><a href="#展示好看的模型汇总表" class="headerlink" title="展示好看的模型汇总表"></a>展示好看的模型汇总表</h2><p>使用 <code>gtsummary</code> 的 <code>tbl_regression</code> 的函数：</p> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">ibrary<span class="hljs-punctuation">(</span>gtsummary<span class="hljs-punctuation">)</span><br>m1 <span class="hljs-operator">&lt;-</span> glm<span class="hljs-punctuation">(</span>response <span class="hljs-operator">~</span> age <span class="hljs-operator">+</span> stage<span class="hljs-punctuation">,</span> trial<span class="hljs-punctuation">,</span> family <span class="hljs-operator">=</span> binomial<span class="hljs-punctuation">)</span><br>tbl_regression<span class="hljs-punctuation">(</span>m1<span class="hljs-punctuation">,</span> exponentiate <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220520222338550.png"></p><p>更多可以参考<a href="https://www.danieldsjoberg.com/gtsummary/articles/tbl_regression.html">文档</a>。</p><h2 id="展示混淆矩阵"><a href="#展示混淆矩阵" class="headerlink" title="展示混淆矩阵"></a>展示混淆矩阵</h2><p>使用 <a href="https://cran.r-project.org/web/packages/cvms/vignettes/Creating_a_confusion_matrix.html">cvms</a> R 包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>cvms<span class="hljs-punctuation">)</span><br>d_binomial <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;target&quot;</span> <span class="hljs-operator">=</span> rbinom<span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-string">&quot;prediction&quot;</span> <span class="hljs-operator">=</span> rbinom<span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>basic_table <span class="hljs-operator">&lt;-</span> table<span class="hljs-punctuation">(</span>d_binomial<span class="hljs-punctuation">)</span><span class="hljs-comment">##虽然用 table 也可以展示</span><br>basic_table<br><br>      prediction<br>target  <span class="hljs-number">0</span>  <span class="hljs-number">1</span><br>     <span class="hljs-number">0</span> <span class="hljs-number">14</span> <span class="hljs-number">13</span><br>     <span class="hljs-number">1</span> <span class="hljs-number">29</span> <span class="hljs-number">44</span><br><br>cfm <span class="hljs-operator">&lt;-</span> as_tibble<span class="hljs-punctuation">(</span>basic_table<span class="hljs-punctuation">)</span><br>cfm<br><br><span class="hljs-comment"># A tibble: 4 × 3</span><br>  target prediction     n<br>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-number">1</span> <span class="hljs-number">0</span>      <span class="hljs-number">0</span>             <span class="hljs-number">14</span><br><span class="hljs-number">2</span> <span class="hljs-number">1</span>      <span class="hljs-number">0</span>             <span class="hljs-number">29</span><br><span class="hljs-number">3</span> <span class="hljs-number">0</span>      <span class="hljs-number">1</span>             <span class="hljs-number">13</span><br><span class="hljs-number">4</span> <span class="hljs-number">1</span>      <span class="hljs-number">1</span>             <span class="hljs-number">44</span><br><br>plot_confusion_matrix<span class="hljs-punctuation">(</span>cfm<span class="hljs-punctuation">,</span> <br>                      target_col <span class="hljs-operator">=</span> <span class="hljs-string">&quot;target&quot;</span><span class="hljs-punctuation">,</span> <br>                      prediction_col <span class="hljs-operator">=</span> <span class="hljs-string">&quot;prediction&quot;</span><span class="hljs-punctuation">,</span><br>                      counts_col <span class="hljs-operator">=</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220520222808732.png" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytorch 基础</title>
    <link href="/2021/07/21/pytorch_tutorial/"/>
    <url>/2021/07/21/pytorch_tutorial/</url>
    
    <content type="html"><![CDATA[<p> Pytorch 官网教程 学习</p><span id="more"></span><p>学习 Pytorch 官网教程，主要包括以下内容：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210721075853969.png"></p><h2 id="Tensors"><a href="#Tensors" class="headerlink" title="Tensors"></a>Tensors</h2><p>Tensor 类似于 Numpy 的 ndarray，不同之处在于张量可以在 GPU 或其他硬件加速器上运行。 实际上，张量和 NumPy 数组通常可以共享相同的底层内存，从而无需复制数据；另外张量也针对自动微分进行了优化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##首先导入需要的库</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><h3 id="初始化-Tensor"><a href="#初始化-Tensor" class="headerlink" title="初始化 Tensor"></a>初始化 Tensor</h3><p>可以以多种方式初始化 Tensor：</p><ol><li>直接从数据创建，数据类型可以自动判断</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">data = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]]<br>x_data = torch.tensor(data)<br>x_data.<span class="hljs-built_in">type</span>()<br>&gt;&gt; <span class="hljs-string">&#x27;torch.LongTensor&#x27;</span><br>x_data.dtype<br>&gt;&gt; torch.int64<br></code></pre></td></tr></table></figure><ol start="2"><li>从 numpy 数组创建</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">np_array = np.array(data)<br>x_np = torch.from_numpy(np_array)<br></code></pre></td></tr></table></figure><ol start="3"><li>从另一个 Tensor 创建，<code>torch.**_like</code> 函数，会保留作为参数的 Tensor 的形状和数据类型，当然也可以进行覆盖：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x_ones = torch.ones_like(x_data)<span class="hljs-comment">##全为1的Tensor，形状和数据类型一致</span><br>x_ones.dtype<br>&gt;&gt; torch.int64<br>x_ones = torch.ones_like(x_data, dtype=torch.<span class="hljs-built_in">float</span>)<br>x_ones.dtype<br>&gt;&gt; torch.float32<br>x_rand = torch.rand_like(x_data) <br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): RuntimeError: <span class="hljs-string">&quot;check_uniform_bounds&quot;</span> <span class="hljs-keyword">not</span> implemented <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;Long&#x27;</span><br>x_rand = torch.rand_like(x_data, dtype=torch.<span class="hljs-built_in">float</span>) <br></code></pre></td></tr></table></figure><h3 id="Tensor-的属性"><a href="#Tensor-的属性" class="headerlink" title="Tensor 的属性"></a>Tensor 的属性</h3><p>Tensor 的属性包括形状（shape），数据类型（dtype）和存储的设备（device）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">tensor = torch.rand(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Shape of tensor: <span class="hljs-subst">&#123;tensor.shape&#125;</span>&quot;</span>)<br>&gt;&gt; Shape of tensor: torch.Size([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Datatype of tensor: <span class="hljs-subst">&#123;tensor.dtype&#125;</span>&quot;</span>)<br>&gt;&gt; Datatype of tensor: torch.float32<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Device tensor is stored on: <span class="hljs-subst">&#123;tensor.device&#125;</span>&quot;</span>)<br>&gt;&gt; Device tensor <span class="hljs-keyword">is</span> stored on: cpu<br></code></pre></td></tr></table></figure><h3 id="Tensor-操作"><a href="#Tensor-操作" class="headerlink" title="Tensor 操作"></a>Tensor 操作</h3><p>对 Tensor 的操作有多种，包括转置，索引，切片，数学计算，随机抽样等，更具体的描述<a href="https://pytorch.org/docs/stable/torch.html">在这里</a>，这些操作都可以在 GPU 上运行，查看 GPU 信息的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.cuda.is_available()<span class="hljs-comment">#cuda是否可用</span><br>&gt;&gt; <span class="hljs-literal">True</span><br>torch.cuda.device_count()<span class="hljs-comment">#返回gpu数量</span><br>&gt;&gt; <span class="hljs-number">1</span><br>torch.cuda.get_device_name(<span class="hljs-number">0</span>)<span class="hljs-comment">#返回gpu名字，设备索引默认从0开始</span><br>&gt;&gt; <span class="hljs-string">&#x27;NVIDIA GeForce GTX 1060&#x27;</span><br>torch.cuda.current_device()<span class="hljs-comment">#返回当前设备索引</span><br>&gt;&gt; <span class="hljs-number">0</span><br>torch.cuda.get_device_capability()<span class="hljs-comment">##查看内存</span><br>&gt;&gt; (<span class="hljs-number">6</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>默认情况下 tensor 是在 CPU 上创建的，需要使用 <code>.to</code> 方法将其移到 GPU 上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>  tensor = tensor.to(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br><br>tensor.device<br>&gt;&gt; device(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;cuda&#x27;</span>, index=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>下面是一些对 tensor 操作的实列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##索引和切片</span><br>tensor = torch.randn(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br>tensor<br>&gt;&gt; tensor([[-<span class="hljs-number">1.3974</span>,  <span class="hljs-number">0.2943</span>, -<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.9584</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.5710</span>, -<span class="hljs-number">0.6704</span>, -<span class="hljs-number">0.2144</span>, -<span class="hljs-number">0.8668</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.2884</span>,  <span class="hljs-number">1.0564</span>,  <span class="hljs-number">0.1403</span>, -<span class="hljs-number">0.4693</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.4992</span>,  <span class="hljs-number">0.6969</span>,  <span class="hljs-number">0.1507</span>,  <span class="hljs-number">1.9419</span>]])<br>tensor[<span class="hljs-number">0</span>]<span class="hljs-comment">##第一行</span><br>&gt;&gt; tensor([-<span class="hljs-number">1.3974</span>,  <span class="hljs-number">0.2943</span>, -<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.9584</span>])<br>tensor[:,<span class="hljs-number">0</span>]<span class="hljs-comment">##第一例</span><br>&gt;&gt; tensor([-<span class="hljs-number">1.3974</span>, -<span class="hljs-number">0.5710</span>,  <span class="hljs-number">0.2884</span>, -<span class="hljs-number">0.4992</span>])<br>tensor[...,-<span class="hljs-number">1</span>]<span class="hljs-comment">##或者tensor[:,-1] 最后一列</span><br>&gt;&gt; tensor([-<span class="hljs-number">0.9584</span>, -<span class="hljs-number">0.8668</span>, -<span class="hljs-number">0.4693</span>,  <span class="hljs-number">1.9419</span>])<br>tensor[:,<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br>tensor<br><br><span class="hljs-comment">##合并tensor</span><br>&gt;&gt; tensor([[-<span class="hljs-number">1.3974</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.9584</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.5710</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.2144</span>, -<span class="hljs-number">0.8668</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.2884</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1403</span>, -<span class="hljs-number">0.4693</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.4992</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1507</span>,  <span class="hljs-number">1.9419</span>]])<br>t0 = torch.cat([tensor,tensor],dim=<span class="hljs-number">0</span>)<br>t0<br>&gt;&gt; tensor([[-<span class="hljs-number">1.3974</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.9584</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.5710</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.2144</span>, -<span class="hljs-number">0.8668</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.2884</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1403</span>, -<span class="hljs-number">0.4693</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.4992</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1507</span>,  <span class="hljs-number">1.9419</span>],<br>&gt;&gt;         [-<span class="hljs-number">1.3974</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.9584</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.5710</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.2144</span>, -<span class="hljs-number">0.8668</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.2884</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1403</span>, -<span class="hljs-number">0.4693</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.4992</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1507</span>,  <span class="hljs-number">1.9419</span>]])<br>t0.shape<br>&gt;&gt; torch.Size([<span class="hljs-number">8</span>, <span class="hljs-number">4</span>])<br>t1 = torch.cat([tensor,tensor],dim=<span class="hljs-number">1</span>)<br>t1<br>&gt;&gt; tensor([[-<span class="hljs-number">1.3974</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.9584</span>, -<span class="hljs-number">1.3974</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.9584</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.5710</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.2144</span>, -<span class="hljs-number">0.8668</span>, -<span class="hljs-number">0.5710</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.2144</span>, -<span class="hljs-number">0.8668</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.2884</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1403</span>, -<span class="hljs-number">0.4693</span>,  <span class="hljs-number">0.2884</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1403</span>, -<span class="hljs-number">0.4693</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.4992</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1507</span>,  <span class="hljs-number">1.9419</span>, -<span class="hljs-number">0.4992</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1507</span>,  <span class="hljs-number">1.9419</span>]])<br>t1.shape<br>&gt;&gt; torch.Size([<span class="hljs-number">4</span>, <span class="hljs-number">8</span>])<br>t2 = torch.stack([tensor,tensor],dim=<span class="hljs-number">0</span>)<br>t2<br>&gt;&gt; tensor([[[-<span class="hljs-number">1.3974</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.9584</span>],<br>&gt;&gt;          [-<span class="hljs-number">0.5710</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.2144</span>, -<span class="hljs-number">0.8668</span>],<br>&gt;&gt;          [ <span class="hljs-number">0.2884</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1403</span>, -<span class="hljs-number">0.4693</span>],<br>&gt;&gt;          [-<span class="hljs-number">0.4992</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1507</span>,  <span class="hljs-number">1.9419</span>]],<br>&gt;&gt; <br>&gt;&gt;         [[-<span class="hljs-number">1.3974</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.9584</span>],<br>&gt;&gt;          [-<span class="hljs-number">0.5710</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.2144</span>, -<span class="hljs-number">0.8668</span>],<br>&gt;&gt;          [ <span class="hljs-number">0.2884</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1403</span>, -<span class="hljs-number">0.4693</span>],<br>&gt;&gt;          [-<span class="hljs-number">0.4992</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1507</span>,  <span class="hljs-number">1.9419</span>]]])<br>t2.shape<br>&gt;&gt; torch.Size([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>])<br>t3 = torch.stack([tensor,tensor],dim=<span class="hljs-number">1</span>)<br>t3<br>&gt;&gt; tensor([[[-<span class="hljs-number">1.3974</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.9584</span>],<br>&gt;&gt;          [-<span class="hljs-number">1.3974</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.9584</span>]],<br>&gt;&gt; <br>&gt;&gt;         [[-<span class="hljs-number">0.5710</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.2144</span>, -<span class="hljs-number">0.8668</span>],<br>&gt;&gt;          [-<span class="hljs-number">0.5710</span>,  <span class="hljs-number">0.0000</span>, -<span class="hljs-number">0.2144</span>, -<span class="hljs-number">0.8668</span>]],<br>&gt;&gt; <br>&gt;&gt;         [[ <span class="hljs-number">0.2884</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1403</span>, -<span class="hljs-number">0.4693</span>],<br>&gt;&gt;          [ <span class="hljs-number">0.2884</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1403</span>, -<span class="hljs-number">0.4693</span>]],<br>&gt;&gt; <br>&gt;&gt;         [[-<span class="hljs-number">0.4992</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1507</span>,  <span class="hljs-number">1.9419</span>],<br>&gt;&gt;          [-<span class="hljs-number">0.4992</span>,  <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.1507</span>,  <span class="hljs-number">1.9419</span>]]])<br>t3.shape<br>&gt;&gt; torch.Size([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>])<br>t4 = torch.stack([tensor,tensor],dim=<span class="hljs-number">2</span>)<br>t4<br>&gt;&gt; tensor([[[-<span class="hljs-number">1.3974</span>, -<span class="hljs-number">1.3974</span>],<br>&gt;&gt;          [ <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.0000</span>],<br>&gt;&gt;          [-<span class="hljs-number">0.5416</span>, -<span class="hljs-number">0.5416</span>],<br>&gt;&gt;          [-<span class="hljs-number">0.9584</span>, -<span class="hljs-number">0.9584</span>]],<br>&gt;&gt; <br>&gt;&gt;         [[-<span class="hljs-number">0.5710</span>, -<span class="hljs-number">0.5710</span>],<br>&gt;&gt;          [ <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.0000</span>],<br>&gt;&gt;          [-<span class="hljs-number">0.2144</span>, -<span class="hljs-number">0.2144</span>],<br>&gt;&gt;          [-<span class="hljs-number">0.8668</span>, -<span class="hljs-number">0.8668</span>]],<br>&gt;&gt; <br>&gt;&gt;         [[ <span class="hljs-number">0.2884</span>,  <span class="hljs-number">0.2884</span>],<br>&gt;&gt;          [ <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.0000</span>],<br>&gt;&gt;          [ <span class="hljs-number">0.1403</span>,  <span class="hljs-number">0.1403</span>],<br>&gt;&gt;          [-<span class="hljs-number">0.4693</span>, -<span class="hljs-number">0.4693</span>]],<br>&gt;&gt; <br>&gt;&gt;         [[-<span class="hljs-number">0.4992</span>, -<span class="hljs-number">0.4992</span>],<br>&gt;&gt;          [ <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.0000</span>],<br>&gt;&gt;          [ <span class="hljs-number">0.1507</span>,  <span class="hljs-number">0.1507</span>],<br>&gt;&gt;          [ <span class="hljs-number">1.9419</span>,  <span class="hljs-number">1.9419</span>]]])<br>t4.shape<br>&gt;&gt; torch.Size([<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p>注意 <code>stack</code> 和 <code>cat</code> 的区别：<code>cat</code> 在哪个维度上合并就增加哪个维度的大小，而 <code>stack</code> 则新增一个维度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##数学操作</span><br><span class="hljs-comment">###矩阵相乘</span><br>y1 = tensor @ tensor.T<br>y2 = tensor.matmul(tensor.T)<br>y1 == y2<br>&gt;&gt; tensor([[<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>]])<br>y3 = torch.rand_like(tensor) <span class="hljs-comment">##4*4 * 4*4 = 4*4</span><br>torch.matmul(tensor,tensor.T,out=y3) == y1<br><br><span class="hljs-comment">###按元素相乘</span><br>&gt;&gt; tensor([[<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>]])<br>z1 = tensor * tensor<br>z2 = tensor.mul(tensor)<br>z1 == z2<br>&gt;&gt; tensor([[<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>]])<br>z3 = torch.rand_like(tensor)<br>torch.mul(tensor,tensor,out=z3) == z1<br><br><span class="hljs-comment">##单元素tensor可以使用 item 转换为python数值</span><br>&gt;&gt; tensor([[<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>],<br>&gt;&gt;         [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>]])<br>agg = tensor.<span class="hljs-built_in">sum</span>()<br>agg_item = agg.item()<br>agg_item,<span class="hljs-built_in">type</span>(agg_item)<br><br><span class="hljs-comment">##原位操作 带下划线的函数</span><br>&gt;&gt; (-<span class="hljs-number">2.996830940246582</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;)<br>tensor = torch.tensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br>tensor.add(<span class="hljs-number">4</span>)<br>&gt;&gt; tensor([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>tensor<br>&gt;&gt; tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>tensor.add_(<span class="hljs-number">4</span>)<br>&gt;&gt; tensor([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>tensor<br>&gt;&gt; tensor([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br></code></pre></td></tr></table></figure><h3 id="和-Numpy-数组间共享内存"><a href="#和-Numpy-数组间共享内存" class="headerlink" title="和 Numpy 数组间共享内存"></a>和 Numpy 数组间共享内存</h3><p>CPU 和 NumPy 数组上的 tensor 可以共享它们的底层内存位置，改变一个也会改变另一个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##Tensor to NumPy array</span><br>t = torch.ones(<span class="hljs-number">5</span>)<br>t<br>&gt;&gt; tensor([<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>])<br>n = t.numpy()<br>n<br><br><span class="hljs-comment">###tensor 改变 numpy array也会改变</span><br>&gt;&gt; array([<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>], dtype=float32)<br>t.add_(<span class="hljs-number">1</span>)<br>&gt;&gt; tensor([<span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>])<br>t<br>&gt;&gt; tensor([<span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>])<br>n<br><br><span class="hljs-comment">##NumPy array to Tensor</span><br>&gt;&gt; array([<span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>], dtype=float32)<br>n = np.ones(<span class="hljs-number">5</span>)<br>t = torch.from_numpy(n)<br><br>np.add(n,<span class="hljs-number">1</span>,out=n)<br>&gt;&gt; array([<span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>])<br>n<br>&gt;&gt; array([<span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>])<br>t<br>&gt;&gt; tensor([<span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>], dtype=torch.float64)<br></code></pre></td></tr></table></figure><h2 id="数据集和数据载入（DATASETS-amp-DATALOADERS）"><a href="#数据集和数据载入（DATASETS-amp-DATALOADERS）" class="headerlink" title="数据集和数据载入（DATASETS &amp; DATALOADERS）"></a>数据集和数据载入（DATASETS &amp; DATALOADERS）</h2><p>pytorch 提供了两个数据读入和获取的接口：<code>torch.utils.data.DataLoader</code> 和<br><code>torch.utils.data.Dataset</code>；<code>Dataset</code> 存储了样本和对应的标签，<code>DataLoader</code> 封装了一个对 <code>Dataset</code><br>的迭代器，可以方便的获取样本。</p><h3 id="载入数据集"><a href="#载入数据集" class="headerlink" title="载入数据集"></a>载入数据集</h3><p>Pytorch 提供了一些提前已经读入的常用数据集，比如 FashionMNIST；下面是读入 FashionMNIST 数据集的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> torchvision.transforms <span class="hljs-keyword">import</span> ToTensor<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><br>training_data = datasets.FashionMNIST(<br>    root=<span class="hljs-string">&quot;data&quot;</span>,<br>    train=<span class="hljs-literal">True</span>,<br>    download=<span class="hljs-literal">True</span>,<br>    transform=ToTensor()<br>)<br><br>test_data = datasets.FashionMNIST(<br>    root=<span class="hljs-string">&quot;data&quot;</span>,<br>    train=<span class="hljs-literal">False</span>,<br>    download=<span class="hljs-literal">True</span>,<br>    transform=ToTensor()<br>)<br><br>training_data<br>&gt;&gt; Dataset FashionMNIST<br>&gt;&gt;     Number of datapoints: <span class="hljs-number">60000</span><br>&gt;&gt;     Root location: data<br>&gt;&gt;     Split: Train<br>&gt;&gt;     StandardTransform<br>&gt;&gt; Transform: ToTensor()<br></code></pre></td></tr></table></figure><p>主要有以下的参数：</p><ul><li><code>root</code>：训练集&#x2F;测试集存放的位置 </li><li><code>train</code>：是训练集还是测试集</li><li><code>download</code>：当在 <code>root</code> 中找不到数据时是否从网络上下载 </li><li><code>transform</code>（转化样本）&#x2F;<code>target_transform</code>（转化标签）：如何对数据进行转化处理</li></ul><h3 id="迭代和可视化数据集"><a href="#迭代和可视化数据集" class="headerlink" title="迭代和可视化数据集"></a>迭代和可视化数据集</h3><p>我们可以像列表一样索引 <code>Datasets</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python">labels_map = &#123;<br>    <span class="hljs-number">0</span>: <span class="hljs-string">&quot;T-Shirt&quot;</span>,<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&quot;Trouser&quot;</span>,<br>    <span class="hljs-number">2</span>: <span class="hljs-string">&quot;Pullover&quot;</span>,<br>    <span class="hljs-number">3</span>: <span class="hljs-string">&quot;Dress&quot;</span>,<br>    <span class="hljs-number">4</span>: <span class="hljs-string">&quot;Coat&quot;</span>,<br>    <span class="hljs-number">5</span>: <span class="hljs-string">&quot;Sandal&quot;</span>,<br>    <span class="hljs-number">6</span>: <span class="hljs-string">&quot;Shirt&quot;</span>,<br>    <span class="hljs-number">7</span>: <span class="hljs-string">&quot;Sneaker&quot;</span>,<br>    <span class="hljs-number">8</span>: <span class="hljs-string">&quot;Bag&quot;</span>,<br>    <span class="hljs-number">9</span>: <span class="hljs-string">&quot;Ankle Boot&quot;</span>,<br>&#125;<br>figure = plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>))<br>cols, rows = <span class="hljs-number">3</span>, <span class="hljs-number">3</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, cols * rows + <span class="hljs-number">1</span>):<br>    sample_idx = torch.randint(<span class="hljs-built_in">len</span>(training_data), size=(<span class="hljs-number">1</span>,)).item()<span class="hljs-comment">##随机抽一个图像</span><br>    img, label = training_data[sample_idx]<br>    figure.add_subplot(rows, cols, i)<br>    plt.title(labels_map[label])<br>    plt.axis(<span class="hljs-string">&quot;off&quot;</span>)<br>    plt.imshow(img.squeeze(), cmap=<span class="hljs-string">&quot;gray&quot;</span>)<br>&gt;&gt; &lt;AxesSubplot:&gt;<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;Ankle Boot&#x27;</span>)<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF910C5220</span>&gt;<br>&gt;&gt; &lt;AxesSubplot:&gt;<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;T-Shirt&#x27;</span>)<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF911009A0</span>&gt;<br>&gt;&gt; &lt;AxesSubplot:&gt;<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;Ankle Boot&#x27;</span>)<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF91139160</span>&gt;<br>&gt;&gt; &lt;AxesSubplot:&gt;<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;Trouser&#x27;</span>)<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF911688E0</span>&gt;<br>&gt;&gt; &lt;AxesSubplot:&gt;<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;Pullover&#x27;</span>)<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF911A20A0</span>&gt;<br>&gt;&gt; &lt;AxesSubplot:&gt;<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;Trouser&#x27;</span>)<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF911DDC10</span>&gt;<br>&gt;&gt; &lt;AxesSubplot:&gt;<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;Trouser&#x27;</span>)<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF9121A3D0</span>&gt;<br>&gt;&gt; &lt;AxesSubplot:&gt;<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;Bag&#x27;</span>)<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF9123E790</span>&gt;<br>&gt;&gt; &lt;AxesSubplot:&gt;<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;T-Shirt&#x27;</span>)<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF9126EF10</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-26-1.png" width="768" /><h3 id="创建自定义数据集"><a href="#创建自定义数据集" class="headerlink" title="创建自定义数据集"></a>创建自定义数据集</h3><p>一个自定义的 Dataset 类需要实现 3 个函数：<code>__int__</code>, <code>__len__</code>, 和 <code>__getitem__</code>；下面是自定义的 FashionMNIST 数据集，图片存在 <code>img_dir</code> 目录下，标签存在 <code>annotations_file</code> 文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> torchvision.io <span class="hljs-keyword">import</span> read_image<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomImageDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, annotations_file, img_dir, transform=<span class="hljs-literal">None</span>, target_transform=<span class="hljs-literal">None</span></span>):<br>        self.img_labels = pd.read_csv(annotations_file)<br>        self.img_dir = img_dir<br>        self.transform = transform<br>        self.target_transform = target_transform<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.img_labels)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, <span class="hljs-number">0</span>])<span class="hljs-comment">##annotations_file第一列是文件名</span><br>        image = read_image(img_path)<span class="hljs-comment">##read_image 可以自动转tensor</span><br>        label = self.img_labels.iloc[idx, <span class="hljs-number">1</span>]<span class="hljs-comment">##第二列是标签</span><br>        <span class="hljs-keyword">if</span> self.transform:<br>            image = self.transform(image)<br>        <span class="hljs-keyword">if</span> self.target_transform:<br>            label = self.target_transform(label)<br>        <span class="hljs-keyword">return</span> image, label<br></code></pre></td></tr></table></figure><p><code>__init__</code> 函数会在实例化 Dataset 对象时运行，初始化包含图片和标签的路径以及对样本和标签的转化，这里标签数据第一列为样本数据的文件名，第二列是对应的标签，类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">tshirt1.jpg, <span class="hljs-number">0</span><br>tshirt2.jpg, <span class="hljs-number">0</span><br>......<br>ankleboot999.jpg, <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><code>__len__</code> 函数返回的是数据集的大小（有多少个样本）；<code>__getitem__</code> 函数读入并返回给定索引（idx）的样本。</p><h3 id="使用-DataLoader-准备训练的数据"><a href="#使用-DataLoader-准备训练的数据" class="headerlink" title="使用 DataLoader 准备训练的数据"></a>使用 <code>DataLoader</code> 准备训练的数据</h3><p><code>Dataset</code> 每次只能返回一个样本的数据和标签，但是在训练模型时，通常的情况是：一次性传入一个<br><code>minibatch</code> 的样本，在一个 <code>epoch</code> 结束时打乱数据再进行下一个 <code>epoch</code>来减少模型的过拟合，<code>DataLoader</code> 可以简化这个流程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>train_dataloader = DataLoader(training_data, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="通过-DatatLoader-进行迭代"><a href="#通过-DatatLoader-进行迭代" class="headerlink" title="通过 DatatLoader 进行迭代"></a>通过 <code>DatatLoader</code> 进行迭代</h4><p>通过 <code>DatatLoader</code> 载入数据后就可以对该数据进行迭代，每一次迭代会返回大小为 <code>batch_size</code> 的训练样本和相应的标签，<code>shuffle=True</code> 表示在迭代完整个数据后（一个 epoch）对数据进行打乱再进行下一个 epoch：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Display image and label.</span><br>train_features, train_labels = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(train_dataloader))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Feature batch shape: <span class="hljs-subst">&#123;train_features.size()&#125;</span>&quot;</span>)<br>&gt;&gt; Feature batch shape: torch.Size([<span class="hljs-number">64</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Labels batch shape: <span class="hljs-subst">&#123;train_labels.size()&#125;</span>&quot;</span>)<br>&gt;&gt; Labels batch shape: torch.Size([<span class="hljs-number">64</span>])<br>img = train_features[<span class="hljs-number">0</span>].squeeze()<br>label = train_labels[<span class="hljs-number">0</span>]<br>plt.imshow(img, cmap=<span class="hljs-string">&quot;gray&quot;</span>)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF9241E5E0</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-26-3.png" width="768" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Label: <span class="hljs-subst">&#123;label&#125;</span>&quot;</span>)<br>&gt;&gt; Label: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="转化（Transforms）"><a href="#转化（Transforms）" class="headerlink" title="转化（Transforms）"></a>转化（Transforms）</h2><p>大多情况下，数据要经过一定的预处理才可以作为模型的输入进行训练，这个过程就是 transform。下面以FashionMNIST 数据集的 transform 为例：</p><p>FashionMNIST 的特征是 PIL 格式的，而标签是整数，因此需要将特征转化为 tensor，标签转化为 one-hot 编码的 tensor，分别使用 torchvision.transforms 中的 <code>ToTensor</code> 和 <code>Lambda</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> torchvision.transforms <span class="hljs-keyword">import</span> ToTensor, Lambda<br><br>ds = datasets.FashionMNIST(<br>    root=<span class="hljs-string">&quot;data&quot;</span>,<br>    train=<span class="hljs-literal">True</span>,<br>    download=<span class="hljs-literal">True</span>,<br>    transform=ToTensor(),<br>    target_transform=Lambda(<span class="hljs-keyword">lambda</span> y: torch.zeros(<span class="hljs-number">10</span>, dtype=torch.<span class="hljs-built_in">float</span>).scatter_(<span class="hljs-number">0</span>, torch.tensor(y), value=<span class="hljs-number">1</span>))<br>)<br></code></pre></td></tr></table></figure><p><code>ToTensor</code> 除了转化 tensor 外，还将图像的像素值缩放到 [0,1] 上；<code>Lambda</code> 函数可以用 lambda 匿名函数作为参数进行操作。</p><h2 id="构建神经网络模型"><a href="#构建神经网络模型" class="headerlink" title="构建神经网络模型"></a>构建神经网络模型</h2><p>神经网络是由许多层或者叫模块构成的，<code>torch.nn</code> 提供了所有构建神经网络所需的组件，在 Pytorch 中每一个模块都是 <code>nn.Module</code> 的子类，并且一个深度网络自身就是一个由其他模块组成的模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> datasets, transforms<br><br><span class="hljs-comment">##查看是否有GPU</span><br>device = <span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Using &#123;&#125; device&#x27;</span>.<span class="hljs-built_in">format</span>(device))<br>&gt;&gt; Using cuda device<br></code></pre></td></tr></table></figure><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>通过继承 <code>nn.Module</code> 来定义我们自己的神经网络，在 <code>__init__</code> 中初始化神经网络层，每一个 <code>nn.Module</code> 的亚类都需要实现对输入数据的 <code>forward</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NeuralNetwork</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(NeuralNetwork, self).__init__()<span class="hljs-comment">##调用父类中的初始化</span><br>        self.flatten = nn.Flatten()<br>        self.linear_relu_stack = nn.Sequential(<br>            nn.Linear(<span class="hljs-number">28</span>*<span class="hljs-number">28</span>, <span class="hljs-number">512</span>),<br>            nn.ReLU(),<br>            nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">512</span>),<br>            nn.ReLU(),<br>            nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">10</span>),<br>            nn.ReLU()<br>        )<span class="hljs-comment">##神经网络架构</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<span class="hljs-comment">##前向传播操作</span><br>        x = self.flatten(x)<br>        logits = self.linear_relu_stack(x)<br>        <span class="hljs-keyword">return</span> logits<br>      <br></code></pre></td></tr></table></figure><p>接下来就需要创建一个 <code>NeuralNetwork</code> 实例，并将其移到 <code>device</code> 上（如果有GPU）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">model = NeuralNetwork().to(device)<br><span class="hljs-built_in">print</span>(model)<br>&gt;&gt; NeuralNetwork(<br>&gt;&gt;   (flatten): Flatten(start_dim=<span class="hljs-number">1</span>, end_dim=-<span class="hljs-number">1</span>)<br>&gt;&gt;   (linear_relu_stack): Sequential(<br>&gt;&gt;     (<span class="hljs-number">0</span>): Linear(in_features=<span class="hljs-number">784</span>, out_features=<span class="hljs-number">512</span>, bias=<span class="hljs-literal">True</span>)<br>&gt;&gt;     (<span class="hljs-number">1</span>): ReLU()<br>&gt;&gt;     (<span class="hljs-number">2</span>): Linear(in_features=<span class="hljs-number">512</span>, out_features=<span class="hljs-number">512</span>, bias=<span class="hljs-literal">True</span>)<br>&gt;&gt;     (<span class="hljs-number">3</span>): ReLU()<br>&gt;&gt;     (<span class="hljs-number">4</span>): Linear(in_features=<span class="hljs-number">512</span>, out_features=<span class="hljs-number">10</span>, bias=<span class="hljs-literal">True</span>)<br>&gt;&gt;     (<span class="hljs-number">5</span>): ReLU()<br>&gt;&gt;   )<br>&gt;&gt; )<br></code></pre></td></tr></table></figure><p>当将数据传入模型时，模型会自动执行 <code>forword</code> 方法，上面的模型返回的是 1*10 的 tensor，表示每类的原始预测值，需要使用 <code>nn.Softmax</code> 将其转化为概率值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">X = torch.rand(<span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, device=device)<br>logits = model(X)<br>pred_probab = nn.Softmax(dim=<span class="hljs-number">1</span>)(logits) <span class="hljs-comment">##在维度1 上使得所有值和为1</span><br>y_pred = pred_probab.argmax(dim=<span class="hljs-number">1</span>)<span class="hljs-comment">##在维度1上找到最大值的索引</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Predicted class: <span class="hljs-subst">&#123;y_pred&#125;</span>&quot;</span>)<br>&gt;&gt; Predicted <span class="hljs-keyword">class</span>: tensor([<span class="hljs-number">7</span>], device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="模型层"><a href="#模型层" class="headerlink" title="模型层"></a>模型层</h3><p>现在我们来看一下上面构建的模型的各个层，以大小为 3 的 minibatch 为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">input_image = torch.rand(<span class="hljs-number">3</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br><span class="hljs-built_in">print</span>(input_image.size())<br>&gt;&gt; torch.Size([<span class="hljs-number">3</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>])<br></code></pre></td></tr></table></figure><p>首先是 <code>nn.Flatten</code> 层，将每一个二维的 28*28 的图片转化为连续的 784 个像素值（batch 维度维持不变，也就是只对每个图片操作）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">flatten = nn.Flatten()<br>flat_image = flatten(input_image)<br><span class="hljs-built_in">print</span>(flat_image.size())<br>&gt;&gt; torch.Size([<span class="hljs-number">3</span>, <span class="hljs-number">784</span>])<br></code></pre></td></tr></table></figure><p>接着是线性层，对输入数据使用其存储的权重和偏置进行线性转化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">layer1 = nn.Linear(in_features=<span class="hljs-number">28</span>*<span class="hljs-number">28</span>, out_features=<span class="hljs-number">20</span>)<br>hidden1 = layer1(flat_image)<br><span class="hljs-built_in">print</span>(hidden1.size())<br>&gt;&gt; torch.Size([<span class="hljs-number">3</span>, <span class="hljs-number">20</span>])<br></code></pre></td></tr></table></figure><p>然后是非线性的激活函数，这里使用的是 <code>nn.ReLu</code> :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Before ReLU: <span class="hljs-subst">&#123;hidden1&#125;</span>\n\n&quot;</span>)<br>&gt;&gt; Before ReLU: tensor([[ <span class="hljs-number">0.0523</span>, -<span class="hljs-number">0.1083</span>,  <span class="hljs-number">0.2858</span>,  <span class="hljs-number">0.1203</span>,  <span class="hljs-number">0.0551</span>, -<span class="hljs-number">0.1314</span>,  <span class="hljs-number">0.3096</span>, -<span class="hljs-number">0.5887</span>,<br>&gt;&gt;          -<span class="hljs-number">0.6137</span>,  <span class="hljs-number">0.2250</span>, -<span class="hljs-number">0.0138</span>, -<span class="hljs-number">0.3449</span>,  <span class="hljs-number">0.1049</span>, -<span class="hljs-number">0.3507</span>, -<span class="hljs-number">0.1467</span>,  <span class="hljs-number">0.1690</span>,<br>&gt;&gt;          -<span class="hljs-number">0.1686</span>,  <span class="hljs-number">0.5031</span>, -<span class="hljs-number">0.7191</span>,  <span class="hljs-number">0.0630</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.0315</span>, -<span class="hljs-number">0.2344</span>,  <span class="hljs-number">0.2104</span>,  <span class="hljs-number">0.0119</span>,  <span class="hljs-number">0.3207</span>,  <span class="hljs-number">0.1959</span>,  <span class="hljs-number">0.2715</span>, -<span class="hljs-number">0.3763</span>,<br>&gt;&gt;          -<span class="hljs-number">0.6927</span>,  <span class="hljs-number">0.1180</span>,  <span class="hljs-number">0.0326</span>, -<span class="hljs-number">0.0591</span>,  <span class="hljs-number">0.1555</span>, -<span class="hljs-number">0.3325</span>, -<span class="hljs-number">0.0991</span>,  <span class="hljs-number">0.0538</span>,<br>&gt;&gt;          -<span class="hljs-number">0.0325</span>,  <span class="hljs-number">0.0603</span>, -<span class="hljs-number">0.6778</span>,  <span class="hljs-number">0.1263</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.0870</span>, -<span class="hljs-number">0.0861</span>,  <span class="hljs-number">0.1531</span>,  <span class="hljs-number">0.1096</span>,  <span class="hljs-number">0.1239</span>,  <span class="hljs-number">0.2402</span>, -<span class="hljs-number">0.0497</span>, -<span class="hljs-number">0.3567</span>,<br>&gt;&gt;          -<span class="hljs-number">0.4211</span>,  <span class="hljs-number">0.0606</span>, -<span class="hljs-number">0.0933</span>, -<span class="hljs-number">0.2004</span>, -<span class="hljs-number">0.1123</span>, -<span class="hljs-number">0.1470</span>, -<span class="hljs-number">0.1331</span>, -<span class="hljs-number">0.2290</span>,<br>&gt;&gt;          -<span class="hljs-number">0.2558</span>,  <span class="hljs-number">0.2107</span>, -<span class="hljs-number">0.5791</span>,  <span class="hljs-number">0.3495</span>]], grad_fn=&lt;AddmmBackward&gt;)<br>hidden1 = nn.ReLU()(hidden1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;After ReLU: <span class="hljs-subst">&#123;hidden1&#125;</span>&quot;</span>)<br>&gt;&gt; After ReLU: tensor([[<span class="hljs-number">0.0523</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.2858</span>, <span class="hljs-number">0.1203</span>, <span class="hljs-number">0.0551</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.3096</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>,<br>&gt;&gt;          <span class="hljs-number">0.2250</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.1049</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.1690</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.5031</span>,<br>&gt;&gt;          <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0630</span>],<br>&gt;&gt;         [<span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.2104</span>, <span class="hljs-number">0.0119</span>, <span class="hljs-number">0.3207</span>, <span class="hljs-number">0.1959</span>, <span class="hljs-number">0.2715</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>,<br>&gt;&gt;          <span class="hljs-number">0.1180</span>, <span class="hljs-number">0.0326</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.1555</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0538</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0603</span>,<br>&gt;&gt;          <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.1263</span>],<br>&gt;&gt;         [<span class="hljs-number">0.0870</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.1531</span>, <span class="hljs-number">0.1096</span>, <span class="hljs-number">0.1239</span>, <span class="hljs-number">0.2402</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>,<br>&gt;&gt;          <span class="hljs-number">0.0606</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.2107</span>,<br>&gt;&gt;          <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.3495</span>]], grad_fn=&lt;ReluBackward0&gt;)<br></code></pre></td></tr></table></figure><p>最后这些线性层和非线性层以一定的顺序被放在 <code>nn.Sequential</code> 容器中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">seq_modules = nn.Sequential(<br>    flatten,<br>    layer1,<br>    nn.ReLU(),<br>    nn.Linear(<span class="hljs-number">20</span>, <span class="hljs-number">10</span>)<br>)<br>input_image = torch.rand(<span class="hljs-number">3</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>logits = seq_modules(input_image)<br></code></pre></td></tr></table></figure><h3 id="模型参数"><a href="#模型参数" class="headerlink" title="模型参数"></a>模型参数</h3><p><code>nn.Module</code> 的子类会自动追踪在模型对象中定义的所有字段，并且可以使用 <code>parameters()</code> 和 <code>named_parameters()</code> 方法来获取模型的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Model structure: &quot;</span>, model, <span class="hljs-string">&quot;\n\n&quot;</span>)<br>&gt;&gt; Model structure:  NeuralNetwork(<br>&gt;&gt;   (flatten): Flatten(start_dim=<span class="hljs-number">1</span>, end_dim=-<span class="hljs-number">1</span>)<br>&gt;&gt;   (linear_relu_stack): Sequential(<br>&gt;&gt;     (<span class="hljs-number">0</span>): Linear(in_features=<span class="hljs-number">784</span>, out_features=<span class="hljs-number">512</span>, bias=<span class="hljs-literal">True</span>)<br>&gt;&gt;     (<span class="hljs-number">1</span>): ReLU()<br>&gt;&gt;     (<span class="hljs-number">2</span>): Linear(in_features=<span class="hljs-number">512</span>, out_features=<span class="hljs-number">512</span>, bias=<span class="hljs-literal">True</span>)<br>&gt;&gt;     (<span class="hljs-number">3</span>): ReLU()<br>&gt;&gt;     (<span class="hljs-number">4</span>): Linear(in_features=<span class="hljs-number">512</span>, out_features=<span class="hljs-number">10</span>, bias=<span class="hljs-literal">True</span>)<br>&gt;&gt;     (<span class="hljs-number">5</span>): ReLU()<br>&gt;&gt;   )<br>&gt;&gt; )<br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> model.named_parameters():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Layer: <span class="hljs-subst">&#123;name&#125;</span> | Size: <span class="hljs-subst">&#123;param.size()&#125;</span> | Values : <span class="hljs-subst">&#123;param[:<span class="hljs-number">2</span>]&#125;</span> \n&quot;</span>)<br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.0</span>.weight | Size: torch.Size([<span class="hljs-number">512</span>, <span class="hljs-number">784</span>]) | Values : tensor([[-<span class="hljs-number">0.0164</span>, -<span class="hljs-number">0.0271</span>, -<span class="hljs-number">0.0350</span>,  ...,  <span class="hljs-number">0.0217</span>,  <span class="hljs-number">0.0249</span>,  <span class="hljs-number">0.0046</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.0234</span>, -<span class="hljs-number">0.0130</span>, -<span class="hljs-number">0.0324</span>,  ...,  <span class="hljs-number">0.0176</span>,  <span class="hljs-number">0.0005</span>, -<span class="hljs-number">0.0079</span>]],<br>&gt;&gt;        device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.0</span>.bias | Size: torch.Size([<span class="hljs-number">512</span>]) | Values : tensor([-<span class="hljs-number">0.0350</span>, -<span class="hljs-number">0.0063</span>], device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.2</span>.weight | Size: torch.Size([<span class="hljs-number">512</span>, <span class="hljs-number">512</span>]) | Values : tensor([[ <span class="hljs-number">0.0141</span>,  <span class="hljs-number">0.0015</span>,  <span class="hljs-number">0.0391</span>,  ..., -<span class="hljs-number">0.0240</span>,  <span class="hljs-number">0.0044</span>, -<span class="hljs-number">0.0037</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.0396</span>,  <span class="hljs-number">0.0321</span>, -<span class="hljs-number">0.0239</span>,  ..., -<span class="hljs-number">0.0277</span>, -<span class="hljs-number">0.0196</span>, -<span class="hljs-number">0.0199</span>]],<br>&gt;&gt;        device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.2</span>.bias | Size: torch.Size([<span class="hljs-number">512</span>]) | Values : tensor([<span class="hljs-number">0.0313</span>, <span class="hljs-number">0.0194</span>], device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.4</span>.weight | Size: torch.Size([<span class="hljs-number">10</span>, <span class="hljs-number">512</span>]) | Values : tensor([[ <span class="hljs-number">0.0255</span>, -<span class="hljs-number">0.0100</span>,  <span class="hljs-number">0.0135</span>,  ..., -<span class="hljs-number">0.0103</span>, -<span class="hljs-number">0.0210</span>,  <span class="hljs-number">0.0378</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.0066</span>,  <span class="hljs-number">0.0378</span>,  <span class="hljs-number">0.0037</span>,  ...,  <span class="hljs-number">0.0146</span>,  <span class="hljs-number">0.0090</span>, -<span class="hljs-number">0.0166</span>]],<br>&gt;&gt;        device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.4</span>.bias | Size: torch.Size([<span class="hljs-number">10</span>]) | Values : tensor([<span class="hljs-number">0.0075</span>, <span class="hljs-number">0.0051</span>], device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;)<br></code></pre></td></tr></table></figure><h2 id="自动微分"><a href="#自动微分" class="headerlink" title="自动微分"></a>自动微分</h2><p>Pytorch 内置的微分引擎是 <code>torch.autograd</code> ,支持任何计算图的梯度自动计算，下面是一个简单的单层神经网络的例子，输入是 <code>x</code>，输出是 <code>y</code>，参数是 <code>w</code> 和 <code>b</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>x = torch.ones(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 输入</span><br>y = torch.zeros(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 标签</span><br>w = torch.randn(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, requires_grad=<span class="hljs-literal">True</span>)<span class="hljs-comment">##权重</span><br>b = torch.randn(<span class="hljs-number">3</span>, requires_grad=<span class="hljs-literal">True</span>)<span class="hljs-comment">##偏置</span><br>z = torch.matmul(x, w)+b<span class="hljs-comment">##前向传播</span><br>loss = torch.nn.functional.binary_cross_entropy_with_logits(z, y)<span class="hljs-comment">##损失函数</span><br></code></pre></td></tr></table></figure><p>这个神经网络的计算图如下：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/comp-graph.png"></p><p><code>w</code> 和 <code>b</code> 是我们需要优化的参数，所以要计算损失函数对这些参数的梯度，因此这些参数的 <code>requires_grad</code> 就要设置为 True（也可以在创建 tensor 后使用 <code>x.requires_grad_(True)</code> 来设置）。</p><p>在计算图中每个节点的计算（如加&#x2F;减，乘等）的函数都是 <code>Funtion</code> 类的一个对象，这个对象知道如何进行前向运算以及在反向传播中如何计算导数（比如在反向传播中加法节点将上游的值原封不动地输出到下游，见<a href="https://wutaoblog.com.cn/2021/01/03/deep_learning/">深度学习入门</a>），这些函数对象被存储在 tensor 的 <code>grad_fn</code> 属性中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Gradient function for z =&#x27;</span>,z.grad_fn)<br>&gt;&gt; Gradient function <span class="hljs-keyword">for</span> z = &lt;AddBackward0 <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF917BE730</span>&gt;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Gradient function for loss =&#x27;</span>, loss.grad_fn)<br>&gt;&gt; Gradient function <span class="hljs-keyword">for</span> loss = &lt;BinaryCrossEntropyWithLogitsBackward <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001CF917BE7F0</span>&gt;<br></code></pre></td></tr></table></figure><p>那么怎么计算损失函数对这些参数的梯度呢？在 Pytorch 中很简单：只需要调用<code>loss.backward</code> 就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">loss.backward()<br><span class="hljs-built_in">print</span>(w.grad)<br>&gt;&gt; tensor([[<span class="hljs-number">0.3163</span>, <span class="hljs-number">0.3305</span>, <span class="hljs-number">0.0401</span>],<br>&gt;&gt;         [<span class="hljs-number">0.3163</span>, <span class="hljs-number">0.3305</span>, <span class="hljs-number">0.0401</span>],<br>&gt;&gt;         [<span class="hljs-number">0.3163</span>, <span class="hljs-number">0.3305</span>, <span class="hljs-number">0.0401</span>],<br>&gt;&gt;         [<span class="hljs-number">0.3163</span>, <span class="hljs-number">0.3305</span>, <span class="hljs-number">0.0401</span>],<br>&gt;&gt;         [<span class="hljs-number">0.3163</span>, <span class="hljs-number">0.3305</span>, <span class="hljs-number">0.0401</span>]])<br><span class="hljs-built_in">print</span>(b.grad)<br>&gt;&gt; tensor([<span class="hljs-number">0.3163</span>, <span class="hljs-number">0.3305</span>, <span class="hljs-number">0.0401</span>])<br></code></pre></td></tr></table></figure><p>需要注意的是：在给定的计算图上只能使用 <code>backward</code> 进行一次梯度计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">loss.backward()<br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): RuntimeError: Trying to backward through the graph a second time (<span class="hljs-keyword">or</span> directly access saved variables after they have already been freed). Saved intermediate values of the graph are freed when you call .backward() <span class="hljs-keyword">or</span> autograd.grad(). Specify retain_graph=<span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> you need to backward through the graph a second time <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span> you need to access saved variables after calling backward.<br></code></pre></td></tr></table></figure><p>如果想要在相同的计算图上多次调用 <code>backward</code>，就需要在第一次调用 <code>backward</code> 时加上 <code>retain_graph=True</code> 的选项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.ones(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 输入</span><br>y = torch.zeros(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 标签</span><br>w = torch.randn(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, requires_grad=<span class="hljs-literal">True</span>)<span class="hljs-comment">##权重</span><br>b = torch.randn(<span class="hljs-number">3</span>, requires_grad=<span class="hljs-literal">True</span>)<span class="hljs-comment">##偏置</span><br>z = torch.matmul(x, w)+b<span class="hljs-comment">##前向传播</span><br>loss = torch.nn.functional.binary_cross_entropy_with_logits(z, y)<br>loss.backward(retain_graph=<span class="hljs-literal">True</span>)<br>loss.backward(retain_graph=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>另外，当第二次调用 <code>backward</code> 时，梯度会累加，因此要计算正确的梯度需要将之前的梯度清零（在实际训练模型中，<code>optimizer</code> 会帮我们干这件事）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(w.grad)<br>&gt;&gt; tensor([[<span class="hljs-number">0.5726</span>, <span class="hljs-number">0.2259</span>, <span class="hljs-number">0.6100</span>],<br>&gt;&gt;         [<span class="hljs-number">0.5726</span>, <span class="hljs-number">0.2259</span>, <span class="hljs-number">0.6100</span>],<br>&gt;&gt;         [<span class="hljs-number">0.5726</span>, <span class="hljs-number">0.2259</span>, <span class="hljs-number">0.6100</span>],<br>&gt;&gt;         [<span class="hljs-number">0.5726</span>, <span class="hljs-number">0.2259</span>, <span class="hljs-number">0.6100</span>],<br>&gt;&gt;         [<span class="hljs-number">0.5726</span>, <span class="hljs-number">0.2259</span>, <span class="hljs-number">0.6100</span>]])<br>loss.backward(retain_graph=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(w.grad)<br>&gt;&gt; tensor([[<span class="hljs-number">0.8589</span>, <span class="hljs-number">0.3389</span>, <span class="hljs-number">0.9150</span>],<br>&gt;&gt;         [<span class="hljs-number">0.8589</span>, <span class="hljs-number">0.3389</span>, <span class="hljs-number">0.9150</span>],<br>&gt;&gt;         [<span class="hljs-number">0.8589</span>, <span class="hljs-number">0.3389</span>, <span class="hljs-number">0.9150</span>],<br>&gt;&gt;         [<span class="hljs-number">0.8589</span>, <span class="hljs-number">0.3389</span>, <span class="hljs-number">0.9150</span>],<br>&gt;&gt;         [<span class="hljs-number">0.8589</span>, <span class="hljs-number">0.3389</span>, <span class="hljs-number">0.9150</span>]])<br></code></pre></td></tr></table></figure><p>设置了 <code>requires_grad=True</code> 的参数默认都会记录其计算图的路径并支持梯度的计算，但是有些时候我们并不想要这个属性，比如已经训练好了模型，想要将其应用到测试集上就只需要前向的计算就行了（不追踪梯度的前向运算更有效率）；可以将计算代码放到 <code>torch.no_grad()</code> 块中就会停止追踪计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">z = torch.matmul(x, w)+b<br><span class="hljs-built_in">print</span>(z.requires_grad)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-keyword">with</span> torch.no_grad():<br>    z = torch.matmul(x, w)+b<br><span class="hljs-built_in">print</span>(z.requires_grad)<br>&gt;&gt; <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>另一种选择是对 tensor 使用 <code>detach</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">z = torch.matmul(x, w)+b<br><span class="hljs-built_in">print</span>(z.requires_grad)<br>&gt;&gt; <span class="hljs-literal">True</span><br>z_det = z.detach()<br><span class="hljs-built_in">print</span>(z_det.requires_grad)<br>&gt;&gt; <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h2 id="优化模型参数"><a href="#优化模型参数" class="headerlink" title="优化模型参数"></a>优化模型参数</h2><p>通过前面的步骤，我们已经有了数据和模型，接下来就要通过在数据上优化参数来训练（train），验证（validate）和检测（test）。</p><h3 id="超参数"><a href="#超参数" class="headerlink" title="超参数"></a>超参数</h3><p>超参数是可以控制模型优化过程的可调节的参数，超参数是需要人为调整的，不能从数据中自动学习得到，不同的超参数会影响模型训练和收敛速度（关于超参数调试见后面）；这里定义 3 个超参数：数据迭代的次数（epoch），批量大小（batch size）和学习率（learning rate）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">learning_rate = <span class="hljs-number">1e-3</span><br>batch_size = <span class="hljs-number">64</span><br>epochs = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="优化循环"><a href="#优化循环" class="headerlink" title="优化循环"></a>优化循环</h3><p>当我们设置好了超参数之后就可以通过一个循环来训练优化模型，每一个优化循环的迭代称为一个 epoch；每一个 epoch 都有两个步骤：</p><ul><li>训练循环：对整个训练数据进行迭代，优化参数</li><li>验证步骤：在验证集上进行测试，检查模型性能是否提升</li></ul><p>下面是这两个部分的代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_loop</span>(<span class="hljs-params">dataloader, model, loss_fn, optimizer</span>):<br>    size = <span class="hljs-built_in">len</span>(dataloader.dataset)<br>    <span class="hljs-keyword">for</span> batch, (X, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader):<br>        X = X.to(device)<br>        y = y.to(device)<br>        <span class="hljs-comment"># Compute prediction and loss</span><br>        pred = model(X)<br>        loss = loss_fn(pred, y)<br><br>        <span class="hljs-comment"># Backpropagation</span><br>        optimizer.zero_grad()<span class="hljs-comment">##每次优化前要清零，不然梯度会累加</span><br>        loss.backward()<span class="hljs-comment">##反向传播，计算梯度</span><br>        optimizer.step()<span class="hljs-comment">##更新参数</span><br><br>        <span class="hljs-keyword">if</span> batch % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<span class="hljs-comment">##每100个batch打印一下信息</span><br>            loss, current = loss.item(), batch * <span class="hljs-built_in">len</span>(X)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;loss: <span class="hljs-subst">&#123;loss:&gt;7f&#125;</span>  [<span class="hljs-subst">&#123;current:&gt;5d&#125;</span>/<span class="hljs-subst">&#123;size:&gt;5d&#125;</span>]&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_loop</span>(<span class="hljs-params">dataloader, model, loss_fn</span>):<br>    size = <span class="hljs-built_in">len</span>(dataloader.dataset)<br>    num_batches = <span class="hljs-built_in">len</span>(dataloader)<br>    test_loss, correct = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> dataloader:<br>            X = X.to(device)<br>            y = y.to(device)<br>            pred = model(X)<br>            test_loss += loss_fn(pred, y).item()<span class="hljs-comment">##每个batch的loss相加</span><br>            correct += (pred.argmax(<span class="hljs-number">1</span>) == y).<span class="hljs-built_in">type</span>(torch.<span class="hljs-built_in">float</span>).<span class="hljs-built_in">sum</span>().item()<br><br>    test_loss /= num_batches<span class="hljs-comment">##取平均</span><br>    correct /= size<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Test Error: \n Accuracy: <span class="hljs-subst">&#123;(<span class="hljs-number">100</span>*correct):&gt;<span class="hljs-number">0.1</span>f&#125;</span>%, Avg loss: <span class="hljs-subst">&#123;test_loss:&gt;8f&#125;</span> \n&quot;</span>)<br></code></pre></td></tr></table></figure><p>由于这是个多分类问题，所以损失函数选择交叉熵损失：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Initialize the loss function</span><br>loss_fn = nn.CrossEntropyLoss()<br></code></pre></td></tr></table></figure><p>优化器选择随机梯度下降（SGD）：<code>torch.optim.SGD</code>，需要提供要优化的模型参数和学习率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)<br></code></pre></td></tr></table></figure><p>接下来就可以训练了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs python">epochs = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Epoch <span class="hljs-subst">&#123;t+<span class="hljs-number">1</span>&#125;</span>\n-------------------------------&quot;</span>)<br>    train_loop(train_dataloader, model, loss_fn, optimizer)<br>    test_loop(test_dataloader, model, loss_fn)<br>&gt;&gt; Epoch <span class="hljs-number">1</span><br>&gt;&gt; -------------------------------<br>&gt;&gt; loss: <span class="hljs-number">2.306926</span>  [    <span class="hljs-number">0</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.297123</span>  [ <span class="hljs-number">6400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.291222</span>  [<span class="hljs-number">12800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.284291</span>  [<span class="hljs-number">19200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.266220</span>  [<span class="hljs-number">25600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.266951</span>  [<span class="hljs-number">32000</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.247694</span>  [<span class="hljs-number">38400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.223377</span>  [<span class="hljs-number">44800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.203081</span>  [<span class="hljs-number">51200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.202767</span>  [<span class="hljs-number">57600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; Test Error: <br>&gt;&gt;  Accuracy: <span class="hljs-number">52.3</span>%, Avg loss: <span class="hljs-number">2.200312</span> <br>&gt;&gt; <br>&gt;&gt; Epoch <span class="hljs-number">2</span><br>&gt;&gt; -------------------------------<br>&gt;&gt; loss: <span class="hljs-number">2.203640</span>  [    <span class="hljs-number">0</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.207824</span>  [ <span class="hljs-number">6400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.145190</span>  [<span class="hljs-number">12800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.144182</span>  [<span class="hljs-number">19200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.161016</span>  [<span class="hljs-number">25600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.118622</span>  [<span class="hljs-number">32000</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.149072</span>  [<span class="hljs-number">38400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.105933</span>  [<span class="hljs-number">44800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.085976</span>  [<span class="hljs-number">51200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.978651</span>  [<span class="hljs-number">57600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; Test Error: <br>&gt;&gt;  Accuracy: <span class="hljs-number">53.3</span>%, Avg loss: <span class="hljs-number">2.048256</span> <br>&gt;&gt; <br>&gt;&gt; Epoch <span class="hljs-number">3</span><br>&gt;&gt; -------------------------------<br>&gt;&gt; loss: <span class="hljs-number">2.045080</span>  [    <span class="hljs-number">0</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.035074</span>  [ <span class="hljs-number">6400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.953637</span>  [<span class="hljs-number">12800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.910037</span>  [<span class="hljs-number">19200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.020058</span>  [<span class="hljs-number">25600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.988134</span>  [<span class="hljs-number">32000</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">2.021082</span>  [<span class="hljs-number">38400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.978815</span>  [<span class="hljs-number">44800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.801217</span>  [<span class="hljs-number">51200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.817578</span>  [<span class="hljs-number">57600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; Test Error: <br>&gt;&gt;  Accuracy: <span class="hljs-number">55.2</span>%, Avg loss: <span class="hljs-number">1.841357</span> <br>&gt;&gt; <br>&gt;&gt; Epoch <span class="hljs-number">4</span><br>&gt;&gt; -------------------------------<br>&gt;&gt; loss: <span class="hljs-number">1.791114</span>  [    <span class="hljs-number">0</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.774542</span>  [ <span class="hljs-number">6400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.920177</span>  [<span class="hljs-number">12800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.805154</span>  [<span class="hljs-number">19200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.847489</span>  [<span class="hljs-number">25600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.698445</span>  [<span class="hljs-number">32000</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.779692</span>  [<span class="hljs-number">38400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.583771</span>  [<span class="hljs-number">44800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.377952</span>  [<span class="hljs-number">51200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.661736</span>  [<span class="hljs-number">57600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; Test Error: <br>&gt;&gt;  Accuracy: <span class="hljs-number">57.9</span>%, Avg loss: <span class="hljs-number">1.632644</span> <br>&gt;&gt; <br>&gt;&gt; Epoch <span class="hljs-number">5</span><br>&gt;&gt; -------------------------------<br>&gt;&gt; loss: <span class="hljs-number">1.743047</span>  [    <span class="hljs-number">0</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.628604</span>  [ <span class="hljs-number">6400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.772539</span>  [<span class="hljs-number">12800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.722733</span>  [<span class="hljs-number">19200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.706047</span>  [<span class="hljs-number">25600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.456557</span>  [<span class="hljs-number">32000</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.356653</span>  [<span class="hljs-number">38400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.608426</span>  [<span class="hljs-number">44800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.525072</span>  [<span class="hljs-number">51200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.375649</span>  [<span class="hljs-number">57600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; Test Error: <br>&gt;&gt;  Accuracy: <span class="hljs-number">60.2</span>%, Avg loss: <span class="hljs-number">1.468750</span> <br>&gt;&gt; <br>&gt;&gt; Epoch <span class="hljs-number">6</span><br>&gt;&gt; -------------------------------<br>&gt;&gt; loss: <span class="hljs-number">1.545837</span>  [    <span class="hljs-number">0</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.597548</span>  [ <span class="hljs-number">6400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.662136</span>  [<span class="hljs-number">12800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.390470</span>  [<span class="hljs-number">19200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.871670</span>  [<span class="hljs-number">25600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.244840</span>  [<span class="hljs-number">32000</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.359863</span>  [<span class="hljs-number">38400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.307094</span>  [<span class="hljs-number">44800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.402576</span>  [<span class="hljs-number">51200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.375248</span>  [<span class="hljs-number">57600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; Test Error: <br>&gt;&gt;  Accuracy: <span class="hljs-number">60.9</span>%, Avg loss: <span class="hljs-number">1.345098</span> <br>&gt;&gt; <br>&gt;&gt; Epoch <span class="hljs-number">7</span><br>&gt;&gt; -------------------------------<br>&gt;&gt; loss: <span class="hljs-number">1.422368</span>  [    <span class="hljs-number">0</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.434490</span>  [ <span class="hljs-number">6400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.286219</span>  [<span class="hljs-number">12800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.351996</span>  [<span class="hljs-number">19200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.357883</span>  [<span class="hljs-number">25600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.230724</span>  [<span class="hljs-number">32000</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.410875</span>  [<span class="hljs-number">38400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.027635</span>  [<span class="hljs-number">44800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.359871</span>  [<span class="hljs-number">51200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.364859</span>  [<span class="hljs-number">57600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; Test Error: <br>&gt;&gt;  Accuracy: <span class="hljs-number">61.9</span>%, Avg loss: <span class="hljs-number">1.255917</span> <br>&gt;&gt; <br>&gt;&gt; Epoch <span class="hljs-number">8</span><br>&gt;&gt; -------------------------------<br>&gt;&gt; loss: <span class="hljs-number">1.235713</span>  [    <span class="hljs-number">0</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.044062</span>  [ <span class="hljs-number">6400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.162858</span>  [<span class="hljs-number">12800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.220107</span>  [<span class="hljs-number">19200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.291631</span>  [<span class="hljs-number">25600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">0.966984</span>  [<span class="hljs-number">32000</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.059310</span>  [<span class="hljs-number">38400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.355727</span>  [<span class="hljs-number">44800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.302162</span>  [<span class="hljs-number">51200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.444875</span>  [<span class="hljs-number">57600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; Test Error: <br>&gt;&gt;  Accuracy: <span class="hljs-number">63.0</span>%, Avg loss: <span class="hljs-number">1.195613</span> <br>&gt;&gt; <br>&gt;&gt; Epoch <span class="hljs-number">9</span><br>&gt;&gt; -------------------------------<br>&gt;&gt; loss: <span class="hljs-number">0.986301</span>  [    <span class="hljs-number">0</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.011468</span>  [ <span class="hljs-number">6400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.181765</span>  [<span class="hljs-number">12800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.380456</span>  [<span class="hljs-number">19200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.152233</span>  [<span class="hljs-number">25600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.146567</span>  [<span class="hljs-number">32000</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.255965</span>  [<span class="hljs-number">38400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.355518</span>  [<span class="hljs-number">44800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.049245</span>  [<span class="hljs-number">51200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.128320</span>  [<span class="hljs-number">57600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; Test Error: <br>&gt;&gt;  Accuracy: <span class="hljs-number">63.6</span>%, Avg loss: <span class="hljs-number">1.151816</span> <br>&gt;&gt; <br>&gt;&gt; Epoch <span class="hljs-number">10</span><br>&gt;&gt; -------------------------------<br>&gt;&gt; loss: <span class="hljs-number">1.179832</span>  [    <span class="hljs-number">0</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.270620</span>  [ <span class="hljs-number">6400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.147824</span>  [<span class="hljs-number">12800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.163859</span>  [<span class="hljs-number">19200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.227105</span>  [<span class="hljs-number">25600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.204818</span>  [<span class="hljs-number">32000</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.303981</span>  [<span class="hljs-number">38400</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.032624</span>  [<span class="hljs-number">44800</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.061971</span>  [<span class="hljs-number">51200</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; loss: <span class="hljs-number">1.084357</span>  [<span class="hljs-number">57600</span>/<span class="hljs-number">60000</span>]<br>&gt;&gt; Test Error: <br>&gt;&gt;  Accuracy: <span class="hljs-number">64.3</span>%, Avg loss: <span class="hljs-number">1.116730</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done!&quot;</span>)<br>&gt;&gt; Done!<br></code></pre></td></tr></table></figure><h2 id="储存和读取模型"><a href="#储存和读取模型" class="headerlink" title="储存和读取模型"></a>储存和读取模型</h2><p>第一种方法就是使用 <code>torch.save</code> 存储模型的参数（state_dict）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> model.named_parameters():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Layer: <span class="hljs-subst">&#123;name&#125;</span> | Size: <span class="hljs-subst">&#123;param.size()&#125;</span> | Values : <span class="hljs-subst">&#123;param[:<span class="hljs-number">2</span>]&#125;</span> \n&quot;</span>)<br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.0</span>.weight | Size: torch.Size([<span class="hljs-number">512</span>, <span class="hljs-number">784</span>]) | Values : tensor([[-<span class="hljs-number">0.0164</span>, -<span class="hljs-number">0.0271</span>, -<span class="hljs-number">0.0350</span>,  ...,  <span class="hljs-number">0.0217</span>,  <span class="hljs-number">0.0249</span>,  <span class="hljs-number">0.0046</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.0234</span>, -<span class="hljs-number">0.0130</span>, -<span class="hljs-number">0.0324</span>,  ...,  <span class="hljs-number">0.0173</span>,  <span class="hljs-number">0.0004</span>, -<span class="hljs-number">0.0079</span>]],<br>&gt;&gt;        device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.0</span>.bias | Size: torch.Size([<span class="hljs-number">512</span>]) | Values : tensor([-<span class="hljs-number">0.0350</span>, -<span class="hljs-number">0.0040</span>], device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.2</span>.weight | Size: torch.Size([<span class="hljs-number">512</span>, <span class="hljs-number">512</span>]) | Values : tensor([[ <span class="hljs-number">0.0141</span>,  <span class="hljs-number">0.0018</span>,  <span class="hljs-number">0.0393</span>,  ..., -<span class="hljs-number">0.0243</span>,  <span class="hljs-number">0.0044</span>, -<span class="hljs-number">0.0037</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.0396</span>,  <span class="hljs-number">0.0318</span>, -<span class="hljs-number">0.0239</span>,  ..., -<span class="hljs-number">0.0278</span>, -<span class="hljs-number">0.0201</span>, -<span class="hljs-number">0.0202</span>]],<br>&gt;&gt;        device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.2</span>.bias | Size: torch.Size([<span class="hljs-number">512</span>]) | Values : tensor([<span class="hljs-number">0.0341</span>, <span class="hljs-number">0.0185</span>], device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.4</span>.weight | Size: torch.Size([<span class="hljs-number">10</span>, <span class="hljs-number">512</span>]) | Values : tensor([[ <span class="hljs-number">0.0248</span>, -<span class="hljs-number">0.0103</span>,  <span class="hljs-number">0.0497</span>,  ..., -<span class="hljs-number">0.0248</span>, -<span class="hljs-number">0.0431</span>,  <span class="hljs-number">0.0532</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.0075</span>,  <span class="hljs-number">0.0374</span>, -<span class="hljs-number">0.0252</span>,  ...,  <span class="hljs-number">0.0573</span>,  <span class="hljs-number">0.0476</span>, -<span class="hljs-number">0.0564</span>]],<br>&gt;&gt;        device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.4</span>.bias | Size: torch.Size([<span class="hljs-number">10</span>]) | Values : tensor([<span class="hljs-number">0.0304</span>, <span class="hljs-number">0.0557</span>], device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, grad_fn=&lt;SliceBackward&gt;)<br>torch.save(model.state_dict(), <span class="hljs-string">&#x27;model_weights.pth&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在载入模型的时候需要先创建一个相同模型的实例，然后在使用<br><code>load_state_dict()</code> 方法载入模型的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python">model = NeuralNetwork()<br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> model.named_parameters():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Layer: <span class="hljs-subst">&#123;name&#125;</span> | Size: <span class="hljs-subst">&#123;param.size()&#125;</span> | Values : <span class="hljs-subst">&#123;param[:<span class="hljs-number">2</span>]&#125;</span> \n&quot;</span>)<br>    <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.0</span>.weight | Size: torch.Size([<span class="hljs-number">512</span>, <span class="hljs-number">784</span>]) | Values : tensor([[ <span class="hljs-number">0.0238</span>, -<span class="hljs-number">0.0081</span>,  <span class="hljs-number">0.0160</span>,  ..., -<span class="hljs-number">0.0083</span>, -<span class="hljs-number">0.0010</span>, -<span class="hljs-number">0.0024</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.0100</span>,  <span class="hljs-number">0.0321</span>, -<span class="hljs-number">0.0217</span>,  ...,  <span class="hljs-number">0.0226</span>, -<span class="hljs-number">0.0264</span>,  <span class="hljs-number">0.0076</span>]],<br>&gt;&gt;        grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.0</span>.bias | Size: torch.Size([<span class="hljs-number">512</span>]) | Values : tensor([-<span class="hljs-number">0.0054</span>,  <span class="hljs-number">0.0092</span>], grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.2</span>.weight | Size: torch.Size([<span class="hljs-number">512</span>, <span class="hljs-number">512</span>]) | Values : tensor([[-<span class="hljs-number">0.0226</span>,  <span class="hljs-number">0.0203</span>, -<span class="hljs-number">0.0223</span>,  ...,  <span class="hljs-number">0.0067</span>, -<span class="hljs-number">0.0291</span>, -<span class="hljs-number">0.0129</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.0428</span>,  <span class="hljs-number">0.0410</span>, -<span class="hljs-number">0.0325</span>,  ...,  <span class="hljs-number">0.0424</span>,  <span class="hljs-number">0.0010</span>, -<span class="hljs-number">0.0367</span>]],<br>&gt;&gt;        grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.2</span>.bias | Size: torch.Size([<span class="hljs-number">512</span>]) | Values : tensor([ <span class="hljs-number">0.0299</span>, -<span class="hljs-number">0.0382</span>], grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.4</span>.weight | Size: torch.Size([<span class="hljs-number">10</span>, <span class="hljs-number">512</span>]) | Values : tensor([[ <span class="hljs-number">0.0154</span>, -<span class="hljs-number">0.0093</span>,  <span class="hljs-number">0.0043</span>,  ...,  <span class="hljs-number">0.0269</span>,  <span class="hljs-number">0.0015</span>,  <span class="hljs-number">0.0145</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.0316</span>, -<span class="hljs-number">0.0201</span>, -<span class="hljs-number">0.0111</span>,  ..., -<span class="hljs-number">0.0192</span>, -<span class="hljs-number">0.0140</span>, -<span class="hljs-number">0.0011</span>]],<br>&gt;&gt;        grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.4</span>.bias | Size: torch.Size([<span class="hljs-number">10</span>]) | Values : tensor([-<span class="hljs-number">0.0373</span>, -<span class="hljs-number">0.0201</span>], grad_fn=&lt;SliceBackward&gt;)<br>            <br>model.load_state_dict(torch.load(<span class="hljs-string">&#x27;model_weights.pth&#x27;</span>))<br>&gt;&gt; &lt;All keys matched successfully&gt;<br><br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> model.named_parameters():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Layer: <span class="hljs-subst">&#123;name&#125;</span> | Size: <span class="hljs-subst">&#123;param.size()&#125;</span> | Values : <span class="hljs-subst">&#123;param[:<span class="hljs-number">2</span>]&#125;</span> \n&quot;</span>)<br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.0</span>.weight | Size: torch.Size([<span class="hljs-number">512</span>, <span class="hljs-number">784</span>]) | Values : tensor([[-<span class="hljs-number">0.0164</span>, -<span class="hljs-number">0.0271</span>, -<span class="hljs-number">0.0350</span>,  ...,  <span class="hljs-number">0.0217</span>,  <span class="hljs-number">0.0249</span>,  <span class="hljs-number">0.0046</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.0234</span>, -<span class="hljs-number">0.0130</span>, -<span class="hljs-number">0.0324</span>,  ...,  <span class="hljs-number">0.0173</span>,  <span class="hljs-number">0.0004</span>, -<span class="hljs-number">0.0079</span>]],<br>&gt;&gt;        grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.0</span>.bias | Size: torch.Size([<span class="hljs-number">512</span>]) | Values : tensor([-<span class="hljs-number">0.0350</span>, -<span class="hljs-number">0.0040</span>], grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.2</span>.weight | Size: torch.Size([<span class="hljs-number">512</span>, <span class="hljs-number">512</span>]) | Values : tensor([[ <span class="hljs-number">0.0141</span>,  <span class="hljs-number">0.0018</span>,  <span class="hljs-number">0.0393</span>,  ..., -<span class="hljs-number">0.0243</span>,  <span class="hljs-number">0.0044</span>, -<span class="hljs-number">0.0037</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.0396</span>,  <span class="hljs-number">0.0318</span>, -<span class="hljs-number">0.0239</span>,  ..., -<span class="hljs-number">0.0278</span>, -<span class="hljs-number">0.0201</span>, -<span class="hljs-number">0.0202</span>]],<br>&gt;&gt;        grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.2</span>.bias | Size: torch.Size([<span class="hljs-number">512</span>]) | Values : tensor([<span class="hljs-number">0.0341</span>, <span class="hljs-number">0.0185</span>], grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.4</span>.weight | Size: torch.Size([<span class="hljs-number">10</span>, <span class="hljs-number">512</span>]) | Values : tensor([[ <span class="hljs-number">0.0248</span>, -<span class="hljs-number">0.0103</span>,  <span class="hljs-number">0.0497</span>,  ..., -<span class="hljs-number">0.0248</span>, -<span class="hljs-number">0.0431</span>,  <span class="hljs-number">0.0532</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.0075</span>,  <span class="hljs-number">0.0374</span>, -<span class="hljs-number">0.0252</span>,  ...,  <span class="hljs-number">0.0573</span>,  <span class="hljs-number">0.0476</span>, -<span class="hljs-number">0.0564</span>]],<br>&gt;&gt;        grad_fn=&lt;SliceBackward&gt;) <br>&gt;&gt; <br>&gt;&gt; Layer: linear_relu_stack<span class="hljs-number">.4</span>.bias | Size: torch.Size([<span class="hljs-number">10</span>]) | Values : tensor([<span class="hljs-number">0.0304</span>, <span class="hljs-number">0.0557</span>], grad_fn=&lt;SliceBackward&gt;)<br></code></pre></td></tr></table></figure><p>注意：如果我们要在测试集进行计算，需要先 <code>model.eval()</code> 转换为评价模型而不是训练模式（在训练与测试中有些设置不一样，比如 dropout 是在训练中使用，防止模型过拟合，但是如果在评价中也使用 dropout，会造成结果的不稳定）。</p><p>另一种方法是直接使用 <code>torch.save</code> 和 <code>torch.load</code> 来存储和读入模型（使用了 python 的 pickle 模块）。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiny基础-2</title>
    <link href="/2021/07/15/mastering_shiny_part2/"/>
    <url>/2021/07/15/mastering_shiny_part2/</url>
    
    <content type="html"><![CDATA[<p>R Shiny 基础知识 参考：<a href="https://mastering-shiny.org/index.html">Mastering Shiny</a></p><span id="more"></span><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="单页面布局"><a href="#单页面布局" class="headerlink" title="单页面布局"></a>单页面布局</h2><p>布局函数提供了一个 app的可视化结构，布局由函数调用的层次结构创建，其中 R 中的层次结构与生成的 HTML 中的层次结构相匹配，比如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">fluidPage<span class="hljs-punctuation">(</span><br>  titlePanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Hello Shiny!&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sidebarLayout<span class="hljs-punctuation">(</span><br>    sidebarPanel<span class="hljs-punctuation">(</span><br>      sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;obs&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Observations:&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">500</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    mainPanel<span class="hljs-punctuation">(</span><br>      plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;distPlot&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>如果只看这些函数的话，有着如下的层级结构：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">fluidPage<span class="hljs-punctuation">(</span><br>  titlePanel<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sidebarLayout<span class="hljs-punctuation">(</span><br>    sidebarPanel<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    mainPanel<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>我们可以从这个代码就可以想象这个页面的构成：最上面是一个标题栏，然后是一个侧边栏，含有一个滑动条和一个用来展示图像的主页面，所以为了保持代码的可读性，使用这种一致的层级结构是必要的。</p><h3 id="页面函数"><a href="#页面函数" class="headerlink" title="页面函数"></a>页面函数</h3><p>最常用的页面函数是 <code>fluidPage()</code>，页面函数会设置好 Shiny 运行需要的 HTML, CSS, 和 JavaScript，另外还有其他的一些页面函数，比如 <code>fixedPage()</code> 固定了页面的最大宽度，防止 app 在更大的屏幕上显示不正常；<code>fillPage()</code> 填充浏览器的全部高度，在想要绘制占据整个屏幕的图的时候有用。</p><h3 id="有侧边栏（-sidebar）-的页面"><a href="#有侧边栏（-sidebar）-的页面" class="headerlink" title="有侧边栏（ sidebar） 的页面"></a>有侧边栏（ sidebar） 的页面</h3><p>为了创建更复杂的布局，我们需要在页面函数内部调用布局函数；比如想要创建一个两列布局的界面（左边是输入，右边是输出），就需要使用 <code>sidebarLayout()</code> 函数，基本的框架为：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs R">fluidPage<span class="hljs-punctuation">(</span><br>  titlePanel<span class="hljs-punctuation">(</span><br>    <span class="hljs-comment"># app title/description</span><br>  <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sidebarLayout<span class="hljs-punctuation">(</span><br>    sidebarPanel<span class="hljs-punctuation">(</span><br>      <span class="hljs-comment"># inputs</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    mainPanel<span class="hljs-punctuation">(</span><br>      <span class="hljs-comment"># outputs</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>会产生如下的布局形式：</p><img src="https://d33wubrfki0l68.cloudfront.net/37aa2b1c61a6141cc95188bffd0cfc782fdb27d5/b6aa6/diagrams/action-layout/sidebar.png" alt="Structure of a basic app with sidebar" style="zoom:33%;" /><p>下面的代码创建一个展示中心极限定理的简单 app 的例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  titlePanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Central limit theorem&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sidebarLayout<span class="hljs-punctuation">(</span><br>    sidebarPanel<span class="hljs-punctuation">(</span><br>      numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;m&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Number of samples:&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    mainPanel<span class="hljs-punctuation">(</span><br>      plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>hist <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    means <span class="hljs-operator">&lt;-</span> replicate<span class="hljs-punctuation">(</span><span class="hljs-number">1e4</span><span class="hljs-punctuation">,</span> mean<span class="hljs-punctuation">(</span>runif<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>m<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    hist<span class="hljs-punctuation">(</span>means<span class="hljs-punctuation">,</span> breaks <span class="hljs-operator">=</span> <span class="hljs-number">20</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210715164555291.png"></p><p><code>sidebarLayout</code> 默认 <code>sidebarPanel</code> 和 <code>mainPanel</code> 是一比二的比例，可以通过 <code>width</code> 参数进行更改。</p><h3 id="多行布局"><a href="#多行布局" class="headerlink" title="多行布局"></a>多行布局</h3><p><code>sidebarLayout</code> 是基于更灵活的多行布局来构造的，我们也可以直接使用 shiny 中的多行布局的函数：<code>fluidRow</code>；<code>fluidRow</code> 创建行，一行的宽度为12，可以在内部使用 <code>column</code> 函数来指定每个部件的宽度（因此指定的宽度值必须小于等于12），如果想要创建一个和上面类型的界面可以使用下面的代码：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>shiny<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">## 创建两行，第一行是标题，第二行又分成两列，比例是1：2</span><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  fluidRow<span class="hljs-punctuation">(</span><br>    column<span class="hljs-punctuation">(</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>          h1<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Central limit theorem&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  fluidRow<span class="hljs-punctuation">(</span><br>    column<span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;m&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Number of samples:&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br>      <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    column<span class="hljs-punctuation">(</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>           plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>hist <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    means <span class="hljs-operator">&lt;-</span> replicate<span class="hljs-punctuation">(</span><span class="hljs-number">1e4</span><span class="hljs-punctuation">,</span> mean<span class="hljs-punctuation">(</span>runif<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>m<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    hist<span class="hljs-punctuation">(</span>means<span class="hljs-punctuation">,</span> breaks <span class="hljs-operator">=</span> <span class="hljs-number">20</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210715165706121.png"></p><p>这两个界面有一点区别：在 <code>sidebarPanel</code> 是有灰色的背景，而使用 <code>fluidRow</code> 创建的没有。</p><h2 id="多页面布局"><a href="#多页面布局" class="headerlink" title="多页面布局"></a>多页面布局</h2><p>对于一个复杂的 app，将所有的内容放到一个界面上是不合理的，因此需要多页面的布局来组织内容，在 <code>shiny</code> 中是通过 <code>tabPanel</code> 来实现。</p><h3 id="Tabsets"><a href="#Tabsets" class="headerlink" title="Tabsets"></a>Tabsets</h3><p><code>tabPanel</code> 经常是和 <code>tabsetPanel</code> 一起使用的，<code>tabsetPanel</code> 创建一个多页面的容器，然后可以在里面放置不同的 <code>tabPanel</code> 页面：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  tabsetPanel<span class="hljs-punctuation">(</span><br>    tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Import data&quot;</span><span class="hljs-punctuation">,</span> <br>      fileInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;file&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Data&quot;</span><span class="hljs-punctuation">,</span> buttonLabel <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Upload...&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      textInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;delim&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Delimiter (leave blank to guess)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;skip&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Rows to skip&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rows&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Rows to preview&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Set parameters&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Visualise results&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210715170813633.png"></p><p>每个 <code>tabPanel</code> 都有一个名称，如果想要知道用户选择了哪个页面，可以在为 <code>tabsetPanel</code> 加上标签选项，然后在 <code>server</code> 函数中通过标签获取 <code>tabPanel</code> 的名称：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  sidebarLayout<span class="hljs-punctuation">(</span><br>    sidebarPanel<span class="hljs-punctuation">(</span><br>      textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    mainPanel<span class="hljs-punctuation">(</span><br>      tabsetPanel<span class="hljs-punctuation">(</span><br>        id <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tabset&quot;</span><span class="hljs-punctuation">,</span><br>        tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;one&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>        tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;two&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>        tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">)</span><br>      <span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>panel <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Current panel: &quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>tabset<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210715171313171.png"></p><p><code>tabsetPanel</code> 能用在任何地方！（如上面在 <code>mainPanel</code> 内部）。</p><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p>上面讲到的都是利用 tab 进行多页面的水平布局，但有的时候 tab 过多或者 tab 的标题过长就不适合水平放置，这个时候就可以利用导航栏的形式进行竖直排布。和 <code>tabsetPanel</code> 类似的是 <code>navlistPanel</code> ，不同的是 <code>navlistPanel</code> 是将 tab 垂直放置：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  navlistPanel<span class="hljs-punctuation">(</span><br>    id <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tabset&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;Heading 1&quot;</span><span class="hljs-punctuation">,</span><br>    tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Panel one contents&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;Heading 2&quot;</span><span class="hljs-punctuation">,</span><br>    tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Panel two contents&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Panel three contents&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210715182754399.png"></p><p>另一种方法是使用 <code>navbarPage</code> ，这个函数和 <code>tabsetPanel</code> 一样，也是将 tab 水平排布，但是可以通过  <code>narbarMenu</code> 来添加下拉列表，相当于结合了水平排布和竖直排布：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> navbarPage<span class="hljs-punctuation">(</span><br>  <span class="hljs-string">&quot;Page title&quot;</span><span class="hljs-punctuation">,</span>   <br>  tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;one&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;two&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  navbarMenu<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;subpanels&quot;</span><span class="hljs-punctuation">,</span> <br>    tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 4a&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;four-a&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 4b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;four-b&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel 4c&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;four-c&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210715183133798.png"></p><h2 id="Boostrap"><a href="#Boostrap" class="headerlink" title="Boostrap"></a>Boostrap</h2><p>Bootstrap 是一个前端组件库，对于 shiny 来说并不需要过多地关注 Bootstrap， 因为 shiny 函数会自动生成 Bootstrap 兼容的 HTML，但是我们也可以自己进行定制：</p><ul><li>使用 <code>bslib::bs_theme()</code> 定制代码的外观</li><li>使用 <code>class</code> 参数定制一些布局，输入和输出（class 为 bootstrap 的类名）</li><li>也可以自己写函数产生一些 shiny 未提供的 bootstrap 组件</li></ul><p>除了 bootstrap 外，一些 R 包也提供了其他不同的 CSS 框架，比如：</p><ul><li><code>shiny.semantic</code> 基于 Fomantic UI 组件库构建</li><li><code>shinyMobile</code> 基于 framework 7 构建，适用于移动设备</li><li><code>shinymaterial</code> 基于谷歌的 Material design 框架</li><li><code>shinydashboard </code> 可以使用 shiny 来创建仪表盘 app</li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>可以使用 <code>bslib</code> 包去修改很多的 Bootstrap  默认选项来创建更加独特的 app 外观。使用 <code>bslib::bs_theme()</code> 函数来创建主题，通过布局函数的 <code>theme</code> 参数来应用这个主题：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">fluidPage<span class="hljs-punctuation">(</span><br>  theme <span class="hljs-operator">=</span> bslib<span class="hljs-operator">::</span>bs_theme<span class="hljs-punctuation">(</span>...<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>改变 app 整体外观的最简单的方式就是使用预制的 <code>bootwatch</code> [主题](<a href="https://bootswatch.com/">Bootswatch: Free themes for Bootstrap</a>), 在 <code>bslib::bs_theme()</code> 的 <code>bootwatch</code> 参数中设置想要的主题名称（<code> bslib::bootswatch_themes()</code> 获取可选主题）:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#可选的主题<br>&gt; bslib::<span class="hljs-built_in">bootswatch_themes</span>()<br> <span class="hljs-selector-attr">[1]</span> <span class="hljs-string">&quot;cerulean&quot;</span>  <span class="hljs-string">&quot;cosmo&quot;</span>     <span class="hljs-string">&quot;cyborg&quot;</span>    <span class="hljs-string">&quot;darkly&quot;</span>    <span class="hljs-string">&quot;flatly&quot;</span>    <span class="hljs-string">&quot;journal&quot;</span>   <span class="hljs-string">&quot;litera&quot;</span>   <br> <span class="hljs-selector-attr">[8]</span> <span class="hljs-string">&quot;lumen&quot;</span>     <span class="hljs-string">&quot;lux&quot;</span>       <span class="hljs-string">&quot;materia&quot;</span>   <span class="hljs-string">&quot;minty&quot;</span>     <span class="hljs-string">&quot;pulse&quot;</span>     <span class="hljs-string">&quot;sandstone&quot;</span> <span class="hljs-string">&quot;simplex&quot;</span>  <br><span class="hljs-selector-attr">[15]</span> <span class="hljs-string">&quot;sketchy&quot;</span>   <span class="hljs-string">&quot;slate&quot;</span>     <span class="hljs-string">&quot;solar&quot;</span>     <span class="hljs-string">&quot;spacelab&quot;</span>  <span class="hljs-string">&quot;superhero&quot;</span> <span class="hljs-string">&quot;united&quot;</span>    <span class="hljs-string">&quot;yeti&quot;</span>  <br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  theme <span class="hljs-operator">=</span> bslib<span class="hljs-operator">::</span>bs_theme<span class="hljs-punctuation">(</span>bootswatch <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spacelab&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sidebarLayout<span class="hljs-punctuation">(</span><br>    sidebarPanel<span class="hljs-punctuation">(</span><br>      textInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;txt&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Text input:&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;text here&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;slider&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Slider input:&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    mainPanel<span class="hljs-punctuation">(</span><br>      h1<span class="hljs-punctuation">(</span>paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Theme: spacelab&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      h2<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Header 2&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      p<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Some text&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20220308220045131.png"></p><p>也可以使用 <code>bs_theme</code> 的其他参数来构建新的主题，比如 <code>bg</code> 参数表示背景颜色，<code>fg</code> 参数表示前景色，<code>base_font</code> 表示字体等：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">theme <span class="hljs-operator">&lt;-</span> bslib<span class="hljs-operator">::</span>bs_theme<span class="hljs-punctuation">(</span><br>  bg <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#0b3d91&quot;</span><span class="hljs-punctuation">,</span> <br>  fg <span class="hljs-operator">=</span> <span class="hljs-string">&quot;white&quot;</span><span class="hljs-punctuation">,</span> <br>  base_font <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Source Sans Pro&quot;</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>为了方便设计主题，该包提供了一个 <code>bslib::bs_theme_preview(theme)</code> 函数，可以预览主题的外观：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB111.gif"></p><p>在定制了 app 的外观后，app 中的绘图风格最好也要一致，<code>thematic </code> 包提供了自动匹配 ggplot2，lattice，和 base R 绘图的风格，只需在 server 函数中调用 <code>thematic_shiny()</code> 即可：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  theme <span class="hljs-operator">=</span> bslib<span class="hljs-operator">::</span>bs_theme<span class="hljs-punctuation">(</span>bootswatch <span class="hljs-operator">=</span> <span class="hljs-string">&quot;darkly&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  titlePanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;A themed plot&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;plot&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  thematic<span class="hljs-operator">::</span>thematic_shiny<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>plot <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    ggplot<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">,</span> aes<span class="hljs-punctuation">(</span>wt<span class="hljs-punctuation">,</span> mpg<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>      geom_point<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>      geom_smooth<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB112.gif"></p><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="交互性"><a href="#交互性" class="headerlink" title="交互性"></a>交互性</h2><p><code>plotOutput</code> 除了展示图形输出外还可以作为鼠标相应事件的输入，因此可以允许用户和图形进行交互。</p><p>一个图可以响应四种不同的鼠标事件：单击（click），双击（dblclick），悬浮（hover，鼠标在某处停留一段时间）和笔刷（brush，矩形选择工具）；可以使用 <code>plotOutput</code> 中的 <code>click</code> 参数来将这些事件转化为 shiny 的输入，比如：<code>plotOutput(&quot;plot&quot;, click = &quot;plot_click&quot;)</code> 就会生成一个 <code>input$plot_click</code> 的输入标签，可以在 server 中使用，下面是一个例子，当用户点击图上某个点的时候输出该点的坐标：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;plot&quot;</span><span class="hljs-punctuation">,</span> click <span class="hljs-operator">=</span> <span class="hljs-string">&quot;plot_click&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  verbatimTextOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>plot <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    plot<span class="hljs-punctuation">(</span>mtcars<span class="hljs-operator">$</span>wt<span class="hljs-punctuation">,</span> mtcars<span class="hljs-operator">$</span>mpg<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><br>  output<span class="hljs-operator">$</span>info <span class="hljs-operator">&lt;-</span> renderPrint<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    req<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>plot_click<span class="hljs-punctuation">)</span><span class="hljs-comment">##保证只在用户产生动作时才会运行下面的代码</span><br>    x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">round</span><span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>plot_click<span class="hljs-operator">$</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>    y <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">round</span><span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>plot_click<span class="hljs-operator">$</span>y<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>    cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;[&quot;</span><span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;, &quot;</span><span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;]&quot;</span><span class="hljs-punctuation">,</span> sep <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB17.gif"></p><h3 id="点击"><a href="#点击" class="headerlink" title="点击"></a>点击</h3><p>点击事件（<code>input$plot_click</code>）返回一个内容非常丰富的列表，在上面的例子中用到了 <code>x</code> 和 <code>y</code> 的坐标，但是这种数据结构在实际中很少用到，常常用的是 <code>nearPoints()</code> 函数，返回一个数据框，行是源数据中离我们点击的位置比较近的数据点（默认是 5 个像素以内的所有点）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;plot&quot;</span><span class="hljs-punctuation">,</span> click <span class="hljs-operator">=</span> <span class="hljs-string">&quot;plot_click&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>plot <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    ggplot<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">,</span> aes<span class="hljs-punctuation">(</span>wt<span class="hljs-punctuation">,</span> mpg<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> geom_point<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>data <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    req<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>plot_click<span class="hljs-punctuation">)</span><br>    nearPoints<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>plot_click<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里给 <code>nearPoints</code> 提供了两个参数，用于画图的数据以及点击事件（如果不是用 ggplot2 画的图，还需要提供 <code>xvar</code> 表示 x 轴是哪个变量，以及 <code>yvar</code> 表示 y 轴的变量），还可以设置 <code>threshold</code> 和 <code>maxpoints</code> 参数，分别表示离点击点的像素距离以及最多返回多少个点：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB18.gif"></p><p>另外在 <code>nearPoints</code> 中还可以使用参数 <code>allRows = TRUE</code> 以及 <code>addDist = TRUE</code> 来返回多了两列的原始数据框，多了的两列分别为：</p><ul><li><code>dist_</code> ：表示该行的样本点与所选择的点的距离</li><li><code>selected_</code> ：表示改行的样本点是否被选中（也就是上面例子中展示的行）</li></ul><p>关于双击和悬浮，由于用的不多，这里就没有具体讲解，以后用到的时候再学习。</p><h3 id="笔刷"><a href="#笔刷" class="headerlink" title="笔刷"></a>笔刷</h3><p>另一个在图上选择点的方法是使用笔刷（brush），和 <code>click</code> 类似，响应笔刷事件的函数为 <code>brushedPoints()</code>，下面是一个例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;plot&quot;</span><span class="hljs-punctuation">,</span> brush <span class="hljs-operator">=</span> <span class="hljs-string">&quot;plot_brush&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>plot <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    ggplot<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">,</span> aes<span class="hljs-punctuation">(</span>wt<span class="hljs-punctuation">,</span> mpg<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> geom_point<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>data <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    brushedPoints<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>plot_brush<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB19.gif"></p><p>另外对于 plotOutput 的 <code>click</code> 或 <code>brush</code> 等参数可以传入 <code>brushOpts</code> 而不是字符串，从而可以控制事件的行为（比如笔刷中的填充颜色，限制只能在 x 或 y 方向上进行选择等）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;plot&quot;</span><span class="hljs-punctuation">,</span> brush <span class="hljs-operator">=</span> brushOpts<span class="hljs-punctuation">(</span><br>    <span class="hljs-string">&quot;plot_brush&quot;</span><span class="hljs-punctuation">,</span><br>    fill <span class="hljs-operator">=</span> <span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">##填充红色</span><br>    stroke <span class="hljs-operator">=</span> <span class="hljs-string">&quot;green&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">##边缘绿色</span><br>    direction <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##只能在x方向上选择</span><br>  <span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB20.gif"></p><h3 id="修饰图"><a href="#修饰图" class="headerlink" title="修饰图"></a>修饰图</h3><p>到目前为止，只是在另一个输出中展示交互的结果（如在另一个表中输出选择的样本点），但是真正的交互应该是在交互的图上直接展示交互后的结果。这就需要一个技术：<code>reactiveVal</code>（这个函数在第 3 部分还会讲），<code>reactiveval</code> 和 <code>reactive()</code> 类似，通过这个函数创建的响应变量可以当作函数来使用，但是不同之处在于<code>reactiveval</code>可以用来更新值:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">val <span class="hljs-operator">&lt;-</span> reactiveVal<span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>val<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">#&gt; [1] 10</span><br>val<span class="hljs-punctuation">(</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><br>val<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">#&gt; [1] 20</span><br>val<span class="hljs-punctuation">(</span>val<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>val<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">#&gt; [1] 21</span><br><span class="hljs-comment">##实际上直接在终端运行这些命令会报错，因为响应变量只有在响应式环境，比如observeEvent中才可以被执行</span><br></code></pre></td></tr></table></figure><p>下面的例子展示了当点击一个点后会显示图上其他点离该点的距离（以点的大小表示）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs R">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1014</span><span class="hljs-punctuation">)</span><br>df <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;plot&quot;</span><span class="hljs-punctuation">,</span> click <span class="hljs-operator">=</span> <span class="hljs-string">&quot;plot_click&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  dist <span class="hljs-operator">&lt;-</span> reactiveVal<span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> nrow<span class="hljs-punctuation">(</span>df<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##初始化，全为1</span><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>plot_click<span class="hljs-punctuation">,</span><br>    dist<span class="hljs-punctuation">(</span>nearPoints<span class="hljs-punctuation">(</span>df<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>plot_click<span class="hljs-punctuation">,</span> allRows <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> addDist <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>dist_<span class="hljs-punctuation">)</span><span class="hljs-comment">##用nearPoints中的距离值更新 dist  </span><br>  <span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>plot <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    df<span class="hljs-operator">$</span>dist <span class="hljs-operator">&lt;-</span> dist<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>    ggplot<span class="hljs-punctuation">(</span>df<span class="hljs-punctuation">,</span> aes<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> size <span class="hljs-operator">=</span> dist<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> <br>      geom_point<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> <br>      scale_size_area<span class="hljs-punctuation">(</span>limits <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> max_size <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> guide <span class="hljs-operator">=</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##标准化点的大小</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB21.gif"></p><p>下面是一个复杂一点的例子，使用笔刷逐步增加所选择的点，和上面一样，先初始化 <code>reactiveVal</code> 中的值为 FALSE，然后设置 <code>brushedPoints()</code> 的参数 <code>allRows = TRUE</code> ，得到 <code>selected_</code> 列，最后使用 <code>selected_</code> 来更新 <code>reactiveVal</code> 的值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;plot&quot;</span><span class="hljs-punctuation">,</span> brush <span class="hljs-operator">=</span> <span class="hljs-string">&quot;plot_brush&quot;</span><span class="hljs-punctuation">,</span> dblclick <span class="hljs-operator">=</span> <span class="hljs-string">&quot;plot_reset&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  selected <span class="hljs-operator">&lt;-</span> reactiveVal<span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span> nrow<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##初始化</span><br><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>plot_brush<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    brushed <span class="hljs-operator">&lt;-</span> brushedPoints<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>plot_brush<span class="hljs-punctuation">,</span> allRows <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>selected_<br>    selected<span class="hljs-punctuation">(</span>brushed <span class="hljs-operator">|</span> selected<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##更新</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>plot_reset<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    selected<span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span> nrow<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><br>  output<span class="hljs-operator">$</span>plot <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    mtcars<span class="hljs-operator">$</span>sel <span class="hljs-operator">&lt;-</span> selected<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>    ggplot<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">,</span> aes<span class="hljs-punctuation">(</span>wt<span class="hljs-punctuation">,</span> mpg<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> <br>      geom_point<span class="hljs-punctuation">(</span>aes<span class="hljs-punctuation">(</span>colour <span class="hljs-operator">=</span> sel<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>      scale_colour_discrete<span class="hljs-punctuation">(</span>limits <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;TRUE&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;FALSE&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##使得在没有选的时候，legend也有两个</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB22.gif"></p><h2 id="动态高宽"><a href="#动态高宽" class="headerlink" title="动态高宽"></a>动态高宽</h2><p>我们也可以让用户来决定图的高宽，需要分别向 <code>renderPlot</code> 的 <code>height</code> 和 <code>weight</code> 参数提供一个没有参数的函数，返回是高和宽的值（像素），下面是一个简单的例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;height&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;height&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">250</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;width&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;width&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">250</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;plot&quot;</span><span class="hljs-punctuation">,</span> width <span class="hljs-operator">=</span> <span class="hljs-number">250</span><span class="hljs-punctuation">,</span> height <span class="hljs-operator">=</span> <span class="hljs-number">250</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>plot <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><br>    width <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> input<span class="hljs-operator">$</span>width<span class="hljs-punctuation">,</span><br>    height <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> input<span class="hljs-operator">$</span>height<span class="hljs-punctuation">,</span><br>    res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      plot<span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB113.gif"></p><p>需要注意的是，在改变图的高宽的时候并没有改变数据，也就是说 <code>  plot(rnorm(20), rnorm(20))</code> 并没有重新运行。</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>可以使用 <code>renderImage()</code> 来展示已有的图片（非代码绘出的图）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  imageOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;photo&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>photo <span class="hljs-operator">&lt;-</span> renderImage<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><br>      src <span class="hljs-operator">=</span> file.path<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;../test.webp&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      contentType <span class="hljs-operator">=</span> <span class="hljs-string">&quot;image/webp&quot;</span><span class="hljs-punctuation">,</span><br>      width <span class="hljs-operator">=</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span><br>      height <span class="hljs-operator">=</span> <span class="hljs-number">650</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> deleteFile <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220309103028686.png" alt="" style="zoom:50%;" /><p><code>renderImage</code> 需要输入的是一个列表，必须参数是 <code>src</code> 表示图片的路径，其他可选参数有：</p><ul><li><code>contentType</code> ：图片的 MIME 格式（[Multipurpose Internet Mail Extensions](<a href="https://www.metadata2go.com/file-info/mime-type#:~:text=MIME">https://www.metadata2go.com/file-info/mime-type#:~:text=MIME</a> Types are structured in a certain way%2C,(%2F) is used to separate type from subtype.)，如果有后缀就无需提供</li><li><code>width</code> 和 <code>height</code> ：图片的宽高</li><li>其他的 HTML <code>&lt;img&gt;</code> 标签参数，如 <code>class</code> , <code>alt</code> 等</li></ul><p>注意 shiny 1.5 之前的版本在渲染完之后会删除图片，因此需要加上 <code>deleteFile = FALSE</code> 参数。</p><h1 id="用户反馈"><a href="#用户反馈" class="headerlink" title="用户反馈"></a>用户反馈</h1><p>本章主要介绍对用户的输入进行反馈以及输出程序运行中信息的技术，包括：</p><ul><li>确认（validation），当输入不正确时提醒用户；</li><li>信息（notification），输出程序运行的信息；</li><li>进度条（process bar），展示由多个小步骤构成的耗时操作的细节；</li><li>对于某些危险的操作给予确定或撤销选项。</li></ul><h2 id="确认（Validation）"><a href="#确认（Validation）" class="headerlink" title="确认（Validation）"></a>确认（Validation）</h2><h3 id="确认输入"><a href="#确认输入" class="headerlink" title="确认输入"></a>确认输入</h3><p><code>shinyFeedback</code> 包可用来向用户提供额外的反馈，首先需要在 <code>ui</code> 中添加 <code>useShinyFeedback()</code> 函数，该函数设置了显示错误信息所需要的 HTML 和 JavaScript：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  shinyFeedback<span class="hljs-operator">::</span>useShinyFeedback<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;half&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>然后在 <code>server</code> 函数中可以使用下面四个函数（输出不同的信息）：&#96;&#96;feedback()<code>, </code>feedbackWarning()<code>, </code>feedbackDanger()<code>, 和 </code>feedbackSuccess()&#96; ，这些函数都有 3 个关键的参数：</p><ul><li><code>inputId</code>：和 UI 中的输入 id 相匹配，说明反馈信息应该放在哪里</li><li><code>show</code>：是否显示反馈信息</li><li><code>text</code>：要显示的内容</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  half <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    even <span class="hljs-operator">&lt;-</span> input<span class="hljs-operator">$</span>n <span class="hljs-operator">%%</span> <span class="hljs-number">2</span> <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-comment">##是不是偶数</span><br>    shinyFeedback<span class="hljs-operator">::</span>feedbackWarning<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">!</span>even<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Please select an even number&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##不是偶数输出信息</span><br>    input<span class="hljs-operator">$</span>n <span class="hljs-operator">/</span> <span class="hljs-number">2</span>    <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>half <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span>half<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210719081106770.png" alt="image-20210719081106770"></p><p>可以看到当输入 11 时会出现提示信息，但是这个时候也会输出结果；为了避免这种情况发生，我们需要一个新的工具：<code>req</code>函数（required）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  half <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    even <span class="hljs-operator">&lt;-</span> input<span class="hljs-operator">$</span>n <span class="hljs-operator">%%</span> <span class="hljs-number">2</span> <span class="hljs-operator">==</span> <span class="hljs-number">0</span><br>    shinyFeedback<span class="hljs-operator">::</span>feedbackWarning<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">!</span>even<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Please select an even number&quot;</span><span class="hljs-punctuation">)</span><br>    req<span class="hljs-punctuation">(</span>even<span class="hljs-punctuation">)</span><br>    input<span class="hljs-operator">$</span>n <span class="hljs-operator">/</span> <span class="hljs-number">2</span>    <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>half <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span>half<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>当 <code>req</code> 的输入是 FALSE 时，会认为响应表达式所需要的输入没有全部被满足，从而会告诉 shiny 暂停对输入的响应：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210719081536513.png" alt="image-20210719081536513"></p><p>下面进一步看一下这个函数：</p><h3 id="使用-req-取消执行"><a href="#使用-req-取消执行" class="headerlink" title="使用 req 取消执行"></a>使用 <code>req</code> 取消执行</h3><p>在启动 APP 之后会基于提供的默认值构建一个完整的响应图，但有的时候采取默认值会出现问题，比如下面的三种情况：</p><ul><li>在 <code>textInput</code> 中，使用默认值 <code>value = &quot;&quot;</code>，在用户输入之前不会做任何的响应</li><li>在 <code>selectInput</code> 中，使用空的选项作为默认值</li><li>在 <code>fileInput</code> 中，在用户上传文件之前是没有任何结果的</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;language&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Language&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;English&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Maori&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Name&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;greeting&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  greetings <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><br>    English <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span><span class="hljs-punctuation">,</span> <br>    Maori <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Kia ora&quot;</span><br>  <span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>greeting <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    paste0<span class="hljs-punctuation">(</span>greetings<span class="hljs-punctuation">[[</span>input<span class="hljs-operator">$</span>language<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>name<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;!&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210719083343793.png" alt="image-20210719083343793"></p><p>上面的 app 中由于我们提供的选择默认值为空，而 greetings 向量中没有这个元素，所以会报错，因此我们想要的是在用户没有输入操作之前是不会运行 app 的，这里就需要 <code>req</code> 函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  greetings <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><br>    English <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span><span class="hljs-punctuation">,</span> <br>    Maori <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Kia ora&quot;</span><br>  <span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>greeting <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    req<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>language<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>name<span class="hljs-punctuation">)</span><br>    paste0<span class="hljs-punctuation">(</span>greetings<span class="hljs-punctuation">[[</span>input<span class="hljs-operator">$</span>language<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>name<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;!&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210719083558854.png" alt="image-20210719083558854"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210719083740800.png" alt="image-20210719083740800"></p><p>可以看到在没有输入前是没有任何输出的；<code>req</code> 被调用后会发出特殊的信号，造成下游的响应和输出停止执行；<code>req</code> 可以以两种方式工作：</p><ul><li>提供输入 <code>req(input$x)</code> ：在 x 被提供的情况下才会继续执行下游的命令</li><li>提供条件表达式：<code>req(input$a &gt; 0)</code> ：在输入的值大于 0 的时候才会继续执行下游的命令</li></ul><p>（<strong>可以理解为参数为 TRUE 的时候才会放行，数据存在也是一种 TRUE</strong>）</p><p>下面来创建一个相对复杂的 app（和第一部分中的展示 R 内部数据一样），需要用户输入数据集的名称，然后展示该数据集；这个 app 的关键在于需要判断用户输入的数据集的名称是否在内置的数据集中，如果不在，需要打印反馈信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  shinyFeedback<span class="hljs-operator">::</span>useShinyFeedback<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dataset&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Dataset name&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>  tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  data <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    req<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">)</span><br>    <br>    exists <span class="hljs-operator">&lt;-</span> exists<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><br>    shinyFeedback<span class="hljs-operator">::</span>feedbackDanger<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dataset&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">!</span>exists<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Unknown dataset&quot;</span><span class="hljs-punctuation">)</span><br>    req<span class="hljs-punctuation">(</span>exists<span class="hljs-punctuation">,</span> cancelOutput <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><br>    get<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>data <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    head<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB1.gif"></p><p>注意 <code>req</code> 的参数 <code>cancelOutput = TRUE</code>，这个选项会保留最后一个正确的输入得到的输出，如果设为 FALSE 会清除最后正确的结果：</p><p> <img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/%E5%8A%A8%E7%94%BB221.gif"></p><h3 id="在输出中确认"><a href="#在输出中确认" class="headerlink" title="在输出中确认"></a>在输出中确认</h3><p>上面讲到的都是输出和单个输入相关联，可以在 UI 中放置 <code>useShinyFeedback</code>，对应在 <code>server</code> 中放置 <code>feedback**</code> 函数；但是有时<strong>输出是和多个输入相关联</strong>的，这个时候就不适合在 UI 中放置 <code>useShinyFeedback</code>，因为不知道要对哪个输入做出反馈确认，所以解决方法为在输出中使用<code>validate</code> 来做出反馈；当 <code>validate</code> 被调用时，会停止执行剩下的代码并输出指定的信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment">##当输入为负数并且计算类型是开方或log时，打印信息</span><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;trans&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;transformation&quot;</span><span class="hljs-punctuation">,</span> <br>    choices <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;square&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;log&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;square-root&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;out&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>out <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>x <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> input<span class="hljs-operator">$</span>trans <span class="hljs-operator">%in%</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;log&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;square-root&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      validate<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x can not be negative for this transformation&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <br>    <span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>trans<span class="hljs-punctuation">,</span><br>      square <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>x <span class="hljs-operator">^</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;square-root&quot;</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">sqrt</span><span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-built_in">log</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">log</span><span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>x<span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB2.gif"></p><h2 id="通知（Notifications）"><a href="#通知（Notifications）" class="headerlink" title="通知（Notifications）"></a>通知（Notifications）</h2><p>当程序运行过程中没有产生问题，但是想要用户知道发生了什么，可以使用 notification。在 shiny 中 <code>showNotification</code> 函数可以用来创建 notification，有 3 种方式：</p><ul><li>短时间的信息，在一定时间后会自动消失</li><li>在任务开始时展示信息，在结束时移除</li><li>随着任务的进行逐步更新信息</li></ul><h3 id="短时-Notification"><a href="#短时-Notification" class="headerlink" title="短时 Notification"></a>短时 Notification</h3><p>最简单的方法就是给 <code>showNotification</code> 提供一个参数，表示要展示的信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  actionButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;goodnight&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Good night&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>goodnight<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    showNotification<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;So long&quot;</span><span class="hljs-punctuation">)</span><br>    Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    showNotification<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Farewell&quot;</span><span class="hljs-punctuation">)</span><br>    Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    showNotification<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Auf Wiedersehen&quot;</span><span class="hljs-punctuation">)</span><br>    Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    showNotification<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Adieu&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB3.gif"></p><p>默认信息在 5 秒后会自动消失，也可以人为设定（通过 duration 参数设定或者直接点击叉号）；另外设置 <code>type</code> 参数可以改变输出信息的文本框的背景色（不同类型的信息）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>goodnight<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    showNotification<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;So long&quot;</span><span class="hljs-punctuation">,</span>duration <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    showNotification<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Farewell&quot;</span><span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;message&quot;</span><span class="hljs-punctuation">)</span><br>    Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    showNotification<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Auf Wiedersehen&quot;</span><span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;warning&quot;</span><span class="hljs-punctuation">)</span><br>    Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    showNotification<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Adieu&quot;</span><span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB5.gif"></p><h3 id="在任务完成后移除"><a href="#在任务完成后移除" class="headerlink" title="在任务完成后移除"></a>在任务完成后移除</h3><p>要在完成任务后删除信息，需要设置：</p><ul><li><code>duration = NULL</code> 和 <code>closeButton = FALSE</code> 使 notification 在任务完成前可见</li><li>将 <code>showNotification</code> 的返回存到一个变量中，然后将其作为 <code>removeNotification</code> 的参数，并且最好使用 <code>on.exit</code> 函数，用来保证不管是任务成功运行或者报错时 notification 都会被移除</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>shiny<span class="hljs-punctuation">)</span><br><br>write.csv<span class="hljs-punctuation">(</span>cars<span class="hljs-punctuation">,</span>file <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cars.csv&quot;</span><span class="hljs-punctuation">)</span><br>write.csv<span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">,</span>file <span class="hljs-operator">=</span> <span class="hljs-string">&quot;iris.csv&quot;</span><span class="hljs-punctuation">)</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;file&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Files&quot;</span><span class="hljs-punctuation">,</span>choices <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;cars&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;iris&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  <br>  dt <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;cars.csv&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;iris.csv&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;cars&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;iris&quot;</span><span class="hljs-punctuation">)</span><br>  <br>  data <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    id <span class="hljs-operator">&lt;-</span> showNotification<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Reading data...&quot;</span><span class="hljs-punctuation">,</span> duration <span class="hljs-operator">=</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">,</span> closeButton <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-built_in">on.exit</span><span class="hljs-punctuation">(</span>removeNotification<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> add <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br>    read.csv<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">[</span>input<span class="hljs-operator">$</span>file<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>data <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    req<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>file<span class="hljs-punctuation">)</span><br>    head<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB6.gif"></p><h3 id="随进度更新"><a href="#随进度更新" class="headerlink" title="随进度更新"></a>随进度更新</h3><p>在前面的短时确认中，我们调用了多次 <code>showNotification</code> ，产生了多个信息，当一个任务运行时间比较长，并且有多个子任务时，更好的方法是：只显示一个信息，但是随着任务的进度更新这个信息，主要区别就是<strong>将上一个信息的调用作为下一个信息的 ID</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  notify <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>msg<span class="hljs-punctuation">,</span> id <span class="hljs-operator">=</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    showNotification<span class="hljs-punctuation">(</span>msg<span class="hljs-punctuation">,</span> id <span class="hljs-operator">=</span> id<span class="hljs-punctuation">,</span> duration <span class="hljs-operator">=</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">,</span> closeButton <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br><br>  data <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span> <br>    id <span class="hljs-operator">&lt;-</span> notify<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Reading data...&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-built_in">on.exit</span><span class="hljs-punctuation">(</span>removeNotification<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> add <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br>    Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>      <br>    notify<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Reticulating splines...&quot;</span><span class="hljs-punctuation">,</span> id <span class="hljs-operator">=</span> id<span class="hljs-punctuation">)</span><br>    Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    <br>    notify<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Herding llamas...&quot;</span><span class="hljs-punctuation">,</span> id <span class="hljs-operator">=</span> id<span class="hljs-punctuation">)</span><br>    Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><br>    notify<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Orthogonalizing matrices...&quot;</span><span class="hljs-punctuation">,</span> id <span class="hljs-operator">=</span> id<span class="hljs-punctuation">)</span><br>    Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>        <br>    mtcars<br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>data <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span>head<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB7.gif"></p><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><p>对于需要长时间运行的 app 来说，进度条是最直观的方式来展现任务运行的进度，这部分主要使用两个技术来展示进度条：<code>Shiny</code> 的自带方法以及 <code>waiter</code> 包中的方法。</p><h3 id="Shiny"><a href="#Shiny" class="headerlink" title="Shiny"></a>Shiny</h3><p>shiny 中的 <code>withProcess</code> 和 <code>incProgress</code> 搭配可以创建进度条，主要步骤为：将我们需要进度条显示的任务（一般是循环）用 <code>withProcess</code> 包起来，在每一个子任务完成的时候使用 <code>incProcess</code> 增加进度条中的进度，类似于：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">withProgress<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-built_in">seq_len</span><span class="hljs-punctuation">(</span>step<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    x <span class="hljs-operator">&lt;-</span> function_that_takes_a_long_time<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br>    incProgress<span class="hljs-punctuation">(</span><span class="hljs-number">1</span> <span class="hljs-operator">/</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>step<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##incProcess 的第一个参数是进度条增加的数量</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>下面是一个例子（使用 <code>Sys.sleep(0.5)</code> 模拟需要长时间运行的函数）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>shiny<span class="hljs-punctuation">)</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;steps&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;How many steps?&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  actionButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;result&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  data <span class="hljs-operator">&lt;-</span> eventReactive<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>go<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    withProgress<span class="hljs-punctuation">(</span>message <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Computing random number&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-built_in">seq_len</span><span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>steps<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>        Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><br>        incProgress<span class="hljs-punctuation">(</span><span class="hljs-number">1</span> <span class="hljs-operator">/</span> input<span class="hljs-operator">$</span>steps<span class="hljs-punctuation">)</span><br>      <span class="hljs-punctuation">&#125;</span><br>      runif<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>result <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-built_in">round</span><span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB8.gif"></p><p>这里的 <code>eventReactive</code> 在第一部分讲过，第一个参数是依赖，只有依赖发生改变时第二个参数中的代码才会运行（也就是只有在用户点击率 go 按钮之后才会显示进度条）。</p><h3 id="Waiter"><a href="#Waiter" class="headerlink" title="Waiter"></a>Waiter</h3><p><code>waiter</code> 包提供了进度条的更多选项，使用 <code>waiter</code> 需要首先在 UI 中添加 <code>use_waitress()</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  waiter<span class="hljs-operator">::</span>use_waitress<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;steps&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;How many steps?&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  actionButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;result&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>在 server 中使用 <code>waiter::Waitress$new</code> 创建新的进度条，使用 <code>on.exit(waitress$close())</code> 使得进度完成时进度条可以被移除，用 <code>waitress$inc</code> 代替上面的 <code>incProgress</code> 来增加进度：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  data <span class="hljs-operator">&lt;-</span> eventReactive<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>go<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    waitress <span class="hljs-operator">&lt;-</span> waiter<span class="hljs-operator">::</span>Waitress<span class="hljs-operator">$</span>new<span class="hljs-punctuation">(</span><span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>steps<span class="hljs-punctuation">)</span><br>    <span class="hljs-built_in">on.exit</span><span class="hljs-punctuation">(</span>waitress<span class="hljs-operator">$</span>close<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <br>    <span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-built_in">seq_len</span><span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>steps<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><br>      waitress<span class="hljs-operator">$</span>inc<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>    runif<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>result <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-built_in">round</span><span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB9.gif"></p><p>可以看到进度条默认是在页面的顶部出现并且覆盖整个页面，除了这个默认的之外，我们可以选择不同的进度条样式（使用 <code>theme</code> 参数，可以是 <code>overlay</code>,<code>overlay-opacity</code> 或者 <code>overlay-percent</code>）;另外也可以选择不覆盖整个页面，而是在某个输入或输出组件中展示（使用 <code>selector </code> 参数），下面是在一个输入框中展示进度条的例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>shiny<span class="hljs-punctuation">)</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  waiter<span class="hljs-operator">::</span>use_waitress<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;steps&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;How many steps?&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;shows&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;process&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  actionButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;result&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  data <span class="hljs-operator">&lt;-</span> eventReactive<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>go<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    waitress <span class="hljs-operator">&lt;-</span> waiter<span class="hljs-operator">::</span>Waitress<span class="hljs-operator">$</span>new<span class="hljs-punctuation">(</span><span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>steps<span class="hljs-punctuation">)</span><br>    waitress <span class="hljs-operator">&lt;-</span> waiter<span class="hljs-operator">::</span>Waitress<span class="hljs-operator">$</span>new<span class="hljs-punctuation">(</span><span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>steps<span class="hljs-punctuation">,</span>selector <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#shows&quot;</span><span class="hljs-punctuation">,</span> theme <span class="hljs-operator">=</span> <span class="hljs-string">&quot;overlay&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-built_in">on.exit</span><span class="hljs-punctuation">(</span>waitress<span class="hljs-operator">$</span>close<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <br>    <span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-built_in">seq_len</span><span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>steps<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      Sys.sleep<span class="hljs-punctuation">(</span><span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><br>      waitress<span class="hljs-operator">$</span>inc<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <br>    runif<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>result <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-built_in">round</span><span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB10.gif"></p><p>有些时候显示进度条不是一件容易的事（特别是代码中没有循环），因此可以使用动态加载的页面来表示正在运行，需要将上面的 <code>use_waitress()</code> 改成 <code>use_waiter()</code>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  waiter<span class="hljs-operator">::</span>use_waiter<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  actionButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;result&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  data <span class="hljs-operator">&lt;-</span> eventReactive<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>go<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    waiter <span class="hljs-operator">&lt;-</span> waiter<span class="hljs-operator">::</span>Waiter<span class="hljs-operator">$</span>new<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>    waiter<span class="hljs-operator">$</span>show<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-built_in">on.exit</span><span class="hljs-punctuation">(</span>waiter<span class="hljs-operator">$</span>hide<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <br>    Sys.sleep<span class="hljs-punctuation">(</span>sample<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    runif<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>result <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-built_in">round</span><span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB11.gif"></p><h2 id="确认和撤销"><a href="#确认和撤销" class="headerlink" title="确认和撤销"></a>确认和撤销</h2><p>防止用户意外进行危险操作的最简单的方法就是给出一个明确的警告，并且需要用户确定，在 shiny 中可以使用 <code>modalDialog</code> 来实现，这个函数会创建一个对话框来提示用户。下面是一个对删除文件进行确认的对话框：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs R">modal_confirm <span class="hljs-operator">&lt;-</span> modalDialog<span class="hljs-punctuation">(</span><br>  <span class="hljs-string">&quot;Are you sure you want to continue?&quot;</span><span class="hljs-punctuation">,</span><br>  title <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Deleting files&quot;</span><span class="hljs-punctuation">,</span><br>  footer <span class="hljs-operator">=</span> tagList<span class="hljs-punctuation">(</span><br>    actionButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;cancel&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Cancel&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    actionButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;ok&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Delete&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">class</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;btn btn-danger&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  actionButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;delete&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Delete all files?&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>delete<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    showModal<span class="hljs-punctuation">(</span>modal_confirm<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>ok<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    showNotification<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Files deleted&quot;</span><span class="hljs-punctuation">)</span><br>    removeModal<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>cancel<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    removeModal<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB12.gif"></p><p><code>showModal</code> 和 <code>removeModal</code> 可以展示和移除对话框。这里就是当用户点击了按钮就展示对话框，接下来如果选择了 Delete 也就是标签为 ok 的按钮，那么就会展示通知并且移除对话框，如果点击了 Cancel 就会直接移除对话框。</p><blockquote><p> 什么时候用 observeEvent ，什么时候用 eventReactive？</p><p> 当想要对一个事件做出一个行为的时候用 observeEvent ；当想对一个事件的更新算出一个值的时候就用 eventReactive，通常 eventReactive 要赋给一个变量作为响应表达式吗，随后再调用，而 observeEvent 则是直接反应</p></blockquote><h1 id="上传和下载"><a href="#上传和下载" class="headerlink" title="上传和下载"></a>上传和下载</h1><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p>在第一部分已经遇到过上传文件的 UI，也就是 <code>fileInput()</code>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  fileInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;upload&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Upload a file&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##还可以有一些其他的参数</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>从 UI 的 <code>fileInput</code> 中传入 <code>server</code> 的是有四列的数据框：</p><ul><li><code>name</code> ：在用户电脑上的原始文件名</li><li><code>size</code> ：文件大小，单位是字节，默认只能输入最大 5 MB 的文件，可以通过设置环境变量 <code>shiny.maxRequestSize</code> 来控制，比如：<code>options(shiny.maxRequestSize = 10 * 1024^2)</code> 表示最大上传文件大小设置为 10 M</li><li><code>type</code> ：MIME 文件类型，通常是从文件拓展名推测的</li><li><code>datapath</code>：上传后，文件所在的临时位置（和临时文件名）</li></ul><p>下面是一个具体的展示：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>shiny<span class="hljs-punctuation">)</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  fileInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;upload&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">,</span> buttonLabel <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Upload...&quot;</span><span class="hljs-punctuation">,</span> multiple <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-comment">##multiple表示可以多选</span><br>  tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;files&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>files <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>upload<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB13.gif"></p><h3 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h3><p>上面只是演示了一下数据读进来的格式，当我们需要获取用户上传的文件中的数据时，有两个细节需要注意：</p><ul><li><code>input$upload</code> 在页面载入时是初始化为 <code>NULL</code> 的（<code>upload</code> 是 <code>fileInput</code> 的标签 ID），因此我们需要使用 <code>req(input$upload)</code> 来判断用户是否上传了文件</li><li><code>fileInput</code> 还有一个 <code>accept</code> 的参数，这个参数可以用来限制用户上传文件的类型，但是要注意：这种方法只能是对用户的“建议”，用户还可以自己更改（具体见下面的动图）；因此需要我们再次手动确认用户输入的文件格式（可以使用 <code>tools::file_ext()</code> 函数来获取文件的拓展名）</li></ul><p>下面是一个例子，接受用户上传的 <code>csv</code> 或 <code>tsv</code> 文件，并读取用户定义的前 <code>n</code> 行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  fileInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;upload&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">,</span> accept <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;.csv&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.tsv&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Rows&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;head&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  data <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    req<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>upload<span class="hljs-punctuation">)</span><br>    <br>    ext <span class="hljs-operator">&lt;-</span> tools<span class="hljs-operator">::</span>file_ext<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>upload<span class="hljs-operator">$</span>name<span class="hljs-punctuation">)</span><br>    <span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span>ext<span class="hljs-punctuation">,</span><br>      csv <span class="hljs-operator">=</span> vroom<span class="hljs-operator">::</span>vroom<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>upload<span class="hljs-operator">$</span>datapath<span class="hljs-punctuation">,</span> delim <span class="hljs-operator">=</span> <span class="hljs-string">&quot;,&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      tsv <span class="hljs-operator">=</span> vroom<span class="hljs-operator">::</span>vroom<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>upload<span class="hljs-operator">$</span>datapath<span class="hljs-punctuation">,</span> delim <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\t&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      validate<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Invalid file; Please upload a .csv or .tsv file&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>head <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    head<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>n<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB14.gif"></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载需要在 UI 里面加上 <code>downloadButton(id)</code> 或者 <code>downloadlink(id)</code>，这两者的页面如下：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/download.png"></p><p>在 server 中与之匹配的是 <code>downloadHandler</code> :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">output<span class="hljs-operator">$</span>download <span class="hljs-operator">&lt;-</span> downloadHandler<span class="hljs-punctuation">(</span><br>  filename <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    paste0<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.csv&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  content <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>file<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    write.csv<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> file<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>该函数有两个参数，并且两个参数都是函数：</p><ul><li><code>filename</code> ：一个没有参数的函数，返回的是文件名（字符串），这个函数的任务是生成在下载对话框中展示给用户的文件名</li><li><code>content</code> ：有一个参数的函数，参数是存储文件的路径，这个参数是 shiny 自己创建的临时文件，<strong>不需要我们指定</strong></li></ul><p>下面是一个例子，在内置数据集中选择一个数据集供用户下载：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dataset&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Pick a dataset&quot;</span><span class="hljs-punctuation">,</span> ls<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;preview&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  downloadButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;download&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Download .tsv&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  data <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    out <span class="hljs-operator">&lt;-</span> get<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##获取数据</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>is.data.frame<span class="hljs-punctuation">(</span>out<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">##判断是不是数据框</span><br>      validate<span class="hljs-punctuation">(</span>paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;&#x27; is not a data frame&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>    out<br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>preview <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    head<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>    <br>  output<span class="hljs-operator">$</span>download <span class="hljs-operator">&lt;-</span> downloadHandler<span class="hljs-punctuation">(</span><br>    filename <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      paste0<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.tsv&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    content <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>file<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      vroom<span class="hljs-operator">::</span>vroom_write<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> file<span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB15.gif"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>最后是一个小的案例，对用户上传的数据（可以指定分隔符）进行预览，进行一些可选的清理和转化（使用 <code>janitor</code> 包），最后可以让用户下载清理后的数据。这里我们可以将整个页面分成三部分，第一部分是上传数据以及对原始数据的预览，第二部分是处理数据以及对处理后的数据的预览，第三部分是下载数据的按钮，因此使用行式布局 <code>sidebarLayout()</code>和 <code>fluidRow()</code>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment">##第一部分</span><br>ui_upload <span class="hljs-operator">&lt;-</span> sidebarLayout<span class="hljs-punctuation">(</span><br>  sidebarPanel<span class="hljs-punctuation">(</span><br>    fileInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;file&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Data&quot;</span><span class="hljs-punctuation">,</span> buttonLabel <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Upload...&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    textInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;delim&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Delimiter (leave blank to guess)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;skip&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Rows to skip&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rows&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Rows to preview&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  mainPanel<span class="hljs-punctuation">(</span><br>    h3<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Raw data&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;preview1&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##第二部分</span><br>ui_clean <span class="hljs-operator">&lt;-</span> sidebarLayout<span class="hljs-punctuation">(</span><br>  sidebarPanel<span class="hljs-punctuation">(</span><br>    checkboxInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;snake&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Rename columns to snake case?&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-comment">##蛇形命名法，用下划线将单词连起来</span><br>    checkboxInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;constant&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Remove constant columns?&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    checkboxInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;empty&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Remove empty cols?&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  mainPanel<span class="hljs-punctuation">(</span><br>    h3<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Cleaner data&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;preview2&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##第三部分</span><br>ui_download <span class="hljs-operator">&lt;-</span> fluidRow<span class="hljs-punctuation">(</span><br>  column<span class="hljs-punctuation">(</span>width <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span> downloadButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;download&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">class</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;btn-block&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##合并三个部分</span><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  ui_upload<span class="hljs-punctuation">,</span><br>  ui_clean<span class="hljs-punctuation">,</span><br>  ui_download<br><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">###server</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment"># Upload ---------------------------------------------------------</span><br>  raw <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    req<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>file<span class="hljs-punctuation">)</span><br>    delim <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>delim <span class="hljs-operator">==</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">else</span> input<span class="hljs-operator">$</span>delim<br>    vroom<span class="hljs-operator">::</span>vroom<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>file<span class="hljs-operator">$</span>datapath<span class="hljs-punctuation">,</span> delim <span class="hljs-operator">=</span> delim<span class="hljs-punctuation">,</span> skip <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>skip<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>preview1 <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span>head<span class="hljs-punctuation">(</span>raw<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>rows<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <br>  <span class="hljs-comment"># Clean ----------------------------------------------------------</span><br>  tidied <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    out <span class="hljs-operator">&lt;-</span> raw<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>snake<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>out<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> janitor<span class="hljs-operator">::</span>make_clean_names<span class="hljs-punctuation">(</span><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>out<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>empty<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      out <span class="hljs-operator">&lt;-</span> janitor<span class="hljs-operator">::</span>remove_empty<span class="hljs-punctuation">(</span>out<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;cols&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>constant<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      out <span class="hljs-operator">&lt;-</span> janitor<span class="hljs-operator">::</span>remove_constant<span class="hljs-punctuation">(</span>out<span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <br>    out<br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>preview2 <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span>head<span class="hljs-punctuation">(</span>tidied<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>rows<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <br>  <span class="hljs-comment"># Download -------------------------------------------------------</span><br>  output<span class="hljs-operator">$</span>download <span class="hljs-operator">&lt;-</span> downloadHandler<span class="hljs-punctuation">(</span><br>    filename <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      paste0<span class="hljs-punctuation">(</span>tools<span class="hljs-operator">::</span>file_path_sans_ext<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>file<span class="hljs-operator">$</span>name<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.tsv&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##获取不带拓展名的文件名</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    content <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>file<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      vroom<span class="hljs-operator">::</span>vroom_write<span class="hljs-punctuation">(</span>tidied<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> file<span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB16.gif"></p><h1 id="动态-UI"><a href="#动态-UI" class="headerlink" title="动态 UI"></a>动态 UI</h1><p>前面讲的都是<strong>静态UI</strong> ，也就是在 APP 启动后，UI 的界面不会发生改变，这一部分将介绍动态 UI，可以通过在 server 函数中的代码运行来改变 UI。创建动态 UI 有 3 个关键的技术：</p><ul><li>使用 <code>update</code> 系列函数来修改输入控制的参数</li><li>使用 <code>tabsetPanel</code> 来有条件的展示或隐藏 UI 的一部分</li><li>使用 <code>uiOutput</code> 和 <code>renderUI</code> 来生成 UI</li></ul><h2 id="更新输入"><a href="#更新输入" class="headerlink" title="更新输入"></a>更新输入</h2><p><code>update</code> 家族的函数可以在输入被创建后更改输入的 UI；每一个输入控制函数，比如 <code>textInput</code>， 都和一个 <code>update</code> 函数相匹配，如 <code>updateTextInput</code>。下面是一个例子来展示在 server 中接受 <code>numericInput</code> 的输入来改变 <code>sliderInput</code> 展示的最小最大值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;min&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Minimum&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;max&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Maximum&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span><span class="hljs-built_in">min</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    updateSliderInput<span class="hljs-punctuation">(</span>inputId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span><span class="hljs-built_in">min</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span>  <br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span><span class="hljs-built_in">max</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    updateSliderInput<span class="hljs-punctuation">(</span>inputId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span><span class="hljs-built_in">max</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB_0904.gif"></p><p><code>update</code> 系列函数的特征是：<code>inputId</code> 参数是相应输入的名称，剩下的参数是我们想要改变 UI 的输入组件的参数（如这里的 min 和 max）。</p><p> 接下来再看两个例子：</p><ol><li><p>点击 <code>Reset</code> 按钮后 Slider 的值归 0：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;x1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;x2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;x3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  actionButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;reset&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Reset&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>reset<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">##actionButton的状态发生改变就会触发运行</span><br>    updateSliderInput<span class="hljs-punctuation">(</span>inputId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;x1&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br>    updateSliderInput<span class="hljs-punctuation">(</span>inputId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;x2&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br>    updateSliderInput<span class="hljs-punctuation">(</span>inputId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;x3&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB_090601.gif"></p></li><li><p>依据我们输入的值改变按钮的显示：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Simulations&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  actionButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;simulate&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Simulate&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    label <span class="hljs-operator">&lt;-</span> paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Simulate &quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>n<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; times&quot;</span><span class="hljs-punctuation">)</span><br>    updateActionButton<span class="hljs-punctuation">(</span>inputId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simulate&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> label<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB23_99.gif"></p></li></ol><p>需要注意，有些时候输出依赖于多个输入，并且这多个输入间也是相互依赖的（根据一个输入来改变另一个输入），此时可能会出现一些我们不想要的中间状态，下面以一个例子说明，这个例子在一个选择框中可以选择数据集，在另一个选择框中根据我们选择的数据来展示可以选择的列，最后输出该列的汇总统计：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dataset&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Choose a dataset&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;pressure&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;cars&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;column&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Choose column&quot;</span><span class="hljs-punctuation">,</span> character<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  verbatimTextOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;summary&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  dataset <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span>get<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    updateSelectInput<span class="hljs-punctuation">(</span>inputId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;column&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>summary <span class="hljs-operator">&lt;-</span> renderPrint<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    summary<span class="hljs-punctuation">(</span>dataset<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">[[</span>input<span class="hljs-operator">$</span>column<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB24_99.gif"></p><p>可以看到会出现一个中间的暂时状态，数据框和列名不匹配，因此出现的结果是<code>summary(NULL)</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> summary<span class="hljs-punctuation">(</span><span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span><br>Length  Class   Mode <br>     <span class="hljs-number">0</span>   <span class="hljs-literal">NULL</span>   <span class="hljs-literal">NULL</span> <br></code></pre></td></tr></table></figure><blockquote><p>但是在我自己的电脑上不会出现这个问题，可能是云服务的延迟问题？</p></blockquote><p>可以通过 <code>freezeReactiveValue()</code> 来 “冻住” 输入解决这个问题，具体来说就是当 shiny 读取 “冻住” 的输入时会触发运行 <code>req(False)</code> （前面讲过 <code>req(False)</code> 会停止响应过程），并且不需要我们手动 “解冻” 已经 “冻住” 的值，因为当所有的值改变后，shiny 会自动更新（不是很理解）。在实践中，如果要动态地改变输入值，最好都要使用这个技术：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  dataset <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span>get<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    freezeReactiveValue<span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;column&quot;</span><span class="hljs-punctuation">)</span><br>    updateSelectInput<span class="hljs-punctuation">(</span>inputId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;column&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>summary <span class="hljs-operator">&lt;-</span> renderPrint<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    summary<span class="hljs-punctuation">(</span>dataset<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">[[</span>input<span class="hljs-operator">$</span>column<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>需要注意的是由于 update* 函数会自动更新输入，但是 server 中的行为又会依赖于输入，因此要避免无限循环的出现，比如下面这个 app，每次 <code>updateNumericInput</code> 运行时都会改变 <code>input$n</code> 的值，造成 <code>updateNumericInput</code> 再次运行，陷入无限循环：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/%E5%8A%A8%E7%94%BB223.gif"></p><h2 id="动态可见性"><a href="#动态可见性" class="headerlink" title="动态可见性"></a>动态可见性</h2><p>比较复杂一点的是选择性的部分展示和隐藏 UI ，在 shiny 中可以利用一个小技巧来解决这种问题：用 tabset 来隐藏可选的 UI，比如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  sidebarLayout<span class="hljs-punctuation">(</span><br>    sidebarPanel<span class="hljs-punctuation">(</span><br>      selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;controller&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Show&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    mainPanel<span class="hljs-punctuation">(</span><br>      tabsetPanel<span class="hljs-punctuation">(</span><br>        id <span class="hljs-operator">=</span> <span class="hljs-string">&quot;switcher&quot;</span><span class="hljs-punctuation">,</span><br>        type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hidden&quot;</span><span class="hljs-punctuation">,</span><br>        tabPanelBody<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Panel 1 content&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>        tabPanelBody<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Panel 2 content&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>        tabPanelBody<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panel3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Panel 3 content&quot;</span><span class="hljs-punctuation">)</span><br>      <span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>controller<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    updateTabsetPanel<span class="hljs-punctuation">(</span>inputId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;switcher&quot;</span><span class="hljs-punctuation">,</span> selected <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>controller<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/%E5%8A%A8%E7%94%BB224.gif"></p><p>这里使用了隐藏标签的 tabset （<code>type = &quot;hidden&quot;</code>）,并且用 <code>updateTablesetPanel</code> 来更新选择的标签达到隐藏标签 UI 的目的。</p><p>另外一个需要隐藏 UI 的场景是根据用户的输入展示不同的参数页面（之前的参数页面被隐藏），比如我们想要根据用户选择的分布类型（正态分布，均匀分布，指数分布）来展示可以选择的参数，再根据用户选择的参数来绘制相应的分布图。首先创建一个 <code>tabsetPanel</code> ，这个 tabset 有 3 个标签对应 3 个不同的分布参数，但是我们把标签给隐藏起来，然后再把这个 tabset UI 和 <code>selectInput</code> ，<code>numericInput</code> 合并起来，与绘图区域用侧边栏布局整合，根据用户选择的参数展示相应的 panel 和绘图：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs R">parameter_tabs <span class="hljs-operator">&lt;-</span> tabsetPanel<span class="hljs-punctuation">(</span><br>  id <span class="hljs-operator">=</span> <span class="hljs-string">&quot;params&quot;</span><span class="hljs-punctuation">,</span><br>  type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hidden&quot;</span><span class="hljs-punctuation">,</span><br>  tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;normal&quot;</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;mean&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;mean&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;sd&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;standard deviation&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;uniform&quot;</span><span class="hljs-punctuation">,</span> <br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;min&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;min&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;max&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;max&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  tabPanel<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;exponential&quot;</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rate&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;rate&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  sidebarLayout<span class="hljs-punctuation">(</span><br>    sidebarPanel<span class="hljs-punctuation">(</span><br>      selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dist&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Distribution&quot;</span><span class="hljs-punctuation">,</span> <br>                  choices <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;normal&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;uniform&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;exponential&quot;</span><span class="hljs-punctuation">)</span><br>      <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Number of samples&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      parameter_tabs<span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    mainPanel<span class="hljs-punctuation">(</span><br>      plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  observeEvent<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dist<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    updateTabsetPanel<span class="hljs-punctuation">(</span>inputId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;params&quot;</span><span class="hljs-punctuation">,</span> selected <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>dist<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span> <br>  <br>  sample <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dist<span class="hljs-punctuation">,</span><br>           normal <span class="hljs-operator">=</span> rnorm<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>mean<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>sd<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>           uniform <span class="hljs-operator">=</span> runif<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span><span class="hljs-built_in">min</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span><span class="hljs-built_in">max</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>           exponential <span class="hljs-operator">=</span> rexp<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>rate<span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>hist <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span>hist<span class="hljs-punctuation">(</span>sample<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>下面分别是隐藏了 tabset 的标签和没有隐藏的效果：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220309145928520.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220309150005649.png"></p><p>因此这种方法在改变参数时底层的 HTML 并没有消失，只是我们看不到而已。</p><h2 id="利用代码创建-UI"><a href="#利用代码创建-UI" class="headerlink" title="利用代码创建 UI"></a>利用代码创建 UI</h2><p>上面讲到的那些方法只能允许我们去改变已经存在的输入，tabset 只能在已知可能的标签时也可以发挥作用，但是有些时候我们想要根据用户的输入来创建不同类型或者不同数量的输入或者输出 UI，就可以使用这种技术来在 app 运行时创建或修改 UI 界面（之前都是在运行前已经确定了 UI）。这种行为主要通过 <code>uiOutput</code> 和 <code>renderUI</code> 来实现：</p><ul><li><code>uiOutput</code> 在 UI 中放置一个占位符，等待之后的 server 代码（创建的UI）插入</li><li><code>renderUI</code> 则放在 server 中，利用代码生成相应的 UI 去填充 <code>uiOutput</code> 的占位符</li></ul><p>下面可以看一个例子：依据用户选择的输入类型（数值或者滑动条）和标签来创建相应的 UI：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  textInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;label&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;label&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;type&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;type&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;slider&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;numeric&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  uiOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;numeric&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>numeric <span class="hljs-operator">&lt;-</span> renderUI<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>type <span class="hljs-operator">==</span> <span class="hljs-string">&quot;slider&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dynamic&quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>label<span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span> <span class="hljs-keyword">else</span> <span class="hljs-punctuation">&#123;</span><br>      numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dynamic&quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>label<span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span> <br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/%E5%8A%A8%E7%94%BB227.gif"></p><p>但是如果在 app 中过分依赖这种行为还导致 app 响应速度变慢（因为 app 需要先载入，然后触发一个调用 server 函数的响应事件，接着生成 HTML，将其插入相应的位置），因此如果更关注性能，还是尽量使用固定的 UI。这种方法还有一个其他的问题，从上面的图可以看出，当我们改变输入 UI 的类型后，之前输入的值就会消失，变成默认值 0 了，我们可以通过将新输入的值设置为现有控件的当前值来解决问题：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>numeric <span class="hljs-operator">&lt;-</span> renderUI<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    value <span class="hljs-operator">&lt;-</span> isolate<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dynamic<span class="hljs-punctuation">)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>type <span class="hljs-operator">==</span> <span class="hljs-string">&quot;slider&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dynamic&quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>label<span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> value<span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span> <span class="hljs-keyword">else</span> <span class="hljs-punctuation">&#123;</span><br>      numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dynamic&quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>label<span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> value<span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/%E5%8A%A8%E7%94%BB228.gif"></p><p><strong>注意</strong>两点：</p><ul><li><p>这里使用了 <code>isolate</code>，其实不使用 <code>isolate</code> 在行为上看起来是一样的（直接 <code>value &lt;-input$dynamic</code>），但是 <code>isolate</code> 使得响应图独立出来，也就是当 <code>input$dynamic</code> 改变时，<code>value &lt;-input$dynamic</code> 并没有重新运行，而是当 <code>input$type</code> 或者 <code>input$label</code> 改变时才会运行这行代码</p></li><li><p>在 <code>selectInput</code> 中需要将 <code>slider</code> 和 <code>numeric</code> 交换位置，不然就会产生如下报错，原因在于刚启动 shiny 时 <code>input$dynamic</code> 为 NULL，而 滑动窗的初始值不能为 NULL：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/%E5%8A%A8%E7%94%BB229.gif"></p></li></ul><h3 id="多个控件"><a href="#多个控件" class="headerlink" title="多个控件"></a>多个控件</h3><p>当需要生成不确定数量或者类型（所谓的不确定是对开发者而言不知道用户需要的输入）的控件时使用动态 UI 是比较有用的。对于这种任务使用函数式编程可以可以使得代码更加清晰（比如 purrr 包中的 map 和 reduce 系列函数）。举个例子：我们想要根据用户的输入产生特定的调色板，首先需要使用 <code>numericInput</code> 得到用户需要的颜色数目，<code>uiOutput</code> 生成对应数量的输入框，使用户可以输入颜色，然后 <code>plotOutput</code> 生成需要的调色板。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  sidebarLayout<span class="hljs-punctuation">(</span><br>    sidebarPanel<span class="hljs-punctuation">(</span><br>      numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Number of colours&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      uiOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;col&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    mainPanel<span class="hljs-punctuation">(</span><br>      plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;plot&quot;</span><span class="hljs-punctuation">)</span>  <br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  col_names <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span>paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;col&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">seq_len</span><span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>col <span class="hljs-operator">&lt;-</span> renderUI<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    map<span class="hljs-punctuation">(</span>col_names<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> textInput<span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">,</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> isolate<span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">[[</span>.x<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>plot <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    cols <span class="hljs-operator">&lt;-</span> map_chr<span class="hljs-punctuation">(</span>col_names<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> input<span class="hljs-punctuation">[[</span>.x<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">%||%</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-comment"># convert empty inputs to transparent</span><br>    cols<span class="hljs-punctuation">[</span>cols <span class="hljs-operator">==</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-literal">NA</span><br>    <br>    barplot<span class="hljs-punctuation">(</span><br>      <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>cols<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>      col <span class="hljs-operator">=</span> cols<span class="hljs-punctuation">,</span><br>      space <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>      axes <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/%E5%8A%A8%E7%94%BB230.gif"></p><ul><li><p><code>reactive</code> 表达式可以用来存储值，这里用 <code>col_names()</code> 来存储需要的输入控件的 ID</p></li><li><p>使用 <code>map</code> 函数来产生一系列的 <code>textInput</code> 控件，这里 value 中使用了 <code>isolate</code> 来保留每次的输入，使得在改变控件数量时已输入的内容不会消失：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB247.gif"></p></li><li><p>注意，这里面使用了一种新方法来获取 input 中的元素，之前一直使用的是 <code>$</code> ，但是现在元素的名称是一个字符向量，所以需要用 <code>[[</code>  来获取元素</p></li><li><p><code>map_chr</code> 返回的是字符向量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>a<span class="hljs-operator">=</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span>b<span class="hljs-operator">=</span><span class="hljs-string">&quot;y&quot;</span><span class="hljs-punctuation">)</span><br>map_chr<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-operator">~</span>x<span class="hljs-punctuation">[[</span>.x<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">##[1] &quot;x&quot; &quot;y&quot;</span><br></code></pre></td></tr></table></figure><p>但是如果选出的元素是 NULL ，<code>map_chr</code> 就会报错：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>a<span class="hljs-operator">=</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span>b<span class="hljs-operator">=</span><span class="hljs-string">&quot;y&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-operator">=</span><span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span><br>map_chr<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;c&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-operator">~</span>x<span class="hljs-punctuation">[[</span>.x<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">##Error: Result 3 must be a single string, not NULL of length 0</span><br><span class="hljs-comment">##Run `rlang::last_error()` to see where the error occurred.</span><br></code></pre></td></tr></table></figure><p>而在浏览器渲染成功之前会有一小段的瞬间，此时值为 NULL，因此会出现报错（见下图，可以看到一闪而过的红色报错），所以这里使用了 <code>%||%</code> 函数，该函数当左边是 NULL 时会返回右边的值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;a&quot;</span> <span class="hljs-operator">%||%</span> <span class="hljs-string">&quot;b&quot;</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-operator">&gt;</span> <span class="hljs-literal">NULL</span> <span class="hljs-operator">%||%</span> <span class="hljs-string">&quot;b&quot;</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;b&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%8A%A8%E7%94%BB248.gif"></p></li></ul><h3 id="动态筛选"><a href="#动态筛选" class="headerlink" title="动态筛选"></a>动态筛选</h3><p>这一部分是一个例子，创建一个 app 可以动态筛选任何数据框：每一个数值变量都有一个相应的滑动条来筛选变量范围，每一个因子变量都有一个多选择框来筛选因子水平；首先需要两个函数，一个根据变量类型来创建 UI，另一个函数接受变量和输入控件返回的值，决定要包括那些观测值（返回和变量长度一样的逻辑向量）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs R">make_ui <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> var<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    rng <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">range</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> na.rm <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br>    sliderInput<span class="hljs-punctuation">(</span>var<span class="hljs-punctuation">,</span> var<span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> rng<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> rng<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> rng<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>is.factor<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    levs <span class="hljs-operator">&lt;-</span> levels<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br>    selectInput<span class="hljs-punctuation">(</span>var<span class="hljs-punctuation">,</span> var<span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> levs<span class="hljs-punctuation">,</span> selected <span class="hljs-operator">=</span> levs<span class="hljs-punctuation">,</span> multiple <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span> <span class="hljs-keyword">else</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment"># Not supported</span><br>    <span class="hljs-literal">NULL</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br>filter_var <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> val<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-operator">!</span><span class="hljs-built_in">is.na</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span> x <span class="hljs-operator">&gt;=</span> val<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&amp;</span> x <span class="hljs-operator">&lt;=</span> val<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>is.factor<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    x <span class="hljs-operator">%in%</span> val<br>  <span class="hljs-punctuation">&#125;</span> <span class="hljs-keyword">else</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment"># No control, so don&#x27;t filter</span><br>    <span class="hljs-literal">TRUE</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>接着结合上面讲到的技术创建 app：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs R">dfs <span class="hljs-operator">&lt;-</span> keep<span class="hljs-punctuation">(</span>ls<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> is.data.frame<span class="hljs-punctuation">(</span>get<span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  sidebarLayout<span class="hljs-punctuation">(</span><br>    sidebarPanel<span class="hljs-punctuation">(</span><br>      selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dataset&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dataset&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> dfs<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      uiOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;filter&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    mainPanel<span class="hljs-punctuation">(</span><br>      tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  data <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    get<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  vars <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>filter <span class="hljs-operator">&lt;-</span> renderUI<span class="hljs-punctuation">(</span><br>    map<span class="hljs-punctuation">(</span>vars<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> make_ui<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">[[</span>.x<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> .x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br>  <br>  selected <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    each_var <span class="hljs-operator">&lt;-</span> map<span class="hljs-punctuation">(</span>vars<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> filter_var<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">[[</span>.x<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> input<span class="hljs-punctuation">[[</span>.x<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    reduce<span class="hljs-punctuation">(</span>each_var<span class="hljs-punctuation">,</span> `&amp;`<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>data <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span>head<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">[</span>selected<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-number">12</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>keep</code> 是 <code>purrr</code> 包中的一个函数，第一个参数是列表或者向量，第二个参数是函数，只有第二个参数返回是 TRUE 的列表或者向量元素才会被保留：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> keep<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-operator">~</span>.x<span class="hljs-operator">&gt;</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li><p>这里使用了两个 <code>map</code> ，第一个 <code>map</code> 生成 UI 的列表，第二个 <code>map</code> 生成变量的 T&#x2F;F 列表，然后使用 <code>reduce</code> 对列表中的元素向量相应的位置做 <code>&amp;</code> 运算，也就是保留全为 T 的观测：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> a <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>y<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> a<br><span class="hljs-operator">$</span>x<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-literal">TRUE</span>  <span class="hljs-literal">TRUE</span> <span class="hljs-literal">FALSE</span>  <span class="hljs-literal">TRUE</span><br><br><span class="hljs-operator">$</span>y<br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-literal">TRUE</span> <span class="hljs-literal">FALSE</span> <span class="hljs-literal">FALSE</span>  <span class="hljs-literal">TRUE</span><br><br><span class="hljs-operator">&gt;</span> reduce<span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">,</span>`&amp;`<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-literal">TRUE</span> <span class="hljs-literal">FALSE</span> <span class="hljs-literal">FALSE</span>  <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure></li></ul><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/%E5%8A%A8%E7%94%BB250.gif"></p>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dplyr行式操作</title>
    <link href="/2021/07/10/rowwise/"/>
    <url>/2021/07/10/rowwise/</url>
    
    <content type="html"><![CDATA[<p>dplyr 按行操作，主要是 rowwise 函数的用法</p><span id="more"></span><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>按行操作需要一种特殊类型的分组，每一组中只有一行，通过 <code>rowwise</code> 实现：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-operator">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span> z <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br>df <span class="hljs-operator">%&gt;%</span> rowwise<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 2 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Rowwise: </span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     y     z<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>像 <code>group_by</code> 一样，<code>rowwise</code> 并不会进行计算，仅仅会改变其他动词的行为：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>m <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> z<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 2 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     y     z     m<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     <span class="hljs-number">5</span>   <span class="hljs-number">3.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">6</span>   <span class="hljs-number">3.5</span><br>df <span class="hljs-operator">%&gt;%</span> rowwise<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>m <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> z<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 2 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Rowwise: </span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     y     z     m<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     <span class="hljs-number">5</span>     <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">6</span>     <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>可以看到不使用 <code>rowwise</code> 之前计算的是所有行的均值（6个值的均值，实际上是一个值），而使用 <code>rowwsise</code> 之后计算的是每行的均值。</p><p><code>rowwise</code> 也可以加上列名作为参数，表示在输出结果中保留这一列：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span>name <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Mara&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Hadley&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> x <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-operator">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span> z <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##不加列名输出的就是最终结果</span><br>df <span class="hljs-operator">%&gt;%</span> <br>  rowwise<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>m <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> z<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> `summarise()` has ungrouped output. You can override using the `.groups` argument.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 2 x 1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       m<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">4</span><br><br><span class="hljs-comment">##加上列名最后会保存该列</span><br>df <span class="hljs-operator">%&gt;%</span> <br>  rowwise<span class="hljs-punctuation">(</span>name<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>m <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> z<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> `summarise()` has grouped output by <span class="hljs-string">&#x27;name&#x27;</span>. You can override using the `.groups` argument.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 2 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Groups:   name [2]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   name       m<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> Mara       <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> Hadley     <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="按行进行汇总统计"><a href="#按行进行汇总统计" class="headerlink" title="按行进行汇总统计"></a>按行进行汇总统计</h2><p><code>rowwise</code> 可以和 <code>summarise</code> 一起使用来方便的进行汇总统计：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##创建数据</span><br>df <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span>id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span> w <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-operator">:</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span> x <span class="hljs-operator">=</span> <span class="hljs-number">20</span><span class="hljs-operator">:</span><span class="hljs-number">25</span><span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> <span class="hljs-number">30</span><span class="hljs-operator">:</span><span class="hljs-number">35</span><span class="hljs-punctuation">,</span> z <span class="hljs-operator">=</span> <span class="hljs-number">40</span><span class="hljs-operator">:</span><span class="hljs-number">45</span><span class="hljs-punctuation">)</span><br>df<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 x 5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      id     w     x     y     z<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>    <span class="hljs-number">10</span>    <span class="hljs-number">20</span>    <span class="hljs-number">30</span>    <span class="hljs-number">40</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>    <span class="hljs-number">11</span>    <span class="hljs-number">21</span>    <span class="hljs-number">31</span>    <span class="hljs-number">41</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">3</span>    <span class="hljs-number">12</span>    <span class="hljs-number">22</span>    <span class="hljs-number">32</span>    <span class="hljs-number">42</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">13</span>    <span class="hljs-number">23</span>    <span class="hljs-number">33</span>    <span class="hljs-number">43</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>     <span class="hljs-number">5</span>    <span class="hljs-number">14</span>    <span class="hljs-number">24</span>    <span class="hljs-number">34</span>    <span class="hljs-number">44</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>     <span class="hljs-number">6</span>    <span class="hljs-number">15</span>    <span class="hljs-number">25</span>    <span class="hljs-number">35</span>    <span class="hljs-number">45</span><br><br>rf <span class="hljs-operator">&lt;-</span> df <span class="hljs-operator">%&gt;%</span> rowwise<span class="hljs-punctuation">(</span>id<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##mutate来添加一列汇总</span><br>rf <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>total <span class="hljs-operator">=</span> <span class="hljs-built_in">sum</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> z<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Rowwise:  id</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      id     w     x     y     z total<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>    <span class="hljs-number">10</span>    <span class="hljs-number">20</span>    <span class="hljs-number">30</span>    <span class="hljs-number">40</span>   <span class="hljs-number">100</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>    <span class="hljs-number">11</span>    <span class="hljs-number">21</span>    <span class="hljs-number">31</span>    <span class="hljs-number">41</span>   <span class="hljs-number">104</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">3</span>    <span class="hljs-number">12</span>    <span class="hljs-number">22</span>    <span class="hljs-number">32</span>    <span class="hljs-number">42</span>   <span class="hljs-number">108</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">13</span>    <span class="hljs-number">23</span>    <span class="hljs-number">33</span>    <span class="hljs-number">43</span>   <span class="hljs-number">112</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>     <span class="hljs-number">5</span>    <span class="hljs-number">14</span>    <span class="hljs-number">24</span>    <span class="hljs-number">34</span>    <span class="hljs-number">44</span>   <span class="hljs-number">116</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>     <span class="hljs-number">6</span>    <span class="hljs-number">15</span>    <span class="hljs-number">25</span>    <span class="hljs-number">35</span>    <span class="hljs-number">45</span>   <span class="hljs-number">120</span><br><span class="hljs-comment">##或者summarise只保留汇总</span><br>rf <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span>total <span class="hljs-operator">=</span> <span class="hljs-built_in">sum</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">,</span> z<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> `summarise()` has grouped output by <span class="hljs-string">&#x27;id&#x27;</span>. You can override using the `.groups` argument.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Groups:   id [6]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      id total<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>   <span class="hljs-number">100</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>   <span class="hljs-number">104</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">3</span>   <span class="hljs-number">108</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>     <span class="hljs-number">4</span>   <span class="hljs-number">112</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>     <span class="hljs-number">5</span>   <span class="hljs-number">116</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>     <span class="hljs-number">6</span>   <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>当有很多变量的时候，可以结合 <code>c_across</code> 来进行 <code>tidy selection</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r">rf <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>total <span class="hljs-operator">=</span> <span class="hljs-built_in">sum</span><span class="hljs-punctuation">(</span>c_across<span class="hljs-punctuation">(</span>w<span class="hljs-operator">:</span>z<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Rowwise:  id</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      id     w     x     y     z total<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>    <span class="hljs-number">10</span>    <span class="hljs-number">20</span>    <span class="hljs-number">30</span>    <span class="hljs-number">40</span>   <span class="hljs-number">100</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>    <span class="hljs-number">11</span>    <span class="hljs-number">21</span>    <span class="hljs-number">31</span>    <span class="hljs-number">41</span>   <span class="hljs-number">104</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">3</span>    <span class="hljs-number">12</span>    <span class="hljs-number">22</span>    <span class="hljs-number">32</span>    <span class="hljs-number">42</span>   <span class="hljs-number">108</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">13</span>    <span class="hljs-number">23</span>    <span class="hljs-number">33</span>    <span class="hljs-number">43</span>   <span class="hljs-number">112</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>     <span class="hljs-number">5</span>    <span class="hljs-number">14</span>    <span class="hljs-number">24</span>    <span class="hljs-number">34</span>    <span class="hljs-number">44</span>   <span class="hljs-number">116</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>     <span class="hljs-number">6</span>    <span class="hljs-number">15</span>    <span class="hljs-number">25</span>    <span class="hljs-number">35</span>    <span class="hljs-number">45</span>   <span class="hljs-number">120</span><br>rf <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>total <span class="hljs-operator">=</span> <span class="hljs-built_in">sum</span><span class="hljs-punctuation">(</span>c_across<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Rowwise:  id</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      id     w     x     y     z total<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>    <span class="hljs-number">10</span>    <span class="hljs-number">20</span>    <span class="hljs-number">30</span>    <span class="hljs-number">40</span>   <span class="hljs-number">100</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>    <span class="hljs-number">11</span>    <span class="hljs-number">21</span>    <span class="hljs-number">31</span>    <span class="hljs-number">41</span>   <span class="hljs-number">104</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">3</span>    <span class="hljs-number">12</span>    <span class="hljs-number">22</span>    <span class="hljs-number">32</span>    <span class="hljs-number">42</span>   <span class="hljs-number">108</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">13</span>    <span class="hljs-number">23</span>    <span class="hljs-number">33</span>    <span class="hljs-number">43</span>   <span class="hljs-number">112</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>     <span class="hljs-number">5</span>    <span class="hljs-number">14</span>    <span class="hljs-number">24</span>    <span class="hljs-number">34</span>    <span class="hljs-number">44</span>   <span class="hljs-number">116</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>     <span class="hljs-number">6</span>    <span class="hljs-number">15</span>    <span class="hljs-number">25</span>    <span class="hljs-number">35</span>    <span class="hljs-number">45</span>   <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>在这里可以结合行式操作和列式操作计算每个元素占行总和的比例：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r">rf <span class="hljs-operator">%&gt;%</span> <br>  mutate<span class="hljs-punctuation">(</span>total <span class="hljs-operator">=</span> <span class="hljs-built_in">sum</span><span class="hljs-punctuation">(</span>c_across<span class="hljs-punctuation">(</span>w<span class="hljs-operator">:</span>z<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  ungroup<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  mutate<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>w<span class="hljs-operator">:</span>z<span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> . <span class="hljs-operator">/</span> total<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      id     w     x     y     z total<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span> <span class="hljs-number">0.1</span>   <span class="hljs-number">0.2</span>   <span class="hljs-number">0.3</span>   <span class="hljs-number">0.4</span>     <span class="hljs-number">100</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span> <span class="hljs-number">0.106</span> <span class="hljs-number">0.202</span> <span class="hljs-number">0.298</span> <span class="hljs-number">0.394</span>   <span class="hljs-number">104</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">3</span> <span class="hljs-number">0.111</span> <span class="hljs-number">0.204</span> <span class="hljs-number">0.296</span> <span class="hljs-number">0.389</span>   <span class="hljs-number">108</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>     <span class="hljs-number">4</span> <span class="hljs-number">0.116</span> <span class="hljs-number">0.205</span> <span class="hljs-number">0.295</span> <span class="hljs-number">0.384</span>   <span class="hljs-number">112</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>     <span class="hljs-number">5</span> <span class="hljs-number">0.121</span> <span class="hljs-number">0.207</span> <span class="hljs-number">0.293</span> <span class="hljs-number">0.379</span>   <span class="hljs-number">116</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>     <span class="hljs-number">6</span> <span class="hljs-number">0.125</span> <span class="hljs-number">0.208</span> <span class="hljs-number">0.292</span> <span class="hljs-number">0.375</span>   <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><h2 id="List-columns"><a href="#List-columns" class="headerlink" title="List-columns"></a>List-columns</h2><p>当列中有列表元素时，行式操作就比较方便。现在假设有下列的数据，想要计算一列中每行元素的长度：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span><br>  x <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>df<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   x        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><br>df <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>l <span class="hljs-operator">=</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   x             l<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>可以看到当使用 <code>length</code> 时返回的是列的长度，而不是列中每个元素的长度；这个问题可以使用 R 内置的 <code>lengths</code> 函数或者直接用循环来解决：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>l <span class="hljs-operator">=</span> lengths<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   x             l<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">3</span><br><br>df <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>l <span class="hljs-operator">=</span> sapply<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   x             l<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">3</span><br><br><span class="hljs-comment">##或者使用purrr</span><br>df <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>l <span class="hljs-operator">=</span> purrr<span class="hljs-operator">::</span>map_int<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   x             l<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>另一个方法就是使用 <code>rowwise</code> 操作：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">%&gt;%</span> <br>  rowwise<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  mutate<span class="hljs-punctuation">(</span>l <span class="hljs-operator">=</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Rowwise: </span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   x             l<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span>     <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>那么这里 <code>mutate</code> 和 <code>rowwise</code> 之后再 <code>mutate</code> 有什么区别呢？主要不同就是：<code>mutate</code> 对列切片的方式是一个中括号 <code>[</code>，而 <code>rowwise mutate</code> 则是通过两个中括号 <code>[[</code> 来切片，所以当列的元素是列表的时候，我们通过 <code>[</code> 只能获取整个列表的内容，而 <code>[[</code> 能获取列表的元素：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs r">df<span class="hljs-operator">$</span>x<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br><br><span class="hljs-comment"># mutate</span><br>out1 <span class="hljs-operator">&lt;-</span> integer<span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  out1<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>df<span class="hljs-operator">$</span>x<span class="hljs-punctuation">[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>out1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment"># rowwise mutate</span><br>out2 <span class="hljs-operator">&lt;-</span> integer<span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  out2<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>df<span class="hljs-operator">$</span>x<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>out2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h2><p><code>rowwise</code> 的按行操作的特征特别适合建模以及存放模型及数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##nest_by 和 group_by 类似，不过在视觉上改变了数据框的结构，返回的是rowwise的数据框</span><br>by_cyl <span class="hljs-operator">&lt;-</span> mtcars <span class="hljs-operator">%&gt;%</span> nest_by<span class="hljs-punctuation">(</span>cyl<span class="hljs-punctuation">)</span><br>by_cyl<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Rowwise:  cyl</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     cyl                data<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&lt;</span>tibble<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">4</span>           <span class="hljs-punctuation">[</span><span class="hljs-number">11</span> x <span class="hljs-number">10</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">6</span>            <span class="hljs-punctuation">[</span><span class="hljs-number">7</span> x <span class="hljs-number">10</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">8</span>           <span class="hljs-punctuation">[</span><span class="hljs-number">14</span> x <span class="hljs-number">10</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>将数据按行存放之后就可以对每行进行建模及存放数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##建立线性回归模型</span><br>mods <span class="hljs-operator">&lt;-</span> by_cyl <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>mod <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>lm<span class="hljs-punctuation">(</span>mpg <span class="hljs-operator">~</span> wt<span class="hljs-punctuation">,</span> data <span class="hljs-operator">=</span> data<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##添加预测数据</span><br>mods <span class="hljs-operator">&lt;-</span> mods <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>pred <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>predict<span class="hljs-punctuation">(</span>mod<span class="hljs-punctuation">,</span> data<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>mods<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Rowwise:  cyl</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     cyl                data mod    pred      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&lt;</span>tibble<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">4</span>           <span class="hljs-punctuation">[</span><span class="hljs-number">11</span> x <span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;</span>lm<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">11</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">6</span>            <span class="hljs-punctuation">[</span><span class="hljs-number">7</span> x <span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;</span>lm<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">7</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">8</span>           <span class="hljs-punctuation">[</span><span class="hljs-number">14</span> x <span class="hljs-number">10</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;</span>lm<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">14</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>这个用 <code>list</code> 的原因是：<code>predict</code> 返回的是列表，上面说过对于 <code>rowwise mutate</code> 使用 <code>[[</code> 来切片，因此返回的数据的长度是 11，而 <code>mutate</code> 返回的长度必须是 1。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">mods <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>pred <span class="hljs-operator">=</span> predict<span class="hljs-punctuation">(</span>mod<span class="hljs-punctuation">,</span> data<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error<span class="hljs-operator">:</span> Problem with `mutate()` column `pred`.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> i `pred = predict(mod, data)`.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> i `pred` must be size <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> not <span class="hljs-number">11.</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> i Did you mean<span class="hljs-operator">:</span> `pred = list(predict(mod, data))` <span class="hljs-operator">?</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> i The error occurred <span class="hljs-keyword">in</span> row <span class="hljs-number">1.</span><br></code></pre></td></tr></table></figure><p>接着可以自由添加一些模型的汇总信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs r">mods <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span>rmse <span class="hljs-operator">=</span> <span class="hljs-built_in">sqrt</span><span class="hljs-punctuation">(</span>mean<span class="hljs-punctuation">(</span><span class="hljs-punctuation">(</span>pred <span class="hljs-operator">-</span> data<span class="hljs-operator">$</span>mpg<span class="hljs-punctuation">)</span> <span class="hljs-operator">^</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> `summarise()` has grouped output by <span class="hljs-string">&#x27;cyl&#x27;</span>. You can override using the `.groups` argument.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Groups:   cyl [3]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     cyl  rmse<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">4</span> <span class="hljs-number">3.01</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">6</span> <span class="hljs-number">0.985</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">8</span> <span class="hljs-number">1.87</span><br><br>mods <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span>rsq <span class="hljs-operator">=</span> summary<span class="hljs-punctuation">(</span>mod<span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>r.squared<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> `summarise()` has grouped output by <span class="hljs-string">&#x27;cyl&#x27;</span>. You can override using the `.groups` argument.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Groups:   cyl [3]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     cyl   rsq<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">4</span> <span class="hljs-number">0.509</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">6</span> <span class="hljs-number">0.465</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">8</span> <span class="hljs-number">0.423</span><br><br>mods <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span>broom<span class="hljs-operator">::</span>glance<span class="hljs-punctuation">(</span>mod<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> `summarise()` has grouped output by <span class="hljs-string">&#x27;cyl&#x27;</span>. You can override using the `.groups` argument.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 12</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Groups:   cyl [3]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     cyl r.squared adj.r.squared sigma statistic p.value<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">0.509</span>         <span class="hljs-number">0.454</span>  <span class="hljs-number">3.33</span>      <span class="hljs-number">9.32</span>  <span class="hljs-number">0.0137</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">6</span>     <span class="hljs-number">0.465</span>         <span class="hljs-number">0.357</span>  <span class="hljs-number">1.17</span>      <span class="hljs-number">4.34</span>  <span class="hljs-number">0.0918</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">8</span>     <span class="hljs-number">0.423</span>         <span class="hljs-number">0.375</span>  <span class="hljs-number">2.02</span>      <span class="hljs-number">8.80</span>  <span class="hljs-number">0.0118</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 6 more variables: df &lt;int&gt;, logLik &lt;dbl&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   AIC &lt;dbl&gt;, BIC &lt;dbl&gt;, deviance &lt;dbl&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   df.residual &lt;int&gt;</span><br><br><span class="hljs-comment">##获取模型参数</span><br>mods <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span>broom<span class="hljs-operator">::</span>tidy<span class="hljs-punctuation">(</span>mod<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> `summarise()` has grouped output by <span class="hljs-string">&#x27;cyl&#x27;</span>. You can override using the `.groups` argument.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Groups:   cyl [3]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     cyl term       estimate std.error statistic   p.value<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">4</span> <span class="hljs-punctuation">(</span>Intercep<span class="hljs-operator">~</span>    <span class="hljs-number">39.6</span>      <span class="hljs-number">4.35</span>       <span class="hljs-number">9.10</span>   <span class="hljs-number">7.77e-6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">4</span> wt            <span class="hljs-operator">-</span><span class="hljs-number">5.65</span>     <span class="hljs-number">1.85</span>      <span class="hljs-operator">-</span><span class="hljs-number">3.05</span>   <span class="hljs-number">1.37e-2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">6</span> <span class="hljs-punctuation">(</span>Intercep<span class="hljs-operator">~</span>    <span class="hljs-number">28.4</span>      <span class="hljs-number">4.18</span>       <span class="hljs-number">6.79</span>   <span class="hljs-number">1.05e-3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>     <span class="hljs-number">6</span> wt            <span class="hljs-operator">-</span><span class="hljs-number">2.78</span>     <span class="hljs-number">1.33</span>      <span class="hljs-operator">-</span><span class="hljs-number">2.08</span>   <span class="hljs-number">9.18e-2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>     <span class="hljs-number">8</span> <span class="hljs-punctuation">(</span>Intercep<span class="hljs-operator">~</span>    <span class="hljs-number">23.9</span>      <span class="hljs-number">3.01</span>       <span class="hljs-number">7.94</span>   <span class="hljs-number">4.05e-6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>     <span class="hljs-number">8</span> wt            <span class="hljs-operator">-</span><span class="hljs-number">2.19</span>     <span class="hljs-number">0.739</span>     <span class="hljs-operator">-</span><span class="hljs-number">2.97</span>   <span class="hljs-number">1.18e-2</span><br></code></pre></td></tr></table></figure><h2 id="重复调用函数"><a href="#重复调用函数" class="headerlink" title="重复调用函数"></a>重复调用函数</h2><p>和前面的思路一样，如果在各列中存放函数的参数，就可以方便的重复调用函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">&lt;-</span> tribble<span class="hljs-punctuation">(</span><br>  <span class="hljs-operator">~</span> n<span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> <span class="hljs-built_in">min</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> <span class="hljs-built_in">max</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>     <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>     <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>    <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">100</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">100</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1000</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">#从不同参数的均匀分布中产生随机数</span><br>df <span class="hljs-operator">%&gt;%</span> <br>  rowwise<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  mutate<span class="hljs-punctuation">(</span>data <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>runif<span class="hljs-punctuation">(</span>n<span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Rowwise: </span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       n   <span class="hljs-built_in">min</span>   <span class="hljs-built_in">max</span> data     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>    <span class="hljs-number">10</span>   <span class="hljs-number">100</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">3</span>   <span class="hljs-number">100</span>  <span class="hljs-number">1000</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-comment">##扩充不同的组合</span><br>df <span class="hljs-operator">&lt;-</span> expand.grid<span class="hljs-punctuation">(</span>mean <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> sd <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br>df <span class="hljs-operator">%&gt;%</span> <br>  rowwise<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  mutate<span class="hljs-punctuation">(</span>data <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> mean<span class="hljs-punctuation">,</span> sd<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 9 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Rowwise: </span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    mean    sd data      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>    <span class="hljs-operator">-</span><span class="hljs-number">1</span>     <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>    <span class="hljs-operator">-</span><span class="hljs-number">1</span>    <span class="hljs-number">10</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>     <span class="hljs-number">0</span>    <span class="hljs-number">10</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>     <span class="hljs-number">1</span>    <span class="hljs-number">10</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span>    <span class="hljs-operator">-</span><span class="hljs-number">1</span>   <span class="hljs-number">100</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span>     <span class="hljs-number">0</span>   <span class="hljs-number">100</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">9</span>     <span class="hljs-number">1</span>   <span class="hljs-number">100</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>当我们想要变化的不是函数的参数，而是调用不同的函数，可以将 <code>rowwise</code> 和 <code>do.call</code> 结合：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">&lt;-</span> tribble<span class="hljs-punctuation">(</span><br>   <span class="hljs-operator">~</span>rng<span class="hljs-punctuation">,</span>     <span class="hljs-operator">~</span>params<span class="hljs-punctuation">,</span><br>   <span class="hljs-string">&quot;runif&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>n <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>   <span class="hljs-string">&quot;rnorm&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>n <span class="hljs-operator">=</span> <span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-string">&quot;rpois&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>n <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> lambda <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span><br>  rowwise<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br>df <span class="hljs-operator">%&gt;%</span> <br>  mutate<span class="hljs-punctuation">(</span>data <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>do.call<span class="hljs-punctuation">(</span>rng<span class="hljs-punctuation">,</span> params<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Rowwise: </span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   rng   params           data      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> runif <span class="hljs-operator">&lt;</span>named <span class="hljs-built_in">list</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> rnorm <span class="hljs-operator">&lt;</span>named <span class="hljs-built_in">list</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl <span class="hljs-punctuation">[</span><span class="hljs-number">20</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> rpois <span class="hljs-operator">&lt;</span>named <span class="hljs-built_in">list</span> <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Pytorch】Tensor 的基本操作</title>
    <link href="/2021/06/23/pytorch_base/"/>
    <url>/2021/06/23/pytorch_base/</url>
    
    <content type="html"><![CDATA[<p>Tensor 的基本操作和自动求导</p><span id="more"></span><p>对tensor的操作以作用的对象分有两类：</p><ul><li>troch function 以torch开头：torch.sum</li><li>tensor function 以tensor开头：tensor.view</li></ul><p>按照修改方式也可以分成两类：</p><ul><li>不修改自身数据，返回新的tensor</li><li>修改自身数据，一般是带下划线的操作，如x.add_(y)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>a = torch.tensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br>b = a.add(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(a,b)<br>&gt;&gt; tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]) tensor([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>c = a.add_(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(a,c)<br>&gt;&gt; tensor([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]) tensor([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>tensor的构建：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/Untitled.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.Tensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-comment">##根据指定的形状</span><br>&gt;&gt; tensor([<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>])<br>torch.Tensor(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<span class="hljs-comment">##注意是随机生成的</span><br>&gt;&gt; tensor([[<span class="hljs-number">0.0000</span>, <span class="hljs-number">1.8750</span>, <span class="hljs-number">0.0000</span>],<br>&gt;&gt;         [<span class="hljs-number">2.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">2.1250</span>]])<br>torch.Tensor(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-comment">##和小写的tensor的区别：</span><br>&gt;&gt; tensor([[<span class="hljs-number">0.0000</span>, <span class="hljs-number">1.9844</span>, <span class="hljs-number">0.0000</span>],<br>&gt;&gt;         [<span class="hljs-number">2.0000</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">2.0156</span>]])<br>torch.Tensor([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]).<span class="hljs-built_in">type</span>()<br>&gt;&gt; <span class="hljs-string">&#x27;torch.FloatTensor&#x27;</span><br>torch.tensor([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]).<span class="hljs-built_in">type</span>()<br>&gt;&gt; <span class="hljs-string">&#x27;torch.LongTensor&#x27;</span><br>torch.tensor([<span class="hljs-number">2.</span>,<span class="hljs-number">3.</span>]).<span class="hljs-built_in">type</span>()<br><span class="hljs-comment">##也就是说tensor是推断类型，而Tensor是默认FloatTensor</span><br><br><span class="hljs-comment">##特殊类型的tensor</span><br>&gt;&gt; <span class="hljs-string">&#x27;torch.FloatTensor&#x27;</span><br>torch.eye(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<span class="hljs-comment">##单位矩阵</span><br>&gt;&gt; tensor([[<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;         [<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>]])<br>torch.zeros(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<span class="hljs-comment">##全为0</span><br>&gt;&gt; tensor([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;         [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br>torch.linspace(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>)<span class="hljs-comment">##和numpy类似，从1到10分成4份</span><br>&gt;&gt; tensor([ <span class="hljs-number">1.</span>,  <span class="hljs-number">4.</span>,  <span class="hljs-number">7.</span>, <span class="hljs-number">10.</span>])<br>torch.rand(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<span class="hljs-comment">##均匀分布</span><br>&gt;&gt; tensor([[<span class="hljs-number">0.2096</span>, <span class="hljs-number">0.3077</span>, <span class="hljs-number">0.3466</span>],<br>&gt;&gt;         [<span class="hljs-number">0.4751</span>, <span class="hljs-number">0.9939</span>, <span class="hljs-number">0.1684</span>]])<br>torch.randn(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<span class="hljs-comment">##标准正态分布</span><br>&gt;&gt; tensor([[ <span class="hljs-number">0.2854</span>, -<span class="hljs-number">1.6030</span>,  <span class="hljs-number">0.3589</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.0345</span>, -<span class="hljs-number">0.1393</span>,  <span class="hljs-number">0.7295</span>]])<br>torch.zeros_like(torch.rand(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<span class="hljs-comment">##形状相同，但全为0</span><br>&gt;&gt; tensor([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;         [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br></code></pre></td></tr></table></figure><p>修改 Tensor 的形状：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/b78a5eb320ca85865498ef331663acd6.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.rand(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>x<br>&gt;&gt; tensor([[<span class="hljs-number">0.6279</span>, <span class="hljs-number">0.2673</span>, <span class="hljs-number">0.6451</span>],<br>&gt;&gt;         [<span class="hljs-number">0.9874</span>, <span class="hljs-number">0.3448</span>, <span class="hljs-number">0.3950</span>]])<br>x.shape<br>&gt;&gt; torch.Size([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>x.size() <span class="hljs-comment">##返回shape属性</span><br>&gt;&gt; torch.Size([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>x.dim()<br>&gt;&gt; <span class="hljs-number">2</span><br>x.numel()<br>&gt;&gt; <span class="hljs-number">6</span><br>y = torch.unsqueeze(x,<span class="hljs-number">0</span>)<span class="hljs-comment">##增加一个维度</span><br>y.size()<br>&gt;&gt; torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y.numel()<br>&gt;&gt; <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>这里面需要注意的是 <code>view()</code> 和 <code>reshape()</code> 的区别：<code>view()</code> 只能作用于连续的 tensor，并且只会返回视图（也就是改变返回的数据，原数据也会改变），而 <code>reshape()</code> 则可以作用于连续和非连续的 tensor，对于连续的tensor 返回视图，对于非连续的 tensor 则返回拷贝：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#view</span><br><span class="hljs-comment">##连续的</span><br>t1 = torch.rand(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>t2 = t1.view(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)<br>t2[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br>t1,t2<br><br><span class="hljs-comment">##非连续的使用 view 会报错</span><br>&gt;&gt; (tensor([[<span class="hljs-number">0.7285</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.8832</span>],<br>&gt;&gt;         [<span class="hljs-number">0.3564</span>, <span class="hljs-number">0.8119</span>, <span class="hljs-number">0.9175</span>]]), tensor([[<span class="hljs-number">0.7285</span>, <span class="hljs-number">0.0000</span>],<br>&gt;&gt;         [<span class="hljs-number">0.8832</span>, <span class="hljs-number">0.3564</span>],<br>&gt;&gt;         [<span class="hljs-number">0.8119</span>, <span class="hljs-number">0.9175</span>]]))<br>t3 = t1.t()<br>t3<br>&gt;&gt; tensor([[<span class="hljs-number">0.7285</span>, <span class="hljs-number">0.3564</span>],<br>&gt;&gt;         [<span class="hljs-number">0.0000</span>, <span class="hljs-number">0.8119</span>],<br>&gt;&gt;         [<span class="hljs-number">0.8832</span>, <span class="hljs-number">0.9175</span>]])<br>t3.view(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">#reshape</span><br><span class="hljs-comment">##连续的</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): RuntimeError: view size <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> compatible <span class="hljs-keyword">with</span> <span class="hljs-built_in">input</span> tenso<span class="hljs-string">r&#x27;s size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead.</span><br><span class="hljs-string">t1 = torch.rand(3,4)</span><br><span class="hljs-string">t2 = t1.reshape(2,6)</span><br><span class="hljs-string">t2[0,1] = 0</span><br><span class="hljs-string">t2,t1</span><br><span class="hljs-string"></span><br><span class="hljs-string">##非连续的</span><br><span class="hljs-string">&gt;&gt; (tensor([[0.2901, 0.0000, 0.1992, 0.0292, 0.2516, 0.5446],</span><br><span class="hljs-string">&gt;&gt;         [0.9478, 0.1281, 0.3004, 0.1900, 0.8300, 0.4039]]), tensor([[0.2901, 0.0000, 0.1992, 0.0292],</span><br><span class="hljs-string">&gt;&gt;         [0.2516, 0.5446, 0.9478, 0.1281],</span><br><span class="hljs-string">&gt;&gt;         [0.3004, 0.1900, 0.8300, 0.4039]]))</span><br><span class="hljs-string">t3 = t1.t()</span><br><span class="hljs-string">t4 = t3.reshape(2,6)</span><br><span class="hljs-string">t4[1,1] = 0</span><br><span class="hljs-string">t4,t1##返回的是copy</span><br><span class="hljs-string">&gt;&gt; (tensor([[0.2901, 0.2516, 0.3004, 0.0000, 0.5446, 0.1900],</span><br><span class="hljs-string">&gt;&gt;         [0.1992, 0.0000, 0.8300, 0.0292, 0.1281, 0.4039]]), tensor([[0.2901, 0.0000, 0.1992, 0.0292],</span><br><span class="hljs-string">&gt;&gt;         [0.2516, 0.5446, 0.9478, 0.1281],</span><br><span class="hljs-string">&gt;&gt;         [0.3004, 0.1900, 0.8300, 0.4039]]))</span><br></code></pre></td></tr></table></figure><p>索引操作：和 numpy 类似，也有一些专用的函数：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/ca5b6ebfbff3968e030d3c7b92c445f0.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.randn(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>x<br>&gt;&gt; tensor([[-<span class="hljs-number">0.2166</span>,  <span class="hljs-number">0.3223</span>, -<span class="hljs-number">0.5408</span>],<br>&gt;&gt;         [-<span class="hljs-number">1.4433</span>,  <span class="hljs-number">0.6585</span>, -<span class="hljs-number">0.2060</span>]])<br>x[<span class="hljs-number">0</span>,]<span class="hljs-comment">##和 x[0,:] 一样</span><br>&gt;&gt; tensor([-<span class="hljs-number">0.2166</span>,  <span class="hljs-number">0.3223</span>, -<span class="hljs-number">0.5408</span>])<br>x[:,-<span class="hljs-number">1</span>] <span class="hljs-comment">#这个冒号不能省</span><br>&gt;&gt; tensor([-<span class="hljs-number">0.5408</span>, -<span class="hljs-number">0.2060</span>])<br>torch.masked_select(x,x&gt;<span class="hljs-number">0</span>)<span class="hljs-comment">#根据第二个参数来选择</span><br>&gt;&gt; tensor([<span class="hljs-number">0.3223</span>, <span class="hljs-number">0.6585</span>])<br>torch.nonzero(x)<span class="hljs-comment">#非0元素的索引</span><br>&gt;&gt; tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>&gt;&gt;         [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>&gt;&gt;         [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>],<br>&gt;&gt;         [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>&gt;&gt;         [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>&gt;&gt;         [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]])<br>index = torch.LongTensor([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]])<br>index.<span class="hljs-built_in">type</span>()<br>&gt;&gt; <span class="hljs-string">&#x27;torch.LongTensor&#x27;</span><br>torch.gather(x,<span class="hljs-number">0</span>,index)<br>&gt;&gt; tensor([[-<span class="hljs-number">0.2166</span>,  <span class="hljs-number">0.6585</span>, -<span class="hljs-number">0.2060</span>]])<br>index = torch.LongTensor([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]])<br>torch.gather(x,<span class="hljs-number">1</span>,index)<br><br><span class="hljs-comment">##scatter 补充元素</span><br>&gt;&gt; tensor([[-<span class="hljs-number">0.2166</span>,  <span class="hljs-number">0.3223</span>,  <span class="hljs-number">0.3223</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.6585</span>,  <span class="hljs-number">0.6585</span>,  <span class="hljs-number">0.6585</span>]])<br>a = torch.gather(x,<span class="hljs-number">1</span>,index)<br>y = torch.zeros(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>y.scatter_(<span class="hljs-number">1</span>,index,a)<br>&gt;&gt; tensor([[-<span class="hljs-number">0.2166</span>,  <span class="hljs-number">0.3223</span>,  <span class="hljs-number">0.0000</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.0000</span>,  <span class="hljs-number">0.6585</span>,  <span class="hljs-number">0.0000</span>]])<br></code></pre></td></tr></table></figure><p>广播机制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>, <span class="hljs-number">10</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br>b = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)<br> <br>ta = torch.from_numpy(a) <span class="hljs-comment">##4 * 1</span><br>tb = torch.from_numpy(b) <span class="hljs-comment">## 3</span><br><br>ta.size()<br>&gt;&gt; torch.Size([<span class="hljs-number">4</span>, <span class="hljs-number">1</span>])<br>tb.size()<br>&gt;&gt; torch.Size([<span class="hljs-number">3</span>])<br>ta+tb<br>&gt;&gt; tensor([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>],<br>&gt;&gt;         [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>],<br>&gt;&gt;         [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>],<br>&gt;&gt;         [<span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>]], dtype=torch.int32)<br></code></pre></td></tr></table></figure><p>按元素操作：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/3fbded1e5a9c9c5330566b41cf6f20fd.png"><br>上面这些操作都是创建新的 tensor，可以使用加上下划线的版本来创建视图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = torch.randn(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>t2 = torch.randn(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>t1,t2<br>&gt;&gt; (tensor([[ <span class="hljs-number">1.8564</span>,  <span class="hljs-number">0.2339</span>, -<span class="hljs-number">0.6054</span>],<br>&gt;&gt;         [-<span class="hljs-number">1.0644</span>,  <span class="hljs-number">0.1839</span>, -<span class="hljs-number">0.2998</span>]]), tensor([[ <span class="hljs-number">0.6240</span>, -<span class="hljs-number">1.2900</span>, -<span class="hljs-number">1.1661</span>],<br>&gt;&gt;         [-<span class="hljs-number">0.3400</span>,  <span class="hljs-number">0.8373</span>,  <span class="hljs-number">1.2089</span>]]))<br>torch.mul(torch.<span class="hljs-built_in">abs</span>(t1),torch.<span class="hljs-built_in">abs</span>(t2))<br>&gt;&gt; tensor([[<span class="hljs-number">1.1584</span>, <span class="hljs-number">0.3017</span>, <span class="hljs-number">0.7059</span>],<br>&gt;&gt;         [<span class="hljs-number">0.3619</span>, <span class="hljs-number">0.1540</span>, <span class="hljs-number">0.3624</span>]])<br>a = torch.<span class="hljs-built_in">abs</span>(t1)<br>b = torch.abs_(t1)<br><br>a[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br>b[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br><br>a<br>&gt;&gt; tensor([[<span class="hljs-number">1.8564</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.6054</span>],<br>&gt;&gt;         [<span class="hljs-number">1.0644</span>, <span class="hljs-number">0.1839</span>, <span class="hljs-number">0.2998</span>]])<br>b<br>&gt;&gt; tensor([[<span class="hljs-number">1.8564</span>, <span class="hljs-number">0.2339</span>, <span class="hljs-number">0.6054</span>],<br>&gt;&gt;         [<span class="hljs-number">1.0644</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.2998</span>]])<br>t1<br>&gt;&gt; tensor([[<span class="hljs-number">1.8564</span>, <span class="hljs-number">0.2339</span>, <span class="hljs-number">0.6054</span>],<br>&gt;&gt;         [<span class="hljs-number">1.0644</span>, <span class="hljs-number">0.0000</span>, <span class="hljs-number">0.2998</span>]])<br></code></pre></td></tr></table></figure><p>归并操作：</p><p>可以按照某个轴或者整个 tensor 进行，一般有两个参数：dim 参数指定计算的维度，keepdim 参数指输出结果中是否保留维度 1</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/625f6b4e0a1446f77392fc93a847f5a1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>)<br>a = a.view(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>a.<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">0</span>)<span class="hljs-comment">##0轴，也就是列</span><br>&gt;&gt; tensor([ <span class="hljs-number">6.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">14.</span>])<br>a.<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">0</span>).shape<br>&gt;&gt; torch.Size([<span class="hljs-number">3</span>])<br>a.<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">True</span>)<br>&gt;&gt; tensor([[ <span class="hljs-number">6.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">14.</span>]])<br>a.<span class="hljs-built_in">sum</span>(dim=<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">True</span>).shape<br>&gt;&gt; torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p>比较操作：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/c8d86d5a90943e7be3ecc22885bb28f0.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>x<br>&gt;&gt; tensor([[ <span class="hljs-number">0.</span>,  <span class="hljs-number">2.</span>,  <span class="hljs-number">4.</span>],<br>&gt;&gt;         [ <span class="hljs-number">6.</span>,  <span class="hljs-number">8.</span>, <span class="hljs-number">10.</span>]])<br>torch.<span class="hljs-built_in">max</span>(x)<br>&gt;&gt; tensor(<span class="hljs-number">10.</span>)<br>torch.<span class="hljs-built_in">max</span>(x,dim=<span class="hljs-number">0</span>) <span class="hljs-comment">##返回每列的最大值以及其index</span><br>&gt;&gt; torch.return_types.<span class="hljs-built_in">max</span>(<br>&gt;&gt; values=tensor([ <span class="hljs-number">6.</span>,  <span class="hljs-number">8.</span>, <span class="hljs-number">10.</span>]),<br>&gt;&gt; indices=tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]))<br>torch.topk(x,<span class="hljs-number">2</span>,dim=<span class="hljs-number">0</span>)<span class="hljs-comment">#求最大的两个值</span><br>&gt;&gt; torch.return_types.topk(<br>&gt;&gt; values=tensor([[ <span class="hljs-number">6.</span>,  <span class="hljs-number">8.</span>, <span class="hljs-number">10.</span>],<br>&gt;&gt;         [ <span class="hljs-number">0.</span>,  <span class="hljs-number">2.</span>,  <span class="hljs-number">4.</span>]]),<br>&gt;&gt; indices=tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>&gt;&gt;         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]))<br>y = torch.tensor([<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>])<br>torch.eq(x,y)<span class="hljs-comment">##支持广播</span><br>&gt;&gt; tensor([[<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>],<br>&gt;&gt;         [ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>]])<br>torch.equal(x,y)<span class="hljs-comment">###数据结构要一致</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): RuntimeError: Expected <span class="hljs-built_in">object</span> of scalar <span class="hljs-built_in">type</span> <span class="hljs-built_in">float</span> but got scalar <span class="hljs-built_in">type</span> __int64 <span class="hljs-keyword">for</span> argument <span class="hljs-string">&#x27;other&#x27;</span><br>y = y.<span class="hljs-built_in">float</span>()<br>torch.equal(x,y)<br>&gt;&gt; <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>矩阵操作：</p><p>主要有两种：按元素相乘和点积</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/883ab00d77e328c75eae26fc46abf6ad.png"></p><p>注意：在 torch 中 dot 只能对向量（一维张量）做点积运算（numpy 中没有限制）；另外 torch 中矩阵按元素相乘是用 <code>mul</code>（numpy 中是 multiply）；转置会使 tensor 不连续，需要使用 <code>contiguous</code> 方法转为连续</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.rand(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>b = torch.tensor([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>c = torch.rand(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>d = torch.rand(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)<br><br>a,b,c<br>&gt;&gt; (tensor([[<span class="hljs-number">0.5224</span>, <span class="hljs-number">0.5259</span>, <span class="hljs-number">0.5960</span>],<br>&gt;&gt;         [<span class="hljs-number">0.6903</span>, <span class="hljs-number">0.5222</span>, <span class="hljs-number">0.6591</span>]]), tensor([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]), tensor([[<span class="hljs-number">0.7300</span>, <span class="hljs-number">0.9068</span>, <span class="hljs-number">0.1036</span>],<br>&gt;&gt;         [<span class="hljs-number">0.3268</span>, <span class="hljs-number">0.5661</span>, <span class="hljs-number">0.0630</span>]]))<br>torch.dot(b,b)<br>&gt;&gt; tensor(<span class="hljs-number">13</span>)<br>torch.dot(a,c)<span class="hljs-comment">##只能一维</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): RuntimeError: 1D tensors expected, but got 2D <span class="hljs-keyword">and</span> 2D tensors<br>torch.mul(a,c)<br>&gt;&gt; tensor([[<span class="hljs-number">0.3814</span>, <span class="hljs-number">0.4769</span>, <span class="hljs-number">0.0617</span>],<br>&gt;&gt;         [<span class="hljs-number">0.2256</span>, <span class="hljs-number">0.2956</span>, <span class="hljs-number">0.0415</span>]])<br>torch.mm(a,c)<span class="hljs-comment">##维度要对应</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): RuntimeError: mat1 <span class="hljs-keyword">and</span> mat2 shapes cannot be multiplied (2x3 <span class="hljs-keyword">and</span> 2x3)<br>torch.mm(a,d)<br>&gt;&gt; tensor([[<span class="hljs-number">0.9200</span>, <span class="hljs-number">0.7083</span>],<br>&gt;&gt;         [<span class="hljs-number">1.0955</span>, <span class="hljs-number">0.8583</span>]])<br>x = torch.randint(<span class="hljs-number">10</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br>y = torch.randint(<span class="hljs-number">10</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br>x,y<br>&gt;&gt; (tensor([[[<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>],<br>&gt;&gt;          [<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>]],<br>&gt;&gt; <br>&gt;&gt;         [[<span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>],<br>&gt;&gt;          [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>]]]), tensor([[[<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>],<br>&gt;&gt;          [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>],<br>&gt;&gt;          [<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]],<br>&gt;&gt; <br>&gt;&gt;         [[<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>],<br>&gt;&gt;          [<span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>],<br>&gt;&gt;          [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>]]]))<br>torch.bmm(x,y)<span class="hljs-comment">##必须是3维</span><br>&gt;&gt; tensor([[[<span class="hljs-number">44</span>, <span class="hljs-number">16</span>, <span class="hljs-number">36</span>, <span class="hljs-number">32</span>],<br>&gt;&gt;          [<span class="hljs-number">42</span>, <span class="hljs-number">42</span>, <span class="hljs-number">49</span>, <span class="hljs-number">47</span>]],<br>&gt;&gt; <br>&gt;&gt;         [[<span class="hljs-number">28</span>, <span class="hljs-number">77</span>, <span class="hljs-number">49</span>, <span class="hljs-number">84</span>],<br>&gt;&gt;          [<span class="hljs-number">21</span>, <span class="hljs-number">36</span>, <span class="hljs-number">25</span>, <span class="hljs-number">41</span>]]])<br></code></pre></td></tr></table></figure><p>pytorch 与 numpy 的比较：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/995d56a6c02fd906dcbd71e3e09c703b.png"></p><h2 id="自动求导"><a href="#自动求导" class="headerlink" title="自动求导"></a>自动求导</h2><p>自动求导的核心是计算图，通过将复杂的函数拆分成计算图中每个节点处的简单运算，并在节点处保留简单运算的梯度，然后通过反向传播运用链式法则求得复杂函数的梯度（计算图的概念见 <a href="https://wutaoblog.com.cn/2021/01/03/deep_learning/">深度学习入门</a>。</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/74d0cafe66686492ce6228e5fa0f81fc.png"></p><p>图中 x，w，b 为叶子节点（叶子节点的张量参数 requires_grad 需要设置为True），z 为根节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br> <br> <br><span class="hljs-comment">#定义输入张量x</span><br>x=torch.Tensor([<span class="hljs-number">2</span>])<br><span class="hljs-comment">#初始化权重参数W,偏移量b、并设置require_grad属性为True，为自动求导</span><br>w=torch.randn(<span class="hljs-number">1</span>,requires_grad=<span class="hljs-literal">True</span>)<br>b=torch.randn(<span class="hljs-number">1</span>,requires_grad=<span class="hljs-literal">True</span>) <br><span class="hljs-comment">#实现前向传播</span><br>y=torch.mul(w,x)  <span class="hljs-comment">#等价于w*x</span><br>z=torch.add(y,b)  <span class="hljs-comment">#等价于y+b</span><br><span class="hljs-comment">#查看x,w，b页子节点的requite_grad属性</span><br>x.requires_grad,w.requires_grad,b.requires_grad<br>&gt;&gt; (<span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>)<br>z<br>&gt;&gt; tensor([<span class="hljs-number">1.0761</span>], grad_fn=&lt;AddBackward0&gt;)<br>z.backward()<br><span class="hljs-built_in">print</span>(w.is_leaf,x.is_leaf,b.is_leaf,y.is_leaf,z.is_leaf)<span class="hljs-comment">##查看是否为叶子节点</span><br>&gt;&gt; <span class="hljs-literal">True</span> <span class="hljs-literal">True</span> <span class="hljs-literal">True</span> <span class="hljs-literal">False</span> <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(w.grad,b.grad,x.grad,y.grad)<br>&gt;&gt; tensor([<span class="hljs-number">2.</span>]) tensor([<span class="hljs-number">1.</span>]) <span class="hljs-literal">None</span> <span class="hljs-literal">None</span><br>&gt;&gt; <br>&gt;&gt; &lt;string&gt;:<span class="hljs-number">1</span>: UserWarning: The .grad attribute of a Tensor that <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> a leaf Tensor <span class="hljs-keyword">is</span> being accessed. Its .grad attribute won<span class="hljs-string">&#x27;t be populated during autograd.backward(). If you indeed want the gradient for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations.</span><br></code></pre></td></tr></table></figure><p>在反向传播结束之后，非叶子节点的梯度会被释放掉（以及没有设置requires_grad 的叶子节点），可以通过 <code>retain_grad()</code> 来保留任意节点的梯度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">y=torch.mul(w,x)  <br>y.retain_grad()<br>z=torch.add(y,b)<br><br>z,z.backward()<br>&gt;&gt; (tensor([<span class="hljs-number">1.0761</span>], grad_fn=&lt;AddBackward0&gt;), <span class="hljs-literal">None</span>)<br><span class="hljs-built_in">print</span>(w.grad,b.grad,x.grad,y.grad)<br>&gt;&gt; tensor([<span class="hljs-number">4.</span>]) tensor([<span class="hljs-number">2.</span>]) <span class="hljs-literal">None</span> tensor([<span class="hljs-number">1.</span>])<br></code></pre></td></tr></table></figure><p>tensor 还有一个 <code>grad_fn</code> 属性，来记录创建该 tensor 时所使用的函数类型，因为在计算图中可以根据不同的计算类型来使用不同的求导法则（比如加法节点的求导不改变输入信号，直接输出；而乘法节点则需要输入的两个乘子互换作为梯度的输出等）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(y.grad_fn,z.grad_fn)<br>&gt;&gt; &lt;MulBackward0 <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001DE3BD8F250</span>&gt; &lt;AddBackward0 <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000001DE40B1F550</span>&gt;<br></code></pre></td></tr></table></figure><p>上面讲到的是标量对标量求导，也可以标量对张量求导，但是不能直接张量对张量求导:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">x=torch.Tensor([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<span class="hljs-comment">##张量</span><br>w=torch.randn(<span class="hljs-number">2</span>,requires_grad=<span class="hljs-literal">True</span>)<br>b=torch.randn(<span class="hljs-number">2</span>,requires_grad=<span class="hljs-literal">True</span>) <br><br>y=torch.mul(w,x)  <br>z=torch.add(y,b)<br><br>k = z.mean()<br>k<br>&gt;&gt; tensor(<span class="hljs-number">4.9734</span>, grad_fn=&lt;MeanBackward0&gt;)<br>k.backward()<span class="hljs-comment">##标量对张量</span><br><br>z<br>&gt;&gt; tensor([<span class="hljs-number">5.9739</span>, <span class="hljs-number">3.9728</span>], grad_fn=&lt;AddBackward0&gt;)<br>z.backward()<span class="hljs-comment">##非标量张量对非标量张量求导会报错</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): RuntimeError: grad can be implicitly created only <span class="hljs-keyword">for</span> scalar outputs<br></code></pre></td></tr></table></figure><p>张量对张量求导，需要在 <code>backward()</code> 中加上 <code>gradient</code> 参数，该参数的维数要和目标张量维数一致，然后对目标张量和该参数进行加权求和（按元素相乘再相加）得到一个标量后再进行求导：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br><span class="hljs-comment">#定义叶子节点张量x，形状为1x2</span><br>x= torch.tensor([[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]], dtype=torch.<span class="hljs-built_in">float</span>, requires_grad=<span class="hljs-literal">True</span>)<br><br>y = x*<span class="hljs-number">3</span><br>z = torch.Tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]])<br>y.backward(gradient=z)<br>x.grad<br>&gt;&gt; tensor([[<span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>]])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Hands on ML ch5】- 支持向量机（SVM）</title>
    <link href="/2021/06/20/hand_on_ML_ch5/"/>
    <url>/2021/06/20/hand_on_ML_ch5/</url>
    
    <content type="html"><![CDATA[<p>Hands on ML 第五章</p><span id="more"></span><h2 id="线性SVM分类器"><a href="#线性SVM分类器" class="headerlink" title="线性SVM分类器"></a>线性SVM分类器</h2><p>线性SVM包含数据线性可分的线性支持向量机模型,又称为<strong>硬间隔SVM</strong>和数据线性不可分的线性支持向量机模型,又称为<strong>软间隔SVM</strong>;两者的区别在于：硬间隔不允许间隔内有样本点存在,而软间隔可以</p><p>在<code>Scikit-Learn</code>中可以指定超参数<code>C</code>来决定对间隔中的点“惩罚”强度(见<a href="https://wutaoblog.com.cn/2021/06/19/svm_theory/">SVM理论部分</a>软间隔最大化的优化问题);如果C比较小,那么惩罚比较小,所以在间隔中的点也比较多,相反,如果C比较大,在间隔中的点就比较少:</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210403220433035.png"></p><p>因此,在SVM模型过拟合的时候可以考虑减少C；下面是一个在鸢尾花数据集上训练SVM模型的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.pipeline <span class="hljs-keyword">import</span> Pipeline<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> LinearSVC<br><br>iris = datasets.load_iris()<br>X = iris[<span class="hljs-string">&quot;data&quot;</span>][:,(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)]<span class="hljs-comment">##只选长度和宽度两个特征</span><br>y = (iris[<span class="hljs-string">&quot;target&quot;</span>]==<span class="hljs-number">2</span>).astype(np.float64) <span class="hljs-comment">##virginica</span><br><br>svm_clf = Pipeline([<br>  (<span class="hljs-string">&quot;scaler&quot;</span>,StandardScaler()),<br>  (<span class="hljs-string">&quot;linear_svc&quot;</span>,LinearSVC(C=<span class="hljs-number">1</span>,loss=<span class="hljs-string">&quot;hinge&quot;</span>)),<span class="hljs-comment">##合页损失函数</span><br>])<br><br>svm_clf.fit(X,y)<br>&gt;&gt; Pipeline(steps=[(<span class="hljs-string">&#x27;scaler&#x27;</span>, StandardScaler()),<br>&gt;&gt;                 (<span class="hljs-string">&#x27;linear_svc&#x27;</span>, LinearSVC(C=<span class="hljs-number">1</span>, loss=<span class="hljs-string">&#x27;hinge&#x27;</span>))])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##predict</span><br>svm_clf.predict([[<span class="hljs-number">5.5</span>,<span class="hljs-number">1.7</span>]])<br>&gt;&gt; array([<span class="hljs-number">1.</span>])<br></code></pre></td></tr></table></figure><p>除了使用 <code>linearSVC</code> 类外，也可以用 <code>SVC</code>类（线性核）：<code>SVC(kernel=&quot;linear&quot;, C=1)</code> 或者使用 <code>SGDClassifier</code> 类，用随机梯度下降的方式来优化合页损失函数 <code>SGDClassifier(loss=&quot;hinge&quot;, alpha=1/(m*C))</code>（m 是 batch 的大小）</p><h2 id="非线性-SVM-分类器"><a href="#非线性-SVM-分类器" class="headerlink" title="非线性 SVM 分类器"></a>非线性 SVM 分类器</h2><p>通过核技巧将线性不可分的数据映射到高维空间，使其更有可能线性可分，通常使用的核函数有：多项式核函数和高斯核函数，可以通过 SVC 来使用各种核函数，核函数的表达式和参数如下表：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210620214739030.png"></p><p>其中 coef0 表示式子中的常数项 r。 下面以 moon 数据集为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> make_moons<br>X, y = make_moons(n_samples=<span class="hljs-number">100</span>, noise=<span class="hljs-number">0.15</span>, random_state=<span class="hljs-number">42</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_dataset</span>(<span class="hljs-params">X, y, axes</span>):<br>    plt.plot(X[:, <span class="hljs-number">0</span>][y==<span class="hljs-number">0</span>], X[:, <span class="hljs-number">1</span>][y==<span class="hljs-number">0</span>], <span class="hljs-string">&quot;bs&quot;</span>)<br>    plt.plot(X[:, <span class="hljs-number">0</span>][y==<span class="hljs-number">1</span>], X[:, <span class="hljs-number">1</span>][y==<span class="hljs-number">1</span>], <span class="hljs-string">&quot;g^&quot;</span>)<br>    plt.axis(axes)<br>    plt.grid(<span class="hljs-literal">True</span>, which=<span class="hljs-string">&#x27;both&#x27;</span>)<br>    plt.xlabel(<span class="hljs-string">r&quot;$x_1$&quot;</span>, fontsize=<span class="hljs-number">20</span>)<br>    plt.ylabel(<span class="hljs-string">r&quot;$x_2$&quot;</span>, fontsize=<span class="hljs-number">20</span>, rotation=<span class="hljs-number">0</span>)<br><br>plot_dataset(X, y, [-<span class="hljs-number">1.5</span>, <span class="hljs-number">2.5</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1.5</span>])<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-1-1.png" width="672" /><p>首先来看多项式核函数，分别使用 d&#x3D;1,r&#x3D;1,C&#x3D;5 以及 d&#x3D;10,r&#x3D;100,C&#x3D;5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br><br>poly_kernel_svm_clf = Pipeline([<br>        (<span class="hljs-string">&quot;scaler&quot;</span>, StandardScaler()),<br>        (<span class="hljs-string">&quot;svm_clf&quot;</span>, SVC(kernel=<span class="hljs-string">&quot;poly&quot;</span>, degree=<span class="hljs-number">3</span>, coef0=<span class="hljs-number">1</span>, C=<span class="hljs-number">5</span>))<br>    ])<br>poly_kernel_svm_clf.fit(X, y)<br>&gt;&gt; Pipeline(steps=[(<span class="hljs-string">&#x27;scaler&#x27;</span>, StandardScaler()),<br>&gt;&gt;                 (<span class="hljs-string">&#x27;svm_clf&#x27;</span>, SVC(C=<span class="hljs-number">5</span>, coef0=<span class="hljs-number">1</span>, kernel=<span class="hljs-string">&#x27;poly&#x27;</span>))])<br>poly100_kernel_svm_clf = Pipeline([<br>        (<span class="hljs-string">&quot;scaler&quot;</span>, StandardScaler()),<br>        (<span class="hljs-string">&quot;svm_clf&quot;</span>, SVC(kernel=<span class="hljs-string">&quot;poly&quot;</span>, degree=<span class="hljs-number">10</span>, coef0=<span class="hljs-number">100</span>, C=<span class="hljs-number">5</span>))<br>    ])<br>poly100_kernel_svm_clf.fit(X, y)<br><br><span class="hljs-comment">##画图</span><br>&gt;&gt; Pipeline(steps=[(<span class="hljs-string">&#x27;scaler&#x27;</span>, StandardScaler()),<br>&gt;&gt;                 (<span class="hljs-string">&#x27;svm_clf&#x27;</span>, SVC(C=<span class="hljs-number">5</span>, coef0=<span class="hljs-number">100</span>, degree=<span class="hljs-number">10</span>, kernel=<span class="hljs-string">&#x27;poly&#x27;</span>))])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_predictions</span>(<span class="hljs-params">clf, axes</span>):<br>    x0s = np.linspace(axes[<span class="hljs-number">0</span>], axes[<span class="hljs-number">1</span>], <span class="hljs-number">100</span>)<br>    x1s = np.linspace(axes[<span class="hljs-number">2</span>], axes[<span class="hljs-number">3</span>], <span class="hljs-number">100</span>)<br>    x0, x1 = np.meshgrid(x0s, x1s)<br>    X = np.c_[x0.ravel(), x1.ravel()]<br>    y_pred = clf.predict(X).reshape(x0.shape)<br>    y_decision = clf.decision_function(X).reshape(x0.shape)<br>    plt.contourf(x0, x1, y_pred, cmap=plt.cm.brg, alpha=<span class="hljs-number">0.2</span>)<br>    plt.contourf(x0, x1, y_decision, cmap=plt.cm.brg, alpha=<span class="hljs-number">0.1</span>)<br>    <br><br>fig, axes = plt.subplots(ncols=<span class="hljs-number">2</span>, figsize=(<span class="hljs-number">10.5</span>, <span class="hljs-number">4</span>), sharey=<span class="hljs-literal">True</span>)<br><br>plt.sca(axes[<span class="hljs-number">0</span>])<br>plot_predictions(poly_kernel_svm_clf, [-<span class="hljs-number">1.5</span>, <span class="hljs-number">2.45</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1.5</span>])<br>plot_dataset(X, y, [-<span class="hljs-number">1.5</span>, <span class="hljs-number">2.4</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1.5</span>])<br>plt.title(<span class="hljs-string">r&quot;$d=3, r=1, C=5$&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;$d=3, r=1, C=5$&#x27;</span>)<br>plt.sca(axes[<span class="hljs-number">1</span>])<br>plot_predictions(poly100_kernel_svm_clf, [-<span class="hljs-number">1.5</span>, <span class="hljs-number">2.45</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1.5</span>])<br>plot_dataset(X, y, [-<span class="hljs-number">1.5</span>, <span class="hljs-number">2.4</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1.5</span>])<br>plt.title(<span class="hljs-string">r&quot;$d=10, r=100, C=5$&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;$d=10, r=100, C=5$&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;&quot;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-1-3.png" width="1008" /><p>可以看到自由度越高（d越大），决策边阶越不规则，模型就有过拟合的倾向；接下来看一下高斯核函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br><br>gamma1, gamma2 = <span class="hljs-number">0.1</span>, <span class="hljs-number">5</span><br>C1, C2 = <span class="hljs-number">0.001</span>, <span class="hljs-number">1000</span><br>hyperparams = (gamma1, C1), (gamma1, C2), (gamma2, C1), (gamma2, C2)<br><br>svm_clfs = []<br><span class="hljs-keyword">for</span> gamma, C <span class="hljs-keyword">in</span> hyperparams:<br>    rbf_kernel_svm_clf = Pipeline([<br>            (<span class="hljs-string">&quot;scaler&quot;</span>, StandardScaler()),<br>            (<span class="hljs-string">&quot;svm_clf&quot;</span>, SVC(kernel=<span class="hljs-string">&quot;rbf&quot;</span>, gamma=gamma, C=C))<br>        ])<br>    rbf_kernel_svm_clf.fit(X, y)<br>    svm_clfs.append(rbf_kernel_svm_clf)<br>&gt;&gt; Pipeline(steps=[(<span class="hljs-string">&#x27;scaler&#x27;</span>, StandardScaler()),<br>&gt;&gt;                 (<span class="hljs-string">&#x27;svm_clf&#x27;</span>, SVC(C=<span class="hljs-number">0.001</span>, gamma=<span class="hljs-number">0.1</span>))])<br>&gt;&gt; Pipeline(steps=[(<span class="hljs-string">&#x27;scaler&#x27;</span>, StandardScaler()),<br>&gt;&gt;                 (<span class="hljs-string">&#x27;svm_clf&#x27;</span>, SVC(C=<span class="hljs-number">1000</span>, gamma=<span class="hljs-number">0.1</span>))])<br>&gt;&gt; Pipeline(steps=[(<span class="hljs-string">&#x27;scaler&#x27;</span>, StandardScaler()),<br>&gt;&gt;                 (<span class="hljs-string">&#x27;svm_clf&#x27;</span>, SVC(C=<span class="hljs-number">0.001</span>, gamma=<span class="hljs-number">5</span>))])<br>&gt;&gt; Pipeline(steps=[(<span class="hljs-string">&#x27;scaler&#x27;</span>, StandardScaler()),<br>&gt;&gt;                 (<span class="hljs-string">&#x27;svm_clf&#x27;</span>, SVC(C=<span class="hljs-number">1000</span>, gamma=<span class="hljs-number">5</span>))])<br>fig, axes = plt.subplots(nrows=<span class="hljs-number">2</span>, ncols=<span class="hljs-number">2</span>, figsize=(<span class="hljs-number">10.5</span>, <span class="hljs-number">7</span>), sharex=<span class="hljs-literal">True</span>, sharey=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">for</span> i, svm_clf <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(svm_clfs):<br>    plt.sca(axes[i // <span class="hljs-number">2</span>, i % <span class="hljs-number">2</span>])<br>    plot_predictions(svm_clf, [-<span class="hljs-number">1.5</span>, <span class="hljs-number">2.45</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1.5</span>])<br>    plot_dataset(X, y, [-<span class="hljs-number">1.5</span>, <span class="hljs-number">2.45</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1.5</span>])<br>    gamma, C = hyperparams[i]<br>    plt.title(<span class="hljs-string">r&quot;$\gamma = &#123;&#125;, C = &#123;&#125;$&quot;</span>.<span class="hljs-built_in">format</span>(gamma, C), fontsize=<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>):<br>        plt.xlabel(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>):<br>        plt.ylabel(<span class="hljs-string">&quot;&quot;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;$\\gamma = 0.1, C = 0.001$&#x27;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;$\\gamma = 0.1, C = 1000$&#x27;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;$\\gamma = 5, C = 0.001$&#x27;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;$\\gamma = 5, C = 1000$&#x27;</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-1-5.png" width="1008" /><p>gamma 相当于一个正则化的超参数，当 gamma 增加时，决策边界就会变窄，变得不规则，实例的影响范围就会变小（对噪音的容忍度），因此如果模型过拟合可以考虑减小 gamma。</p><p>上面也提到在 scikit-learn 中有 3 种方法来调用 SVM，这三种方法的优化算法以及是否支持核函数方面有所不同，下表是三者的比较：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210620230916381.png"></p><h2 id="SVM-回归"><a href="#SVM-回归" class="headerlink" title="SVM 回归"></a>SVM 回归</h2><p>SVM 做分类的时候是想找到一个两类之间的最大的“街道”，而且限制实例对“街道”边界的越界；在做回归任务的时候则相反，想要找到一条街道，使得尽可能多的实例点在这个街道上，并且对那些不在街道上的点进行惩罚。使用 <code>LinearSVR</code> 或者 <code>SVR</code>（核函数）可以进行 SVM 回归；街道的宽度由超参数 epsilon 控制，下面是对一些随机数据的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python">np.random.seed(<span class="hljs-number">42</span>)<br>m = <span class="hljs-number">50</span><br>X = <span class="hljs-number">2</span> * np.random.rand(m, <span class="hljs-number">1</span>)<br>y = (<span class="hljs-number">4</span> + <span class="hljs-number">3</span> * X + np.random.randn(m, <span class="hljs-number">1</span>)).ravel()<br><br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> LinearSVR<br><br>svm_reg = LinearSVR(epsilon=<span class="hljs-number">1.5</span>, random_state=<span class="hljs-number">42</span>)<br>svm_reg.fit(X, y)<br>&gt;&gt; LinearSVR(epsilon=<span class="hljs-number">1.5</span>, random_state=<span class="hljs-number">42</span>)<br>svm_reg1 = LinearSVR(epsilon=<span class="hljs-number">1.5</span>, random_state=<span class="hljs-number">42</span>)<br>svm_reg2 = LinearSVR(epsilon=<span class="hljs-number">0.5</span>, random_state=<span class="hljs-number">42</span>)<br>svm_reg1.fit(X, y)<br>&gt;&gt; LinearSVR(epsilon=<span class="hljs-number">1.5</span>, random_state=<span class="hljs-number">42</span>)<br>svm_reg2.fit(X, y)<br>&gt;&gt; LinearSVR(epsilon=<span class="hljs-number">0.5</span>, random_state=<span class="hljs-number">42</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_support_vectors</span>(<span class="hljs-params">svm_reg, X, y</span>):<br>    y_pred = svm_reg.predict(X)<br>    off_margin = (np.<span class="hljs-built_in">abs</span>(y - y_pred) &gt;= svm_reg.epsilon)<br>    <span class="hljs-keyword">return</span> np.argwhere(off_margin)<br><br>svm_reg1.support_ = find_support_vectors(svm_reg1, X, y)<br>svm_reg2.support_ = find_support_vectors(svm_reg2, X, y)<br><br>eps_x1 = <span class="hljs-number">1</span><br>eps_y_pred = svm_reg1.predict([[eps_x1]])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_svm_regression</span>(<span class="hljs-params">svm_reg, X, y, axes</span>):<br>    x1s = np.linspace(axes[<span class="hljs-number">0</span>], axes[<span class="hljs-number">1</span>], <span class="hljs-number">100</span>).reshape(<span class="hljs-number">100</span>, <span class="hljs-number">1</span>)<br>    y_pred = svm_reg.predict(x1s)<br>    plt.plot(x1s, y_pred, <span class="hljs-string">&quot;k-&quot;</span>, linewidth=<span class="hljs-number">2</span>, label=<span class="hljs-string">r&quot;$\hat&#123;y&#125;$&quot;</span>)<br>    plt.plot(x1s, y_pred + svm_reg.epsilon, <span class="hljs-string">&quot;k--&quot;</span>)<br>    plt.plot(x1s, y_pred - svm_reg.epsilon, <span class="hljs-string">&quot;k--&quot;</span>)<br>    plt.scatter(X[svm_reg.support_], y[svm_reg.support_], s=<span class="hljs-number">180</span>, facecolors=<span class="hljs-string">&#x27;#FFAAAA&#x27;</span>)<br>    plt.plot(X, y, <span class="hljs-string">&quot;bo&quot;</span>)<br>    plt.xlabel(<span class="hljs-string">r&quot;$x_1$&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>    plt.legend(loc=<span class="hljs-string">&quot;upper left&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>    plt.axis(axes)<br><br>fig, axes = plt.subplots(ncols=<span class="hljs-number">2</span>, figsize=(<span class="hljs-number">9</span>, <span class="hljs-number">4</span>), sharey=<span class="hljs-literal">True</span>)<br>plt.sca(axes[<span class="hljs-number">0</span>])<br>plot_svm_regression(svm_reg1, X, y, [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>])<br>plt.title(<span class="hljs-string">r&quot;$\epsilon = &#123;&#125;$&quot;</span>.<span class="hljs-built_in">format</span>(svm_reg1.epsilon), fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;$\\epsilon = 1.5$&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">r&quot;$y$&quot;</span>, fontsize=<span class="hljs-number">18</span>, rotation=<span class="hljs-number">0</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;$y$&#x27;</span>)<br>plt.annotate(<br>        <span class="hljs-string">&#x27;&#x27;</span>, xy=(eps_x1, eps_y_pred), xycoords=<span class="hljs-string">&#x27;data&#x27;</span>,<br>        xytext=(eps_x1, eps_y_pred - svm_reg1.epsilon),<br>        textcoords=<span class="hljs-string">&#x27;data&#x27;</span>, arrowprops=&#123;<span class="hljs-string">&#x27;arrowstyle&#x27;</span>: <span class="hljs-string">&#x27;&lt;-&gt;&#x27;</span>, <span class="hljs-string">&#x27;linewidth&#x27;</span>: <span class="hljs-number">1.5</span>&#125;<br>    )<br>&gt;&gt; Text(<span class="hljs-number">1</span>, [<span class="hljs-number">5.02640746</span>], <span class="hljs-string">&#x27;&#x27;</span>)<br>plt.text(<span class="hljs-number">0.91</span>, <span class="hljs-number">5.6</span>, <span class="hljs-string">r&quot;$\epsilon$&quot;</span>, fontsize=<span class="hljs-number">20</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.91</span>, <span class="hljs-number">5.6</span>, <span class="hljs-string">&#x27;$\\epsilon$&#x27;</span>)<br>plt.sca(axes[<span class="hljs-number">1</span>])<br>plot_svm_regression(svm_reg2, X, y, [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>])<br>plt.title(<span class="hljs-string">r&quot;$\epsilon = &#123;&#125;$&quot;</span>.<span class="hljs-built_in">format</span>(svm_reg2.epsilon), fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;$\\epsilon = 0.5$&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-1-7.png" width="864" /><p>对于非线性的回归任务，就可以使用核技巧，下面使用了 2 个自由度的多项式核：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">np.random.seed(<span class="hljs-number">42</span>)<br>m = <span class="hljs-number">100</span><br>X = <span class="hljs-number">2</span> * np.random.rand(m, <span class="hljs-number">1</span>) - <span class="hljs-number">1</span><br>y = (<span class="hljs-number">0.2</span> + <span class="hljs-number">0.1</span> * X + <span class="hljs-number">0.5</span> * X**<span class="hljs-number">2</span> + np.random.randn(m, <span class="hljs-number">1</span>)/<span class="hljs-number">10</span>).ravel()<br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVR<br><br>svm_poly_reg1 = SVR(kernel=<span class="hljs-string">&quot;poly&quot;</span>, degree=<span class="hljs-number">2</span>, C=<span class="hljs-number">100</span>, epsilon=<span class="hljs-number">0.1</span>, gamma=<span class="hljs-string">&quot;scale&quot;</span>)<br>svm_poly_reg2 = SVR(kernel=<span class="hljs-string">&quot;poly&quot;</span>, degree=<span class="hljs-number">2</span>, C=<span class="hljs-number">0.01</span>, epsilon=<span class="hljs-number">0.1</span>, gamma=<span class="hljs-string">&quot;scale&quot;</span>)<br>svm_poly_reg1.fit(X, y)<br>&gt;&gt; SVR(C=<span class="hljs-number">100</span>, degree=<span class="hljs-number">2</span>, kernel=<span class="hljs-string">&#x27;poly&#x27;</span>)<br>svm_poly_reg2.fit(X, y)<br>&gt;&gt; SVR(C=<span class="hljs-number">0.01</span>, degree=<span class="hljs-number">2</span>, kernel=<span class="hljs-string">&#x27;poly&#x27;</span>)<br>fig, axes = plt.subplots(ncols=<span class="hljs-number">2</span>, figsize=(<span class="hljs-number">9</span>, <span class="hljs-number">4</span>), sharey=<span class="hljs-literal">True</span>)<br>plt.sca(axes[<span class="hljs-number">0</span>])<br>plot_svm_regression(svm_poly_reg1, X, y, [-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>plt.title(<span class="hljs-string">r&quot;$degree=&#123;&#125;, C=&#123;&#125;, \epsilon = &#123;&#125;$&quot;</span>.<span class="hljs-built_in">format</span>(svm_poly_reg1.degree, svm_poly_reg1.C, svm_poly_reg1.epsilon), fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;$degree=2, C=100, \\epsilon = 0.1$&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">r&quot;$y$&quot;</span>, fontsize=<span class="hljs-number">18</span>, rotation=<span class="hljs-number">0</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;$y$&#x27;</span>)<br>plt.sca(axes[<span class="hljs-number">1</span>])<br>plot_svm_regression(svm_poly_reg2, X, y, [-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>plt.title(<span class="hljs-string">r&quot;$degree=&#123;&#125;, C=&#123;&#125;, \epsilon = &#123;&#125;$&quot;</span>.<span class="hljs-built_in">format</span>(svm_poly_reg2.degree, svm_poly_reg2.C, svm_poly_reg2.epsilon), fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;$degree=2, C=0.01, \\epsilon = 0.1$&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-1-9.png" width="864" />]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>支持向量机(SVM)-理论</title>
    <link href="/2021/06/19/svm_theory/"/>
    <url>/2021/06/19/svm_theory/</url>
    
    <content type="html"><![CDATA[<p>支持向量机理论，参考李航《统计学习方法》</p><span id="more"></span><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-06-19_17-31-30_8.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_18-06-07_1.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_18-06-07_2.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_18-06-07_3.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_18-06-07_4.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_18-06-07_5.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_18-06-07_6.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_18-06-07_7.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_18-06-07_8.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_18-06-07_9.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_18-06-07_10.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_18-06-07_11.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-06-19_17-31-30_0.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-06-19_17-31-30_1.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-06-19_17-31-30_2.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-06-19_17-31-30_3.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-06-19_17-31-30_4.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-06-19_17-31-30_5.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-06-19_17-31-30_6.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-06-19_17-31-30_7.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
      <category>数学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Shiny基础-1</title>
    <link href="/2021/06/10/mastering_shiny/"/>
    <url>/2021/06/10/mastering_shiny/</url>
    
    <content type="html"><![CDATA[<p>R Shiny 基础知识 参考：<a href="https://mastering-shiny.org/index.html">Mastering Shiny</a></p><span id="more"></span><p><code>shiny APP</code>两个关键的组分是<code>UI</code>（user interface）和 <code>server</code> 函数；<code>UI</code> 定义了 app 的外观，而 <code>server</code> 则定义了 <code>app</code> 是如何工作的；另外 <code>shiny</code> 使用了反应式编程，也就是当输入改变的时候会自动更新输出，因此 <code>shiny app</code> 的第三个重要组分为响应表达式（reactive expression）</p><p>首先需要安装和载入 <code>shiny</code> 包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;shiny&quot;</span><span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>shiny<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>创建一个 <code>shiny app</code> 最简单的方法是创建一个文件夹，放入一个空文件 <code>app.R</code> ，这个文件告诉 <code>shiny</code> app 的样式和行为，我们在 <code>app.R</code>  中写入以下内容来创建一个最简单的 APP：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>shiny<span class="hljs-punctuation">)</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  <span class="hljs-string">&quot;hello, shiny&quot;</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <br><span class="hljs-punctuation">&#125;</span><br><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>UI 定义了和用户相互作用的页面，这里网页显示了  <code>hello, shiny</code>；server 函数规定了 app 的行为，这里是空的，因此这个简单的 app 没有做任何事情，最后 <code>shinyApp(ui, server)</code> 从UI 和 server 创建并启动了 APP（在 Rstudio 中可以通过新建项目选择 <code>shiny web application</code>来创建 app 的框架，也可以在 <code>app.R</code> 文件中打入 <code>shinyapp</code> 然后按 Shift+Tab 键） </p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/shiny.gif"></p><p>有几种方式可以来运行我们的 <code>shiny app</code>:</p><ul><li><p>点击 <strong>Run App</strong> 按钮：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/屏幕截图 2021-06-08 163242.png" alt="" style="zoom:50%;" /></li><li><p>使用快捷键：<code>Cmd/Ctrl</code> + <code>Shift</code> + <code>Enter</code></p></li><li><p>使用函数 <code>shiny::runApp()</code> 参数是 <code>app.R</code> 文件的路径</p></li></ul><p>通过上面的方法启动 App 后，就可以得到下面的结果：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608163552620.png" alt="" style="zoom:50%;" /><p>现在可以向这个 App 的 UI 中添加一些输入和输出（展示 <code>dataset</code> 包中的内置数据）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dataset&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dataset&quot;</span><span class="hljs-punctuation">,</span> choices <span class="hljs-operator">=</span> ls<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  verbatimTextOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;summary&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;table&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><code>fluidPage</code> 是布局函数，控制着页面的基本结构；<code>selectInput</code> 是输入控制，用来和用户交互，这里是标签为 <code>Dataset</code> 的选择框；<code>verbatimTextOutput</code> 和 <code>tableOutput</code> 是输出控制，告诉 shiny 在哪里放置渲染后的输出；运行这个 APP 后可以得到：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608170440462.png" alt="" style="zoom:50%;" /><p>我们只能选取一些值，但是并不能看到输出，因为此时还没有告诉 shiny 如何通过输入得到输出，而这个功能是通过 <code>server</code> 函数来实现。</p><p>可以定义一个 <code>server</code> 函数如下，来得到所选数据的汇总统计和打印数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>summary <span class="hljs-operator">&lt;-</span> renderPrint<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    dataset <span class="hljs-operator">&lt;-</span> get<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><br>    summary<span class="hljs-punctuation">(</span>dataset<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>table <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    dataset <span class="hljs-operator">&lt;-</span> get<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>dataset<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;package:datasets&quot;</span><span class="hljs-punctuation">)</span><br>    dataset<br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>output$summary</code> 和 <code>output$table</code> 表示输出的元素（输出 ID），在 UI 中的输出要和这里对应起来（上面 <code>verbatimTextOutput</code> 和 <code>tableOutput</code> 中的 <code>summary</code> 和 <code>table</code>）；<code>render&#123;Type&#125;</code> 是渲染函数，用来产生特定类型的输出（比如文字，表，图等），渲染函数通常和 UI 中的 <code>&#123;Type&#125;Output</code> 函数相对应，这里是 <code>renderPrint</code> 和 <code>verbatimTextOutput</code> 配对来使用固定宽度的文字展示描述性统计，而<code>renderTable</code> 则和 <code>tableOutput</code> 配对来展示表格内容。</p><p>现在可以再次启动 APP：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/shiny1.gif"></p><h2 id="基本-UI"><a href="#基本-UI" class="headerlink" title="基本 UI"></a>基本 UI</h2><p>UI 的基本元素包括输入和输出，都由特殊的函数来控制，如上面的 <code>selectInput</code> ,<code>verbatimTextOutput</code> 和 <code>tableOutput</code>。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>所有的输入函数的第一个参数都是 <code>inputId</code> ，用来连接前端（UI）和后端（server）的，比如 UI 有一个 ID 为 <code>name</code> 的输入，那么在 <code>server</code> 函数中就可以通过 <code>input$name</code> 来获取这个输入（上面的例子中 ID 为 dataset），<code>inputid</code> 有两个限制条件：</p><ul><li>只能包含字母，数字和下划线（和变量的命名规则类似）</li><li>必须唯一</li></ul><p>大部分输入函数有第二个参数：<code>label</code> ，来展示这个输入控件的名字；第三个参数是值 （value）,可以用来设定默认值（不一定会有这个参数），下面是一些常用的输入函数：</p><ol><li><p>文字输入：少量文字可以使用 <code>textInput()</code>，密码可以使用 <code>passwordInput()</code>，成段的文字可以使用 <code>textAreaInput()</code>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  textInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;What&#x27;s your name?&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  passwordInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;password&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;What&#x27;s your password?&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textAreaInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;story&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Tell me about yourself&quot;</span><span class="hljs-punctuation">,</span> rows <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608183050854.png" style="zoom:50%;" /></li><li><p>数字输入：可以使用 <code>numericInput()</code> 来创建一个文本框，但是只能输入数字，或者使用 <code>sliderInput()</code> 来创建一个滑条（如果提供的 value 是有两个元素的向量，滑条的两端都可以移动）:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;num&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Number one&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;num2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Number two&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">50</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rng&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Range&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608183704337.png" alt="" style="zoom:50%;" /></li><li><p>日期输入：使用 <code>dateInput()</code> 来输入单个日期或者 <code>dateRangeInput()</code> 来输入两个日期，选择日期时是在日历上选择:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  dateInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dob&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;When were you born?&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  dateRangeInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;holiday&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;When do you want to go on vacation next?&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608184017084.png" alt="" style="zoom:50%;" /></li><li><p>选择输入：用户必须从我们定义好的选项中选择值，可以使用 <code>selectInput()</code> 和 <code>radioButtons()</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">animals <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dog&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;cat&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;mouse&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;bird&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;other&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;I hate animals&quot;</span><span class="hljs-punctuation">)</span><br><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  selectInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;state&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;What&#x27;s your favourite state?&quot;</span><span class="hljs-punctuation">,</span> state.name<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-comment">##state.name是内置的变量</span><br>  radioButtons<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;animal&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;What&#x27;s your favourite animal?&quot;</span><span class="hljs-punctuation">,</span> animals<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608185109736.png" alt="" style="zoom:50%;" /><p><code>selectInput</code> 是通过下拉菜单来展示所有可能的值的，可以使用参数 <code>multiple = TRUE</code> 来使得用户可以选择多个值；<code>radioButtons</code> 除了可以展示所有的值，还可以通过参数 <code>choiceNames/choiceValues</code> 来对展示的内容进行编码（也就是展示的值和返回值不一定要一样，只需要对应即可）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  radioButtons<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rb&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Choose one:&quot;</span><span class="hljs-punctuation">,</span><br>    choiceNames <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><br>      icon<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;angry&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      icon<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;smile&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      icon<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;sad-tear&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    choiceValues <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;angry&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;happy&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;sad&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><span class="hljs-comment">##两个list一一对应，choiceNames用来展示，choiceValues用来返回</span><br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608190106186.png" alt="" style="zoom:50%;" /><p><code>radioButtons</code> 是不能多选的，可以使用 <code>checkboxGroupInput()</code> 来代替：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  checkboxGroupInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;animal&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;What animals do you like?&quot;</span><span class="hljs-punctuation">,</span> animals<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608190230405.png" alt="" style="zoom:50%;" /></li><li><p>文件上传：使用 <code>fileInput()</code> 来载入文件</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  fileInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;upload&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608190451189.png" alt="" style="zoom:50%;" /></li></ol><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>在 UI 中创建的输出会被 server 函数的返回来填充，像 Input 一样，output 函数的第一个参数也是 ID，这个 output ID 也和 server 函数中是对应的。每一个前端（UI）的输出函数都和后端（server）的一个渲染函数（render）相对应；一般有3种类型的输出：文字，表格和图：</p><ol><li><p>文字：一般的文字用 <code>textOutput()</code> 来输出，代码和控制台的显示可以使用 <code>verbatimTextOutput()</code> 来输出</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  verbatimTextOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;code&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>text <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span> <br>    <span class="hljs-string">&quot;Hello friend!&quot;</span> <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>code <span class="hljs-operator">&lt;-</span> renderPrint<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span> <br>    summary<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span> <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608213354202.png"></p><p>当 <code>render</code> 函数中有多行代码的时候需要使用花括号（上面的例子只有一行代码，是不需要花括号的）；这两个 render 函数有一些区别：<code>renderText</code> 将结果合并成一个字符串，和 <code>textOutput</code>配对；而 <code>renderPrint</code> 则打印结果，就像在控制台看到的一样，和 <code>verbatimTextOutput</code> 配对；这两者的区别和 <code>cat</code>，<code>print</code>函数的区别类似：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608220708286.png"></p></li><li><p>表格：有两种方法可以将数据框以表格的形式展示出来</p><ul><li><code>tableOutput</code> 和 <code>renderTable</code> 以静态的方式展示数据，也就是一次性将数据全部展示</li><li><code>dataTableOutput</code> 和 <code>renderDataTable</code> 以动态的方式展示数据</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  tableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;static&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  dataTableOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dynamic&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>static <span class="hljs-operator">&lt;-</span> renderTable<span class="hljs-punctuation">(</span>head<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>dynamic <span class="hljs-operator">&lt;-</span> renderDataTable<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">,</span> options <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>pageLength <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608221259399.png"></p></li><li><p>图：使用 <code>plotOutput</code> 和 <code>renderPlot</code> 来展示 R 图像</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;plot&quot;</span><span class="hljs-punctuation">,</span> width <span class="hljs-operator">=</span> <span class="hljs-string">&quot;400px&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>plot <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span>plot<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608221435573.png" alt="" style="zoom:50%;" /></li></ol><h1 id="基础响应"><a href="#基础响应" class="headerlink" title="基础响应"></a>基础响应</h1><h2 id="server函数"><a href="#server函数" class="headerlink" title="server函数"></a>server函数</h2><p>server 函数有3个参数：<code>input</code> <code>output</code> 和 <code>session</code> 。</p><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>input 参数是一个类似列表的对象，含有从 UI 传入的所有数据，每一个数据都有一个唯一的 input ID，我们可以通过 input ID 来获取 input 对象中的数据（<code>input$ID</code>）；但是和列表不同，input 是只读的，也就是说如果我们<strong>在 server 函数中修改 input 对象就会报错</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>shiny<span class="hljs-punctuation">)</span><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;count&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Number of values&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  input<span class="hljs-operator">$</span>count <span class="hljs-operator">&lt;-</span> 10  <br><span class="hljs-punctuation">&#125;</span><br><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608230047209.png"></p><p>另外，<strong>只能在响应式的函数中（比如 render 函数和 reactive 函数）才可以读取 input 中的内容</strong>，例如，下面的 server 函数就会报错：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  message<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;The value of input$count is &quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>count<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608230518148.png"></p><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>output 和 input 类似，也是一个列表类似的对象，元素的名称由 output ID 来规定，主要的不同就是：<strong>output 是发送数据到 UI，而 input 是从 UI 接受数据</strong>；output 对象总是和 render 函数一起出现，render函数生成的结果储存到 output 对象元素中；和 input 类似，当将 非 render 返回的内容赋值给 output 或者在 server 函数中更改 output 的内容时会引发报错：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>greeting <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;Hello human&quot;</span><br><span class="hljs-punctuation">&#125;</span><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608231735673.png"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  message<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;The greeting is &quot;</span><span class="hljs-punctuation">,</span> output<span class="hljs-operator">$</span>greeting<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210608231820559.png"></p><h2 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h2><p>前面也讲过，响应式编程指的就是输出会随着输入的变化而更新，看一个例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  textInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;What&#x27;s your name?&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;greeting&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>greeting <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Hello &quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>name<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;!&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>每次输入不同的字符，输出都会相应的改变：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/shiny2.gif"></p><p>上面的 APP 能够工作（每次输入都会有响应的输出，而不是只输出一次）的原因在于：我们的代码并不是告诉 shiny 去创建一个字符并打印到屏幕上，而是告诉 shiny 怎样能够创建一个字符，具体运行的时间由 shiny 决定，这就涉及到命令式编程（imperative）和声明式编程（declarative）的区别：</p><ul><li>命令式编程就是发出特殊的指令并且立即执行</li><li>声明式编程就是告诉程序想要什么</li></ul><p>在 shiny 中的声明式编程另外的特征就是使得 app 具有惰性，也就是说只在需要的时候才运行相应的代码，比如下面的例子（greeting 写成了 greting）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  textInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;What&#x27;s your name?&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  textOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;greeting&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>greting <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Hello &quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>name<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;!&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>启动 app 并不会报错，但是没有输出：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/shiny3.gif"></p><p>这是因为没有组件需要 output 中的 greting，因此 <code>renderText</code> 并不会运行</p><h3 id="响应图"><a href="#响应图" class="headerlink" title="响应图"></a>响应图</h3><p>由于 shiny 的惰性机制，shiny中代码的执行并不像一般的 R 脚本一样（从前往后）；因此为了理解代码的执行顺序，我们需要检查<strong>响应图</strong>（reactive graph），其描述了<strong>输入和输出是如何联系到一起</strong>的，上面那个简单的 APP 的响应图如下：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/graph-1b.png"></p><p>这个图的意思就是当 name 改变的时候，greeting 就会被重新计算，也就是说 greeting 对于 name 有一个<strong>响应依赖</strong>（reactive dependency）</p><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>在 shiny app 中代码的执行顺序是取决于响应图的，而不是依赖于代码的前后关系，比如我们可以把上面 server 函数中的代码颠倒位置（加上了一个响应表达式，后面会讲）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>greeting <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span>string<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  string <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span>paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Hello &quot;</span><span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>name<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;!&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个 APP 并不会报错，因为他是惰性执行的，需要输出 greeting 就会先找 string，然后再执行string，会有一个沿着响应图的 “流动”。</p><h2 id="响应表达式"><a href="#响应表达式" class="headerlink" title="响应表达式"></a>响应表达式</h2><p>响应表达式是为了减少 shiny app 的计算，提高运行效率，精简 APP 的响应图，从而使得 APP 的可读性增强。响应表达式同时有着输入和输出的特征，一方面像输入一样，我们可以在输出中使用响应表达式的结果，另一方面像输出一样，响应表达式依赖输入来自动更新，下面的图可以有助于理解：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/producers-consumers.png"></p><p>将输入和响应表达式称为生产者（producer），将输出和相应表达式称为消费者（consumer），我们先来创建一个更复杂的 APP 来看使用响应表达式的优点。</p><p>现在想要比较两个分布（可视化和 t 检验）（在开发 APP 的时候将计算的代码与 APP 分离比较好）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs R">library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##多边形图</span><br>freqpoly <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">,</span> binwidth <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  df <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span><br>    x <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    g <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>x2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><br>  ggplot<span class="hljs-punctuation">(</span>df<span class="hljs-punctuation">,</span> aes<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> colour <span class="hljs-operator">=</span> g<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>    geom_freqpoly<span class="hljs-punctuation">(</span>binwidth <span class="hljs-operator">=</span> binwidth<span class="hljs-punctuation">,</span> size <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>    coord_cartesian<span class="hljs-punctuation">(</span>xlim <span class="hljs-operator">=</span> xlim<span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>     theme_bw<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">##t检验</span><br>t_test <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  test <span class="hljs-operator">&lt;-</span> t.test<span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">)</span><br>  <br>  <span class="hljs-comment"># use sprintf() to format t.test() results compactly</span><br>  sprintf<span class="hljs-punctuation">(</span><br>    <span class="hljs-string">&quot;p value: %0.3f\n[%0.2f, %0.2f]&quot;</span><span class="hljs-punctuation">,</span><br>    test<span class="hljs-operator">$</span>p.value<span class="hljs-punctuation">,</span> test<span class="hljs-operator">$</span>conf.int<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> test<span class="hljs-operator">$</span>conf.int<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以从两个不同的正态分布中抽样，然后比较两个样本分布的差异：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">x1 <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span> mean <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> sd <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><br>x2 <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span> mean <span class="hljs-operator">=</span> <span class="hljs-number">0.15</span><span class="hljs-punctuation">,</span> sd <span class="hljs-operator">=</span> <span class="hljs-number">0.9</span><span class="hljs-punctuation">)</span><br><br>freqpoly<span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">)</span><br>cat<span class="hljs-punctuation">(</span>t_test<span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210609223421109.png" alt="" style="zoom: 33%;" /><p>然后我们就可以写一个 shiny app 来根据用户的输入比较不同的分布。<code>fluidRow</code> 表示行布局，这里将页面分成两行，第一行又分成3列（<code>column</code>），前两列表示两个分布的参数，第3列表示多边形绘图的参数；然后第二行分成两列，两列的比例是 9:3 第一个比较宽的列用来画图，第二个比较窄的列用来输出 t 检验的内容。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs R">ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  fluidRow<span class="hljs-punctuation">(</span><br>    column<span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <br>           <span class="hljs-string">&quot;Distribution 1&quot;</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n1&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;mean1&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\u03BC&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;sd1&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\u03C3&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    column<span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <br>           <span class="hljs-string">&quot;Distribution 2&quot;</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n2&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;mean2&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\u03BC&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;sd2&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\u03C3&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    column<span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;Frequency polygon&quot;</span><span class="hljs-punctuation">,</span><br>           numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;binwidth&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Bin width&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">,</span> step <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>           sliderInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;range&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;range&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  fluidRow<span class="hljs-punctuation">(</span><br>    column<span class="hljs-punctuation">(</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span> plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    column<span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> verbatimTextOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;ttest&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  output<span class="hljs-operator">$</span>hist <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    x1 <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n1<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>mean1<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>sd1<span class="hljs-punctuation">)</span><br>    x2 <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n2<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>mean2<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>sd2<span class="hljs-punctuation">)</span><br>    <br>    freqpoly<span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">,</span> binwidth <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>binwidth<span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span><span class="hljs-built_in">range</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br>  <br>  output<span class="hljs-operator">$</span>ttest <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    x1 <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n1<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>mean1<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>sd1<span class="hljs-punctuation">)</span><br>    x2 <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n2<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>mean2<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>sd2<span class="hljs-punctuation">)</span><br>    <br>    t_test<span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>shinyApp<span class="hljs-punctuation">(</span>ui<span class="hljs-punctuation">,</span> server<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>启动 APP：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/shiny4.gif"></p><p>我们看一下上面的 server 函数中 t 检验的输出函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">x1 <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n1<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>mean1<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>sd1<span class="hljs-punctuation">)</span><br>x2 <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n2<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>mean2<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>sd2<span class="hljs-punctuation">)</span><br>   <br>t_test<span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>我们想象的运行方式应该是：当 n1，mean1 或者 sd1 改变的时候更新 x1，从而更新 t 检验的输出，当 n2，mean2 或者 sd2 改变的时候更新 x2，从而更新 t 检验的输出；但是实际情况是 shiny <strong>将输出当成整体看待</strong>，也就是 n1，mean1 ，sd1，n2，mean2 ，sd2 中有一个改变，需要更新 t 检验的输出时，会重新计算 x1，x2，用响应图来表示就是：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/case-study-1.png" alt="" style="zoom:33%;" /><p>这就造成了运算的低效以及增加了 APP 的复杂性，另外在这个例子中由于是随机抽样，虽然 x2 没有改变，但是如果我们重新运行 x2 得到的结果也会变化，这不是我们想要的，因此我们需要响应表达式。</p><p>我们可以使用响应表达式来简化上面的代码，注意到下面的代码出现了两次（画图和 t 检验）：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">x1 <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n1<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>mean1<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>sd1<span class="hljs-punctuation">)</span><br>x2 <span class="hljs-operator">&lt;-</span> rnorm<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n2<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>mean2<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>sd2<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>因此可以将这部分代码独立出来作为响应表达式，响应表达式就是将代码放到 <code>reactive</code> 中并赋给一个变量，然后我们就可以<strong>将这个变量视为函数来调用</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  x1 <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n1<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>mean1<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>sd1<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  x2 <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n2<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>mean2<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>sd2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br>  output<span class="hljs-operator">$</span>hist <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    freqpoly<span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> binwidth <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span>binwidth<span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> input<span class="hljs-operator">$</span><span class="hljs-built_in">range</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><br>  output<span class="hljs-operator">$</span>ttest <span class="hljs-operator">&lt;-</span> renderText<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    t_test<span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样就可以简化响应图：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/case-study-2.png" alt="" style="zoom:33%;" /><p>这个时候当只有其中一个分布的参数发生改变，比如 n1，mean1 或者 sd1，只会重新计算 x1，从而更新输出 ttest，x2 不会被重新计算，另外之前改变绘图参数时，x1 和 x2 都会被重新计算，而现在则不会出现这种情况，也就是说 x1 和 x2 变成了两个独立的模块，可以实现模块的重用（reuse），提高 APP  的效率。</p><p>有些时候我们并不想用户改变了输入之后马上就进行计算，因为有些计算可能比较耗时，耗资源，还有可能参数输入有误，需要检查，因此我们可以为 shiny app 加上一个“启动按钮”，只有点击这个按钮之后才进行计算。</p><p>将上面的 app 简化一下，并加入 <code>actionButton</code> 来添加按钮：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment">##一行两列</span><br>ui <span class="hljs-operator">&lt;-</span> fluidPage<span class="hljs-punctuation">(</span><br>  fluidRow<span class="hljs-punctuation">(</span><br>    column<span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <br>      numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;lambda1&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lambda1&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;lambda2&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lambda2&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      numericInput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> value <span class="hljs-operator">=</span> <span class="hljs-number">1e4</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>      actionButton<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;simulate&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Simulate!&quot;</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    column<span class="hljs-punctuation">(</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span> plotOutput<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;hist&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  x1 <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    input<span class="hljs-operator">$</span>simulate<br>    rpois<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>lambda1<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  x2 <span class="hljs-operator">&lt;-</span> reactive<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    input<span class="hljs-operator">$</span>simulate<br>    rpois<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>lambda2<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  output<span class="hljs-operator">$</span>hist <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    freqpoly<span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> binwidth <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">40</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>启动 app：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/shiny5.gif"></p><p>这个 app 产生的响应图如下：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/timing-button.png" alt="" style="zoom:33%;" /><p>可以看到，虽然我们点击按钮可以更新图，但是更改分布的参数也能更新图，而我们想要的是：更改参数并不更新图，只有在点击按钮之后图才会被更新；也就是说需要用 simulate 的依赖关系取代分布参数的依赖关系，而不是添加一个 simulate 的依赖关系。因此我们可以使用 <code>eventReactive</code> ，这个函数有两个参数，第一个参数指定输出的依赖，第二个参数指定计算的内容（多行代码使用花括号括起来），只有依赖改变的时候才会计算该内容：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs R">server <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>input<span class="hljs-punctuation">,</span> output<span class="hljs-punctuation">,</span> session<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  x1 <span class="hljs-operator">&lt;-</span> eventReactive<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>simulate<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    rpois<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>lambda1<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>  x2 <span class="hljs-operator">&lt;-</span> eventReactive<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>simulate<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    rpois<span class="hljs-punctuation">(</span>input<span class="hljs-operator">$</span>n<span class="hljs-punctuation">,</span> input<span class="hljs-operator">$</span>lambda2<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br><br>  output<span class="hljs-operator">$</span>hist <span class="hljs-operator">&lt;-</span> renderPlot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><br>    freqpoly<span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> x2<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> binwidth <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">40</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> res <span class="hljs-operator">=</span> <span class="hljs-number">96</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/shiny6.gif"></p><p>这个时候依赖关系就变成了（虚线表示只使用值，实线表示响应依赖关系）：</p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/timing-button-2.png" alt="" style="zoom:33%;" /><hr><p>使用 <code>reactlog</code> 包来绘制响应图：</p><p>在启动 app 之前运行 <code>reactlog::reactlog_enable()</code>，然后启动 APP ，关闭之后再运行<code>shiny::reactlogShow()</code> 或者在运行的时候按 <code>ctrl+F3</code> 来显示</p><hr>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拉格朗日对偶性</title>
    <link href="/2021/03/28/lagrange_duality/"/>
    <url>/2021/03/28/lagrange_duality/</url>
    
    <content type="html"><![CDATA[<p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_17-38-13.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_17-40-35_1.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_17-40-35_0.jpg"></p><p>参考：李航《统计学习方法》</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
      <category>数学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用NeoPredPipe预测新抗原</title>
    <link href="/2021/03/25/neo_pred/"/>
    <url>/2021/03/25/neo_pred/</url>
    
    <content type="html"><![CDATA[<p>使用NeoPredPipe预测新抗原</p><span id="more"></span><p><a href="https://github.com/MathOnco/NeoPredPipe">NeoPredPipe</a>是一个可以从单区域或多区域测序得到的VCF文件来预测新抗原的流程工具,使用的注释软件为<code>ANNOVAR</code>;另外该软件在预测新抗原之后还有一个筛选步骤,这个筛选步骤是依据<a href="https://www.nature.com/articles/nature24473">2017 Nature</a>提出的<code>Neoantigen recognition potential</code>来进行的</p><h2 id="安装ANNOVAR"><a href="#安装ANNOVAR" class="headerlink" title="安装ANNOVAR"></a>安装ANNOVAR</h2><p>在<a href="https://annovar.openbioinformatics.org/en/latest/user-guide/download/">官网</a> 下载ANNOVAR软件(需要填申请表,下载链接会发到邮箱), ANNOVAR是用perl写的,所以在安装之前需要先下载安装perl</p><p>下载解压后将路径添加到PATH中,向<code>~/.bashrc</code>中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/public/slst/home/wutao2/software/annovar:<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><p>使用<code>source ~/.bashrc </code>激活PATH</p><p>下载注释所需的参考文件,这里下载的是<code>hg38的refgene</code>：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210325085447536.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">perl annotate_variation.pl --downdb --webfrom annovar --buildver hg38 refGene ~/software/annovar/humandb/<br><span class="hljs-comment"># -downdb表明该命令的用途是下载数据库</span><br><span class="hljs-comment"># -buildver指定基因组版本</span><br><span class="hljs-comment"># -webform annovar 从annovar提供的镜像下载</span><br><span class="hljs-comment"># refGene代表的是下载的数据库的名字</span><br><span class="hljs-comment">#~/software/annovar/humandb/表示数据库存储的路径</span><br></code></pre></td></tr></table></figure><p>下载的文件为：<code>hg38_refGeneMrna.fa</code>,<code>hg38_refGene.txt</code>和<code>hg38_refGeneVersion.txt</code></p><h2 id="下载PeptideMatch和参考多肽序列"><a href="#下载PeptideMatch和参考多肽序列" class="headerlink" title="下载PeptideMatch和参考多肽序列"></a>下载PeptideMatch和参考多肽序列</h2><p> <code>PeptideMatch</code>可以用来将得到的新抗原肽与参考肽序列进行比对,进而检查预测的<code>neoantigen</code>是不是”新”的</p><p><code>PeptideMatch</code>的下载地址在<a href="https://research.bioinformatics.udel.edu/peptidematch/commandlinetool.jsp">here</a>(需要安装<code>java</code>)</p><p>另外还需要下载<code>fasta </code>格式的参考蛋白序列,数据在<a href="https://www.ebi.ac.uk/reference_proteomes/">here</a>,可以看到人的数据为<a href="ftp://ftp.ebi.ac.uk/pub/databases/reference_proteomes/QfO/Eukaryota/UP000005640_9606.fasta.gz">UP000005640 9606 HUMAN Homo sapiens</a> 从FTP下载得到<code>UP000005640_9606.fasta</code>文件,然后利用<code>PeptideMatch</code>处理得到<code>index</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar ~/software/PeptideMatchCMD_1.0.jar -a index -d UP000005640_9606.fasta -i UP000005640_9606_index<br><br>Command line options: -a index -d UP000005640_9606.fasta -i UP000005640_9606_index <br>Indexing to directory &quot;/slst/home/wutao2/protein_database/UP000005640_9606_index&quot; ...<br>Indexing &quot;UP000005640_9606.fasta&quot; ...<br>Indexing &quot;UP000005640_9606.fasta&quot; finished<br>Time used: 00 hours, 00 mins, 24.869 seconds<br></code></pre></td></tr></table></figure><h2 id="安装和配置NeoPredPipe"><a href="#安装和配置NeoPredPipe" class="headerlink" title="安装和配置NeoPredPipe"></a>安装和配置NeoPredPipe</h2><p>该工具使用的是<code>python2.7</code>,所以需要先创建一个<code>python2</code>的<code>conda</code>环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">mamba create -n python27 python=2.7.13<br><br><span class="hljs-comment">###安装依赖</span><br>pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span class="hljs-comment">##设置镜像</span><br>python -m pip install biopython==1.70<br></code></pre></td></tr></table></figure><p>然后下载安装该软件</p><p>首先克隆<code>github</code>仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/MathOnco/NeoPredPipe.git<br></code></pre></td></tr></table></figure><p>然后需要配置<code>usr_path.ini</code>文件,将原始的文件内容进行修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[annovar]<br>convert2annovar = /public/slst/home/wutao2/software/annovar/convert2annovar.pl<br>annotatevariation = /public/slst/home/wutao2/software/annovar/annotate_variation.pl<br>coding_change =/public/slst/home/wutao2/software/annovar/coding_change.pl<br>gene_table = /public/slst/home/wutao2/software/annovar/humandb/hg38_refGene.txt<br>gene_fasta =/public/slst/home/wutao2/software/annovar/humandb/hg38_refGeneMrna.fa<br>humandb =/public/slst/home/wutao2/software/annovar/humandb/<br>[netMHCpan]<br>netMHCpan = /public/slst/home/wutao2/software/netMHCpan-4.1/netMHCpan<br>[PeptideMatch]<br>peptidematch_jar = /public/slst/home/wutao2/software/PeptideMatchCMD_1.0.jar<br>reference_index = /public/slst/home/wutao2/protein_database/UP000005640_9606_index/<br>[blast]<br>blastp =/public/slst/home/wutao2/software/ncbi-blast-2.11.0+/bin/blastp<br></code></pre></td></tr></table></figure><p>测试安装是否成功:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs bash">python ./NeoPredPipe.py --<span class="hljs-built_in">help</span><br>usage: NeoPredPipe.py [-h] [-E EPITOPES [EPITOPES ...]] [-l] [-d] [-r] [-p]<br>                      [--manualproc] [--EL] [-I VCFDIR] [-H HLAFILE]<br>                      [-o OUTPUTDIR] [-n OUTNAME] [-pp]<br>                      [-c COLREGIONS [COLREGIONS ...]] [-a] [-m]<br>                      [-x EXPRESSION] [--expmulti] [-t]<br><br>optional arguments:<br>  -h, --<span class="hljs-built_in">help</span>            show this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  -E EPITOPES [EPITOPES ...], --epitopes EPITOPES [EPITOPES ...]<br>                        Epitope lengths <span class="hljs-keyword">for</span> predictions. Default: 8 9 10<br>  -l                    Specifies whether to delete the ANNOVAR <span class="hljs-built_in">log</span> file.<br>                        Default: True. Note: Use <span class="hljs-keyword">for</span> debugging.<br>  -d                    Specifies whether to delete intermediate files created<br>                        by program. Default: True. Note: Set flag to resume<br>                        job.<br>  -r, --cleanrun        Specify this alone with no other options to clean-up a<br>                        run. Be careful that you mean to <span class="hljs-keyword">do</span> this!!<br>  -p, --preponly        Prep files only without running neoantigen<br>                        predictions. The prediction step takes the most time.<br>  --manualproc          Process vcf files into annovar-input format manually,<br>                        to avoid issues from non <span class="hljs-string">&#x27;genotype-calling&#x27;</span> formats.<br>  --EL                  Flag to perform netMHCpan predictions with Eluted<br>                        Ligand option (without the -BA flag). Please note that<br>                        the output will NOT be compatible with downstream<br>                        Recognition Potential analysis. Default=False (BA<br>                        predictions)<br><br>Required arguments:<br>  -I VCFDIR             Input vcf file directory location. Example: -I<br>                        ./Example/input_vcfs/<br>  -H HLAFILE            HLA file <span class="hljs-keyword">for</span> vcf patient samples OR directory with<br>                        patient-specific directories from running POLYSOLVER<br>                        (see Readme).<br>  -o OUTPUTDIR          Output Directory Path<br>  -n OUTNAME            Name of the output file <span class="hljs-keyword">for</span> neoantigen predictions<br><br>Post Processing Options:<br>  -pp                   Flag to perform post processing. Default=True.<br>  -c COLREGIONS [COLREGIONS ...]<br>                        Columns of regions within vcf that are not normal<br>                        within a multiregion vcf file after the format field.<br>                        Example: 0 is normal <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span> samples, tumor are the<br>                        other columns. Program can handle different number of<br>                        regions per vcf file.<br>  -a                    Flag to not filter neoantigen predictions and keep all<br>                        regardless of prediction value.<br>  -m                    Specifies whether to perform check <span class="hljs-keyword">if</span> predicted<br>                        epitopes match any normal peptide. If <span class="hljs-built_in">set</span> to True,<br>                        output is added as a column to neoantigens file.<br>                        Requires PeptideMatch specified <span class="hljs-keyword">in</span> usr_paths.ini.<br>                        Default=False<br>  -x EXPRESSION, --expression EXPRESSION<br>                        RNAseq expression quantification file(s), <span class="hljs-keyword">if</span><br>                        specified, expression information is added to output<br>                        tables.<br>  --expmulti            Flag to specify <span class="hljs-keyword">if</span> expression file(s) has information<br>                        on multiple regions <span class="hljs-keyword">in</span> multiple columns.<br>                        Default=False.<br>  -t                    Flag to turn off a neoantigen burden summary table.<br>                        Default=True.<br></code></pre></td></tr></table></figure><p>该软件的输入文件有：</p><ul><li><p>VCF文件：可以是单区域测序也可以是多区域测序</p></li><li><p>hla文件：hla文件的格式如下</p><table><thead><tr><th>Patient</th><th>HLA-A_1</th><th>HLA-A_2</th><th>HLA-B_1</th><th>HLA-B_2</th><th>HLA-C_1</th><th>HLA-C_2</th></tr></thead><tbody><tr><td>test1</td><td>hla_a_31_01_02</td><td>hla_a_02_01_80</td><td>hla_b_40_01_02</td><td>hla_b_50_01_01</td><td>hla_c_03_04_20</td><td>hla_c_06_02_01_02</td></tr><tr><td>test2</td><td>hla_a_01_01_01_01</td><td>NA</td><td>hla_b_07_02_01</td><td>NA</td><td>hla_c_01_02_01</td><td>NA</td></tr></tbody></table><p>  Patient名称要和vcf文件的名称相匹配；制表符分割；可以不要列名,但是顺序要匹配；当两个位点预测的HLA是一样的时候(A1和A2,B1和B2,C1和C2),需要用NA代替</p></li><li><p>表达文件：在-x参数后指定,制表符分割,第一列是gene id第二列是表达值;支持的id有：Ensembl gene ID, Ensembl transcript ID, RefSeq transcript ID, UCSC transcript ID</p></li></ul><p>使用测试数据进行测试(该软件提供的测试数据的参考基因组是<code>hg19</code>,因此将上面配置文件中的<code>gene_table</code>和<code>gene_fasta</code>改成<code>hg19</code>的)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">NeoPredPipe.py --preponly -I ~/software/NeoPredPipe/Example/input_vcfs -H   ~/software/NeoPredPipe/Example/HLAtypes/hlatypes.txt -o ./test/ -n TestRun -c 1 2 -E 8 9 10<br><br>INFO: Annovar reference files of build hg19 were given, using this build <span class="hljs-keyword">for</span> all analysis.<br>INFO: Begin.<br>INFO: Running convert2annovar.py on /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test1.vcf<br>INFO: ANNOVAR VCF Conversion Process complete /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test1.vcf<br>INFO: Running annotate_variation.pl on ./test/avready/test1.avinput<br>INFO: ANNOVAR annotation Process complete <span class="hljs-keyword">for</span> ./test/avready/test1.avinput<br>INFO: Running coding_change.pl on ./test/avannotated/test1.avannotated.exonic_variant_function<br>INFO: Coding predictions complete <span class="hljs-keyword">for</span> ./test/avannotated/test1.avannotated.exonic_variant_function<br>INFO: Input files prepared and completed <span class="hljs-keyword">for</span> test1<br>INFO: Running convert2annovar.py on /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test2.vcf<br>INFO: ANNOVAR VCF Conversion Process complete /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test2.vcf<br>INFO: Running annotate_variation.pl on ./test/avready/test2.avinput<br>INFO: ANNOVAR annotation Process complete <span class="hljs-keyword">for</span> ./test/avready/test2.avinput<br>INFO: Running coding_change.pl on ./test/avannotated/test2.avannotated.exonic_variant_function<br>INFO: Coding predictions complete <span class="hljs-keyword">for</span> ./test/avannotated/test2.avannotated.exonic_variant_function<br>INFO: Input files prepared and completed <span class="hljs-keyword">for</span> test2<br>INFO: Complete.<br>INFO: Preprocessed intermediary files are <span class="hljs-keyword">in</span> avready, avannotated and fastaFiles. If you wish to perform epitope prediction, run the pipeline again without the --preponly flag, intermediary files will be automatically detected.<br></code></pre></td></tr></table></figure><p>这一步是准备输入文件的,也就是运行<code>ANNOVAR</code>将变异进行注释得到多肽序列(<code>convert2annovar.py</code>,<code>annotate_variation.pl</code>,和<code>coding_change.pl </code>)</p><p>也可以直接预测得到结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">NeoPredPipe.py -I ~/software/NeoPredPipe/Example/input_vcfs -H ~/software/NeoPredPipe/Example/HLAtypes/hlatypes.txt -o ./test_results/ -n TestRun -c 1 2 -E 8 9 10<br><br>INFO: Annovar reference files of build hg19 were given, using this build <span class="hljs-keyword">for</span> all analysis.<br>INFO: Begin.<br>INFO: Running convert2annovar.py on /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test1.vcf<br>INFO: ANNOVAR VCF Conversion Process complete /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test1.vcf<br>INFO: Running annotate_variation.pl on ./test_results/avready/test1.avinput<br>INFO: ANNOVAR annotation Process complete <span class="hljs-keyword">for</span> ./test_results/avready/test1.avinput<br>INFO: Running coding_change.pl on ./test_results/avannotated/test1.avannotated.exonic_variant_function<br>INFO: Coding predictions complete <span class="hljs-keyword">for</span> ./test_results/avannotated/test1.avannotated.exonic_variant_function<br>INFO: Predicting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 9.Indels<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 9<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 8<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 8.Indels<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 10<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 10.Indels<br>INFO: Predictions complete <span class="hljs-keyword">for</span> test1 on epitopes of length 10.Indels<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Object size of neoantigens: 48472 Kb<br>Processing genotype information according to A (list of alleles) field.<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Object size of neoantigens: 3768 Kb<br>Processing genotype information according to A (list of alleles) field.<br>INFO: Running convert2annovar.py on /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test2.vcf<br>INFO: ANNOVAR VCF Conversion Process complete /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test2.vcf<br>INFO: Running annotate_variation.pl on ./test_results/avready/test2.avinput<br>INFO: ANNOVAR annotation Process complete <span class="hljs-keyword">for</span> ./test_results/avready/test2.avinput<br>INFO: Running coding_change.pl on ./test_results/avannotated/test2.avannotated.exonic_variant_function<br>INFO: Coding predictions complete <span class="hljs-keyword">for</span> ./test_results/avannotated/test2.avannotated.exonic_variant_function<br>INFO: Predicting neoantigens <span class="hljs-keyword">for</span> test2<br>INFO: Skipping Sample! No peptides to predict <span class="hljs-keyword">for</span> test2<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test2 on epitopes of length 9<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test2 on epitopes of length 8<br>INFO: Skipping Sample! No peptides to predict <span class="hljs-keyword">for</span> test2<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test2 on epitopes of length 10<br>INFO: Skipping Sample! No peptides to predict <span class="hljs-keyword">for</span> test2<br>INFO: Predictions complete <span class="hljs-keyword">for</span> test2 on epitopes of length 10.Indels<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test2<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test2<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test2<br>INFO: Object size of neoantigens: 26744 Kb<br>Processing genotype information according to A (list of alleles) field.<br>INFO: Summary Tables Complete.<br>INFO: Summary Tables Complete.<br>INFO: Complete<br></code></pre></td></tr></table></figure><p>输出文件是没有表头的,每列的信息为：</p><blockquote><p>The primary output file of neoantigens has the following format, separated by tabulators (columns 12-26 are taken from <a href="http://www.cbs.dtu.dk/services/NetMHCpan/output.php">here</a>):</p><ul><li><strong>Sample</strong>: vcf filename&#x2F;patient identifier</li><li><strong>R1</strong>: Region 1 of a multiregion sample, binary for presence (1) or absence (0), regions above the number of regions in the sample (for varying number of biopsies) are indicated by -1. Can be <em>n</em> numbers of regions. <em>Only present in multiregion samples</em>.</li><li><strong>R2</strong>: Region 2 of a multiregion sample, binary for presence (1) or absence (0), regions above the number of regions in the sample (for varying number of biopsies) are indicated by -1. Can be <em>n</em> numbers of regions. <em>Only present in multiregion samples</em>.</li><li><strong>R3</strong>: Region 3 of a multiregion sample, binary for presence (1) or absence (0), regions above the number of regions in the sample (for varying number of biopsies) are indicated by -1. Can be <em>n</em> numbers of regions. <em>Only present in multiregion samples</em>.</li><li><strong>Line</strong>: Line number from the *.avready file (same as the vcf) to identify mutation yielding corresponding neoantigen.</li><li><strong>chr</strong>: Chromosome of mutation</li><li><strong>allelepos</strong>: Position of the mutation</li><li><strong>ref</strong>: Reference base at the position</li><li><strong>alt</strong>: Alternative base at the location</li><li><strong>GeneName:RefID</strong>: Gene name and RefSeq ID separated by a colon. Multiple genes&#x2F;RefSeq IDs separated by a comma.</li><li><strong>Expression</strong>: Expression value of the gene. Expression values for multiple regions (<em>if using the -expmulti flag</em>) are comma-separated. NA for genes that are not found in the corresponding expression file, or for samples without expression information. <em>Only present if the -x flag is used</em>.</li><li><strong>pos</strong>: Residue number (starting from 0)</li><li><strong>hla</strong>: Molecule&#x2F;allele name</li><li><strong>peptide</strong>: Amino acid sequence of the potential ligand</li><li><strong>core</strong>: The minimal 9 amino acid binding core directly in contact with the MHC</li><li><strong>Of</strong>: The starting position of the Core within the Peptide (if &gt; 0, the method predicts a N-terminal protrusion)</li><li><strong>Gp</strong>: Position of the deletion, if any.</li><li><strong>Gl</strong>: Length of the deletion.</li><li><strong>Ip</strong>: Position of the insertions, if any.</li><li><strong>Il</strong>: Length of the insertion.</li><li><strong>Icore</strong>: Interaction core. This is the sequence of the binding core including eventual insertions of deletions.</li><li><strong>Identity</strong>: Protein identifier, i.e. the name of the Fasta entry.</li><li><strong>Score</strong>: The raw prediction score</li><li><strong>Binding Affinity</strong>: Predicted binding affinity in nanoMolar units.</li><li><strong>Rank</strong>: Rank of the predicted affinity compared to a set of random natural peptides. This measure is not affected by inherent bias of certain molecules towards higher or lower mean predicted affinities. Strong binders are defined as having %rank&lt;0.5, and weak binders with %rank&lt;2. We advise to select candidate binders based on %Rank rather than nM Affinity</li><li><strong>Candidate</strong>: Symbol (&lt;&#x3D;) used to denote a Strong or Week Binder in BindLevel</li><li><strong>BindLevel</strong>: (SB: strong binder, WB: weak binder). The peptide will be identified as a strong binder if the % Rank is below the specified threshold for the strong binders, by default 0.5%. The peptide will be identified as a weak binder if the % Rank is above the threshold of the strong binders but below the specified threshold for the weak binders, by default 2%.</li><li><strong>Novelty</strong>: Binary value for indicating if the epitope is novel (1) or exists in the reference proteome (0). <em>Only present if -m flag is set to perform peptide matching in postprocessing</em>.</li></ul></blockquote><h2 id="Recognition-Potential"><a href="#Recognition-Potential" class="headerlink" title="Recognition Potential"></a>Recognition Potential</h2><p>在预测新抗原之后,该工具还可以根据2017 nature文章的方法计算neoantigen recognition potential</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p><code>-c</code>参数的含义：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210324145740028.png"><code>-c</code>参数表示从<code>FORMAT</code>列往后第几列是需要关注的(一般是tumor列);在单区域测序的样本中可以不指定</p></li><li><p>如果有表达数据,表达数据的<code>gene id</code>如果是<code>Ensembl gene ID</code>(也就是<code>ENSG</code>开头),要去掉版本号(小数点后的数字),因为该软件进行ID转化时使用的文件<a href="https://github.com/MathOnco/NeoPredPipe/blob/master/mart_table_hg38_unique.txt">mart_table_hg38_unique.txt</a> 时不带版本号的</p></li><li><p>HLA的格式需要是像HLA-A03:01这样的</p></li><li><p>输出的列：注意netMHCpan的版本<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210326124059938.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>生物信息</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Snakemake搭建流程</title>
    <link href="/2021/03/19/snakemake/"/>
    <url>/2021/03/19/snakemake/</url>
    
    <content type="html"><![CDATA[<p>学习<code>snakemake</code> 官方文档</p><span id="more"></span><p>创建一个<code>snakemake_tutorial</code>目录,并下载示例数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/snakemake/snakemake-tutorial-data/archive/v5.24.1.tar.gz<br><br>tar --wildcards -xf snakemake-tutorial-data-5.24.1.tar.gz --strip 1 <span class="hljs-string">&quot;*/data&quot;</span> <span class="hljs-string">&quot;*/environment.yaml&quot;</span><br><span class="hljs-comment">##--wildcards 根据通配符来提取压缩文件,这里是只提取data文件夹和environment.yaml文件</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">(snakemake-tutorial) -bash-<span class="hljs-number">4.2</span>$ tree .<br>.<br>├── data<br>│   ├── genome<span class="hljs-selector-class">.fa</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.amb</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.ann</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.bwt</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.fai</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.pac</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.sa</span><br>│   └── samples<br>│       ├── A<span class="hljs-selector-class">.fastq</span><br>│       ├── B<span class="hljs-selector-class">.fastq</span><br>│       └── C<span class="hljs-selector-class">.fastq</span><br>├── environment<span class="hljs-selector-class">.yaml</span><br>└── snakemake-tutorial-data-<span class="hljs-number">5.24</span>.<span class="hljs-number">1</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span><br><br><span class="hljs-number">2</span> directories, <span class="hljs-number">12</span> files<br></code></pre></td></tr></table></figure><p>其中<code>environment.yaml</code>文件是用来创建所需的<code>conda</code>环境:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> environment.yaml<br><br>channels:<br>  - bioconda<br>  - conda-forge<br>dependencies:<br>  - snakemake-minimal &gt;=5.24.1<br>  - jinja2 =2.11<br>  - networkx =2.5<br>  - matplotlib =3.3<br>  - graphviz =2.42<br>  - bcftools =1.9<br>  - samtools =1.9<br>  - bwa =0.7<br>  - pysam =0.15<br></code></pre></td></tr></table></figure><p>使用该配置文件创建<code>snakemake-tutorial</code>的环境(使用mamba代替conda来加速下载)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mamba <span class="hljs-built_in">env</span> create --name snakemake-tutorial --file environment.yaml<br><br>conda activate snakemake-tutorial<br></code></pre></td></tr></table></figure><h2 id="基础：以一个生物信息学流程为例"><a href="#基础：以一个生物信息学流程为例" class="headerlink" title="基础：以一个生物信息学流程为例"></a>基础：以一个生物信息学流程为例</h2><p>一个<code>Snakemake</code>流程由<code>Snakefile</code>文件中的一系列规则(rules)来创建；这些规则通过说明<strong>如何从输入文件得到输出文件</strong>来将流程分解成多个小的步骤,<code>Snakemake</code>会通过匹配文件名来自动的决定规则间的依赖关系</p><p>接下来以一个生物信息学的流程为例来学习<code>Snakemake</code>流程的搭建</p><p>这个流程做的工作为：将测序的reads匹配到参考基因组上,并且检测匹配上的reads的变异</p><h3 id="第一步：Mapping-reads"><a href="#第一步：Mapping-reads" class="headerlink" title="第一步：Mapping reads"></a>第一步：Mapping reads</h3><p>第一个<code>Snakemake</code>规则将给定样本的测序reads回帖到给定的参考基因组上去,使用的工具为<a href="http://bio-bwa.sourceforge.net/">bwa的mem算法</a></p><p>创建一个<code>Snakefile</code>文件,写上下面的规则：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">rule bwa_map:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        <span class="hljs-string">&quot;data/samples/A.fastq&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;mapped_reads/A.bam&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;bwa mem &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>一个<code>Snakemake</code>规则有一个名字,这里是<code>bwa_map</code>;还有一些指令,上面的例子里是<code>input</code>, <code>output</code>和<code>shell</code>;<code>input</code>和<code>output</code>指令中是一系列的文件名(python 字符串),指定了输入和输出文件(如果有多个文件,用逗号分割);<code>shell</code>指令也是一个字符串,表示需要执行的shell命令,在shell命令字符串中可以使用花括号来指代规则中的其他部分,比如这里使用<code>&#123;input&#125;</code>来指代<code>input</code>指令中的内容,使用<code>&#123;output&#125;</code>指代<code>output</code>指令中的内容;上面的<code>input</code>里面有两个字符串,这时<code>snakemake</code>替代<code>&#123;input&#125;</code>时会用空格分隔开两个输入文件 </p><p>接下来可以执行这个流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake --cores 1 <br><br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Using shell: /usr/bin/bash<br>Provided cores: 1 (use --cores to define parallelism)<br>Rules claiming more threads will be scaled down.<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1<br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Sat Mar 20 18:17:43 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/A.fastq<br>    output: mapped_reads/A.bam<br>    jobid: 0<br><br>[M::bwa_idx_load_from_disk] <span class="hljs-built_in">read</span> 0 ALT contigs<br>[M::process] <span class="hljs-built_in">read</span> 25000 sequences (2525000 bp)...<br>[M::mem_process_seqs] Processed 25000 reads <span class="hljs-keyword">in</span> 1.267 CPU sec, 1.267 real sec<br>[main] Version: 0.7.17-r1188<br>[main] CMD: bwa mem data/genome.fa data/samples/A.fastq<br>[main] Real time: 1.757 sec; CPU: 1.318 sec<br>[Sat Mar 20 18:17:44 2021]<br>Finished job 0.<br>1 of 1 steps (100%) <span class="hljs-keyword">done</span><br>Complete <span class="hljs-built_in">log</span>: /slst/home/wutao2/snakemake_tutorial/.snakemake/log/2021-03-20T181738.569944.snakemake.log<br><br>tree .<br>.<br>├── data<br>│   ├── genome.fa<br>│   ├── genome.fa.amb<br>│   ├── genome.fa.ann<br>│   ├── genome.fa.bwt<br>│   ├── genome.fa.fai<br>│   ├── genome.fa.pac<br>│   ├── genome.fa.sa<br>│   └── samples<br>│       ├── A.fastq<br>│       ├── B.fastq<br>│       └── C.fastq<br>├── environment.yaml<br>├── mapped_reads<br>│   └── A.bam<br>├── Snakefile<br>└── snakemake-tutorial-data-5.24.1.tar.gz<br></code></pre></td></tr></table></figure><p>也可以使用<code>-n</code>或者<code>--dry-run</code>参数使snakemake显示执行的”计划“(没有真正的执行流程);使用<code>-p</code>参数来打印需要执行的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake -np<br><br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1<br><br>[Sat Mar 20 18:25:11 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/A.fastq<br>    output: mapped_reads/A.bam<br>    jobid: 0<br><br>bwa mem data/genome.fa data/samples/A.fastq | samtools view -Sb - &gt; mapped_reads/A.bam<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1<br>This was a dry-run (flag -n). The order of <span class="hljs-built_in">jobs</span> does not reflect the order of execution.<br></code></pre></td></tr></table></figure><h3 id="第二步：使规则适用的范围更广"><a href="#第二步：使规则适用的范围更广" class="headerlink" title="第二步：使规则适用的范围更广"></a>第二步：使规则适用的范围更广</h3><p>上面的规则只能对单个样本<code>data/samples/A.fastq</code>适用,在snakemake中可以使用通配符(wildcard)来扩展规则的适用范围：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">rule bwa_map:<br>    input:<br>        <span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        <span class="hljs-string">&quot;data/samples/&#123;sample&#125;.fastq&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;bwa mem &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><code>Snakemake</code>会将<code>output</code>中的<code>&#123;sample&#125;</code>替换成一个合适的值,并且将<code>input</code>中的<code>&#123;sample&#125;</code>也替换成同样的值,我们在运行流程就需要指定输出文件的名称(这样snakemake才知道如何替换通配符)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake -np mapped_reads/B.bam<br><br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1<br><br>[Sat Mar 20 18:50:12 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/B.fastq<br>    output: mapped_reads/B.bam<br>    jobid: 0<br>    wildcards: sample=B<br><br>bwa mem data/genome.fa data/samples/B.fastq | samtools view -Sb - &gt; mapped_reads/B.bam<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1<br>This was a dry-run (flag -n). The order of <span class="hljs-built_in">jobs</span> does not reflect the order of execution.<br></code></pre></td></tr></table></figure><p>这个时候snakemake就将<code>&#123;sample&#125;</code>替换成<code>B</code>了<br>也可以同时生成多个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake -np mapped_reads/A.bam mapped_reads/B.bam<br><span class="hljs-comment">##或snakemake -np mapped_reads/&#123;A,B&#125;.bam</span><br><br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        2       bwa_map<br>        2<br><br>[Sat Mar 20 18:52:00 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/B.fastq<br>    output: mapped_reads/B.bam<br>    jobid: 0<br>    wildcards: sample=B<br><br>bwa mem data/genome.fa data/samples/B.fastq | samtools view -Sb - &gt; mapped_reads/B.bam<br><br>[Sat Mar 20 18:52:00 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/A.fastq<br>    output: mapped_reads/A.bam<br>    jobid: 1<br>    wildcards: sample=A<br><br>bwa mem data/genome.fa data/samples/A.fastq | samtools view -Sb - &gt; mapped_reads/A.bam<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        2       bwa_map<br>        2<br>This was a dry-run (flag -n). The order of <span class="hljs-built_in">jobs</span> does not reflect the order of execution.<br></code></pre></td></tr></table></figure><h3 id="第三步：Sorting-read-alignments"><a href="#第三步：Sorting-read-alignments" class="headerlink" title="第三步：Sorting read alignments"></a>第三步：Sorting read alignments</h3><p>接下来需要使用<code>samtools</code>中的<code>sort</code>命令来对BAM文件进行排序,将下面的规则写到刚才的<code>bwa_map</code>规则的下面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">rule samtools_sort:<br>    input:<br>        <span class="hljs-string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;_sorted.bam&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;samtools sort -T sorted_reads/&#123;wildcards.sample&#125; -O bam &#123;input&#125; &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>这个规则的输入文件是刚才<code>bwa_map</code>规则的输出文件;这里面需要注意的是在shell命令中可以通过<code>wildcards</code>对象来获取不同通配符的值(即wildcards对象的属性)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake -np sorted_reads/B_sorted.bam<br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1       samtools_sort<br>        2<br><br>[Sun Mar 21 16:06:07 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/B.fastq<br>    output: mapped_reads/B.bam<br>    jobid: 1<br>    wildcards: sample=B<br><br>bwa mem data/genome.fa data/samples/B.fastq | samtools view -Sb - &gt; mapped_reads/B.bam<br><br>[Sun Mar 21 16:06:07 2021]<br>rule samtools_sort:<br>    input: mapped_reads/B.bam<br>    output: sorted_reads/B_sorted.bam<br>    jobid: 0<br>    wildcards: sample=B<br><br>samtools <span class="hljs-built_in">sort</span> -T sorted_reads/B -O bam mapped_reads/B.bam &gt; sorted_reads/B_sorted.bam<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1       samtools_sort<br>        2<br>This was a dry-run (flag -n). The order of <span class="hljs-built_in">jobs</span> does not reflect the order of execution.<br></code></pre></td></tr></table></figure><p>可以看到当指定输出为<code>B_sorted.bam</code>的时候,会先运行bwa得到<code>B.bam</code>然后再运行samtools得到<code>B_sorted.bam</code></p><h3 id="第四步：Indexing-read-alignments"><a href="#第四步：Indexing-read-alignments" class="headerlink" title="第四步：Indexing read alignments"></a>第四步：Indexing read alignments</h3><p>接下来我们需要使用<code>samtools</code>对排序的read alignments建立索引,将下面的规则补充到之前的规则下面:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">rule samtools_index:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;_sorted.bam&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;.bam.bai&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;samtools index &#123;input&#125; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>snakemake会将不同的任务串成有向无环图(DAG),可以使用下面的命令来可视化流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake --dag sorted_reads/&#123;A,B&#125;.bam.bai | dot -Tsvg &gt; dag.svg<br></code></pre></td></tr></table></figure><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/dag.svg"></p></center><p>DAG图的节点表示任务,边表示任务间的依赖关系,在节点中还会展示通配符的值(如<code>sample:B</code>);另外不需要运行的规则就用虚线边框表示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##运行第一个规则</span><br>snakemake --cores 1 mapped_reads/A.bam<br><br><span class="hljs-comment">##再创建DAG</span><br>snakemake --dag sorted_reads/&#123;A,B&#125;.bam.bai | dot -Tsvg &gt; dag1.svg<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/dag1.svg"></p><h3 id="第五步：Calling-genomic-variants"><a href="#第五步：Calling-genomic-variants" class="headerlink" title="第五步：Calling genomic variants"></a>第五步：Calling genomic variants</h3><p>接下来需要检测reads中的变异信息,用的工具为：<code>samtools</code>和<code>bcftools</code></p><p>需要注意的是<code>snakemake</code>是通过目标文件(输出)来反推输入文件的,上面几个规则中的输出和输入共用一个通配符(sample);而这个步骤的输入是所有的bam及其索引,输出是一个文件(vcf)，所以需要在input指令下将所有的输入文件都写出来(因为此时snakemake无法通过输出推断输入)</p><p>snakemake提供了一个<code>expand</code>函数,可以方便的将文件名收集起来,就不需要一个一个写了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SAMPLES = [<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>]<br><br>expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;.bam&quot;</span>, sample=SAMPLES)<br><br></code></pre></td></tr></table></figure><p>将<code>SAMPLE</code>列表中的内容取代前面的通配符,也可以提供多个通配符,得到的结果是多个通配符的乘积：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;.&#123;replicate&#125;.bam&quot;</span>, sample=SAMPLES, replicate=[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br><br><span class="hljs-comment">###结果是：</span><br>[<span class="hljs-string">&quot;sorted_reads/A.0.bam&quot;</span>, <span class="hljs-string">&quot;sorted_reads/A.1.bam&quot;</span>, <span class="hljs-string">&quot;sorted_reads/B.0.bam&quot;</span>, <span class="hljs-string">&quot;sorted_reads/B.1.bam&quot;</span>]<br></code></pre></td></tr></table></figure><p>因此需要在<code>Snakefile</code>的最前面定义<code>SAMPLES</code>,然后将下面的规则放到之前的规则下面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">SAMPLES = [<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>]<br><br>...<br><br><br>rule bcftools_call:<br>    <span class="hljs-built_in">input</span>:<br>        fa=<span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        bam=expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;_sorted.bam&quot;</span>, sample=SAMPLES),<br>        bai=expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;.bam.bai&quot;</span>, sample=SAMPLES)<br>    output:<br>        <span class="hljs-string">&quot;calls/all.vcf&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;samtools mpileup -g -f &#123;input.fa&#125; &#123;input.bam&#125; | &quot;</span><br>        <span class="hljs-string">&quot;bcftools call -mv - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>在shell命令中可以通过名称或者位置来指定输入或输出文件：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210321171336544.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210321171348704.png"></p><p>另外一个需要注意的是：如果命令太长,可以分多行写,但是在每行的命令的末尾要留一个空格:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##如果不留空格,拼起来会出错</span><br><span class="hljs-string">&quot;samtools mpileup&quot;</span><br><span class="hljs-string">&quot;-g -f &#123;input.fa&#125; &#123;input.bam&#125;&quot;</span><br><br><span class="hljs-string">&quot;samtools mpileup-g -f &#123;input.fa&#125; &#123;input.bam&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>现在再来看一下DAG图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake --dag calls/all.vcf | dot -Tsvg &gt; dag2.svg<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/dag2.svg"></p><h3 id="第六步：Using-custom-scripts"><a href="#第六步：Using-custom-scripts" class="headerlink" title="第六步：Using custom scripts"></a>第六步：Using custom scripts</h3><p>在Snakemake中还可以引用外部的脚本(python&#x2F;R)来完成一系列的工作;需要在<code>script</code>指令中指定脚本的路径:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">rule plot_quals:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;calls/all.vcf&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;plots/quals.svg&quot;</span><br>    script:<br>        <span class="hljs-string">&quot;scripts/plot-quals.py&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##plot-quals.py</span><br><span class="hljs-keyword">import</span> matplotlib<br>matplotlib.use(<span class="hljs-string">&quot;Agg&quot;</span>)<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> pysam <span class="hljs-keyword">import</span> VariantFile<br><br>quals = [record.qual <span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> VariantFile(snakemake.<span class="hljs-built_in">input</span>[<span class="hljs-number">0</span>])]<br>plt.hist(quals)<br><br>plt.savefig(snakemake.output[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>上面的规则和python脚本最终产生一个变异检测质量值的直方图</p><p>规则的不同部分(input,output,wildcards等)在外部脚本中都是<code>snakemake</code>对象的属性,比如<code>snakemake.input</code>就是含有输入文件名的列表</p><p>同样在R代码中,<code>snakemake</code>是作为S4对象存在的,S4类的属性是R列表,因此我们可以通过类似<code>snakemake@input[[1]]</code>的形式来获取第一个输入文件</p><h3 id="第七步：Adding-a-target-rule"><a href="#第七步：Adding-a-target-rule" class="headerlink" title="第七步：Adding a target rule"></a>第七步：Adding a target rule</h3><p>前面都是通过命令行来指定目标文件(snakemake是通过目标文件逐步反推),如果没有指定目标文件则认为第一个规则的output是目标文件,因此我们可以在第一个规则中不加output,只包含input,并且这个input是整个流程的最终输出文件,这样我们就可以无需指定输出文件了(如果输出有很多,这样就不方便)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##将下面的规则放到第一个</span><br>rule <span class="hljs-built_in">all</span>:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;plots/quals.svg&quot;</span><br></code></pre></td></tr></table></figure><p>可以看看整个流程的DAG图：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/dag3.svg"></p><p>接下来运行整个流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake --cores 1<br></code></pre></td></tr></table></figure><p>得到最终的结果为变异检测质量值的直方图：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/quals.svg"></p><p>注意：snakemake只在以下几种情况下才会执行任务(jobs)<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210322103940316.png"></p><p>但是<code>Snakemake</code>也提供了强制运行的选项<code>--forcerun</code>,后面接输出文件或者规则(<code>--forceall</code>可以强制运行整个流程)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake --cores 1 --forcerun samtools_sort<br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Using shell: /usr/bin/bash<br>Provided cores: 1 (use --cores to define parallelism)<br>Rules claiming more threads will be scaled down.<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       att<br>        1       bcftools_call<br>        1       plot_quals<br>        2       samtools_index<br>        2       samtools_sort<br>        7<br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:47 2021]<br>rule samtools_sort:<br>    input: mapped_reads/A.bam<br>    output: sorted_reads/A_sorted.bam<br>    jobid: 3<br>    wildcards: sample=A<br><br>[Mon Mar 22 10:29:48 2021]<br>Finished job 3.<br>1 of 7 steps (14%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:48 2021]<br>rule samtools_index:<br>    input: sorted_reads/A_sorted.bam<br>    output: sorted_reads/A.bam.bai<br>    jobid: 7<br>    wildcards: sample=A<br><br>[Mon Mar 22 10:29:48 2021]<br>Finished job 7.<br>2 of 7 steps (29%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:48 2021]<br>rule samtools_sort:<br>    input: mapped_reads/B.bam<br>    output: sorted_reads/B_sorted.bam<br>    jobid: 5<br>    wildcards: sample=B<br><br>[Mon Mar 22 10:29:48 2021]<br>Finished job 5.<br>3 of 7 steps (43%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:48 2021]<br>rule samtools_index:<br>    input: sorted_reads/B_sorted.bam<br>    output: sorted_reads/B.bam.bai<br>    jobid: 8<br>    wildcards: sample=B<br><br>[Mon Mar 22 10:29:48 2021]<br>Finished job 8.<br>4 of 7 steps (57%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:48 2021]<br>rule bcftools_call:<br>    input: data/genome.fa, sorted_reads/A_sorted.bam, sorted_reads/B_sorted.bam, sorted_reads/A.bam.bai, sorted_reads/B.bam.bai<br>    output: calls/all.vcf<br>    jobid: 2<br><br>[warning] samtools mpileup option `g` is functional, but deprecated. Please switch to using bcftools mpileup <span class="hljs-keyword">in</span> future.<br>[mpileup] 2 samples <span class="hljs-keyword">in</span> 2 input files<br>Note: none of --samples-file, --ploidy or --ploidy-file given, assuming all sites are diploid<br>[Mon Mar 22 10:29:49 2021]<br>Finished job 2.<br>5 of 7 steps (71%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:49 2021]<br>rule plot_quals:<br>    input: calls/all.vcf<br>    output: plots/quals.svg<br>    jobid: 1<br><br>[Mon Mar 22 10:30:00 2021]<br>Finished job 1.<br>6 of 7 steps (86%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:30:00 2021]<br>localrule att:<br>    input: plots/quals.svg<br>    jobid: 0<br><br>[Mon Mar 22 10:30:00 2021]<br>Finished job 0.<br>7 of 7 steps (100%) <span class="hljs-keyword">done</span><br>Complete <span class="hljs-built_in">log</span>: /slst/home/wutao2/snakemake_tutorial/.snakemake/log/2021-03-22T102940.208336.snakemake.log<br></code></pre></td></tr></table></figure><h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><h3 id="第一步：指定使用的线程数"><a href="#第一步：指定使用的线程数" class="headerlink" title="第一步：指定使用的线程数"></a>第一步：指定使用的线程数</h3><p>可以在规则中使用<code>threads</code>指令来指定需要的线程数(实际用到的可以小于等于指定的线程数),比如可以把bwa的线程指定为8个(如果不指定,默认是1)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">rule bwa_map:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        <span class="hljs-string">&quot;data/samples/&#123;sample&#125;.fastq&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br>    threads: <span class="hljs-number">8</span><br>    shell:<br>        <span class="hljs-string">&quot;bwa mem -t &#123;threads&#125; &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>在实际运行中用到的线程数由Snakemake来控制,保证同时运行的所有任务的总线程数不超过给定的总线程数,可以通过snakemake的参数<code>--cores</code>来指定给定的线程数(也就是说使用的线程数不超过<code>--cores</code>指定的数量),如果<code>--cores</code>后面没有数字则使用所有可用的核</p><h3 id="第二步：配置文件"><a href="#第二步：配置文件" class="headerlink" title="第二步：配置文件"></a>第二步：配置文件</h3><p>在前面的步骤中是通过一个python列表来指定需要考虑的样本(<code>SAMPLES = [&quot;A&quot;, &quot;B&quot;]</code>),但是如果想要流程能够更好的适应新的数据,我们可以使用配置文件,配置文件的格式可以是<code>JSON</code>或者<code>YAML</code>;在流程中使用<code>configfile</code>指令来指定配置文件</p><p><code>snakemake</code>会将配置文件读入,并将其内容存到名称为<code>config</code>的<strong>字典变量</strong>中</p><p>现在可以将之前的<code>SAMPLES</code>移除,加上配置文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###配置文件config.yaml</span><br>samples:<br>    A: data/samples/A.fastq<br>    B: data/samples/B.fastq<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###将下面的指令放到Snakefile的开头</span><br>configfile: <span class="hljs-string">&quot;config.yaml&quot;</span><br><br><span class="hljs-comment">###将expand函数改写</span><br>rule bcftools_call:<br>    <span class="hljs-built_in">input</span>:<br>        fa=<span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        bam=expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;_sorted.bam&quot;</span>, sample=config[<span class="hljs-string">&quot;samples&quot;</span>]),<span class="hljs-comment">##config是一个字典</span><br>        bai=expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;.bam.bai&quot;</span>, sample=config[<span class="hljs-string">&quot;samples&quot;</span>])<br>    output:<br>        <span class="hljs-string">&quot;calls/all.vcf&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;samtools mpileup -g -f &#123;input.fa&#125; &#123;input.bam&#125; | &quot;</span><br>        <span class="hljs-string">&quot;bcftools call -mv - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="第三步：输入函数"><a href="#第三步：输入函数" class="headerlink" title="第三步：输入函数"></a>第三步：输入函数</h3><p>上面通过<code>expand</code>和配置文件改写了<code>bcftools_call</code>规则,注意到配置文件中也有<code>fastq</code>文件的路径,我们可不可以也将<code>bwa_map</code>进行类似的改写呢？</p><p>首先需要了解Snakemake流程执行的步骤：</p><ul><li>初始化(initialization)：在流程内定义的文件被解析,所有的规则被实例化(<code>expand</code>函数就是在此时被执行)</li><li>DAG：通过填充通配符和根据输出文件匹配输入文件来构建任务的有向无环图</li><li>scheduling：根据可获得的资源来执行任务</li></ul><p>这两个规则的区别在于：<code>bcftools_call</code>不需要根据输出文件来推断输入文件(因为该步骤输入的是所有文件),而<code>bwa_map</code>规则需要根据输出来推断输入文件(比如,如果job的输出是B.bam,那么输入必须是B.fastq),因此无法在<code>bwa_map</code>中使用<code>expand</code>函数</p><p>但是我们可以使用<strong>input function</strong>来完成根据输出匹配输入的任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">rule bwa_map:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        <span class="hljs-keyword">lambda</span> wildcards: config[<span class="hljs-string">&quot;samples&quot;</span>][wildcards.sample]<br>    output:<br>        <span class="hljs-string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br>    threads: <span class="hljs-number">8</span><br>    shell:<br>        <span class="hljs-string">&quot;bwa mem -t &#123;threads&#125; &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>上面所展示的<code>input function</code>是lambda函数(为了方便所以使用lambda,一般的函数都可以的),参数是<code>wildcards</code>对象,通过<code>sample</code>属性获取output中匹配的通配符(比如output中是A.bam,wildcards.sample得到的就是”A”,<code>config[&quot;samples&quot;][wildcards.sample]</code>得到的就是配置文件中A的路径)</p><h3 id="第四步：规则参数"><a href="#第四步：规则参数" class="headerlink" title="第四步：规则参数"></a>第四步：规则参数</h3><p>有时候shell命令中的参数并不是静态的,比如要根据输入的样本名调整某些参数的值;snakemake提供了<code>params</code>指令</p>]]></content>
    
    
    <categories>
      
      <category>生物信息</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>感知机模型</title>
    <link href="/2021/03/14/perceptron/"/>
    <url>/2021/03/14/perceptron/</url>
    
    <content type="html"><![CDATA[<p>感知机模型</p><span id="more"></span><p>机器学习方法都是由3个要素构成的：</p><ul><li>模型：包含输入空间,输出空间和假设空间(包含所有可能的决策函数)</li><li>策略：按照什么样的准则选择最优的模型(损失函数)</li><li>算法：如何找到最优模型(最优化问题)</li></ul><h2 id="感知机模型"><a href="#感知机模型" class="headerlink" title="感知机模型"></a>感知机模型</h2><p>输入空间：$X \in R^n$ (n维实数)<br>输出空间：$Y &#x3D; {+1,-1}$<br>假设空间：</p><p>$$<br>f(x)&#x3D;sign(w\cdot x+b)&#x3D;\left{<br>\begin{matrix}<br>+1, w\cdot x+b\ge0\<br>-1, w\cdot x+b&lt;0 \<br>\end{matrix}<br>\right.<br>$$<br>注意：$w,x,b$都是向量,$w\cdot b$也就是向量的内积,比如在二维空间中：</p><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF1_01.png"></p></center><p>就是要找一个直线$w_1x_1+w_2x_2+b&#x3D;0$将点分成两类(这条直线更一般的名称叫做超平面)；另外感知机模型对数据的假设是:数据是线性可分的;比如下图所示的数据所对应的就不是一个线性可分的输入空间</p><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/Rd9f79181b6f2972e0795a5815e8dc3a0.png"></p></center><h2 id="学习策略"><a href="#学习策略" class="headerlink" title="学习策略"></a>学习策略</h2><p>感知机的损失函数为：<strong>误分类点到超平面S的总距离</strong>,通过最小化这个距离得到最优的超平面(超平面的参数就是w和b)</p><p>首先我们需要一些基础知识：</p><h3 id="超平面的法向量"><a href="#超平面的法向量" class="headerlink" title="超平面的法向量"></a>超平面的法向量</h3><p>对于一个超平面S ($w\cdot x+b$),其法向量为$w$:</p><p>设超平面S上有两个点：A点$(x_A)$和B点$(x_B)$有：</p><p>$$<br>\left{ \begin{matrix}<br>wx_A+b&#x3D;0\<br>wx_B+b&#x3D;0 \<br>\end{matrix}\right. \<br>\Rightarrow w(x_A-x_B)&#x3D;0<br>$$<br>因为$x_A-x_B$是超平面S上的一个向量,两个向量的乘积为0,所以$w$垂直于S,即$w$为超平面S的法向量</p><h3 id="点到超平面的距离"><a href="#点到超平面的距离" class="headerlink" title="点到超平面的距离"></a>点到超平面的距离</h3><p>输入空间中任一点$x_0$到超平面S ($w\cdot x+b$)的距离d为：</p><p>$$<br>d &#x3D; \frac{1}{||w||}|w\cdot x_0+b|<br>$$</p><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210314141051985.png"></p></center><p>设点$x_0$在S上投影为$x_1$,则$w\cdot x_1+b&#x3D;0$;由于向量$\vec {x_1x_0}$与S的法向量$w$平行,所以：</p><p>$$<br>|\vec w\cdot \vec{x_1x_0}|&#x3D;||\vec w||×||\vec{x_1x_0}||cos&lt;\vec w,\vec{x_1x_0}&gt;&#x3D;||\vec w||×||\vec{x_1x_0}||&#x3D;||\vec w||d<br>$$<br>对于$\vec w\cdot \vec{x_1x_0}$又有(假设$w$和$x$都是N维的向量,上面的图只是一个3维的例子)：</p><p>$$<br>\vec w\cdot \vec{x_1x_0}&#x3D;w^1 (x_1^1-x_0^1)+w^2(x_1^2-x_0^2)+…+w^N(x_1^N-x_0^N) \ &#x3D;w^1x_1^1+w^2x_1^2+…+w^Nx_1^N-(w^1x_0^1+w^2x_0^2+…+w^Nx_0^N) \ &#x3D;-b-(w^1x_0^1+w^2x_0^2+…+w^Nx_0^N)<br>$$<br>因此由上面两个式子,可以得出：</p><p>$$<br>||w||d&#x3D;|-b-(w^1x_0^1+w^2x_0^2+…+w^Nx_0^N)|&#x3D;|w\cdot x_0 +b|\<br>\Rightarrow d&#x3D;\frac{|w\cdot x_0 +b|}{||w||}<br>$$</p><p>回到感知机模型中,因为误分类点$w\cdot x+b$和类标签的符号是相反的(当$w\cdot x+b$大于0时,误分类的类标签是-1;当$w\cdot x+b$小于0时,误分类的类标签是+1),所以误分类点到超平面S的距离也可以表示为:</p><p>$$<br>d_i &#x3D; \frac{-y_i(w\cdot x_i+b)}{||w||}<br>$$<br>误分类点的总距离为：</p><p>$$<br>-\frac{1}{||w||}\sum_{x_i\in M}y_i(w\cdot x_i+b),M为误分类点的集合<br>$$<br>所以感知机的损失函数为：</p><p>$$<br>L(w,b)&#x3D;-\sum_{x_i\in M}y_i(w\cdot x_i+b)<br>$$</p><h2 id="学习算法"><a href="#学习算法" class="headerlink" title="学习算法"></a>学习算法</h2><p>可以使用梯度下降或者随机梯度下降的方法来求解使损失函数最小化时的参数$w,b$</p><p>损失函数$L(w,b)$的梯度为：</p><p>$$<br>\nabla_{w}L(w,b)&#x3D;\frac{\partial L(w,b)}{\partial w}&#x3D;-\sum_{x_i\in M}y_ix_i \<br>\nabla_{b}L(w,b)&#x3D;\frac{\partial L(w,b)}{\partial b}&#x3D;-\sum_{x_i\in M}y_i<br>$$</p><p>所以按照梯度下降法,对每个误分类点更新w,b:</p><p>$$<br>\left{ \begin{matrix}<br>w :&#x3D; w+\eta\sum_iy_ix_i\<br>b :&#x3D; b+\eta\sum_iy_i\<br>\end{matrix}\right. \<br>$$<br>$\eta$是学习率;在实际应用中一般选择使用随机梯度下降:</p><p>$$<br>\left{ \begin{matrix}<br>w :&#x3D; w+\eta y_ix_i\<br>b :&#x3D; b+\eta y_i\<br>\end{matrix}\right. \<br>$$<br>感知机的学习算法(随机梯度下降法)的步骤为:</p><ul><li>选取初值$w_0,b_0$</li><li>在训练集中选取数据$(x_i,y_i)$</li><li>如果选取的点是误分类点,也就是说$y_i(w\cdot x_i+b)\le0$,按照上式对参数进行更新</li><li>转至第二步,直到训练集中没有误分类点</li></ul><h2 id="算法收敛性"><a href="#算法收敛性" class="headerlink" title="算法收敛性"></a>算法收敛性</h2><p>证明如下的定理：</p><p>设训练数据集$T&#x3D;{(x_1,y_1),(x_2,y_2),…,(x_N,y_N)}$是线性可分的：</p><ol><li>存在满足条件$||\hat w_{opt}||$&#x3D;1的超平面$\hat w_{opt} \cdot \hat x&#x3D;w_{opt}\cdot x+b_{opt}&#x3D;0$将数据集完全正确分开,且存在$r&gt;0$,对所有的$i&#x3D;1,2,..,N$有：<br>$$<br>y_i(\hat w_{opt} \cdot \hat x)&#x3D;y_i(w_{opt}\cdot x+b_{opt})\ge r<br>$$</li><li>令$R&#x3D;\max||\hat x_i||$,则感知机在训练集上的误分类次数k满足不等式:<br>$$<br>k \le (\frac{R}{r})^2<br>$$</li></ol><p>首先为了方便,将b放进了w和x中,也就是:<br>$$<br>\hat w&#x3D;(w^T,b)^T \ ,\hat x &#x3D; (x^T,1)^T<br>$$<br>先证明1：<br>由于数据集是线性可分的,肯定存在一个超平面将数据集完全分开,即对$i&#x3D;1,2,…,N$,都有：<br>$$<br>y_i(\hat w_{opt} \cdot \hat x)&gt;0<br>$$</p><p>因此只需要r为$y_i(\hat w_{opt} \cdot \hat x)$的最小值,就会有：<br>$$<br>y_i(\hat w_{opt} \cdot \hat x) \ge r<br>$$</p><p>再来看2：      </p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-14_16-08-55_00.png"></p><p>也就是说误分类的次数是有上界的,经过有限次搜索肯定是可以找到将训练集完全分开的超平面</p><h2 id="Sci-kit-learn"><a href="#Sci-kit-learn" class="headerlink" title="Sci-kit learn"></a>Sci-kit learn</h2><p>scikit learn 中的Perceptron类和SGDClassifier类都可以进行感知机模型的计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs &#123;python&#125;">from sklearn.datasets import load_digits<br>from sklearn.linear_model import Perceptron<br><br>X, y = load_digits(return_X_y=True)<br>clf = Perceptron(random_state=0)<br>##也可以使用SGDClassifier(loss=&quot;perceptron&quot;, eta0=1, learning_rate=&quot;constant&quot;, penalty=None)<br>clf.fit(X, y)<br>clf.score(X, y)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【hands on ML Ch6】-决策树模型</title>
    <link href="/2021/03/04/hands_on_ML_ch6/"/>
    <url>/2021/03/04/hands_on_ML_ch6/</url>
    
    <content type="html"><![CDATA[<p>hands on ML 第六章，决策树模型</p><span id="more"></span><p>决策树是一种多能的机器学习算法，可以处理分类，回归，甚至多输出问题(见第二章)</p><h2 id="训练和可视化决策树"><a href="#训练和可视化决策树" class="headerlink" title="训练和可视化决策树"></a>训练和可视化决策树</h2><p>首先在iris数据集上训练一个决策树模型并可视化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_iris<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> tree<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><br>iris = load_iris()<br>x = iris.data[:,<span class="hljs-number">2</span>:]<span class="hljs-comment">##取petal length和width变量</span><br>y = iris.target<br><br>tree_clf = DecisionTreeClassifier(max_depth=<span class="hljs-number">2</span>)<br>tree_clf.fit(x,y)<br>&gt;&gt; DecisionTreeClassifier(max_depth=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>Graphviz是一个开源的图（Graph）可视化软件，采用抽象的图和网络来表示结构化的信息。在数据科学领域，Graphviz的一个用途就是实现决策树可视化,因此我们需要使用<code>export_graphviz()</code>将树结构导出为一个<code>.dot</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> export_graphviz<br><span class="hljs-keyword">from</span> graphviz <span class="hljs-keyword">import</span> Source<br><br>export_graphviz(<br>  tree_clf,<br>  out_file=<span class="hljs-string">&quot;../test/iris_tree.dot&quot;</span>,<br>  feature_names=iris.feature_names[<span class="hljs-number">2</span>:],<br>  class_names=iris.target_names,<br>  rounded=<span class="hljs-literal">True</span>,<br>  filled=<span class="hljs-literal">True</span>,<br>  special_characters=<span class="hljs-literal">True</span><br>)<br></code></pre></td></tr></table></figure><p>然后需要下载<a href="https://www.graphviz.org/download/">Graphviz</a>,打开powershell：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">dot <span class="hljs-operator">-</span>Tpng iris_tree.dot <span class="hljs-operator">-</span>o iris_tree.png<br></code></pre></td></tr></table></figure><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/iris_tree.png"></p></center><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>决策树可以用来处理分类和回归任务，主要思想就是：根据特征对数据集进行划分，决策树的学习分成3个步骤：</p><ul><li>特征选择</li><li>生成决策树</li><li>决策树的修剪(正则化)</li></ul><h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><p>特征选择的就是选择对训练数据有较好分类能力的特征，也就是说通过某个特征将数据集分成若干子集，这些子集中数据的一致性(纯度)应该比原来的数据集要高；在决策树中使用熵来表示这个纯度</p><p>对离散型随机变量X，其概率分布为：</p><p>$$<br>P(X&#x3D;x_i)&#x3D;p_i,i&#x3D;1,2,…,n<br>$$</p><p>则X的熵定义为：<br>$$<br>H(X) &#x3D; - \sum_{i&#x3D;1}^np_ilog_2(p_i)<br>$$<br>设有随机变量X,Y,其联合概率分布为：</p><p>$$<br>P(X&#x3D;x_i,Y&#x3D;y_j)&#x3D;p_{ij},i&#x3D;1,2,…,n ;j&#x3D;1,2,…,m<br>$$</p><p>条件熵为在X给定的条件下Y的条件概率分布的熵对X的数学期望:</p><p>$$<br>H(Y|X) &#x3D; \sum_{i&#x3D;1}^np_iH(Y|X&#x3D;x_i)\<br>p_i&#x3D;P(X&#x3D;x_i),i&#x3D;1,2,…,n<br>$$<br>由实际数据计算得到的熵和条件熵叫做经验熵和经验条件熵；设数据集为D,根据特征A将数据集分成若干个子集<em>D</em><sub><em>i</em></sub>,那么D的经验熵(<em>H</em>(<em>D</em>))和给定A的条件下D的经验条件熵(<em>H</em>(<em>D</em>|<em>A</em>))为:</p><p>$$<br>H(D)&#x3D;-\sum_{k&#x3D;1}^K\frac{|D_k|}{|D|}log_2\frac{|D_k|}{|D|},\<br>H(D|A)&#x3D;\sum_{i&#x3D;1}^n\frac{|D_i|}{|D|}H(D_i)&#x3D;\sum_{i&#x3D;1}^n\frac{|D_i|}{|D|}\sum_{k&#x3D;1}^K\frac{|D_{ik}|}{|D_i|}log_2\frac{|D_{ik}|}{|D_i|}\<br>$$<br>|<em>D</em><sub><em>k</em></sub>|表示k类样本的数目,|<em>D</em>|是总的样本数,|<em>D</em><sub><em>ik</em></sub>|表示在第i个子集中k类样本的数目,|<em>D</em><sub><em>i</em></sub>|表示第i个子集的样本数。</p><p>一个好的分类特征应该是：根据这个特征划分的数据集后的熵应该比原来数据集的熵要低,因此定义信息增益<em>g</em>(<em>D</em>, <em>A</em>)为：</p><p>$$<br>g(D,A)&#x3D;H(D)-H(D|A)<br>$$</p><p>所以根据信息增益来选择特征：<strong>对训练集(或子集)计算每个特征的信息增益，选择信息增益最大的特征来划分数据集</strong>。</p><p>信息增益计算的是绝对值，因此对取值较多的特征有倾向性(取值越多,加和也越大),所以将信息增益除以该特征的经验熵来标准化信息增益，得到信息增益比:</p><p>$$<br>g_k(D,A)&#x3D;\frac{g(D,A)}{H_A(D)},H_A(D)&#x3D;-\sum_{i&#x3D;1}^n\frac{|D_i|}{|D|}log_2\frac{|D_i|}{|D|}<br>$$<br>n表示特征A可以取值的个数(A的水平)</p><h3 id="生成决策树"><a href="#生成决策树" class="headerlink" title="生成决策树"></a>生成决策树</h3><p>生成决策树的算法有3种：ID3,C4.5和CRAT，CART算法比较特殊，后面单独讲；前两种算法都只可以用来分类，CART既可以分类也可以回归。</p><p>ID3算法在决策树的各个节点上应用信息增益法则选择特征，递归构建决策树：从根节点开始，对节点计算所有可能的特征的信息增益，选择信息增益最大的特征作为节点的特征，由该特征的不同取值建立子节点，再对子节点递归地调用以上方法构建决策树，直到所有特征的信息增益都很小或者没有特征可以选择为止；C4.5算法和ID3的区别在于使用信息增益比来选择特征。</p><h3 id="决策树的剪枝"><a href="#决策树的剪枝" class="headerlink" title="决策树的剪枝"></a>决策树的剪枝</h3><p>在生成决策树的过程中是以尽可能的准确分类为标准，但是这样往往会出现过拟合的情况，为了避免过拟合，需要限制模型的自由度，即对模型进行正则化约束，在决策树模型里面就是剪枝。</p><p>决策树的剪枝是通过最小化损失函数来实现；决策树学习的损失函数为：</p><p>$$<br>C_{\alpha}(T)&#x3D;\sum_{t&#x3D;1}^{|T|}N_tH_t(T)+\alpha|T|\<br>H_t(T)&#x3D;-\sum_k^K\frac{N_{tk}}{N_t}log2\frac{N_{tk}}{N_t}<br>$$<br>其中t表示叶节点,|T|是叶节点个数,<em>N</em><sub><em>t</em></sub>是t叶节点的样本数,<em>N</em><sub><em>tk</em></sub>是t叶节点中k类样本的个数</p><p>将损失函数的第一项记作<em>C</em>(<em>T</em>),</p><p>$$<br>C(T)&#x3D;\sum_{t&#x3D;1}^{|T|}N_tH_t(T)&#x3D;-\sum_{t&#x3D;1}^{|T|}N_t\sum_k^K\frac{N_{tk}}{N_t}log2\frac{N_{tk}}{N_t}&#x3D;-\sum_{t&#x3D;1}^{|T|}\sum_k^KN_{tk}log2\frac{N_{tk}}{N_t}<br>$$</p><p>损失函数可以写成：</p><p>$$<br>C_{\alpha}(T)&#x3D;C(T)+\alpha|T|<br>$$</p><p><em>C</em>(<em>T</em>)表示模型对数据的拟合程度(如果完全拟合，那么经验熵就为为0)，|T|表示模型的复杂度(叶子节点的多少)，<em>α</em>的作用就是在两者间平衡(对模型复杂度有个惩罚)。</p><p>决策树剪枝的过程为：从下往上进行回缩，如果回缩前的模型为<em>T</em><sub><em>A</em></sub>,回缩后的模型为<em>T</em><sub><em>B</em></sub>:</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210307192547332.png"></p><p>如果有：</p><p>$$<br>C_{\alpha}(T_B) \leq C_{\alpha}(T_A)<br>$$</p><p>那么就进行回缩剪枝，将父节点变为叶节点</p><h3 id="CART算法"><a href="#CART算法" class="headerlink" title="CART算法"></a>CART算法</h3><p>CART的全称为classification and regression tree,可以用来处理<strong>分类和回归</strong>任务，得到的决策树是二叉树，内部节点的取值只有是和否,左分支为“是”的分支,右分支为“否”的分支。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>CART算法使用<strong>基尼指数</strong>作为最优特征的选择依据，而不是信息增益；在分类问题中，假设有K个类，样本点属于第k类的概率为<em>p</em><sub><em>k</em></sub>,那么概率分布的基尼指数为：</p><p>$$<br>Gini(p)&#x3D;\sum_{k&#x3D;1}^Kp_k(1-p_k)&#x3D;1-\sum_{k&#x3D;1}^Kp_k^2<br>$$<br>对于给定的样本集合D，基尼指数为：<br>$$<br>Gini(D)&#x3D;1-\sum_{k&#x3D;1}^K(\frac{|C_k|}{|D|})^2<br>$$</p><p>如果数据集D可以根据特征A的某个值分割成D1和D2两个部分，则在特征A的条件下，集合D的基尼指数为：</p><p>$$<br>Gini(D,A)&#x3D;\frac{|C_1|}{|D|}Gini(D_1)+\frac{|C_2|}{|D|}Gini(D_2)<br>$$<br>因此CART算法构建决策树的过程为：在所有可能的特征A和其切分点a的组合中选择使上式最小的A和a将数据分成两个子集，生成两个子节点，再在子节点上重复这个过程，直到满足停止条件。</p><p>以最开始的鸢尾花决策树为例：决策树做预测比较简单：就是从根节点(最上面)往下进行判断；如果现在有一个iris花,从根节点开始(深度为0)，花瓣长度是否小于2.45,如果小于2.45就是往左走，此时左边的节点没有子节点，这样的节点叫做叶子节点，然后就可以判断该花是setosa类</p><p>从上图可以看到每个节点都有一些属性(gini,samples,value,class)：</p><ul><li>samples属性：该节点所应用的样本数量，比如在深度为1的右侧节点中有100个训练实例的花瓣长度大于2.45，在这100个里面又有54个实例的花瓣宽度小于1.75(深度为2的左节点)</li><li>value属性：该节点中每个类型有多少训练实例；比如最底部的右侧节点的value表示46个实例中有0个Iris<br>setosa,1个 Iris versicolor,和45个Iris virginica</li><li>gini属性：该节点的不纯度，如果该节点所有的实例都是一个类，那么gini就是0，表示纯的；比如深度为1的左节点，全部是setosa</li></ul><p>该决策树的决策边界可以用下图来表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210306162213679.png"></p><h5 id="估计类的概率"><a href="#估计类的概率" class="headerlink" title="估计类的概率"></a>估计类的概率</h5><p>决策树也可以估计一个实例属于特定类的概率 ：首先找到这个实例所属的叶子节点，然后返回该节点中各类的训练实例所占的比例作为这个实例属于各个类的概率；比如现在有一个鸢尾花花瓣长5cm宽1.5cm，那么它所属的叶子节点为深度为2的左节点，所以决策树输出概率为:0%是setosa,90.7%(49&#x2F;54)是versicolor,9.3%(5&#x2F;54)是virginica，如果让决策树来预测这个花的类别，会输出class1 (versicolor):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">tree_clf.predict_proba([[<span class="hljs-number">5</span>,<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([[<span class="hljs-number">0.</span>        , <span class="hljs-number">0.90740741</span>, <span class="hljs-number">0.09259259</span>]])<br>tree_clf.predict([[<span class="hljs-number">5</span>,<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>需要注意的是：落在某个叶子节点中的所有实例的输出概率都是一样的(上面决策边界图里面同一个长方形里面的点)。</p><h4 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h4><p>决策树的回归也是根据某个特征来划分数据集，但是和分类不同，在划分的子集上并不是对应着一个类，而是对应着一个输出，可以用下图来理解：</p><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210307202506758.png"></p></center><p>图中黑色的竖线代表划分(上图只有一个特征)，有颜色的横线表示每次划分后在相应的子集中的输出。</p><p>假设已将输入空间(数据集)划分成M个单元(子集)：<em>R</em><sub>1</sub>, <em>R</em><sub>2</sub>, …, <em>R</em><sub><em>M</em></sub>,在<em>R</em><sub><em>m</em></sub>单元上有一个固定的输出值<em>C</em><sub><em>m</em></sub>,所以回归树模型可以表示为：<br>$$<br>f(x)&#x3D;\sum_{m&#x3D;1}^MC_mI(x\in R_m)<br>$$<br>I函数表示x在<em>R</em><sub><em>m</em></sub>里面的时候为1，否则为0。<br>在每个单元上可以使用平方误差来表示回归树的预测误差，通过最小化平方误差，我们就可以求解出每个单元上的最优输出值<em>Ĉ</em><sub><em>m</em></sub>:</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-07_20-40-32.jpg"></p><p>$$<br>\hat C_m&#x3D;ave(y_i|x_i\in R_m)<br>$$<br>每个子集上的最优输出有了，那么现在的问题就是怎样进行划分？<br>对于特征j和其分割点s，(j,s)对输入空间进行划分得到两个子空间<em>R</em><sub>1</sub>, <em>R</em><sub>2</sub>：<br>$$<br>R_1(j,s)&#x3D;{x|x^{j}\leq s};R_2(j,s)&#x3D;{x|x^{j}&gt; s}<br>$$<br>目的就是找到最优的(j,s)使得：<br>$$<br>min_{j,s}[min_{c_1}\sum_{x_i\in R_1(j,s)}(y_i-c_1)^2+min_{c_2}\sum_{x_i\in R_2(j,s)}(y_i-c_2)^2]<br>$$<br>通常的做法为：遍历特征j，对固定的切分特征j扫描切分点s(如果是连续的需要离散化)，然后选择使上式最小的(j,s)组合，按照(j,s)组合对数据集进行划分，接着继续对子集重复该步骤，直到满足停止条件。</p><p>在Scikit-Learn里面可以使用<code>DecisionTreeRegressor</code>类进行回归树的构建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># Quadratic training set + noise</span><br>np.random.seed(<span class="hljs-number">42</span>)<br>m = <span class="hljs-number">200</span><br>X = np.random.rand(m, <span class="hljs-number">1</span>)<br>y = <span class="hljs-number">4</span> * (X - <span class="hljs-number">0.5</span>) ** <span class="hljs-number">2</span><br>y = y + np.random.randn(m, <span class="hljs-number">1</span>) / <span class="hljs-number">10</span><br><br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeRegressor<br><br>tree_reg = DecisionTreeRegressor(max_depth=<span class="hljs-number">2</span>, random_state=<span class="hljs-number">42</span>)<br>tree_reg.fit(X, y)<br>&gt;&gt; DecisionTreeRegressor(max_depth=<span class="hljs-number">2</span>, random_state=<span class="hljs-number">42</span>)<br>export_graphviz(<br>        tree_reg,<br>        out_file=<span class="hljs-string">&quot;../test/iris_tree1.dot&quot;</span>,<br>        feature_names=[<span class="hljs-string">&quot;x1&quot;</span>],<br>        rounded=<span class="hljs-literal">True</span>,<br>        filled=<span class="hljs-literal">True</span><br>    )<br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">dot <span class="hljs-operator">-</span>Tpng iris_tree1.dot <span class="hljs-operator">-</span>o iris_tree2.png<br></code></pre></td></tr></table></figure><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/iris_tree2.png"></p></center><h4 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h4><p>CART算法的剪枝和一般的决策树剪枝不同，CART算法对决策树的每一个内部节点都进行剪枝，生成一个子决策树的序列；假设树的结构如下：</p><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210308223511075.png"></p></center><p>设整体树为<em>T</em><sub>0</sub>,对<em>T</em><sub>0</sub>的任意内部节点t,可以计算以t为单节点的树的损失函数<em>C</em><sub><em>α</em></sub>(<em>t</em>)和以t为根节点的子树的损失函数<em>C</em><sub><em>α</em></sub>(<em>T</em><sub><em>t</em></sub>);当<em>α</em>充分小的时候<em>C</em><sub><em>α</em></sub>(<em>T</em><sub><em>t</em></sub>) &lt; <em>C</em><sub><em>α</em></sub>(<em>t</em>)(对树的复杂度惩罚较小,较复杂的树能够较好的拟合数据，因此损失函数较低)，当<em>α</em>增大到某一个值的时候,两者相等，也就是单节点的树和子树的损失函数值相等,但是单节点的树比较简单,因此取单节点树,即对树进行剪枝。</p><p>因此对<em>T</em><sub>0</sub>中的每个内部节点都可以计算一个两者相等时的<em>α</em>值：</p><p>$$<br>g(t) &#x3D; \frac{C(t)-C_\alpha(T_t)}{|T_t|-1}<br>$$<br>表示剪枝后整体损失函数减少的程度。</p><p>剪枝过程就为：对<em>T</em><sub>0</sub>的每个内部节点计算<em>g</em>(<em>t</em><sub><em>i</em></sub>),剪去有最小<em>g</em>(<em>t</em><sub><em>i</em></sub>)的内部节点的子节点，得到子树<em>T</em><sub><em>i</em></sub>,然后继续对<em>T</em><sub><em>i</em></sub>进行剪枝,直到根节点；对于得到的子树序列<em>T</em><sub>1</sub>, <em>T</em><sub>2</sub>, …, <em>T</em><sub><em>n</em></sub>通过交叉验证的方法选择最优的子树<em>T</em><sub><em>α</em></sub>,此时也可以确定相应的<em>α</em>了。</p><h4 id="Sci-kit-learn中的剪枝参数"><a href="#Sci-kit-learn中的剪枝参数" class="headerlink" title="Sci-kit learn中的剪枝参数"></a>Sci-kit learn中的剪枝参数</h4><p>上面所讲的剪枝方法称为后剪枝(post pruning),即在树构建好了之后再去进行修剪;与之对应的是预剪枝,也就是在构建树的过程中限制树的生长来减少过拟合。</p><p>Sci-kit learn提供了一些<strong>预剪枝</strong>的参数：</p><ul><li><code>max_depth</code> int, default&#x3D;None;树的最大深度</li><li><code>min_samples_split</code>和<code>min_samples_leaf</code> int&#x2F;float 如果是整数,则表示绝对数量;如果是浮点数,则表示占样本总数的比例;<code>min_samples_split</code>为内部节点进行切割所需的最小样本数,<code>min_samples_leaf</code>为切割后形成的叶节点内所含的最小样本数</li><li><code>min_weight_fraction_leaf</code>：该参数一般和<code>class_weight</code>参数一起使用,主要解决不平衡的样本问题(某一类或几类比其他的类占比要大得多);对于不平衡的样本可以使用<code>class_weight</code>指定权重(使用字典指定类的权重{class_label: weight}或者直接用<code>balance</code>表示自动平衡各类),然后使用<code>min_weight_fraction_leaf</code>来指定在每个叶节点所必须的最小权重比例(占总权重)</li><li><code>max_feature</code>:随机选择max_feature数量的特征进行最优化,有多种选择，具体可以参考官网</li><li><code>min_impurity_decrease</code>: 设定不纯度下降的最小值，只有大于设定阈值的分割才会发生</li></ul><p>Sci-kit learn使用的<strong>后剪枝策略</strong>就是上面讲的CART的剪枝算法,提供的参数为<code>ccp_alpha</code>;上面提到剪枝过程是逐次选择最小<em>g</em>(<em>t</em><sub><em>i</em></sub>)的内部节点进行剪枝,因此我们所选择的<em>g</em>(<em>t</em><sub><em>i</em></sub>)是逐渐增大的，<strong>当<em>g</em>(<em>t</em><sub><em>i</em></sub>)大于<code>ccp_alpha</code>的时候就停止剪枝</strong>。</p><h2 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h2><p>上面已经用过了<code>DecisionTreeRegressor</code>和<code>DecisionTreeClassifier</code>类的中的一些参数,现在来看一下其他的参数</p><ul><li><code>criterion</code>:可选gini或者entropy；表示不纯度的衡量指标</li><li><code>random_state</code>:随机种子数，Sci-kit learn在选择最优的split的时候，并不是选择所有的特征，而是随机选择一部分特征(数量由<code>max_features</code>来控制)，从中选择不纯度指标最优的特征进行分割，因此具有“随机化”</li><li><code>splitter</code>: 有两个选项：<code>best</code>和<code>random</code>;两者在对每个feature选择阈值来分割时有区别：<code>best</code>是使用不纯度指标来评估每个可能的阈值，从而找到最优的切分点，而<code>random</code>是利用一个均匀随机抽样的函数(函数输入是特征的最小值,最大值和上面提到的random_state，也就是说依据均匀分布在相应特征的取值范围内随机选一个值作为分割点)；因此<strong>使用<code>random</code>参数带来的随机化可以在一定程度上减少过拟合</strong></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.bilibili.com/video/BV1ut41197F6?from=search&amp;seid=9344266940719140153">https://www.bilibili.com/video/BV1ut41197F6?from=search&amp;seid=9344266940719140153</a></p><p><a href="https://www.bilibili.com/video/BV1ZK4y1b7Xt">https://www.bilibili.com/video/BV1ZK4y1b7Xt</a></p><p><a href="https://www.bilibili.com/video/BV1MA411J7wm">https://www.bilibili.com/video/BV1MA411J7wm</a></p><p><a href="https://towardsdatascience.com/how-to-tune-a-decision-tree-f03721801680">https://towardsdatascience.com/how-to-tune-a-decision-tree-f03721801680</a></p><p>李航统计学习</p><p>Sci-Kit learn 官网教程</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础 03</title>
    <link href="/2021/03/01/python-task3/"/>
    <url>/2021/03/01/python-task3/</url>
    
    <content type="html"><![CDATA[<p>函数，类与对象</p><span id="more"></span><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%87%BD%E6%95%B0%20-%20%E5%9D%9A%E6%9E%9C%E4%BA%91_00.png"></p><p>函数是带名称的代码块，用于完成具体的工作，结构为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">functionname</span>(<span class="hljs-params">parameters</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;函数文档字符串&quot;&quot;&quot;</span><br>    functionsuite<br>    <span class="hljs-keyword">return</span> [expression]<br></code></pre></td></tr></table></figure><h3 id="函数文档"><a href="#函数文档" class="headerlink" title="函数文档"></a>函数文档</h3><p>函数文档字符串(DocStrings)是对函数的描述;在函数体的第一行使用3个单引号或者双引号来定义文档字符串；使用惯例是：<strong>首行描述函数功能，第二行空行，第三行为函数的具体描述</strong>，可以使用<code>__doc__</code>来获取函数的文档字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">div</span>(<span class="hljs-params">x,y</span>):<br>  <span class="hljs-string">&#x27;&#x27;&#x27;除法计算</span><br><span class="hljs-string">  </span><br><span class="hljs-string">  y不能为0&#x27;&#x27;&#x27;</span><br>  <span class="hljs-keyword">return</span>(x/y)<br><br>div(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>&gt;&gt; <span class="hljs-number">0.5</span><br><span class="hljs-built_in">print</span>(div.__doc__)<br>&gt;&gt; 除法计算<br>&gt;&gt;   <br>&gt;&gt;   y不能为<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210301214319502.png"></p><p>形参(parameter)是函数工作所需要的信息，实参(argument)是函数调用时传递的信息；函数调用时实参会被传递给形参</p><p><strong>传递实参的方式</strong>有：位置实参和关键字实参：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params">name,age</span>):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:&#123;0&#125;,Age:&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, age))<br>  <br>printinfo(<span class="hljs-string">&quot;ada&quot;</span>,<span class="hljs-number">12</span>)<span class="hljs-comment">##按照位置传递实参</span><br>&gt;&gt; Name:ada,Age:<span class="hljs-number">12</span><br>printinfo(age=<span class="hljs-number">12</span>,name=<span class="hljs-string">&quot;ada&quot;</span>)<span class="hljs-comment">##按照关键字传递实参</span><br>&gt;&gt; Name:ada,Age:<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>对于形参，我们可以给其指定默认值，如果给这样的形参提供了实参则使用实参的值，如果没有对应的实参则使用默认值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo1</span>(<span class="hljs-params">name,age=<span class="hljs-number">10</span></span>):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:&#123;0&#125;,Age:&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, age))<br>  <br>printinfo1(<span class="hljs-string">&quot;ada&quot;</span>,<span class="hljs-number">12</span>)<span class="hljs-comment">##提供了位置实参</span><br>&gt;&gt; Name:ada,Age:<span class="hljs-number">12</span><br>printinfo1(<span class="hljs-string">&quot;ada&quot;</span>)<span class="hljs-comment">##没有提供实参，使用默认值</span><br>&gt;&gt; Name:ada,Age:<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>有时候不知道函数要接受的实参的个数，这个时候可以使用加星号的形参名，将多余的实参放到以形参名命名的<strong>元组</strong>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo3</span>(<span class="hljs-params">num1, *num2</span>):<br>    <span class="hljs-built_in">print</span>(num1)<br>    <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> num2:<br>        <span class="hljs-built_in">print</span>(var)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(num2),<span class="hljs-built_in">len</span>(num2))<br>        <br>printinfo3(<span class="hljs-number">10</span>)<br>&gt;&gt; <span class="hljs-number">10</span><br>&gt;&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt; <span class="hljs-number">0</span><br>printinfo3(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>)<br>&gt;&gt; <span class="hljs-number">10</span><br>&gt;&gt; <span class="hljs-number">20</span><br>&gt;&gt; <span class="hljs-number">30</span><br>&gt;&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt; <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>也可以使用在形参名前加两个星号，将多余的实参(参数名和值构成的键值对)放到以形参名命名的<strong>字典</strong>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo4</span>(<span class="hljs-params">num1, *num2, **others</span>):<br>    <span class="hljs-built_in">print</span>(num1)<br>    <span class="hljs-built_in">print</span>(num2,<span class="hljs-built_in">type</span>(num2),<span class="hljs-built_in">len</span>(num2))<br>    <span class="hljs-built_in">print</span>(others,<span class="hljs-built_in">type</span>(others),<span class="hljs-built_in">len</span>(others))<br>    <br>printinfo4(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>)<br>&gt;&gt; <span class="hljs-number">10</span><br>&gt;&gt; (<span class="hljs-number">20</span>, <span class="hljs-number">30</span>) &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt; <span class="hljs-number">2</span><br>&gt;&gt; &#123;&#125; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt; <span class="hljs-number">0</span><br>printinfo4(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>)<br>&gt;&gt; <span class="hljs-number">10</span><br>&gt;&gt; (<span class="hljs-number">20</span>, <span class="hljs-number">30</span>) &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt; <span class="hljs-number">2</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt; <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>如果在传递实参时对某个实参想要强制使用关键字来传递，可以使用*将其与前面的参数分开：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo15</span>(<span class="hljs-params">name,*,age</span>):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:&#123;0&#125;,Age:&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, age))<br><br>printinfo15(<span class="hljs-string">&quot;ada&quot;</span>,<span class="hljs-number">10</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): TypeError: printinfo15() takes <span class="hljs-number">1</span> positional argument but <span class="hljs-number">2</span> were given<br>printinfo15(<span class="hljs-string">&quot;ada&quot;</span>,age=<span class="hljs-number">10</span>)<span class="hljs-comment">##必须使用关键字</span><br>&gt;&gt; Name:ada,Age:<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210301220956029.png"></p><p>定义在函数内部的变量只有在函数内部也可以使用，具有局部作用域，称为局部变量；定义在函数外部的变量在全局都可以访问，称为全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">4</span><span class="hljs-comment">##全局变量</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo6</span>(<span class="hljs-params">num1</span>):<br>  num2 = <span class="hljs-number">2</span><br>  <span class="hljs-built_in">print</span>(num1+a+num2)<br><br>printinfo6(<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-number">7</span><br>num2<span class="hljs-comment">##局部变量</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): NameError: name <span class="hljs-string">&#x27;num2&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></td></tr></table></figure><p>在内部作用域中想要改变外部作用域的变量时需要使用<code>global</code>(外部全局变量)和<code>nonlocal</code>(外部非全局变量)关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo7</span>(<span class="hljs-params">num1</span>):<br>  <span class="hljs-keyword">global</span> a<br>  a = <span class="hljs-number">2</span><br>  num2 = <span class="hljs-number">2</span><br>  <span class="hljs-built_in">print</span>(num1+a+num2)<br><br>printinfo7(<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment">##a发生了改变</span><br>&gt;&gt; <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>当一个函数包含在另一个函数内部，这种函数叫做内嵌函数，内嵌函数只能在函数内部进行调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;outer函数在这被调用&#x27;</span>)<br>  <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;inner函数在这被调用&#x27;</span>)<br>  <br>  inner()  <span class="hljs-comment"># 该函数只能在outer函数内部被调用</span><br><br>outer()<br>&gt;&gt; outer函数在这被调用<br>&gt;&gt; inner函数在这被调用<br>inner()<span class="hljs-comment">##不能在外部访问</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): NameError: name <span class="hljs-string">&#x27;inner&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></td></tr></table></figure><p>当一个内嵌函数对外层的非全局作用域的变量进行引用，那么这个内嵌函数就是<strong>闭包</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">funx</span>(<span class="hljs-params">x</span>):<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">funy</span>(<span class="hljs-params">y</span>):<br>    <span class="hljs-keyword">return</span>(x * y)<br>  <br>  <span class="hljs-keyword">return</span> funy<br><br>new_f = funx(<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(new_f,<span class="hljs-built_in">type</span>(new_f))<br>&gt;&gt; &lt;function funx.&lt;<span class="hljs-built_in">locals</span>&gt;.funy at <span class="hljs-number">0x000001CF87C3EE50</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;function&#x27;</span>&gt;<br>new_f(<span class="hljs-number">2</span>)<br>&gt;&gt; <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>从上面的例子可以看出，我们可以使用闭包来创建函数，作为函数工厂来使用(和R里面的闭包类似)。</p><p>上面也提到了可以使用<code>nonlocal</code>来改变外层非全局变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">funx</span>(<span class="hljs-params">x</span>):<br>  num1 = <span class="hljs-number">4</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;original num1 is &quot;</span>,num1)<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">funy</span>(<span class="hljs-params">y</span>):<br>    <span class="hljs-keyword">nonlocal</span> num1<br>    num1 = <span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;current num1 is &quot;</span>,num1)<br>    <span class="hljs-keyword">return</span>(x * y + num1)<br>  <span class="hljs-keyword">return</span> funy<br><br>new_f = funx(<span class="hljs-number">8</span>) <br>&gt;&gt; original num1 <span class="hljs-keyword">is</span>  <span class="hljs-number">4</span><br>new_f(<span class="hljs-number">2</span>)<br>&gt;&gt; current num1 <span class="hljs-keyword">is</span>  <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p>如果一个函数在内部调用自己，那么这个函数就是递归函数,下面以计算n的阶乘为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">n_fac</span>(<span class="hljs-params">n</span>):<br>  <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> n * n_fac(n-<span class="hljs-number">1</span>)<br><br>n_fac(<span class="hljs-number">100</span>)<br>&gt;&gt; <span class="hljs-number">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span><br></code></pre></td></tr></table></figure><h3 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h3><p>上面讲的都是以 <code>def</code> 关键字定义的 “正规” 的函数，除了这种函数之外，python 中还有一种用 <code>lambda</code> 关键字定义的匿名函数，结构为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> argument_list: expression<br></code></pre></td></tr></table></figure><ul><li>argument_list 是参数，可以是位置参数和关键字参数，和上面的一样</li><li>expression 对传入函数的实参进行的操作</li></ul><p>lambda 不需要 <code>return</code> 语句，表达式 expression 的结果就是返回值；匿名函数不能访问到 argument_list<br>之外的参数，下面是一些例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sqr</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x ** <span class="hljs-number">2</span><br><br><br><span class="hljs-built_in">print</span>(sqr)<br>&gt;&gt; &lt;function sqr at <span class="hljs-number">0x000001CF87C3EF70</span>&gt;<br>y = [sqr(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(y)<br>&gt;&gt; [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>]<br>lbd_sqr = <span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(lbd_sqr)<br>&gt;&gt; &lt;function &lt;<span class="hljs-keyword">lambda</span>&gt; at <span class="hljs-number">0x000001CF87C6B040</span>&gt;<br>y = [lbd_sqr(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(y)<br>&gt;&gt; [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>]<br>sumary = <span class="hljs-keyword">lambda</span> arg1, arg2: arg1 + arg2<br><span class="hljs-built_in">print</span>(sumary(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)) <br>&gt;&gt; <span class="hljs-number">30</span><br>func = <span class="hljs-keyword">lambda</span> *args: <span class="hljs-built_in">sum</span>(args)<span class="hljs-comment">##元组</span><br><span class="hljs-built_in">print</span>(func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))  <br>&gt;&gt; <span class="hljs-number">15</span><br>func = <span class="hljs-keyword">lambda</span> **args: <span class="hljs-built_in">sum</span>(args.values())<span class="hljs-comment">##列表</span><br><span class="hljs-built_in">print</span>(func(a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>))<br>&gt;&gt; <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>匿名函数常常用在函数式编程的高阶函数中，高阶函数指的是函数的参数也是一个函数，在 python 比较常用的现成高阶函数有 <code>filter</code> 和 <code>map</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##filter(function, iterable) 过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象</span><br><br>odd = <span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">1</span><br>templist = <span class="hljs-built_in">filter</span>(odd, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br><br><span class="hljs-comment">##map(function, *iterables) 根据提供的函数对指定序列做映射</span><br><br>m1 = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(m1))  <br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br>m2 = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x, y: x + y, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(m2)) <br>&gt;&gt; [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>]<br></code></pre></td></tr></table></figure><p>我们也可以自己定义高阶函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply_to_list</span>(<span class="hljs-params">fun, some_list</span>):<br>    <span class="hljs-keyword">return</span> fun(some_list)<br><br>lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(apply_to_list(<span class="hljs-built_in">sum</span>, lst))<br>&gt;&gt; <span class="hljs-number">15</span><br><span class="hljs-built_in">print</span>(apply_to_list(<span class="hljs-built_in">len</span>, lst))<br>&gt;&gt; <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(apply_to_list(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">sum</span>(x) / <span class="hljs-built_in">len</span>(x), lst))<br>&gt;&gt; <span class="hljs-number">3.0</span><br></code></pre></td></tr></table></figure><h2 id="类与方法"><a href="#类与方法" class="headerlink" title="类与方法"></a>类与方法</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E7%B1%BB%E5%92%8C%E6%96%B9%E6%B3%95.svg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#定义类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">fuck,name</span>):<br>    fuck.name = name<br><br><span class="hljs-comment">##创建实例</span><br>d1 = test(<span class="hljs-string">&quot;aa&quot;</span>)<br>d1.name<br>&gt;&gt; <span class="hljs-string">&#x27;aa&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>  length = <span class="hljs-number">5</span><span class="hljs-comment">#类属性</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,brand,max_people</span>):<span class="hljs-comment">##构造方法</span><br>    self.name = name<span class="hljs-comment">##实例属性</span><br>    self.brand = brand<br>    self.number_of_people = <span class="hljs-number">0</span><br>    self.max_people = max_people<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<span class="hljs-comment">##实例方法</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;the name of this car is <span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;the brand of this car is <span class="hljs-subst">&#123;self.brand&#125;</span>&quot;</span>)<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;the <span class="hljs-subst">&#123;self.name&#125;</span> is running&quot;</span>)<br>    <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_people</span>(<span class="hljs-params">self,num_of_people</span>):<br>    <span class="hljs-keyword">if</span> num_of_people &gt; self.max_people:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;不能超过最大人数：<span class="hljs-subst">&#123;self.max_people&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>      self.number_of_people = num_of_people<br>      <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">increase_people</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">if</span> self.number_of_people + <span class="hljs-number">1</span> &gt; self.max_people:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;不能超过最大人数：<span class="hljs-subst">&#123;self.max_people&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>      self.number_of_people += <span class="hljs-number">1</span><br>  <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">reduce_people</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">if</span> self.number_of_people - <span class="hljs-number">1</span> &lt; <span class="hljs-number">0</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;车中已经没有人了&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>      self.number_of_people -= <span class="hljs-number">1</span><br><br>a = Car(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">5</span>)<br>a.name<br>&gt;&gt; <span class="hljs-string">&#x27;a&#x27;</span><br>a.brand<br>&gt;&gt; <span class="hljs-string">&#x27;b&#x27;</span><br>a.max_people<br>&gt;&gt; <span class="hljs-number">5</span><br>a.set_people(<span class="hljs-number">3</span>)<br>a.number_of_people<br>&gt;&gt; <span class="hljs-number">3</span><br>a.increase_people()<br>a.number_of_people<br>&gt;&gt; <span class="hljs-number">4</span><br>a.increase_people()<br>a.increase_people()<br>&gt;&gt; 不能超过最大人数：<span class="hljs-number">5</span><br>a.number_of_people<br>&gt;&gt; <span class="hljs-number">5</span><br>a.reduce_people()<br>a.reduce_people()<br>a.reduce_people()<br>a.reduce_people()<br>a.reduce_people()<br>a.reduce_people()<br>&gt;&gt; 车中已经没有人了<br>a.number_of_people<br>&gt;&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">small_car</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,brand,max_people,height</span>):<br>    <span class="hljs-built_in">super</span>().__init__(name,brand,max_people)<br>    self.height = height<br>  <span class="hljs-comment">##重写父类方法</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;the name of this car is <span class="hljs-subst">&#123;self.name&#125;</span> and it is small!&quot;</span>)<br>    <br>a = small_car(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>)<br>a.number_of_people<br>&gt;&gt; <span class="hljs-number">0</span><br>a.show()<br>&gt;&gt; the name of this car <span class="hljs-keyword">is</span> a <span class="hljs-keyword">and</span> it <span class="hljs-keyword">is</span> small!<br></code></pre></td></tr></table></figure><p><code>issubclass(class, classinfo)</code> 方法用于判断参数 class 是否是类型参数 classinfo 的子类:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">issubclass</span>(small_car,Car)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">issubclass</span>(Car,Car)<span class="hljs-comment">##类是自身的子类</span><br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">issubclass</span>(Car,<span class="hljs-built_in">object</span>)<span class="hljs-comment">##类都是对象的子类</span><br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><code>hasattr(object,name)</code> 用于判断对象是否包含对应的属性:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##类是判断其类属性，实例则可以判断类和实例属性</span><br><span class="hljs-built_in">hasattr</span>(Car, <span class="hljs-string">&quot;length&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">hasattr</span>(Car, <span class="hljs-string">&quot;name&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">hasattr</span>(a, <span class="hljs-string">&quot;name&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">hasattr</span>(a, <span class="hljs-string">&quot;length&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><code>getattr(object, name[, default])</code> 用于返回一个对象属性值，如果不存在该属性，则返回第三个默认参数的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">getattr</span>(a,<span class="hljs-string">&quot;name&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-built_in">getattr</span>(a,<span class="hljs-string">&quot;nu&quot;</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): AttributeError: <span class="hljs-string">&#x27;small_car&#x27;</span> <span class="hljs-built_in">object</span> has no attribute <span class="hljs-string">&#x27;nu&#x27;</span><br><span class="hljs-built_in">getattr</span>(a,<span class="hljs-string">&quot;nu&quot;</span>,<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><code>setattr(object, name, value)</code> 用于设置属性值，该属性不一定是存在的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">setattr</span>(a,<span class="hljs-string">&quot;nu&quot;</span>,<span class="hljs-number">1</span>)<br>a.nu<br>&gt;&gt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><code>delattr(object, name)</code> 用于删除属性:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">delattr</span>(a,nu)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): NameError: name <span class="hljs-string">&#x27;nu&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br><span class="hljs-built_in">getattr</span>(a,<span class="hljs-string">&quot;nu&quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基因组版本坐标转化</title>
    <link href="/2021/02/26/liftover/"/>
    <url>/2021/02/26/liftover/</url>
    
    <content type="html"><![CDATA[<p>使用R包<code>rtracklayer</code> 进行基因组坐标版本转化</p><span id="more"></span><p>现在有GRCh37的基因组坐标文件(TCGA的突变记录)，要将其转换成GRCh38的坐标：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>dplyr<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Warning<span class="hljs-operator">:</span> package <span class="hljs-string">&#x27;dplyr&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.3<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Attaching package<span class="hljs-operator">:</span> <span class="hljs-string">&#x27;dplyr&#x27;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> The following objects are masked from <span class="hljs-string">&#x27;package:stats&#x27;</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     filter<span class="hljs-punctuation">,</span> lag<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> The following objects are masked from <span class="hljs-string">&#x27;package:base&#x27;</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     intersect<span class="hljs-punctuation">,</span> setdiff<span class="hljs-punctuation">,</span> setequal<span class="hljs-punctuation">,</span> union<br><br>dt <span class="hljs-operator">&lt;-</span> readRDS<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;../test/dt.rds&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  as.data.frame<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br>head<span class="hljs-punctuation">(</span>dplyr<span class="hljs-operator">::</span>as_tibble<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 x 8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Hugo_Symbol Chromosome Start_position End_position sample                Protein_Change Variant_Classifica<span class="hljs-operator">~</span> Variant_Type<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>            <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                 <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>               <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> SH3PXD2A            <span class="hljs-number">10</span>      <span class="hljs-number">105614934</span>    <span class="hljs-number">105614934</span> TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5J1<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">~</span> .              Intron              SNP         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> INPP5F              <span class="hljs-number">10</span>      <span class="hljs-number">121556913</span>    <span class="hljs-number">121556913</span> TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5J1<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">~</span> .              Intron              SNP         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> ITIH2               <span class="hljs-number">10</span>        <span class="hljs-number">7772149</span>      <span class="hljs-number">7772149</span> TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5J1<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">~</span> .              Intron              SNP         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> OPN4                <span class="hljs-number">10</span>       <span class="hljs-number">88419681</span>     <span class="hljs-number">88419681</span> TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5J1<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">~</span> p.G288D        Missense_Mutation   SNP         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> TRIM49B             <span class="hljs-number">11</span>       <span class="hljs-number">49053482</span>     <span class="hljs-number">49053482</span> TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5J1<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">~</span> p.L111F        Missense_Mutation   SNP         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span> DNAJC4              <span class="hljs-number">11</span>       <span class="hljs-number">64001585</span>     <span class="hljs-number">64001585</span> TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">-</span>A5J1<span class="hljs-operator">-</span><span class="hljs-number">01</span>A<span class="hljs-operator">-</span><span class="hljs-number">11</span>D<span class="hljs-operator">~</span> p.G219W        Missense_Mutation   SNP<br></code></pre></td></tr></table></figure><p>转换的方法有多种，可以参考<a href="https://www.biostars.org/p/65558/">Converting Genome Coordinates From One Genome<br>Version To<br>Another</a>,这里使用R包<code>rtracklayer</code>来转换</p><p>安装包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span><span class="hljs-punctuation">(</span><span class="hljs-operator">!</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rtracklayer&quot;</span> <span class="hljs-operator">%in%</span> installed.packages<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  BiocManager<span class="hljs-operator">::</span>install<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rtracklayer&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>library<span class="hljs-punctuation">(</span>rtracklayer<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>我们需要使用的是这个包中的<code>liftOver</code>函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">?</span>liftOver<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210226171357422.png"></p><p>该函数需要两个输入：需要转换的基因组区间(<strong>GRanges对象</strong>)；chain文件</p><p>首先将数据框转化为GRanges对象(需要使用GenomicRanges包，在library(rtracklayer)中已经载入了)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">dt<span class="hljs-operator">$</span>Chromosome <span class="hljs-operator">&lt;-</span> paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;chr&quot;</span><span class="hljs-punctuation">,</span>dt<span class="hljs-operator">$</span>Chromosome<span class="hljs-punctuation">)</span><br><br>dt_granges <span class="hljs-operator">&lt;-</span> makeGRangesFromDataFrame<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span><br>                         keep.extra.columns<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span><br>                         ignore.strand<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span><br>                         seqinfo<span class="hljs-operator">=</span><span class="hljs-literal">NULL</span><span class="hljs-punctuation">,</span><br>                         seqnames.field<span class="hljs-operator">=</span><span class="hljs-string">&quot;Chromosome&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">##染色体所在列的名称</span><br>                         start.field<span class="hljs-operator">=</span><span class="hljs-string">&quot;Start_position&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">##起始位点所在列的名称</span><br>                         end.field<span class="hljs-operator">=</span><span class="hljs-string">&quot;End_position&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">##终止位点所在列的名称</span><br>                         starts.in.df.are.0based<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##是否是0based的</span><br></code></pre></td></tr></table></figure><p>这里面需要注意的是：需要转换的基因组坐标起始位点是0based还是1based；对于TCGA的<a href="https://docs.gdc.cancer.gov/Encyclopedia/pages/Mutation_Annotation_Format_TCGAv2/">maf文件</a>是1-based的，所以这里选FALSE：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210226172456415.png"><br>需要的第二个文件是Chain文件，需要在<a href="https://hgdownload.soe.ucsc.edu/downloads.html">UCSC</a>网站上下载：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210226225522742.png"></p><p>使用<code>import.chain</code>函数导入Chain文件，进行转换：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">chainObject <span class="hljs-operator">&lt;-</span> import.chain<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;../test/hg19ToHg38.over.chain&quot;</span><span class="hljs-punctuation">)</span><br><br>results <span class="hljs-operator">&lt;-</span> as.data.frame<span class="hljs-punctuation">(</span>liftOver<span class="hljs-punctuation">(</span>dt_granges<span class="hljs-punctuation">,</span> chainObject<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br>head<span class="hljs-punctuation">(</span>dplyr<span class="hljs-operator">::</span>as_tibble<span class="hljs-punctuation">(</span>results<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 6 x 12</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   group group_name seqnames   start     end width strand Hugo_Symbol sample   Protein_Change Variant_Classif<span class="hljs-operator">~</span> Variant_Type<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>            <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>       chr10     <span class="hljs-number">1.04e8</span>  <span class="hljs-number">1.04e8</span>     <span class="hljs-number">1</span> <span class="hljs-operator">*</span>      SH3PXD2A    TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">~</span> .              Intron           SNP         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>       chr10     <span class="hljs-number">1.20e8</span>  <span class="hljs-number">1.20e8</span>     <span class="hljs-number">1</span> <span class="hljs-operator">*</span>      INPP5F      TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">~</span> .              Intron           SNP         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">3</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>       chr10     <span class="hljs-number">7.73e6</span>  <span class="hljs-number">7.73e6</span>     <span class="hljs-number">1</span> <span class="hljs-operator">*</span>      ITIH2       TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">~</span> .              Intron           SNP         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>     <span class="hljs-number">4</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>       chr10     <span class="hljs-number">8.67e7</span>  <span class="hljs-number">8.67e7</span>     <span class="hljs-number">1</span> <span class="hljs-operator">*</span>      OPN4        TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">~</span> p.G288D        Missense_Mutati<span class="hljs-operator">~</span> SNP         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>     <span class="hljs-number">5</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>       chr11     <span class="hljs-number">4.90e7</span>  <span class="hljs-number">4.90e7</span>     <span class="hljs-number">1</span> <span class="hljs-operator">*</span>      TRIM49B     TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">~</span> p.L111F        Missense_Mutati<span class="hljs-operator">~</span> SNP         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>     <span class="hljs-number">6</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>       chr11     <span class="hljs-number">6.42e7</span>  <span class="hljs-number">6.42e7</span>     <span class="hljs-number">1</span> <span class="hljs-operator">*</span>      DNAJC4      TCGA<span class="hljs-operator">-</span>OR<span class="hljs-operator">~</span> p.G219W        Missense_Mutati<span class="hljs-operator">~</span> SNP<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>生物信息</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础02</title>
    <link href="/2021/02/24/python-task2/"/>
    <url>/2021/02/24/python-task2/</url>
    
    <content type="html"><![CDATA[<p>python主要数据结构</p><span id="more"></span><ul><li>列表</li><li>元组</li><li>字符串</li><li>字典</li><li>集合</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%88%97%E8%A1%A8%20-%20%E5%9D%9A%E6%9E%9C%E4%BA%91_00.png"></p><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210224222711937.png"></p><ul><li>直接创建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-built_in">print</span>(x,<span class="hljs-built_in">type</span>(x))<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>使用<code>range</code>函数创建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<span class="hljs-comment">##默认是stop，从0开始</span><br><span class="hljs-built_in">print</span>(x,<span class="hljs-built_in">type</span>(x))<br>&gt;&gt; [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>] &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br>x = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(x,<span class="hljs-built_in">type</span>(x))<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>] &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br>x = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(x,<span class="hljs-built_in">type</span>(x))<br>&gt;&gt; [<span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>] &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>利用推导式创建列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [<span class="hljs-number">0</span>] * <span class="hljs-number">5</span> <br>a = [x] * <span class="hljs-number">4</span><br>b = x * <span class="hljs-number">4</span><br><span class="hljs-built_in">print</span>(a,<span class="hljs-built_in">type</span>(a))<br>&gt;&gt; [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]] &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br><span class="hljs-built_in">print</span>(b,<span class="hljs-built_in">type</span>(b))<br>&gt;&gt; [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>] &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br>a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(a)<br>&gt;&gt; [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [i ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>)]<br><span class="hljs-built_in">print</span>(x,<span class="hljs-built_in">type</span>(x))<br>&gt;&gt; [<span class="hljs-number">100</span>, <span class="hljs-number">64</span>, <span class="hljs-number">36</span>, <span class="hljs-number">16</span>, <span class="hljs-number">4</span>] &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210225211530039.png"></p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p><code>append</code>在列表末尾添加元素(作为一个整体添加)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]<br>x.append(<span class="hljs-string">&quot;d&quot;</span>)<br><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br></code></pre></td></tr></table></figure><p><code>extend</code>也是在列表末尾添加元素(添加的是元素的元素)，注意区分两者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x.append([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]<br>x.extend([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p><code>insert</code>在指定位置插入元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x.insert(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;f&quot;</span>)<span class="hljs-comment">##在第三个位置插入f</span><br><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>根据元素的位置删除元素可以使用<code>pop</code>,<code>del</code>；<code>pop</code>方法移除指定位置的元素并且返回该元素(”弹出“)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x.pop()<br>&gt;&gt; <span class="hljs-number">3</span><br>x.pop(<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;b&#x27;</span><br><span class="hljs-keyword">del</span> x[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>根据元素的值删除元素可以使用<code>remove</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x.remove(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><h3 id="获取列表元素"><a href="#获取列表元素" class="headerlink" title="获取列表元素"></a>获取列表元素</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210225212857353.png"></p><p>切片的操作为[start,stop,step],注意是左闭右开：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>]<br>x[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>]<br>&gt;&gt; [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">2</span>]<br>x[:<span class="hljs-number">4</span>:<span class="hljs-number">1</span>]<br>&gt;&gt; [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>]<br>x[::-<span class="hljs-number">1</span>]<br>&gt;&gt; [<span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>浅拷贝与深拷贝</strong></p><p>对于不可变数据类型，深浅拷贝是一样的(内存地址不变)；对于可变数据类型，浅拷贝只拷贝最外层的可变数据结构(内存地址发生改变)，而深拷贝则拷贝每层的可变数据类型，<a href="https://mp.weixin.qq.com/s/e8N-s2w4gYQPKETVH62EAg">参考</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>b = <span class="hljs-number">1</span><br>x = [a,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>y = [b,<span class="hljs-number">2</span>]<br><br>z = x[:] <span class="hljs-comment">##浅拷贝</span><br>k = y[:] <span class="hljs-comment">##浅拷贝</span><br><br><span class="hljs-keyword">import</span> copy<br>z_d = copy.deepcopy(x) <span class="hljs-comment">##深拷贝</span><br>k_d = copy.deepcopy(y) <span class="hljs-comment">##深拷贝</span><br><br><span class="hljs-comment">##可变数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(x),<span class="hljs-built_in">id</span>(z))<span class="hljs-comment">##不一样</span><br>&gt;&gt; <span class="hljs-number">2241811121856</span> <span class="hljs-number">2241811122112</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(x[<span class="hljs-number">0</span>]),<span class="hljs-built_in">id</span>(z[<span class="hljs-number">0</span>]))<span class="hljs-comment">##一样</span><br>&gt;&gt; <span class="hljs-number">2241817618048</span> <span class="hljs-number">2241817618048</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(x),<span class="hljs-built_in">id</span>(z_d))<span class="hljs-comment">##不一样</span><br>&gt;&gt; <span class="hljs-number">2241811121856</span> <span class="hljs-number">2241817628928</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(x[<span class="hljs-number">0</span>]),<span class="hljs-built_in">id</span>(z_d[<span class="hljs-number">0</span>])) <span class="hljs-comment">##不一样</span><br><br><span class="hljs-comment">##不可变数据类型</span><br>&gt;&gt; <span class="hljs-number">2241817618048</span> <span class="hljs-number">2241817628992</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(y),<span class="hljs-built_in">id</span>(k))<span class="hljs-comment">##不一样</span><br>&gt;&gt; <span class="hljs-number">2241811157952</span> <span class="hljs-number">2241811156032</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(y[<span class="hljs-number">0</span>]),<span class="hljs-built_in">id</span>(k[<span class="hljs-number">0</span>]))<span class="hljs-comment">##一样</span><br>&gt;&gt; <span class="hljs-number">2240632088880</span> <span class="hljs-number">2240632088880</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(y),<span class="hljs-built_in">id</span>(k_d)) <span class="hljs-comment">##不一样</span><br>&gt;&gt; <span class="hljs-number">2241811157952</span> <span class="hljs-number">2241817629056</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(y[<span class="hljs-number">0</span>]),<span class="hljs-built_in">id</span>(k_d[<span class="hljs-number">0</span>])) <span class="hljs-comment">##一样</span><br>&gt;&gt; <span class="hljs-number">2240632088880</span> <span class="hljs-number">2240632088880</span><br></code></pre></td></tr></table></figure><h3 id="常用操作符"><a href="#常用操作符" class="headerlink" title="常用操作符"></a>常用操作符</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228094615853.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>l2 = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>l3 = [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-built_in">print</span>(l1 == l2)<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(l1 == l3)<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(l1 + l2)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(l1 * <span class="hljs-number">3</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> l1)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> l1)<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228095235247.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">l1.count(<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-number">1</span><br>l4 = l1 * <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(l4)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(l4.index(<span class="hljs-number">1</span>))<br>&gt;&gt; <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(l4.index(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<span class="hljs-comment">##从第三个元素开始找</span><br>&gt;&gt; <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(l4.index(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment">##在第二到第四个元素范围内找(左闭右开), 但是里面没有，报错</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): ValueError: <span class="hljs-number">1</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span><br>l4.reverse()<br><span class="hljs-built_in">print</span>(l4)<br>&gt;&gt; [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br>l4.sort()<br><span class="hljs-built_in">print</span>(l4)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br>l4 = l1 * <span class="hljs-number">3</span><br><span class="hljs-built_in">sorted</span>(l4)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(l4)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%85%83%E7%BB%84%20-%20%E5%9D%9A%E6%9E%9C%E4%BA%91_00.png"></p><p>元组和列表类似，不同的是元组是不可变数据类型(但是可以嵌套可变数据类型，可以直接更改其元素)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>t1[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): TypeError: <span class="hljs-string">&#x27;tuple&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br>t1[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(t1)<br>&gt;&gt; (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p>元组相关的操作符和方法也和列表类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>t2 = (<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)<br><br>t1 == t2<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(t1 + t2)<br>&gt;&gt; (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(t1 * <span class="hljs-number">3</span>)<br>&gt;&gt; (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> t1)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> t1)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(t1.count(<span class="hljs-number">1</span>))<br>&gt;&gt; <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(t1.index(<span class="hljs-number">1</span>))<br>&gt;&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="元组拆包"><a href="#元组拆包" class="headerlink" title="元组拆包"></a>元组拆包</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228103946589.png"></p><p>元组拆包(解压)就是将元组拆成单个的元素(结构要和原来的元组相同)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,[<span class="hljs-string">&quot;j&quot;</span>,<span class="hljs-number">9</span>]))<br><br>(a,b,c,(d,e,f)) = t<br><span class="hljs-built_in">print</span>(a,b,c,d,e,f,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> a b [<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-number">9</span>]<br>(a,b,c,(d,e,[f,g])) = t<br><span class="hljs-built_in">print</span>(a,b,c,d,e,f,g,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> a b j <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>如果我们只想要其中几个元素，可以将其他元素赋给<code>*rest</code>(通配符)或者<code>*_</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">(a,*rest,(b,c,[d,e])) = t<br><span class="hljs-built_in">print</span>(a,b,c,d,e,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> a b j <span class="hljs-number">9</span><br><span class="hljs-built_in">print</span>(*rest)<br>&gt;&gt; <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>(a,*_,(b,c,[d,e])) = t<br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228105301884.png"></p><p>如果字符串中出现了一些有特殊含义的字符需要使用<code>\</code>对其进行转义，也可以在字符串前面加上<code>r</code>来表示原始字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a \n b&quot;</span>)<br>&gt;&gt; a <br>&gt;&gt;  b<br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&quot;a \n b&quot;</span>)<br>&gt;&gt; a \n b<br></code></pre></td></tr></table></figure><p>字符串的切片和拼接和列表，元组类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&quot;abcdef&quot;</span><br><br>s1[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>]<br>&gt;&gt; <span class="hljs-string">&#x27;ac&#x27;</span><br><span class="hljs-built_in">print</span>(s1 + <span class="hljs-string">&quot;abc&quot;</span>)<br>&gt;&gt; abcdefabc<br><span class="hljs-built_in">print</span>(s1 * <span class="hljs-number">3</span>)<br>&gt;&gt; abcdefabcdefabcdef<br></code></pre></td></tr></table></figure><h3 id="常用内置方法"><a href="#常用内置方法" class="headerlink" title="常用内置方法"></a>常用内置方法</h3><ul><li>大小写的转换：<code>capitalize</code>将字符串的第一个字符转换成大写；<code>lower</code>将所有字符转换为小写；<code>upper</code>将所有字符转换成大写；<code>swapcase</code>将大写字符转换成小写，将小写字符转换成大写；<code>title</code>将所有单词的首字母转换成大写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">s2 = <span class="hljs-string">&quot;An apple&quot;</span><br><br>s2.lower()<br>&gt;&gt; <span class="hljs-string">&#x27;an apple&#x27;</span><br>s2.upper()<br>&gt;&gt; <span class="hljs-string">&#x27;AN APPLE&#x27;</span><br>s2.swapcase()<br>&gt;&gt; <span class="hljs-string">&#x27;aN APPLE&#x27;</span><br>s2.title()<br>&gt;&gt; <span class="hljs-string">&#x27;An Apple&#x27;</span><br>s2.lower().capitalize()<br>&gt;&gt; <span class="hljs-string">&#x27;An apple&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><code>count(str, beg= 0,end=len(string))</code>返回<code>str</code>在字符串中出现的次数，可以使用<code>beg</code>和<code>end</code>参数指定范围,<strong>大小写敏感</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s2.count(<span class="hljs-string">&quot;A&quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span><br>s2.count(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)<br>&gt;&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>检查子字符串：<code>endswith(str, beg=0,end=len(string))</code>检查字符串是否以<code>str</code>结束；<code>startswith(substr, beg=0,end=len(string))</code>检查字符串是否以<code>str</code>开头；<code>find(str, beg=0, end=len(string))</code>检查<code>str</code>是否在字符串中，如果在，返回第一个值的索引，如果不在，返回-1；<code>rfind(str, beg=0,end=len(string))</code>类似<code>find</code>,不过是从右边开始查找</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">s3 = <span class="hljs-string">&quot;this is a string&quot;</span><br><br>s3.endswith(<span class="hljs-string">&quot;str&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">False</span><br>s3.endswith(<span class="hljs-string">&quot;ing&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br>s3.startswith(<span class="hljs-string">&quot;this&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br>s3.find(<span class="hljs-string">&quot;str&quot;</span>)<br>&gt;&gt; <span class="hljs-number">10</span><br>s3.find(<span class="hljs-string">&quot;stre&quot;</span>)<br>&gt;&gt; -<span class="hljs-number">1</span><br>s3.rfind(<span class="hljs-string">&quot;str&quot;</span>)<br>&gt;&gt; <span class="hljs-number">10</span><br>s3.find(<span class="hljs-string">&quot;is&quot;</span>)<br>&gt;&gt; <span class="hljs-number">2</span><br>s3.rfind(<span class="hljs-string">&quot;is&quot;</span>)<span class="hljs-comment">##从右边</span><br>&gt;&gt; <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><ul><li><code>isnumeric</code>检查字符串是不是只包含数字字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s4 = <span class="hljs-string">&quot;123&quot;</span><br>s4.isnumeric()<br>&gt;&gt; <span class="hljs-literal">True</span><br>s4 = s4 + <span class="hljs-string">&quot;a&quot;</span><br>s4.isnumeric()<br>&gt;&gt; <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><ul><li>对齐并填充：<code>ljust(width,fillchar)</code><br>将字符串左对齐,并使用fillchar填充到指定的宽度(width)；与之对应的是<code>rjust(width,fillchar)</code>右对齐</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s4.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;*&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;123a****&#x27;</span><br>s4.rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;*&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;****123a&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>截断字符串：<code>lstrip(char)</code>去掉字符串左边空格(默认)或者指定字符(char);与之对应的是<code>rstrip</code>(右边)和<code>strip</code>(左边加右边)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">s4 = <span class="hljs-string">&quot;  &quot;</span> + s4 + <span class="hljs-string">&quot;123  &quot;</span><br>s4<br>&gt;&gt; <span class="hljs-string">&#x27;  123a123  &#x27;</span><br>s4.lstrip()<br>&gt;&gt; <span class="hljs-string">&#x27;123a123  &#x27;</span><br>s4.rstrip()<br>&gt;&gt; <span class="hljs-string">&#x27;  123a123&#x27;</span><br>s4.strip()<br>&gt;&gt; <span class="hljs-string">&#x27;123a123&#x27;</span><br>s4 = s4.strip()<br><br>s4.strip(<span class="hljs-string">&quot;123&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>字符串切割：<code>partition(sub)</code>在字符串中找sub字符串，找到之后将原字符串以子字符串分成3部分，如果找不到返回原字符串加上<code>,</code>;<code>rpartition(sub)</code>和<code>partition</code>类似，不过是从右边开始寻找，<strong>注意：这里的寻找只找第一个，所以两者的结果可能不同</strong>;<br><code>split(str=&quot; &quot;,num)</code>以str为分隔符切割字符串，可以指定分割产生的子字符串的个数，返回子字符串构成的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s5 = <span class="hljs-string">&#x27;abc123abc&#x27;</span><br><span class="hljs-built_in">print</span>(s5.partition(<span class="hljs-string">&#x27;b&#x27;</span>))<br>&gt;&gt; (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c123abc&#x27;</span>)<br><span class="hljs-built_in">print</span>(s5.rpartition(<span class="hljs-string">&#x27;b&#x27;</span>))<br>&gt;&gt; (<span class="hljs-string">&#x27;abc123a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s5.split(<span class="hljs-string">&quot;b&quot;</span>)<span class="hljs-comment">##分隔符是b</span><br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c123a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br>s5.split(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">1</span>)<span class="hljs-comment">#num指定的是&quot;切割&quot;的次数</span><br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c123abc&#x27;</span>]<br></code></pre></td></tr></table></figure><ul><li><code>replace(old,new,max)</code>将字符串中old子字符串替换成new新字符串，可以通过max指定替换的最大次数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s5.replace(<span class="hljs-string">&quot;bc&quot;</span>,<span class="hljs-string">&quot;**&quot;</span>,<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;a**123abc&#x27;</span><br>s5.replace(<span class="hljs-string">&quot;bc&quot;</span>,<span class="hljs-string">&quot;**&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;a**123a**&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><code>splitlines(keepends)</code><br>按行分割字符串，返回各行构成的列表(分割符可以为’, ‘’,<br>’)；可以通过keepends来指定是否保留分隔符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s6 = <span class="hljs-string">&quot;abc\n123\rbcd\r\n000&quot;</span><br><span class="hljs-built_in">print</span>(s6)<br>&gt;&gt; abc<br>&gt;&gt; 123bcd<br>&gt;&gt; <span class="hljs-number">000</span><br>s6.splitlines()<br>&gt;&gt; [<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;bcd&#x27;</span>, <span class="hljs-string">&#x27;000&#x27;</span>]<br>s6.splitlines(keepends=<span class="hljs-literal">True</span>)<br>&gt;&gt; [<span class="hljs-string">&#x27;abc\n&#x27;</span>, <span class="hljs-string">&#x27;123\r&#x27;</span>, <span class="hljs-string">&#x27;bcd\r\n&#x27;</span>, <span class="hljs-string">&#x27;000&#x27;</span>]<br></code></pre></td></tr></table></figure><ul><li>字符串的转化：<code>maketrans(intab,outtab)</code>创建intab到outtab的映射；<code>translate(table,deletechars=&quot;&quot;)</code>根据table来进行转化，可以使用<code>deletechars</code>来指定删除的字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">s7 = <span class="hljs-string">&quot;abc has three characters&quot;</span><br><br>intab = <span class="hljs-string">&quot;abc&quot;</span><br>outtab = <span class="hljs-string">&quot;123&quot;</span><br><br>transtab = s7.maketrans(intab,outtab)<br>transtab <span class="hljs-comment">###ASCII对应</span><br>&gt;&gt; &#123;<span class="hljs-number">97</span>: <span class="hljs-number">49</span>, <span class="hljs-number">98</span>: <span class="hljs-number">50</span>, <span class="hljs-number">99</span>: <span class="hljs-number">51</span>&#125;<br>s7.translate(transtab)<br>&gt;&gt; <span class="hljs-string">&#x27;123 h1s three 3h1r13ters&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><ul><li>format 方法<br>在字符串中使用括号表示format的参数，进行替换；括号内的数字表示位置，字母表示参数名称</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&#123;1&#125; is &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;num&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;1 is num&#x27;</span><br><span class="hljs-string">&quot;&#123;second&#125; is &#123;first&#125;&quot;</span>.<span class="hljs-built_in">format</span>(first = <span class="hljs-string">&quot;num&quot;</span>, second = <span class="hljs-string">&quot;1&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;1 is num&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>字符串格式化符号</li></ul><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228162350177.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228162434625.png"></p><ul><li>f字符串：在需要格式化的字符串前面加上f或F，里面用大括号来代替变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;&#x27;123&#x27;&quot;</span><br>b = <span class="hljs-string">&quot;&#x27;cdf&#x27;&quot;</span><br><br><span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> has the same length with <span class="hljs-subst">&#123;b&#125;</span>&quot;</span><br>&gt;&gt; <span class="hljs-string">&quot;&#x27;123&#x27; has the same length with &#x27;cdf&#x27;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%AD%97%E5%85%B8%20-%20%E5%9D%9A%E6%9E%9C%E4%BA%91_00.png"></p><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228162934647.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(d1,<span class="hljs-built_in">type</span>(d1))<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##先创建空字典再填充</span><br>d2 = <span class="hljs-built_in">dict</span>()<br>d2[<span class="hljs-string">&quot;a&quot;</span>] = <span class="hljs-number">1</span><br>d2[<span class="hljs-string">&quot;b&quot;</span>] = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(d2,<span class="hljs-built_in">type</span>(d2))<br><br><span class="hljs-comment">##根据可映射对象来创建</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br>o1 = [(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>)]<br>o2 = ((<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-number">2</span>))<br><br>d3 = <span class="hljs-built_in">dict</span>(o1)<br>d4 = <span class="hljs-built_in">dict</span>(o2)<br><br><span class="hljs-built_in">print</span>(d3,<span class="hljs-built_in">type</span>(d3))<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br><span class="hljs-built_in">print</span>(d4,<span class="hljs-built_in">type</span>(d4))<br><br><span class="hljs-comment">##根据关键字参数来创建</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">2</span>&#125; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br>d5 = <span class="hljs-built_in">dict</span>(a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(d5,<span class="hljs-built_in">type</span>(d5))<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>还可以使用<code>fromkeys(seq,value)</code>方法来创建；以seq中的元素做键，value作为值(所有的键的值都是value，如果没有则为None)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">seq = (<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>)<br><span class="hljs-built_in">dict</span>.fromkeys(seq)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-literal">None</span>&#125;<br><span class="hljs-built_in">dict</span>.fromkeys(seq,<span class="hljs-number">10</span>)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">10</span>&#125;<br><span class="hljs-built_in">dict</span>.fromkeys(seq,(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment">##不会分开匹配</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-string">&#x27;b&#x27;</span>: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-string">&#x27;c&#x27;</span>: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)&#125;<br></code></pre></td></tr></table></figure><h3 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228163808865.png"><br><code>keys</code>方法返回一个可迭代对象(键)，可以使用<code>list()</code>来转化为列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>d5.keys()<br>&gt;&gt; dict_keys([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])<br><span class="hljs-built_in">type</span>(d5.keys())<br>&gt;&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_keys&#x27;</span>&gt;<br><span class="hljs-built_in">list</span>(d5.keys())<br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]<br></code></pre></td></tr></table></figure><p>同样的，<code>values</code>方法返回的是包含值的可迭代对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>d5.values()<br>&gt;&gt; dict_values([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br><span class="hljs-built_in">type</span>(d5.values())<br>&gt;&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_values&#x27;</span>&gt;<br><span class="hljs-built_in">list</span>(d5.values())<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p><code>items</code>方法返回的是键值对元组构成的可迭代对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">d5.items()<br>&gt;&gt; dict_items([(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>)])<br><span class="hljs-built_in">type</span>(d5.items())<br>&gt;&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_items&#x27;</span>&gt;<br><span class="hljs-built_in">list</span>(d5.items())<br>&gt;&gt; [(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>)]<br></code></pre></td></tr></table></figure><p><code>get(key,default=None)</code>方法返回指定键(key)的值，如果没有找到则返回默认值(default)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">d5.get(<span class="hljs-string">&quot;a&quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span><br>d5.get(<span class="hljs-string">&quot;c&quot;</span>)<span class="hljs-comment">##返回None 什么都没有</span><br><br>d5.get(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;not in dict&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;not in dict&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="修改-添加-删除元素"><a href="#修改-添加-删除元素" class="headerlink" title="修改,添加,删除元素"></a>修改,添加,删除元素</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228165518914.png"><br><code>update(dict2)</code>方法将dict2中的键值对更新到字典中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>d5.update(&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">4</span>&#125;)<br>d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><p><code>setdefault(key,default=None)</code>方法和get类似，不过他如果没有找到键的话会添加键，并将值设为default(和get一样也会返回default值)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">d5.setdefault(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">5</span>)<br>&gt;&gt; <span class="hljs-number">5</span><br>d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><p>删除元素有3种方法：<code>pop(key,default)</code>方法删除键(key)所对应的值并返回该值，如果key不存在则返回default；<code>del dict[key]</code>语句删除key对应的值；<code>clear</code>方法删除所有元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">d5.pop(<span class="hljs-string">&quot;a&quot;</span>)<br>&gt;&gt; <span class="hljs-number">4</span><br>d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>&#125;<br>d5.pop(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;not in dict&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;not in dict&#x27;</span><br><span class="hljs-keyword">del</span> d5[<span class="hljs-string">&quot;b&quot;</span>]<br>d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>&#125;<br>d5.clear()<br>d5<br>&gt;&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E9%9B%86%E5%90%88.nbmx%20-%20%E5%9D%9A%E6%9E%9C%E4%BA%91_00.png"></p><h3 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228185240284.png"></p><p>注意：在创建空集合的时候只能使用<code>set()</code>而不能使用<code>&#123;&#125;</code>，因为<code>&#123;&#125;</code>创建的是空字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = <span class="hljs-built_in">set</span>()<br><br>set1.add(<span class="hljs-string">&quot;a&quot;</span>)<br>set1<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>&#125;<br>set1.add((<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>))<br>set1<br><br><span class="hljs-comment">###直接创建</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)&#125;<br>set2 = &#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>&#125;<br>set2<br><br><span class="hljs-comment">###将列表/元组/字符串转化成集合</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br><span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;abc&quot;</span>)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br><span class="hljs-built_in">set</span>((<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>))<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br><span class="hljs-built_in">set</span>([<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加-删除-修改元素"><a href="#添加-删除-修改元素" class="headerlink" title="添加,删除,修改元素"></a>添加,删除,修改元素</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228185911041.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">set3 = &#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br>set3.add(<span class="hljs-string">&quot;d&quot;</span>)<br>set3<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br>set3.add(<span class="hljs-string">&quot;a&quot;</span>)<span class="hljs-comment">##相同元素 不执行操作</span><br>set3<br><br><span class="hljs-comment">###update 更新集合 和前面讲的类似，不同的是集合中的元素唯一</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br>set3.update(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>)<br>set3<br><br><span class="hljs-comment">###remove移除指定元素</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>set3.remove(<span class="hljs-string">&quot;a&quot;</span>)<br>set3<br><br><span class="hljs-comment">###discard也是移除元素，但是元素不存在不会报错</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>set3.remove(<span class="hljs-string">&quot;a&quot;</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): KeyError: <span class="hljs-string">&#x27;a&#x27;</span><br>set3.discard(<span class="hljs-string">&quot;a&quot;</span>)<br><br>set3<br><br><span class="hljs-comment">###pop随机移除</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>set3.pop()<br>&gt;&gt; <span class="hljs-string">&#x27;d&#x27;</span><br>set3<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228190454050.png"><br><code>intersection(set1, set2)</code><br>返回两个集合的交集,也可以使用<code>&amp;</code>,<code>intersection_update(set1, set2)</code>取交集并更新原来的集合(相当于将原来集合中不重叠的元素删除)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;abcd&quot;</span>)<br>b = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;cdef&quot;</span>)<br><br><span class="hljs-built_in">print</span>(a,b,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a.intersection(b)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(a,b,end=<span class="hljs-string">&quot;\n&quot;</span>)<span class="hljs-comment">##原来的集合没有改变</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a.intersection_update(b)<br><span class="hljs-built_in">print</span>(a,b,end=<span class="hljs-string">&quot;\n&quot;</span>)<span class="hljs-comment">##原来的集合改变</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>union(set1, set2) 返回两个集合的并集,也可以使用<code>|</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a.union(b)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a | b<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>difference(set)<br>返回集合的差集,也可以使用<code>-</code>,difference_update(set)更改原来的集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a.difference(b)<br>&gt;&gt; <span class="hljs-built_in">set</span>()<br>b.difference(a)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a-b<br>&gt;&gt; <span class="hljs-built_in">set</span>()<br>b-a<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>b.difference_update(a)<br><span class="hljs-built_in">print</span>(a,b)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>symmetric_difference(set)返回集合的异或，或者使用<code>^</code></p><p>集合的异或指的是：(参考<a href="https://www.cnblogs.com/organic/p/5023038.html)%E4%B8%8B%E5%9B%BE%E7%BB%BF%E8%89%B2%E7%9A%84%E9%83%A8%E5%88%86">https://www.cnblogs.com/organic/p/5023038.html)下图绿色的部分</a></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/818872-20151206095708736-923889139.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;abcd&quot;</span>)<br>b = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;cdef&quot;</span>)<br><br><span class="hljs-built_in">print</span>(a,b,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a.symmetric_difference(b)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a.symmetric_difference_update(b)<br><span class="hljs-built_in">print</span>(a,b,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>issubset(set)判断集合是否被set包含，也可以使用<code>&lt;=</code>;issuperset(set)判断集合是否包含set，也可以使用<code>&gt;=</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">c = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;ab&quot;</span>)<br><br>c.issubset(a)<br>&gt;&gt; <span class="hljs-literal">True</span><br>c &lt;= a<br>&gt;&gt; <span class="hljs-literal">True</span><br>a.issuperset(c)<br>&gt;&gt; <span class="hljs-literal">True</span><br>a &gt;= c<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>isdisjoint(set) 用于判断两个集合是不是不相交</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a.isdisjoint(b)<br>&gt;&gt; <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 基础01</title>
    <link href="/2021/02/13/python-task1/"/>
    <url>/2021/02/13/python-task1/</url>
    
    <content type="html"><![CDATA[<p>基本数据类型，控制语句和异常处理</p><span id="more"></span><ul><li><p>变量，运算符和基本数据类型</p></li><li><p>位运算</p></li><li><p>条件语句</p></li><li><p>循环语句</p></li><li><p>异常处理</p></li></ul><h2 id="变量，运算符和基本数据类型"><a href="#变量，运算符和基本数据类型" class="headerlink" title="变量，运算符和基本数据类型"></a>变量，运算符和基本数据类型</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210213221003385.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">abc = <span class="hljs-string">&quot;hello&quot;</span><br>b1_ = <span class="hljs-number">7</span><br>_b = <span class="hljs-number">1</span><br>第一个变量 = <span class="hljs-string">&quot;hello world&quot;</span> <span class="hljs-comment">##可以使用中文</span><br><br><span class="hljs-built_in">print</span>(第一个变量)<br>&gt;&gt; hello world<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">1a = <span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-comment">##不能以数字开头</span><br><br>File <span class="hljs-string">&quot;&lt;ipython-input-1-ef2f4120639d&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    1a = <span class="hljs-string">&quot;hello&quot;</span><br>     ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符有以下几类：</p><ul><li>算术运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>位运算符</li><li>三元运算符</li><li>其他运算符</li></ul><p>算术运算符：</p><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>+</code></td><td style="text-align: center;">加</td><td style="text-align: center;"><code>1 + 1</code></td></tr><tr class="even"><td style="text-align: center;"><code>-</code></td><td style="text-align: center;">减</td><td style="text-align: center;"><code>2 - 1</code></td></tr><tr class="odd"><td style="text-align: center;"><code>*</code></td><td style="text-align: center;">乘</td><td style="text-align: center;"><code>3 * 4</code></td></tr><tr class="even"><td style="text-align: center;"><code>/</code></td><td style="text-align: center;">除</td><td style="text-align: center;"><code>3 / 4</code></td></tr><tr class="odd"><td style="text-align: center;"><code>//</code></td><td style="text-align: center;">整除</td><td style="text-align: center;"><code>3 // 4</code></td></tr><tr class="even"><td style="text-align: center;"><code>%</code></td><td style="text-align: center;">取余</td><td style="text-align: center;"><code>3 % 4</code></td></tr><tr class="odd"><td style="text-align: center;"><code>**</code></td><td style="text-align: center;">幂</td><td style="text-align: center;"><code>2 ** 3</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">3</span> // <span class="hljs-number">4</span><br>&gt;&gt; <span class="hljs-number">0</span><br><span class="hljs-number">4</span> // <span class="hljs-number">3</span><br>&gt;&gt; <span class="hljs-number">1</span><br><span class="hljs-number">4</span> % <span class="hljs-number">3</span><br>&gt;&gt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>比较运算符(结果是布尔值True&#x2F;False)：</p><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>&gt;</code></td><td style="text-align: center;">大于</td><td style="text-align: center;"><code>2 &gt; 1</code></td></tr><tr class="even"><td style="text-align: center;"><code>&gt;=</code></td><td style="text-align: center;">大于等于</td><td style="text-align: center;"><code>2 &gt;= 4</code></td></tr><tr class="odd"><td style="text-align: center;"><code>&lt;</code></td><td style="text-align: center;">小于</td><td style="text-align: center;"><code>1 &lt; 2</code></td></tr><tr class="even"><td style="text-align: center;"><code>&lt;=</code></td><td style="text-align: center;">小于等于</td><td style="text-align: center;"><code>5 &lt;= 2</code></td></tr><tr class="odd"><td style="text-align: center;"><code>==</code></td><td style="text-align: center;">等于</td><td style="text-align: center;"><code>3 == 4</code></td></tr><tr class="even"><td style="text-align: center;"><code>!=</code></td><td style="text-align: center;">不等于</td><td style="text-align: center;"><code>3 != 5</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">3</span> &gt;= <span class="hljs-number">4</span> <br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-number">3</span> != <span class="hljs-number">5</span><br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>逻辑运算符(结果也是布尔值True&#x2F;False):</p><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>and</code></td><td style="text-align: center;">与</td><td style="text-align: center;"><code>(3 &gt; 2) and (3 &lt; 5)</code></td></tr><tr class="even"><td style="text-align: center;"><code>or</code></td><td style="text-align: center;">或</td><td style="text-align: center;"><code>(1 &gt; 3) or (9 &lt; 2)</code></td></tr><tr class="odd"><td style="text-align: center;"><code>not</code></td><td style="text-align: center;">非</td><td style="text-align: center;"><code>not (2 &gt; 1)</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">( <span class="hljs-number">3</span> &gt;= <span class="hljs-number">4</span> ) <span class="hljs-keyword">and</span> ( <span class="hljs-number">3</span> !=<span class="hljs-number">5</span> )<br>&gt;&gt; <span class="hljs-literal">False</span><br>( <span class="hljs-number">3</span> &gt;= <span class="hljs-number">4</span> ) <span class="hljs-keyword">or</span> ( <span class="hljs-number">3</span> !=<span class="hljs-number">5</span> )<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-keyword">not</span>( <span class="hljs-number">3</span> !=<span class="hljs-number">5</span> )<br>&gt;&gt; <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>位运算符:</p><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>~</code></td><td style="text-align: center;">按位取反</td><td style="text-align: center;"><code>~4</code></td></tr><tr class="even"><td style="text-align: center;"><code>&amp;</code></td><td style="text-align: center;">按位与</td><td style="text-align: center;"><code>4 &amp; 5</code></td></tr><tr class="odd"><td style="text-align: center;"><code>|</code></td><td style="text-align: center;">按位或</td><td style="text-align: center;"><code>4 | 5</code></td></tr><tr class="even"><td style="text-align: center;"><code>^</code></td><td style="text-align: center;">按位异或</td><td style="text-align: center;"><code>4 ^ 5</code></td></tr><tr class="odd"><td style="text-align: center;"><code>&lt;&lt;</code></td><td style="text-align: center;">左移</td><td style="text-align: center;"><code>4 &lt;&lt; 2</code></td></tr><tr class="even"><td style="text-align: center;"><code>&gt;&gt;</code></td><td style="text-align: center;">右移</td><td style="text-align: center;"><code>4 &gt;&gt; 2</code></td></tr></tbody></table><p>三元运算符,也叫条件表达式，可以简化条件判断和赋值操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#condition_is_true if condition else condition_is_false</span><br><span class="hljs-comment">##如果条件为真，则返回if前面的结果，如果为假则返回else后面的结果</span><br><br>x = <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x 是一个字符&quot;</span>) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(x,<span class="hljs-built_in">str</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x 不是字符&quot;</span>)<br>&gt;&gt; x 是一个字符<br></code></pre></td></tr></table></figure><p>其他运算符：</p><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>in</code></td><td style="text-align: center;">存在</td><td style="text-align: center;"><code>'A' in ['A', 'B', 'C']</code></td></tr><tr class="even"><td style="text-align: center;"><code>not in</code></td><td style="text-align: center;">不存在</td><td style="text-align: center;"><code>'h' not in ['A', 'B', 'C']</code></td></tr><tr class="odd"><td style="text-align: center;"><code>is</code></td><td style="text-align: center;">是</td><td style="text-align: center;"><code>"hello" is "hello"</code></td></tr><tr class="even"><td style="text-align: center;"><code>not is</code></td><td style="text-align: center;">不是</td><td style="text-align: center;"><code>"hello" is not "hello"</code></td></tr></tbody></table><p>需要注意的是<code>is</code>&#x2F;<code>not is</code><br>和<code>==</code>&#x2F;<code>!=</code>的区别，<code>is</code>&#x2F;<code>not is</code>比较的是内存地址，而<code>==</code>&#x2F;<code>!=</code>比较的是变量的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###不可变类型，两者是一样的；因为对于不可变类型，值一样内存地址就一样</span><br>x = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-built_in">id</span>(x) <span class="hljs-comment">##使用id查看内存地址</span><br>&gt;&gt; <span class="hljs-number">2241811015152</span><br>y = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-built_in">id</span>(y)<br>&gt;&gt; <span class="hljs-number">2241811015152</span><br>x == y<br>&gt;&gt; <span class="hljs-literal">True</span><br>x <span class="hljs-keyword">is</span> y<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">id</span>(x) == <span class="hljs-built_in">id</span>(y)<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###对于可变类型，两者是有区别的</span><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">id</span>(a)<br>&gt;&gt; <span class="hljs-number">2241811025408</span><br>b = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">id</span>(b)<br>&gt;&gt; <span class="hljs-number">2241810930752</span><br><span class="hljs-built_in">id</span>(a) == <span class="hljs-built_in">id</span>(b)<br>&gt;&gt; <span class="hljs-literal">False</span><br>a == b<br>&gt;&gt; <span class="hljs-literal">True</span><br>a <span class="hljs-keyword">is</span> b<br>&gt;&gt; <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>运算符的优先级：</p><table><thead><tr class="header"><th>运算符</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>**</td><td>指数（最高优先级）</td></tr><tr class="even"><td>~+-</td><td>按位翻转，一元加号和减号</td></tr><tr class="odd"><td>* / % //</td><td>乘，除，取模和取整除）</td></tr><tr class="even"><td>+ -</td><td>加法减法</td></tr><tr class="odd"><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr class="even"><td>&amp;</td><td>位‘AND’</td></tr><tr class="odd"><td>^|</td><td>位运算符</td></tr><tr class="even"><td>&lt;=&lt;&gt;&gt;=</td><td>比较运算符</td></tr><tr class="odd"><td>&lt;&gt;==!=</td><td>等于运算符</td></tr><tr class="even"><td>=%=/=//=-=+=*=**=</td><td>赋值运算符</td></tr><tr class="odd"><td>is is not</td><td>身份运算符</td></tr><tr class="even"><td>in not in</td><td>成员运算符</td></tr><tr class="odd"><td>not and or</td><td>逻辑运算符</td></tr></tbody></table><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210214114944454.png"></p><p>基本数据类型包括：整型，浮点型和布尔型</p><table><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">int</td><td style="text-align: center;">整型 <code>&lt;class 'int'&gt;</code></td><td style="text-align: center;"><code>-876, 10</code></td></tr><tr class="even"><td style="text-align: center;">float</td><td style="text-align: center;">浮点型<code>&lt;class 'float'&gt;</code></td><td style="text-align: center;"><code>3.149, 11.11</code></td></tr><tr class="odd"><td style="text-align: center;">bool</td><td style="text-align: center;">布尔型<code>&lt;class 'bool'&gt;</code></td><td style="text-align: center;"><code>True, False</code></td></tr></tbody></table><p>可以通过<code>type</code>或者<code>isinstance</code>来获取对象的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">123</span><br><span class="hljs-built_in">type</span>(x)<br>&gt;&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br><span class="hljs-built_in">isinstance</span>(x,<span class="hljs-built_in">int</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>两者的区别是：<code>type</code>不考虑继承关系，而<code>isinstance</code>考虑继承关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">pass</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment">##B(A)表示B继承A</span><br><br><span class="hljs-built_in">type</span>(A()) == A<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">type</span>(B()) == A<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">isinstance</span>(B(),A)<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>对于<strong>浮点数</strong>，有时候我们想要控制其显示的小数点位数，可以使用decimal<br>包里的 Decimal 对象和 getcontext() 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> decimal<br><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> Decimal<br><br>a = decimal.getcontext()<br>a<br>&gt;&gt; Context(prec=<span class="hljs-number">28</span>, rounding=ROUND_HALF_EVEN, Emin=-<span class="hljs-number">999999</span>, Emax=<span class="hljs-number">999999</span>, capitals=<span class="hljs-number">1</span>, clamp=<span class="hljs-number">0</span>, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])<br></code></pre></td></tr></table></figure><p>其中prec&#x3D;28表示默认精度是28位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>/<span class="hljs-number">3</span><br>&gt;&gt; <span class="hljs-number">0.3333333333333333</span><br>Decimal(<span class="hljs-number">1</span>)/Decimal(<span class="hljs-number">3</span>)<br>&gt;&gt; Decimal(<span class="hljs-string">&#x27;0.3333333333333333333333333333&#x27;</span>)<br></code></pre></td></tr></table></figure><p>用 getcontext().prec 来调整精度,使其保留小数点后4位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">decimal.getcontext().prec = <span class="hljs-number">4</span><br>Decimal(<span class="hljs-number">1</span>)/Decimal(<span class="hljs-number">3</span>)<br>&gt;&gt; Decimal(<span class="hljs-string">&#x27;0.3333&#x27;</span>)<br></code></pre></td></tr></table></figure><p>对于<strong>布尔值</strong>,<br>除了直接将True和False赋值给布尔型变量之外，还可以使用<code>bool</code>函数来创建布尔型变量，这个函数的参数可以有两种类型：</p><ul><li>基本数据类型：整型，浮点型和布尔型</li><li>容器数据类型：字符串，列表，元组，字典和集合</li></ul><p>对于基本数据类型：0(包括整型的0和浮点型的0.0)是False，其他都是True<br>对于容器数据类型：空的就是False，非空的就是True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>)<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">bool</span>(<span class="hljs-number">0.00</span>)<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">bool</span>(<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">bool</span>([])<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">bool</span>([<span class="hljs-number">1</span>])<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">bool</span>(&#123;&#125;)<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">bool</span>(&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>&#125;)<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>计算机中的数在内存中都是以二进制形式进行存储的，位运算就是直接对数在内存中的二进制位来进行操作，具有较高的效率；二进制有3种表示形式：原码，反码和补码<br><strong>计算机内部使用补码来表示</strong></p><ul><li><p>原码：正常的二进制表示(负数有一个符号位)；比如<code>00 00 00 11</code>表示的数为3，<code>10 00 00 11</code>表示的数为-3，最高位(最左边)为符号位(0表示正，1表示负)</p></li><li><p>反码：正数的反码和原码一样，负数的反码是对应正数原码进行按位取反，比如3的原码和反码是一样的，而-3的反码是<code>11 11 11 00</code></p></li><li><p>补码：正数的补码和原码一样，负数的补码为反码加1，比如-3的补码为<code>11 11 11 01</code></p></li></ul><h3 id="按位运算"><a href="#按位运算" class="headerlink" title="按位运算"></a>按位运算</h3><ul><li>按位非: <code>~</code></li></ul><p><code>~ num</code>表示将num的补码进行取反(0变成1，1变成0，包括符号位)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">~ <span class="hljs-number">1</span> <span class="hljs-comment">###1的原码为00 00 00 01;补码和原码一样，所以取反后为11 11 11 10是负数，</span><br><span class="hljs-comment">##所以转化成十进制为数值位取反加1：0 00 00 01+1=0 00 00 10 为2 再加上符号，因此为-2</span><br>&gt;&gt; -<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>按位与操作: <code>&amp;</code></li></ul><p>这是一个二元操作符，只有两个对应位都是1时结果才为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">1</span><br><span class="hljs-number">1</span> &amp; -<span class="hljs-number">2</span><br><span class="hljs-comment">##1的补码为00 00 00 01；-2的原码为10 00 00 10，补码为00 00 00 10按位取反得11 11 11 01再加1为11 11 11 10</span><br><span class="hljs-comment">##所以 与操作 结果为00 00 00 00 为0</span><br>&gt;&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>按位或操作：<code>|</code></li></ul><p>只要两个对应位中有一个为1结果就为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> | <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">1</span><br><span class="hljs-number">1</span> | -<span class="hljs-number">2</span> <span class="hljs-comment">##11 11 11 11转化为10进制：10 00 00 01 = -1</span><br>&gt;&gt; -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>按位异或操作：<code>^</code></li></ul><p>两个对应位不同时结果才是1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> ^ -<span class="hljs-number">2</span> <span class="hljs-comment">##11 11 11 11 结果也是-1</span><br>&gt;&gt; -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>按位左移和右移操作</li></ul><p><code>num &lt;&lt; i</code>将num得二进制表示(1的位置)向左移动i位，<code>&gt;&gt;</code>表示向右移动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">11</span> &lt;&lt; <span class="hljs-number">3</span> <span class="hljs-comment">##11的补码为00 00 10 11将所有的1向左移3位得到：01 01 10 00为88</span><br>&gt;&gt; <span class="hljs-number">88</span><br><span class="hljs-number">11</span> &gt;&gt; <span class="hljs-number">3</span> <span class="hljs-comment">##右移3位得到 00 00 00 01为1</span><br>&gt;&gt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ul><li>if语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> expression:<br>    expr_true_suite<br></code></pre></td></tr></table></figure><p>只有当expression为真，才执行语句expr_true_suite</p><ul><li>if-else 语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> expression:<br>    expr_true_suite<br><span class="hljs-keyword">else</span>:<br>    expr_false_suite<br></code></pre></td></tr></table></figure><p>expression为真执行expr_true_suite，否则执行expr_false_suite</p><ul><li>if-elif-else语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> expression1:<br>    expr1_true_suite<br><span class="hljs-keyword">elif</span> expression2:<br>    expr2_true_suite<br>    .<br>    .<br><span class="hljs-keyword">elif</span> expressionN:<br>    exprN_true_suite<br><span class="hljs-keyword">else</span>:<br>    expr_false_suite<br></code></pre></td></tr></table></figure><p>进行多重判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">source = <span class="hljs-number">99</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">100</span> &gt;= source &gt;= <span class="hljs-number">90</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">90</span> &gt; source &gt;= <span class="hljs-number">80</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;B&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">80</span> &gt; source &gt;= <span class="hljs-number">60</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">60</span> &gt; source &gt;= <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;D&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入错误！&#x27;</span>)<br>&gt;&gt; A<br></code></pre></td></tr></table></figure><ul><li>assert 断言关键词</li></ul><p>当assert后面的语句为False时，会抛出<code>AssertionError</code>异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> <span class="hljs-number">3</span> &gt; <span class="hljs-number">6</span><br><span class="hljs-comment">##AssertionError</span><br></code></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><ul><li>while 循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> expression:<br>  code<br></code></pre></td></tr></table></figure><p>当expression为真的时候会一直执行缩进语句中的代码</p><ul><li>while-else 循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> expression:<br>  code1<br><span class="hljs-keyword">else</span>:<br>  code2<br></code></pre></td></tr></table></figure><p>expression为真，执行code1，为假则执行code2；需要注意的是如果code1中执行了跳出循环的语句，那么不会执行code2中的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">count = <span class="hljs-number">5</span> <br><br><span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">6</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is more than 6&quot;</span> % count)<br>  count = count - <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is not more than 6&quot;</span> % count)<br>&gt;&gt; <span class="hljs-number">5</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> more than <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">count = <span class="hljs-number">5</span> <br><br><span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">4</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is more than 4&quot;</span> % count)<br>  count = count - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is not more than 4&quot;</span> % count)<br>&gt;&gt; <span class="hljs-number">5</span> <span class="hljs-keyword">is</span> more than <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">4</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is more than 4&quot;</span> % count)<br>  count = count - <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is not more than 4&quot;</span> % count)<br>&gt;&gt; <span class="hljs-number">4</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> more than <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><ul><li>for 循环</li></ul><p>for循环是一个通用的序列迭代器，可以遍历任何可迭代对象(str,list,tuple,dict等)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-built_in">object</span>:<br>  code<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;abcd&quot;</span>:<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot;\t&quot;</span>)<br>&gt;&gt; a    b   c   d   <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = &#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<span class="hljs-comment">##默认是keys</span><br>&gt;&gt; a b c<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic.values():<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><ul><li>for-else 循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-built_in">object</span>:<br>  code1<br><span class="hljs-keyword">else</span>:<br>  code2<br></code></pre></td></tr></table></figure><p>和while-else循环类似，在for循环执行完后执行else下的语句，如果执行了code1中的跳出循环的语句将不会执行code2</p><ul><li>range()函数</li></ul><p>range函数的用法为<code>range(start,stop,step=1)</code>，可以用来生成从start到stop步长为step的数字序列(注意：不包含stop，左闭右开)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>):<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<span class="hljs-comment">##默认为stop</span><br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<br>&gt;&gt; <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>):<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><ul><li>enumerate()函数</li></ul><p>enumerate的用法为<code>enumerate(seq,start=0)</code>,seq为可迭代对象，返回的也是一个可迭代对象(数据加上索引，索引默认从0开始，可以通过start参数指定)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">seasons = [<span class="hljs-string">&#x27;Spring&#x27;</span>, <span class="hljs-string">&#x27;Summer&#x27;</span>, <span class="hljs-string">&#x27;Fall&#x27;</span>, <span class="hljs-string">&#x27;Winter&#x27;</span>]<br><br>seasons_enu = <span class="hljs-built_in">enumerate</span>(seasons)<br><span class="hljs-built_in">print</span>(seasons_enu,<span class="hljs-built_in">type</span>(seasons_enu))<br>&gt;&gt; &lt;<span class="hljs-built_in">enumerate</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x00000209F6583380</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;enumerate&#x27;</span>&gt;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(seasons_enu))<br>&gt;&gt; [(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Spring&#x27;</span>), (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Summer&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Fall&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Winter&#x27;</span>)]<br>seasons_enu1 = <span class="hljs-built_in">enumerate</span>(seasons,start=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(seasons_enu1))<br>&gt;&gt; [(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Spring&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Summer&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Fall&#x27;</span>), (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;Winter&#x27;</span>)]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> seasons_enu1:<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>break 和 continue 语句</li></ul><p>break是跳出整个循环语句，而continue是跳出本次循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">counts = <span class="hljs-number">4</span><br><br><span class="hljs-keyword">while</span> counts &lt; <span class="hljs-number">7</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is less than 7&quot;</span> % counts)<br>  counts = counts +<span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span> counts == <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">break</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i run!&quot;</span>)<br>&gt;&gt; <span class="hljs-number">4</span> <span class="hljs-keyword">is</span> less than <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">counts = <span class="hljs-number">4</span><br><br><span class="hljs-keyword">while</span> counts &lt; <span class="hljs-number">7</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is less than 7&quot;</span> % counts)<br>  counts = counts +<span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span> counts == <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">continue</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i run!&quot;</span>)<br>&gt;&gt; <span class="hljs-number">4</span> <span class="hljs-keyword">is</span> less than <span class="hljs-number">7</span><br>&gt;&gt; <span class="hljs-number">5</span> <span class="hljs-keyword">is</span> less than <span class="hljs-number">7</span><br>&gt;&gt; i run!<br>&gt;&gt; <span class="hljs-number">6</span> <span class="hljs-keyword">is</span> less than <span class="hljs-number">7</span><br>&gt;&gt; i run!<br></code></pre></td></tr></table></figure><ul><li>pass 语句</li></ul><p>pass 是空语句，不做任何操作，起到占位作用(暂时不确定在该位置写什么代码)</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="Python-标准异常总结"><a href="#Python-标准异常总结" class="headerlink" title="Python 标准异常总结"></a>Python 标准异常总结</h3><ul><li>BaseException：所有异常的 <strong>基类</strong></li><li>Exception：常规异常的 <strong>基类</strong></li><li>StandardError：所有的内建标准异常的基类</li><li>ArithmeticError：所有数值计算异常的基类</li><li>FloatingPointError：浮点计算异常</li><li><u>OverflowError</u>：数值运算超出最大限制</li><li><u>ZeroDivisionError</u>：除数为零</li><li><u>AssertionError</u>：断言语句（assert）失败</li><li><u>AttributeError</u>：尝试访问未知的对象属性</li><li>EOFError：没有内建输入，到达EOF标记</li><li>EnvironmentError：操作系统异常的基类</li><li>IOError：输入&#x2F;输出操作失败</li><li><u>OSError</u>：操作系统产生的异常（例如打开一个不存在的文件）</li><li>WindowsError：系统调用失败</li><li><u>ImportError</u>：导入模块失败的时候</li><li>KeyboardInterrupt：用户中断执行</li><li>LookupError：无效数据查询的基类</li><li><u>IndexError</u>：索引超出序列的范围</li><li><u>KeyError</u>：字典中查找一个不存在的关键字</li><li><u>MemoryError</u>：内存溢出（可通过删除对象释放内存）</li><li><u>NameError</u>：尝试访问一个不存在的变量</li><li>UnboundLocalError：访问未初始化的本地变量</li><li>ReferenceError：弱引用试图访问已经垃圾回收了的对象</li><li>RuntimeError：一般的运行时异常</li><li>NotImplementedError：尚未实现的方法</li><li><u>SyntaxError</u>：语法错误导致的异常</li><li>IndentationError：缩进错误导致的异常</li><li>TabError：Tab和空格混用</li><li>SystemError：一般的解释器系统异常</li><li><u>TypeError</u>：不同类型间的无效操作</li><li><u>ValueError</u>：传入无效的参数</li><li>UnicodeError：Unicode相关的异常</li><li>UnicodeDecodeError：Unicode解码时的异常</li><li>UnicodeEncodeError：Unicode编码错误导致的异常</li><li>UnicodeTranslateError：Unicode转换错误导致的异常</li></ul><p>异常体系内部有层次关系，Python异常体系中的部分关系如下所示：</p><p><img src="https://img-blog.csdnimg.cn/20200710131404548.png"></p><hr><h3 id="Python标准警告总结"><a href="#Python标准警告总结" class="headerlink" title="Python标准警告总结"></a>Python标准警告总结</h3><ul><li>Warning：警告的基类</li><li>DeprecationWarning：关于被弃用的特征的警告</li><li>FutureWarning：关于构造将来语义会有改变的警告</li><li>UserWarning：用户代码生成的警告</li><li>PendingDeprecationWarning：关于特性将会被废弃的警告</li><li>RuntimeWarning：可疑的运行时行为(runtime behavior)的警告</li><li>SyntaxWarning：可疑语法的警告</li><li>ImportWarning：用于在导入模块过程中触发的警告</li><li>UnicodeWarning：与Unicode相关的警告</li><li>BytesWarning：与字节或字节码相关的警告</li><li>ResourceWarning：与资源使用相关的警告</li></ul><p>捕获异常可以使用try-except语句：</p><ul><li>try-except语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>  code1<br><span class="hljs-keyword">except</span> Exception [<span class="hljs-keyword">as</span> reason]:<br>  code2<br></code></pre></td></tr></table></figure><p>首先执行code1，如果没有异常发生就忽略code2；如果code1中出现异常，那么就会将异常的类型(见上面的总结)和Exception进行匹配，如果可以匹配上就执行code2,如果不能匹配，异常将传递到上层的try，但是一直没有匹配就会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(f.read())<br>    f.close()<br><span class="hljs-keyword">except</span> OSError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;open file error&#x27;</span>)<br>&gt;&gt; <span class="hljs-built_in">open</span> file error<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>   <span class="hljs-number">1</span> + <span class="hljs-string">&quot;p&quot;</span><br><span class="hljs-keyword">except</span> OSError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;open file error&#x27;</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): TypeError: unsupported operand <span class="hljs-built_in">type</span>(s) <span class="hljs-keyword">for</span> +: <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;str&#x27;</span><br></code></pre></td></tr></table></figure><p>还可以加上as来展示具体的错误信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(f.read())<br>    f.close()<br><span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> error:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;open file error, reason is :&#x27;</span> + <span class="hljs-built_in">str</span>(error))<br>&gt;&gt; <span class="hljs-built_in">open</span> file error, reason <span class="hljs-keyword">is</span> :[Errno <span class="hljs-number">2</span>] No such file <span class="hljs-keyword">or</span> directory: <span class="hljs-string">&#x27;test.txt&#x27;</span><br></code></pre></td></tr></table></figure><p>try后面可以接上多个except语句，用来处理不同的异常，但是需要注意异常之间的关系(见上面那张图)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;v&#x27;</span>: <span class="hljs-number">22</span>&#125;<br><span class="hljs-keyword">try</span>:<br>    x = dict1[<span class="hljs-string">&#x27;y&#x27;</span>]<br><span class="hljs-keyword">except</span> LookupError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查询错误&#x27;</span>)<br><span class="hljs-keyword">except</span> KeyError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;键错误&#x27;</span>)<br>&gt;&gt; 查询错误<br></code></pre></td></tr></table></figure><p>这里KeyError属于LookupError的子类，LookupError又在前面，所以执行的是LookupError里面的语句，所以在使用多个except语句时，要将最底端的异常放在前面(更加具体)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;v&#x27;</span>: <span class="hljs-number">22</span>&#125;<br><span class="hljs-keyword">try</span>:<br>    x = dict1[<span class="hljs-string">&#x27;y&#x27;</span>]<br><span class="hljs-keyword">except</span> KeyError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;键错误&#x27;</span>)<br><span class="hljs-keyword">except</span> LookupError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查询错误&#x27;</span>)<br>&gt;&gt; 键错误<br></code></pre></td></tr></table></figure><p>一个except语句也可以处理多个异常，将需要处理的异常放在元组中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    s = <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;p&#x27;</span><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(f.read())<br>    f.close()<br><span class="hljs-keyword">except</span> (OSError, TypeError) <span class="hljs-keyword">as</span> error:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error !, the reason for first error is ：&#x27;</span> + <span class="hljs-built_in">str</span>(error))<br>&gt;&gt; error !, the reason <span class="hljs-keyword">for</span> first error <span class="hljs-keyword">is</span> ：unsupported operand <span class="hljs-built_in">type</span>(s) <span class="hljs-keyword">for</span> +: <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;str&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>try-except-else 语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>  code2<br><span class="hljs-keyword">except</span>  Exception [<span class="hljs-keyword">as</span> reason]:<br>  code2<br><span class="hljs-keyword">else</span>:<br>  code3<br></code></pre></td></tr></table></figure><p>如果没有异常则执行code3</p><ul><li>try-except-finally 语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>  code2<br><span class="hljs-keyword">except</span>  Exception [<span class="hljs-keyword">as</span> reason]:<br>  code2<br><span class="hljs-keyword">finally</span>:<br>  code3<br></code></pre></td></tr></table></figure><p>无论code1中有没有异常，code3中的代码都会被执行(如果code1中有异常并且不能被except捕获，那么会在运行code3之后报错)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs &#123;python&#125;">def divide(x, y):<br>    try:<br>        result = x / y<br>        print(&quot;result is&quot;, result)<br>    except ZeroDivisionError:<br>        print(&quot;division by zero!&quot;)<br>    finally:<br>        print(&quot;executing finally clause&quot;)<br>        <br>divide(2, 1)<br>divide(2, 0)<br>divide(&quot;2&quot;, &quot;1&quot;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【hands on ML Ch4】-训练模型</title>
    <link href="/2021/02/08/hands_on_ml_ch4/"/>
    <url>/2021/02/08/hands_on_ml_ch4/</url>
    
    <content type="html"><![CDATA[<p>hands on ML 主要包括线性回归，多项式回归，逻辑回归，softmax回归，梯度下降和正则化方法</p><span id="more"></span><p>本章主要包括：</p><ul><li>线性回归模型</li><li>多项式回归模型</li><li>逻辑回归模型</li><li>Softmax回归模型</li><li>一些正则化的技术</li><li>梯度下降</li></ul><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>一般线性回归的表示行形式为：输入特征的加权求和再加上截距项(或者叫做bias term) <em>ŷ</em> &#x3D; <em>θ</em><sub>0</sub> + <em>θ</em><sub>1</sub><em>x</em><sub>1</sub> + <em>θ</em><sub>2</sub><em>x</em><sub>2</sub> + … + <em>θ</em><sub><em>n</em></sub><em>x</em><sub><em>n</em></sub> (<em>ŷ</em>是预测值，n是特征数量，<em>x</em><sub><em>i</em></sub>是特征值，<em>θ</em><sub><em>j</em></sub>是模型参数)，也可以写成向量形式：<em>ŷ</em> &#x3D; <em>h</em><sub><em>θ</em></sub>(<em>x</em>) &#x3D; <em>θ</em><sup><em>T</em></sup><em>X</em> (<em>θ</em>是参数向量，X是输入特征向量)</p><p>在第二章中已经讲过衡量一个线性回归模型常用的指标是RMSE，因此我们可以通过最小化RMSE来找到参数<em>θ</em>,为了简化计算，在实际操作中我们是最小化MSE的(MSE最小化，平方根自然也就是最小的)：</p><p>$$<br>MSE(X,h_{\theta})&#x3D;\frac{1}{m}\sum_{i&#x3D;1}^{m}(\theta^TX^{(i)}-y^{(i)})^2<br>$$</p><p>求使损失函数最小的<em>θ</em>最直接的方法就是进行数学求解(解析解，也叫normal equation)，MSE的Normal Equation为：<em>θ̂</em> &#x3D; (<em>X</em><sup><em>T</em></sup><em>X</em>)<sup> − 1</sup><em>X</em><sup><em>T</em></sup><em>y</em>，我们可以来验证一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##生成数据</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = <span class="hljs-number">2</span> * np.random.rand(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br>y = <span class="hljs-number">4</span> + <span class="hljs-number">3</span> * x + np.random.randn(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br>plt.plot(x, y, <span class="hljs-string">&quot;b.&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000021801228460</span>&gt;]<br>plt.xlabel(<span class="hljs-string">&quot;$x_1$&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;$x_1$&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;$y$&quot;</span>, rotation=<span class="hljs-number">0</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;$y$&#x27;</span>)<br>plt.axis([<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>])<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">15.0</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-1-1.png" width="672" /><p>计算<em>θ</em>的Normal equation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x_b = np.c_[np.ones((<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)),x]<span class="hljs-comment">##x_0 = 1</span><br>theta_best = np.linalg.inv(x_b.T.dot(x_b)).dot(x_b.T).dot(y)<br><br>theta_best<br>&gt;&gt; array([[<span class="hljs-number">4.12634538</span>],<br>&gt;&gt;        [<span class="hljs-number">2.81427971</span>]])<br></code></pre></td></tr></table></figure><p><code>np.c_</code>进行的是增加列的操作(R里面的cbind);<code>np.ones((100,1))</code>产 100行1列的矩阵，元素都是1;<code>np.linalg</code>是numpy中线性代数模块;<code>inv</code>是矩阵求逆方法;<code>T</code>是矩阵转置方法;<code>dot</code>是矩阵乘法。</p><p>现在我们使用计算出的<em>θ̂</em>来预测：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x_new = np.array([[<span class="hljs-number">0</span>],[<span class="hljs-number">2</span>]])<br>x_new_b = np.c_[np.ones((<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)),x_new]<br>y_pre = x_new_b.dot(theta_best)<br>y_pre<br>&gt;&gt; array([[<span class="hljs-number">4.12634538</span>],<br>&gt;&gt;        [<span class="hljs-number">9.7549048</span> ]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot(x_new,y_pre,<span class="hljs-string">&quot;r-&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002180339EFA0</span>&gt;]<br>plt.plot(x,y,<span class="hljs-string">&quot;b.&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x00000218011C2EB0</span>&gt;]<br>plt.axis([<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>])<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">15.0</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-4-1.png" width="672" /><p>在Scikit-Learn中可以使用<code>LinearRegression</code>来方便的进行线性回归的计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br><br>lin_reg = LinearRegression()<br>lin_reg.fit(x,y)<br>&gt;&gt; LinearRegression()<br>lin_reg.intercept_, lin_reg.coef_<br>&gt;&gt; (array([<span class="hljs-number">4.12634538</span>]), array([[<span class="hljs-number">2.81427971</span>]]))<br>lin_reg.predict(x_new)<br>&gt;&gt; array([[<span class="hljs-number">4.12634538</span>],<br>&gt;&gt;        [<span class="hljs-number">9.7549048</span> ]])<br></code></pre></td></tr></table></figure><p><code>LinearRegression</code>类是基于<code>scipy.linalg.lstsq</code>函数的，该函数是通过SVD进行计算pseudoinverse(<em>X</em><sup>+</sup>)然后再计算<em>θ̂</em> &#x3D; <em>X</em><sup>+</sup><em>y</em>,这样计算有两个好处：pseudoinverse的计算比直接计算矩阵的逆效率更高(why?)；当<em>X</em><sup><em>T</em></sup><em>X</em>不可逆的时候NormalEquation是无法计算的，而pseudoinverse是可以计算的</p><p>计算Normal Equation的计算复杂度是比较大的(求矩阵的逆的计算复杂度为 <em>O</em>(<em>n</em><sup>2.4</sup>)~<em>O</em>(<em>n</em><sup>3</sup>),使用SVD方法的计算复杂度为<em>O</em>(<em>n</em><sup>2</sup>))</p><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><h3 id="数学理论"><a href="#数学理论" class="headerlink" title="数学理论"></a>数学理论</h3><p>这一部分参考李宏毅老师的机器学习课程</p><p>现在的问题是：找到<em>θ</em><sup>*</sup>：<br>$$<br>\theta^* &#x3D; argmin_{\theta}L(\theta)<br>$$<br><em>L</em>(<em>θ</em>)是损失函数，</p><p>现在假设<em>θ</em>由两个参数构成：{<em>θ</em><sub>1</sub>,<em>θ</em><sub>2</sub>}, <em>L</em>(<em>θ</em>)的等高线如下图：<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227170016311.png"></p><p>给定一个点，我们是否可以在其邻域内找到一个使<em>L</em>(<em>θ</em>)最小的点然后向这个点移动最终到达全局最小点(如上图)；那么怎样找到这个点呢？</p><p>这里需要引入**<a href="https://www.bilibili.com/video/BV1Gx411Y7cz?from=search&seid=4438787146009065334">泰勒级数</a><strong>的概念：</strong>泰勒级数利用函数在某个点的导数来近似在这个点附近的函数值**,数学表示为：<br>在<em>x</em> &#x3D; <em>x</em><sub>0</sub>附近有：<br>$$<br>h(x) &#x3D; h(x_0)+h^{‘}(x_0)(x-x_0)+\frac{h^{‘’}(x_0)}{2!}(x-x_0)^2+…<br>$$<br>当x接近<em>x</em><sub>0</sub>的时候可以将高次式忽略：<br>$$<br>h(x) \approx  h(x_0)+h^{‘}(x_0)(x-x_0)<br>$$<br>对于多个变量也是类似的：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227180156655.png"></p><p>回到上面的问题:</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227180518842.png"></p><p><strong>如果红色的圆圈足够小</strong>，我们就可以使用泰勒级数来近似损失函数：<br>$$<br>L(\theta) \approx  L(a,b)+\frac{\partial L(a,b)}{\partial \theta_1}(\theta_1-a)+\frac{\partial L(a,b)}{\partial \theta_2}(\theta_2-b)<br>$$<br>令$s&#x3D;L(a,b)$,$u&#x3D;\frac{\partial L(a,b)}{\partial \theta_1}$,$v&#x3D;\frac{\partial L(a,b)}{\partial \theta_2}$, 将上式简化:<br>$$<br>L(\theta) \approx s + u(\theta_1-a)+v(\theta_2-b)<br>$$<br>我们现在的问题就是：在红色的圆圈内找到<em>θ</em><sub>1</sub>和<em>θ</em><sub>2</sub>使得<em>L</em>(<em>θ</em>)最小，</p><p>如果使$\theta_1-a&#x3D;\Delta \theta_1$, $\theta_2-b&#x3D;\Delta \theta_2$，那么<em>L</em>(<em>θ</em>)就可以表示为两个向量的乘积：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227182845081.png"></p><p>要使<em>L</em>(<em>θ</em>)最小，那么就要使这两个向量反向(并且$(\Delta \theta_1,\Delta \theta_2)$在圆上)：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227183501439.png"></p><p>这个就是梯度下降的形式：<br>$$<br>\theta^i &#x3D; \theta^{i-1} - \eta \bigtriangledown L(\theta^{i-1})<br>$$</p><h3 id="梯度下降的注意事项"><a href="#梯度下降的注意事项" class="headerlink" title="梯度下降的注意事项"></a>梯度下降的注意事项</h3><h4 id="学习率的调整"><a href="#学习率的调整" class="headerlink" title="学习率的调整"></a>学习率的调整</h4><p>学习率(<em>η</em>)是一个重要的超参数，决定了梯度下降的步伐有多大;如果学习率比较小,那么收敛到最小值需要迭代的次数就比较多，如果学习率比较大,那么就可能跳过了最小值，甚至有可能比起始值还要大：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227185426216.png"></p><p>除了手动设定学习率之外，我们还可以使学习率随着训练的进行逐渐减少(在每次迭代时，决定学习率的函数叫做<em>learning schedule</em>)。</p><h4 id="随机梯度下降和-mini-batch-梯度下降"><a href="#随机梯度下降和-mini-batch-梯度下降" class="headerlink" title="随机梯度下降和 mini-batch 梯度下降"></a>随机梯度下降和 mini-batch 梯度下降</h4><p>上面提到的损失函数都是对所有的训练数据来计算的(所有预测值和真实值的误差和)，而随机梯度下降所使用的计算梯度的函数是随机选取的观测值的预测值和真实值的误差(只看一个点)，而 mini-batch 则是取一小部分数据进行梯度下降，下面是不同方法的比较：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210704111451263.png" alt="image-20210704111451263"></p><h4 id="特征的归一化"><a href="#特征的归一化" class="headerlink" title="特征的归一化"></a>特征的归一化</h4><p>下面的图比较形象的表示了归一化对学习的影响：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227210417449.png"></p><p>如果两个特征的范围不一样，那么在更新参数时对损失函数的下降的贡献就会不一样。</p><p>在Scikit learn中可以使用<code>SGDRegressor</code>来进行随机梯度下降求解线性回归模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> SGDRegressor<br>sgd_reg = SGDRegressor(max_iter=<span class="hljs-number">1000</span>,tol=<span class="hljs-number">1e-3</span>,penalty=<span class="hljs-literal">None</span>,eta0=<span class="hljs-number">0.1</span>)<br>sgd_reg.fit(x,y.ravel())<span class="hljs-comment">##ravel将列向量转为一维向量</span><br>&gt;&gt; SGDRegressor(eta0=<span class="hljs-number">0.1</span>, penalty=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p><code>max_iter</code>表示epoch的数目(epoch指全部训练数据都被模型“看了”一遍)；<code>tol</code>表示如果在某一个epoch上损失函数下降小于tol的数值，则训练停止；<code>penalty</code>表示正则化(后面讲);<code>eta0</code>表示初始的学习率大小，默认的学习率是:$eta0&#x2F;pow(t,power_t)$, power_t的默认值是0.25</p><h2 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h2><p>可以使用线性模型来拟合非线性的数据，一个简单的做法就是将每个特征加上幂次作为新的特征，然后对这些拓展的特征进行训练线性模型，这个技术叫做<strong>多项式回归(polynomial regression)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##模拟数据</span><br>m = <span class="hljs-number">100</span><br>np.random.seed(<span class="hljs-number">123</span>)<br>x = <span class="hljs-number">6</span> * np.random.rand(m,<span class="hljs-number">1</span>) - <span class="hljs-number">3</span> <span class="hljs-comment">##均匀分布</span><br>y = <span class="hljs-number">0.5</span> * x**<span class="hljs-number">2</span> + x + <span class="hljs-number">2</span> + np.random.randn(m,<span class="hljs-number">1</span>)<span class="hljs-comment">##正态分布</span><br><br>plt.plot(x, y, <span class="hljs-string">&quot;b.&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002180E9B1910</span>&gt;]<br>plt.xlabel(<span class="hljs-string">&quot;$x_1$&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;$x_1$&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;$y$&quot;</span>, rotation=<span class="hljs-number">0</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;$y$&#x27;</span>)<br>plt.axis([-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>])<br>&gt;&gt; (-<span class="hljs-number">3.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">10.0</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-7-1.png" width="672" /><p>使用<code>PolynomialFeatures</code>类将特征加上平方后作为新的特征：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> PolynomialFeatures<br>poly_features = PolynomialFeatures(degree=<span class="hljs-number">2</span>,include_bias=<span class="hljs-literal">False</span>)<br>x_poly = poly_features.fit_transform(x)<br><br>x[<span class="hljs-number">0</span>]<br>&gt;&gt; array([<span class="hljs-number">1.17881511</span>])<br>x_poly[<span class="hljs-number">0</span>]<br>&gt;&gt; array([<span class="hljs-number">1.17881511</span>, <span class="hljs-number">1.38960507</span>])<br></code></pre></td></tr></table></figure><p>然后重新训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">lin_reg = LinearRegression()<br>lin_reg.fit(x_poly,y)<br>&gt;&gt; LinearRegression()<br>lin_reg.intercept_, lin_reg.coef_<br>&gt;&gt; (array([<span class="hljs-number">2.03146145</span>]), array([[<span class="hljs-number">0.95505451</span>, <span class="hljs-number">0.50182851</span>]]))<br></code></pre></td></tr></table></figure><p>预测：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">x_new=np.linspace(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">100</span>).reshape(<span class="hljs-number">100</span>, <span class="hljs-number">1</span>)<br>x_new_poly = poly_features.transform(x_new)<br>y_new = lin_reg.predict(x_new_poly)<br>plt.plot(x, y, <span class="hljs-string">&quot;b.&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002180ECF2C40</span>&gt;]<br>plt.plot(x_new, y_new, <span class="hljs-string">&quot;r-&quot;</span>, linewidth=<span class="hljs-number">2</span>, label=<span class="hljs-string">&quot;Predictions&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002180ECF2E80</span>&gt;]<br>plt.xlabel(<span class="hljs-string">&quot;$x_1$&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;$x_1$&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;$y$&quot;</span>, rotation=<span class="hljs-number">0</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;$y$&#x27;</span>)<br>plt.legend(loc=<span class="hljs-string">&quot;upper left&quot;</span>, fontsize=<span class="hljs-number">14</span>)<br>&gt;&gt; &lt;matplotlib.legend.Legend <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002180EB14490</span>&gt;<br>plt.axis([-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>])<br>&gt;&gt; (-<span class="hljs-number">3.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">10.0</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-10-1.png" width="672" /><p>需要注意的是：<code>PolynomialFeatures(degree=d)</code>会将原来的n个特征变成$\frac{(n+d)!}{d!n!}$个特征；比如有两个特征a,b,经过自由度为3的PolynomialFeatures转化后就有10个特征(包括1),要注意特征爆炸的问题</p><h2 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h2><p>使用高自由度的多项式回归模型可能会在训练集上过拟合，然而简单的线性模型可能是欠拟合的，那么我们该怎样决定模型的复杂程度或者说判断模型是过拟合还是欠拟合呢？</p><p>在第二章中，使用了交叉验证的方法来估计模型的泛化能力；如果一个模型在训练集上表现的比较好但是依据交叉验证的指标，其泛化能力比较差(在验证集上表现不好)，那么这个模型就是过拟合；如果一个模型在训练集和验证集上表现都不好，那么这个模型是欠拟合的。</p><p>另外一个方法就是检查<strong>学习曲线</strong>(learning curves),<strong>学习曲线展示了模型在训练集和验证集上的表现和训练集大小或者训练的迭代次数之间的关系</strong>;要画这个图，需要在不同大小的训练集的子集上训练模型，得到模型的表现指标。</p><p>我们先来画一个简单线性回归的学习曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_learning_curves</span>(<span class="hljs-params">model,x,y</span>):<br>  x_train,x_val,y_train,y_val = train_test_split(x,y,test_size=<span class="hljs-number">0.2</span>)<br>  train_errors,val_errors = [],[]<br>  <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(x_train)):<br>    model.fit(x_train[:m],y_train[:m])<br>    y_train_predict = model.predict(x_train[:m])<br>    y_val_predict = model.predict(x_val)<br>    train_errors.append(mean_squared_error(y_train[:m],y_train_predict))<br>    val_errors.append(mean_squared_error(y_val,y_val_predict))<br>  <br>  plt.plot(np.sqrt(train_errors),<span class="hljs-string">&quot;r-+&quot;</span>,linewidth=<span class="hljs-number">2</span>,label=<span class="hljs-string">&quot;train&quot;</span>)<br>  plt.plot(np.sqrt(val_errors), <span class="hljs-string">&quot;b-&quot;</span>, linewidth=<span class="hljs-number">3</span>, label=<span class="hljs-string">&quot;val&quot;</span>)<br>  plt.legend(loc=<span class="hljs-string">&quot;upper right&quot;</span>, fontsize=<span class="hljs-number">14</span>)  <br>  plt.xlabel(<span class="hljs-string">&quot;Training set size&quot;</span>, fontsize=<span class="hljs-number">14</span>)<br>  plt.ylabel(<span class="hljs-string">&quot;RMSE&quot;</span>, fontsize=<span class="hljs-number">14</span>) <br>    <br>    <br>lin_reg = LinearRegression()<br>plot_learning_curves(lin_reg,x,y)<br>plt.axis([<span class="hljs-number">0</span>, <span class="hljs-number">80</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>]) <br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">80.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">3.0</span>)<br>plt.show()        <br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-11-1.png" width="672" /><p>当只有一两个训练数据的时候，模型拟合的非常好，同时由于训练集较少，泛化能力较弱所以在验证集中表现不好；当训练集逐渐增大，一方面由于数据的噪音，另一方面因为模型是线性的，而数据不是线性的，所以模型在训练集上的误差上升，但是由于训练集增多，泛化能力会一定程度的上升，所以在验证集上的误差降低，最终两者都到达一个平台。</p><p>这个学习曲线是一个典型的欠拟合的模型的特征：<strong>两个曲线都到达一个平台；并且两者比较接近，都比较高</strong>。</p><p>接下来看一下有10个自由度的多项式回归模型的学习曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.pipeline <span class="hljs-keyword">import</span> Pipeline<br><br>polynomial_regression = Pipeline([<br>        (<span class="hljs-string">&quot;poly_features&quot;</span>, PolynomialFeatures(degree=<span class="hljs-number">20</span>, include_bias=<span class="hljs-literal">False</span>)),<br>        (<span class="hljs-string">&quot;lin_reg&quot;</span>, LinearRegression()),<br>    ])<br><br>plot_learning_curves(polynomial_regression, x, y)<br>plt.axis([<span class="hljs-number">0</span>, <span class="hljs-number">80</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>])<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">80.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">3.0</span>)<br>plt.show()           <br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-12-1.png" width="672" /><p>这个学习曲线也有两个特征：</p><ul><li>在训练集上的误差比上面的线性回归模型要低</li><li>在两个曲线间有一个gap，这意味着模型在训练集上比在验证集上的表现要好得多，而这是<strong>过拟合</strong>的特征(可能需要收集更多的数据)</li></ul><h2 id="BIAS-x2F-VARIANCE-TRADE-OFF"><a href="#BIAS-x2F-VARIANCE-TRADE-OFF" class="headerlink" title="BIAS&#x2F;VARIANCE TRADE-OFF"></a>BIAS&#x2F;VARIANCE TRADE-OFF</h2><h2 id="正则化线性模型"><a href="#正则化线性模型" class="headerlink" title="正则化线性模型"></a>正则化线性模型</h2><p>在第一章和第二章已经讲过了减少过拟合风险的方法之一就是正则化模型(也就是约束模型)；对于多项式模型最简单的正则化方法就是减少模型的自由度；对于线性模型，正则化一般是通过约束模型的权重来实现，常用的有3种方法：岭回归(Ridge Regression),Lasso回归,弹性网络(Elastic Net)。</p><h3 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h3><p>岭回归就是在线性回归的损失函数后面加上了一个正则化的项:</p><p>$$<br>J(\theta) &#x3D; MSE(\theta) + \alpha \frac{1}{2}\sum_{i&#x3D;1}^{n}\theta_i^2<br>$$<br>加上这一项之后就会使得模型在训练的过程中尽量保持特征权重(<em>θ</em>)比较小。  </p><blockquote><p>注意：在岭回归等正则化的模型中，训练时使用的损失函数与计算模型性能时用的指标不一定相同(在分类模型中更是如此)；另外在训练正则化的模型时，对特征一定要归一化</p></blockquote><p>下图，左边是线性回归使用岭正则化，右图是多项式回归使用岭正则化，展示了不同<em>α</em>值时的情况：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210301230247251.png"></p><p>可以看到增加<em>α</em>会是曲线更加平缓(减少了variance但是增加了bias)。</p><p>对于岭回归，和线性回归一样，可以使用normal equation的方法或者梯度下降的方法求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##Normal equation</span><br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> Ridge<br><br>ridge_reg = Ridge(alpha=<span class="hljs-number">1</span>,solver=<span class="hljs-string">&quot;cholesky&quot;</span>)<br>ridge_reg.fit(x,y)<br>&gt;&gt; Ridge(alpha=<span class="hljs-number">1</span>, solver=<span class="hljs-string">&#x27;cholesky&#x27;</span>)<br>ridge_reg.predict([[<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([[<span class="hljs-number">4.58785445</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##梯度下降</span><br>sgd_reg = SGDRegressor(penalty=<span class="hljs-string">&quot;l2&quot;</span>)<br>sgd_reg.fit(x,y.ravel())<br>&gt;&gt; SGDRegressor()<br>sgd_reg.predict([[<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([<span class="hljs-number">4.56218836</span>])<br></code></pre></td></tr></table></figure><p>“l2”指的是L2范数(norm);<em>L</em><sub><em>p</em></sub>范数的定义为：<br>$$<br>||x||_p &#x3D; \sqrt[p]{\sum_i |x_i|^p}<br>$$<br>因此L2范数为：<br>$$<br>||x||_2 &#x3D; \sqrt[2]{\sum_i |x_i|^2}<br>$$</p><p>所以岭回归的正则化项就是<em>α</em> 1&#x2F;2(||<em>w</em>||<sub>2</sub>)<sup>2</sup>,w是<em>θ</em><sub>1</sub>到<em>θ</em><sub><em>n</em></sub>的参数向量(特征权重)</p><h3 id="Lasso回归"><a href="#Lasso回归" class="headerlink" title="Lasso回归"></a>Lasso回归</h3><p>Lasso的全称为Least Absolute Shrinkage and Selection Operator ，和岭回归类似也是在损失函数后面加上一个正则化项，只不过Lasso加的是L1范数：<br>$$<br>J(\theta) &#x3D; MSE(\theta) + \alpha\sum_{i&#x3D;1}^n|\theta_i|<br>$$<br>lasso回归可以用来进行特征选择(why)</p><p>上面那个损失函数在<em>θ</em><sub><em>i</em></sub> &#x3D; 0的地方是不可微分的，但是可以通过将梯度向量替换成次梯度向量(subgradient vector)来解决这个问题：<br>$$<br>g(\theta,J)&#x3D;\triangledown MSE(\theta)+ \alpha \left(<br>\begin{array}{cccc}<br> sign(\theta_1)\<br> sign(\theta_2)\<br> \vdots  \<br> sign(\theta_n)<br>\end{array}<br>\right ) where \ sign(\theta_n)&#x3D; \begin{cases}<br>-1\ if\ \theta_i &lt;0 \<br>0\ \ if\ \theta_i &#x3D;0 \<br>+1 \ if\ \theta_i &gt;0<br>\end{cases}<br>$$</p><p>在Scikit-Learn中可以使用<code>Lasso</code>或者<code>SGDRegressor</code>(指定l1范数的惩罚项)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> Lasso<br><br>lasso_reg = Lasso(alpha=<span class="hljs-number">0.1</span>)<br>lasso_reg.fit(x,y)<br>&gt;&gt; Lasso(alpha=<span class="hljs-number">0.1</span>)<br>lasso_reg.predict([[<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([<span class="hljs-number">4.52578706</span>])<br>sgd_lasso = SGDRegressor(penalty=<span class="hljs-string">&quot;l1&quot;</span>)<br>sgd_lasso.fit(x,y.ravel())<br>&gt;&gt; SGDRegressor(penalty=<span class="hljs-string">&#x27;l1&#x27;</span>)<br>sgd_lasso.predict([[<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([<span class="hljs-number">4.57060493</span>])<br></code></pre></td></tr></table></figure><h3 id="弹性网络"><a href="#弹性网络" class="headerlink" title="弹性网络"></a>弹性网络</h3><p>弹性网络(Elastic Net)是岭回归和lasso回归中间的“调和”，其正则化项是岭回归和lasso回归的正则化项的混合，可以通过<em>r</em>来控制混合的比例:<br>$$<br>J(\theta)&#x3D;MSE(\theta)+r\alpha\sum_{i&#x3D;1}^n|\theta_i|+\frac{1-r}{2}\alpha\sum_{i&#x3D;1}^n\theta_i^2<br>$$</p><p>什么时候使用单独的线性回归，什么时候使用正则化的模型，这些正则化方法应该选哪个；一般来说要避免使用单独的线性回归，所以更多的情况下是使用正则化的模型，当我们知道特征中只有一部分是有用的，可以使用lasso或者弹性网络来选择变量；另外尽可能的使用弹性网络，因为<strong>当特征的数量比训练样本的数量要多或者几个特征间相关性比较强时，lasso表现不稳定</strong>。</p><p>sklearn中的<code>ElasticNet</code>可以用来建立弹性网络模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> ElasticNet<br>elastic_net = ElasticNet(alpha=<span class="hljs-number">0.1</span>,l1_ratio=<span class="hljs-number">0.5</span>)<span class="hljs-comment">##l1_ratio指的是r</span><br>elastic_net.fit(x,y)<br>&gt;&gt; ElasticNet(alpha=<span class="hljs-number">0.1</span>)<br>elastic_net.predict([[<span class="hljs-number">1.5</span>]])<br><br><span class="hljs-comment">##也可以使用SGDRgressor</span><br>&gt;&gt; array([<span class="hljs-number">4.52788619</span>])<br>sgd_elastic = SGDRegressor(penalty=<span class="hljs-string">&quot;elasticnet&quot;</span>,alpha=<span class="hljs-number">0.1</span>,l1_ratio=<span class="hljs-number">0.5</span>)<br>sgd_elastic.fit(x,y.ravel())<br>&gt;&gt; SGDRegressor(alpha=<span class="hljs-number">0.1</span>, l1_ratio=<span class="hljs-number">0.5</span>, penalty=<span class="hljs-string">&#x27;elasticnet&#x27;</span>)<br>sgd_elastic.predict([[<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([<span class="hljs-number">4.51766322</span>])<br></code></pre></td></tr></table></figure><h3 id="Early-Stopping"><a href="#Early-Stopping" class="headerlink" title="Early Stopping"></a>Early Stopping</h3><p>另一个方法去正则化迭代的学习算法(如梯度下降)是：当验证集误差达到最小值的时候就停止训练；这种方法叫做<strong>early stopping</strong>,如下图所示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210304083008485.png"></p><p>当学习算法学习的时候，在训练集和验证集上的误差都会降低，但是一段时间之后会出现在验证集上的误差上升的情况，这意味着模型开始过拟合，因此最好在未过拟合之前就停止训练模型(验证集误差最低)。</p><p>注意：在随机梯度下降或者小批次梯度下降中，曲线不会像上图那样平滑，因此很难判定是否达到最小值；一个解决方法就是：当训练一段时间之后，验证集的误差一直比最小值要高(每一个epoch之后就把验证集误差和之前所有的误差比较，看看是不是最小值，进行迭代更新)，就停止训练，记录下验证集误差最小时的模型参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##data</span><br>np.random.seed(<span class="hljs-number">42</span>)<br>m = <span class="hljs-number">100</span><br>X = <span class="hljs-number">6</span> * np.random.rand(m, <span class="hljs-number">1</span>) - <span class="hljs-number">3</span><br>y = <span class="hljs-number">2</span> + X + <span class="hljs-number">0.5</span> * X**<span class="hljs-number">2</span> + np.random.randn(m, <span class="hljs-number">1</span>)<br><br>X_train, X_val, y_train, y_val = train_test_split(X[:<span class="hljs-number">50</span>], y[:<span class="hljs-number">50</span>].ravel(), test_size=<span class="hljs-number">0.5</span>, random_state=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> copy <span class="hljs-keyword">import</span> deepcopy<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><br><span class="hljs-comment">##数据预处理</span><br>poly_scaler = Pipeline([<br>        (<span class="hljs-string">&quot;poly_features&quot;</span>, PolynomialFeatures(degree=<span class="hljs-number">90</span>, include_bias=<span class="hljs-literal">False</span>)),<br>        (<span class="hljs-string">&quot;std_scaler&quot;</span>, StandardScaler())<br>    ])<br><br>X_train_poly_scaled = poly_scaler.fit_transform(X_train)<br>X_val_poly_scaled = poly_scaler.transform(X_val)<br><br>sgd_reg = SGDRegressor(max_iter=<span class="hljs-number">1</span>, tol=-np.infty, warm_start=<span class="hljs-literal">True</span>,<br>                       penalty=<span class="hljs-literal">None</span>, learning_rate=<span class="hljs-string">&quot;constant&quot;</span>, eta0=<span class="hljs-number">0.0005</span>, random_state=<span class="hljs-number">42</span>)<br><br>minimum_val_error = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>)<br>best_epoch = <span class="hljs-literal">None</span><br>best_model = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    sgd_reg.fit(X_train_poly_scaled, y_train)  <span class="hljs-comment"># continues where it left off</span><br>    y_val_predict = sgd_reg.predict(X_val_poly_scaled)<br>    val_error = mean_squared_error(y_val, y_val_predict)<br>    <span class="hljs-keyword">if</span> val_error &lt; minimum_val_error:<br>        minimum_val_error = val_error<br>        best_epoch = epoch<br>        best_model = deepcopy(sgd_reg)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">best_epoch<br>&gt;&gt; <span class="hljs-number">239</span><br>minimum_val_error<br>&gt;&gt; <span class="hljs-number">1.3513110512453865</span><br></code></pre></td></tr></table></figure><p>首先预处理步骤对数据进行多项式转化，然后进行归一化；SGDRegressor参数中设置max_iter&#x3D;1意思是每次训练只进行一个epoch(因为后面显式地进行epoch的迭代),tol前面讲过(如果在某一个epoch上损失函数下降小于tol的数值，则训练停止),warm_start&#x3D;T表示调用fit时会使用上次训练得到的模型参数作为初始值继续进行训练(热启动),random_state表示当对每个新的epoch都会进行shuffle(默认)时取的随机种子数，来保证结果可重复</p><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>逻辑回归可以用来估计某个实例属于某一类别的概率，如果概率大于50%，则认为该实例属于该类(1),否则不属于该类(0),因此是二分类的分类器</p><h3 id="估计概率"><a href="#估计概率" class="headerlink" title="估计概率"></a>估计概率</h3>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【hands on ML Ch3】-分类</title>
    <link href="/2021/02/04/hands_on_ML_ch3/"/>
    <url>/2021/02/04/hands_on_ML_ch3/</url>
    
    <content type="html"><![CDATA[<p>Hands on ML 第三章笔记，主要是分类相关的知识</p><span id="more"></span><p>本章使用的数据集是MNIST数据集，有70000张手写的数字图像(这个数据集也被称为是机器学习的“hello world”)</p><p>Scikit-Learn提供了一些函数来下载常用的数据集，下面的代码可以下载MNIST数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> fetch_openml<br><br>mnist = fetch_openml(<span class="hljs-string">&#x27;mnist_784&#x27;</span>, version=<span class="hljs-number">1</span>)<br>mnist.keys()<br></code></pre></td></tr></table></figure><p>通过Scikit-Learn下载的数据是字典的结构，包含key和value，比如<code>DESCR</code>key表示数据集的描述，<code>data</code> key表示数据集，<code>target</code> key表示数据集的标签。</p><p>使用Scikit-Learn下载太慢，所以在openml官网下载了csv格式的<a href="https://www.openml.org/d/554">数据</a>，再使用numpy读入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>data = np.loadtxt(<span class="hljs-string">&quot;../test/mnist_784.csv&quot;</span>,delimiter=<span class="hljs-string">&quot;,&quot;</span>,skiprows=<span class="hljs-number">1</span>)<br><br>data.shape<br><br>&gt;&gt; (<span class="hljs-number">70000</span>, <span class="hljs-number">785</span>)<br>X = data[:,<span class="hljs-number">0</span>:<span class="hljs-number">784</span>]<span class="hljs-comment">###data without lable</span><br><br>y = data[:,<span class="hljs-number">784</span>]<span class="hljs-comment">###lable</span><br><br>X.shape<br>&gt;&gt; (<span class="hljs-number">70000</span>, <span class="hljs-number">784</span>)<br>y.shape<br>&gt;&gt; (<span class="hljs-number">70000</span>,)<br></code></pre></td></tr></table></figure><p>每个图片都有784个特征，因为每张图片都由28*28个像素构成，每个特征就代表一个像素的密度(0-255):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl <br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>some_digit = X[<span class="hljs-number">0</span>] <br>some_digit_image = some_digit.reshape(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>) <br>plt.imshow(some_digit_image,cmap=<span class="hljs-string">&quot;binary&quot;</span>) <br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015BA034A700</span>&gt;<br>plt.axis(<span class="hljs-string">&quot;off&quot;</span>) <br>&gt;&gt; (-<span class="hljs-number">0.5</span>, <span class="hljs-number">27.5</span>, <span class="hljs-number">27.5</span>, -<span class="hljs-number">0.5</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-3-1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">y[<span class="hljs-number">0</span>]<br>&gt;&gt; <span class="hljs-number">5.0</span><br></code></pre></td></tr></table></figure><p>首先要做的就是划分训练集和测试集(MNIST数据集已经打乱过了，所以每个交叉验证的fold都是类似的)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X_train, X_test, y_train, y_test = X[:<span class="hljs-number">60000</span>], X[<span class="hljs-number">60000</span>:], y[:<span class="hljs-number">60000</span>], y[<span class="hljs-number">60000</span>:]<br></code></pre></td></tr></table></figure><h2 id="训练二分类器"><a href="#训练二分类器" class="headerlink" title="训练二分类器"></a>训练二分类器</h2><p>二分类器的目的是在数据中辨别出两种类别，比如这里我们想要鉴别某个手写的数字是5还是不是5；首先将数据的lable进行重塑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">y_train_5 = (y_train == <span class="hljs-number">5</span>)<br>y_test_5 = (y_test == <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>我们首先尝试SGD(Stochastic Gradient Descent)分类器【随机梯度下降是一种算法，Scikit-Learn里面的SGDClassifier类指的是一系列模型，这些模型的优化算法都是SGD，SGDClassifier类默认的是线性SVM模型，参照官网上的<a href="https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html">说明</a>】:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> SGDClassifier<br><br>sgd_clf = SGDClassifier(random_state=<span class="hljs-number">42</span>)<span class="hljs-comment">##随机梯度下降需要设定种子数 </span><br>sgd_clf.fit(X_train, y_train_5)<br>&gt;&gt; SGDClassifier(random_state=<span class="hljs-number">42</span>)<br>sgd_clf.predict([some_digit])<br>&gt;&gt; array([ <span class="hljs-literal">True</span>])<br></code></pre></td></tr></table></figure><h2 id="模型性能评估"><a href="#模型性能评估" class="headerlink" title="模型性能评估"></a>模型性能评估</h2><p>这一部分是重点</p><h3 id="使用交叉验证来评估准确性"><a href="#使用交叉验证来评估准确性" class="headerlink" title="使用交叉验证来评估准确性"></a>使用交叉验证来评估准确性</h3><p>和第二章一样，使用cross_val_score函数来进行交叉验证，注意这里使用的评价方法不是第二章里面的RSME了，而是使用精确度(正确预测的比例)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_val_score<br><br>cross_val_score(sgd_clf, X_train, y_train_5, cv=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&quot;accuracy&quot;</span>)<br>&gt;&gt; array([<span class="hljs-number">0.95035</span>, <span class="hljs-number">0.96035</span>, <span class="hljs-number">0.9604</span> ])<br></code></pre></td></tr></table></figure><p>看起来结果不错，但是如果我们构建一个非常简单的模型：将所有的图片都分到不是5的类中，这个模型的精确度是多少呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.base <span class="hljs-keyword">import</span> BaseEstimator<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Never5Classifier</span>(<span class="hljs-title class_ inherited__">BaseEstimator</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fit</span>(<span class="hljs-params">self, X, y=<span class="hljs-literal">None</span></span>): <br>      <span class="hljs-keyword">pass</span> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, X</span>): <br>      <span class="hljs-keyword">return</span> np.zeros((<span class="hljs-built_in">len</span>(X), <span class="hljs-number">1</span>), dtype=<span class="hljs-built_in">bool</span>)<span class="hljs-comment">##返回False</span><br>    <br>never_5_clf = Never5Classifier()<br>cross_val_score(never_5_clf, X_train, y_train_5, cv=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&quot;accuracy&quot;</span>)<br>&gt;&gt; array([<span class="hljs-number">0.91125</span>, <span class="hljs-number">0.90855</span>, <span class="hljs-number">0.90915</span>])<br></code></pre></td></tr></table></figure><p>这个模型都有0.9以上的准确度，因为只有10%的图片是5，所以总是猜不是5，90%是对的，这说明：仅仅使用准确度来衡量模型是不太好的，特别是对于有偏向性的数据(skewed datasets)。</p><h3 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h3><p>评估一个分类器的更好的方法是混淆矩阵(confusion matrix)，混淆矩阵的每一行是真实的类，每一列是预测的类；要计算混淆矩阵，首先要获取预测值，可以使用cross_val_predict函数，这个函数也进行交叉验证，不过返回的不是评估分数而是在每一个验证集上的预测值(因此是“clean”的预测，所谓clean指的是预测使用的是在训练过程中没有看过的数据)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_val_predict<br><br>y_train_pred = cross_val_predict(sgd_clf, X_train, y_train_5, cv=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>然后就可以使用confusion_matrix函数来获得混淆矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrix<br><br>confusion_matrix(y_train_5, y_train_pred)<br>&gt;&gt; array([[<span class="hljs-number">53892</span>,   <span class="hljs-number">687</span>],<br>&gt;&gt;        [ <span class="hljs-number">1891</span>,  <span class="hljs-number">3530</span>]], dtype=int64)<br></code></pre></td></tr></table></figure><p>这个混淆矩阵可以使用下图来表示：<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210204170319913.png"></p><p>一个完美的分类器的混淆矩阵应该只有主对角线上是非零值</p><p>关于混淆矩阵，有一些重要的指标：</p><ul><li><p>精度(precision)表示 在预测的positive里面真实的也是positive的比例：</p><p>$$<br>precision &#x3D; \frac{TP}{TP+FP}<br>$$</p></li><li><p>召回率(recall)(或者叫灵敏度sensitivity; 真阳性率FPR)表示<br>在真实的positive里面预测是positive的比例：</p><p>$$<br>recall &#x3D; \frac{TP}{TP+FN}<br>$$</p></li></ul><h3 id="精度和召回率"><a href="#精度和召回率" class="headerlink" title="精度和召回率"></a>精度和召回率</h3><p>Scikit-Learn也提供了函数来计算精度和召回率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_score, recall_score<br><br>precision_score(y_train_5,y_train_pred)<br>&gt;&gt; <span class="hljs-number">0.8370879772350012</span><br>recall_score(y_train_5, y_train_pred)<br>&gt;&gt; <span class="hljs-number">0.6511713705958311</span><br></code></pre></td></tr></table></figure><p>这些值的意思是：当这个分类器认为某个图片是5，那么有83.7%的机率是对的；并且这个分类器只检测到65%的是5的图片</p><p>也可以将精度和召回率结合成一个值：F_1 score (两者的几何平均，几何平均给予小的值更大的权重)：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210204171113298.png"></p><p>可以使用 f1_score()函数来计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> f1_score<br><br>f1_score(y_train_5, y_train_pred)<br>&gt;&gt; <span class="hljs-number">0.7325171197343846</span><br></code></pre></td></tr></table></figure><p>需要注意的是：<strong>在不同情况下，我们对于precision和recall的关注度是不一样的</strong>：</p><p>比如，如果训练的分类器的任务是检测对儿童安全的视频，那么这个分类器的precision就更重要(尽可能保证预测是安全的视频实际上也是安全的，而不是说将所有的安全的视频都给检出)；而如果分类器的任务是根据商场的监控图像来检测小偷，这个时候分类器的recall就更重要(将所有的小偷尽可能全部检测出，虽然有可能发出假的的警报)。</p><h3 id="Precision-x2F-Recall-平衡"><a href="#Precision-x2F-Recall-平衡" class="headerlink" title="Precision&#x2F;Recall 平衡"></a>Precision&#x2F;Recall 平衡</h3><p>对于每个观测值，SGDClassifier都会依据决策函数(decision function)来计算一个值，再根据特定的阈值，如果计算的值高于阈值则为positive类，低于阈值则为negative类，所以改变这个阈值就是使得precision和recall有所变化，这个过程可以用下图来表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210204173205578.png"></p><p>在Scikit-Learn中，我们可以通过decision_function()方法来获取每个观测值的决策函数值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">y_scores = sgd_clf.decision_function([some_digit])<br>y_scores<br>&gt;&gt; array([<span class="hljs-number">2164.22030239</span>])<br>threshold = <span class="hljs-number">0</span><span class="hljs-comment">##设置阈值为0</span><br>y_some_digit_pred = (y_scores &gt; threshold)<br>y_some_digit_pred<br>&gt;&gt; array([ <span class="hljs-literal">True</span>])<br>threshold = <span class="hljs-number">8000</span><span class="hljs-comment">##改变阈值</span><br>y_some_digit_pred = (y_scores &gt; threshold)<br>y_some_digit_pred<br>&gt;&gt; array([<span class="hljs-literal">False</span>])<br></code></pre></td></tr></table></figure><p>那么我们怎么选择一个合适的阈值呢？首先可以使用cross_val_predict()得到每个实例的决策函数值(同样是“clean”的)，然后使用 precision_recall_curve()函数来计算所有阈值的precision和recall值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">y_scores = cross_val_predict(sgd_clf, X_train, y_train_5, cv=<span class="hljs-number">3</span>, method=<span class="hljs-string">&quot;decision_function&quot;</span>)<br><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_recall_curve<br><br>precisions, recalls, thresholds = precision_recall_curve(y_train_5, y_scores)<br><br><span class="hljs-comment">###可视化</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_precision_recall_vs_threshold</span>(<span class="hljs-params">precisions, recalls, thresholds</span>):<br>    plt.plot(thresholds, precisions[:-<span class="hljs-number">1</span>], <span class="hljs-string">&quot;b--&quot;</span>, label=<span class="hljs-string">&quot;Precision&quot;</span>, linewidth=<span class="hljs-number">2</span>)<br>    plt.plot(thresholds, recalls[:-<span class="hljs-number">1</span>], <span class="hljs-string">&quot;g-&quot;</span>, label=<span class="hljs-string">&quot;Recall&quot;</span>, linewidth=<span class="hljs-number">2</span>)<br>    plt.legend(loc=<span class="hljs-string">&quot;center right&quot;</span>, fontsize=<span class="hljs-number">16</span>)<br>    plt.xlabel(<span class="hljs-string">&quot;Threshold&quot;</span>,fontsize=<span class="hljs-number">16</span>)<br>    plt.grid(<span class="hljs-literal">True</span>)                    <br>    plt.axis([-<span class="hljs-number">50000</span>, <span class="hljs-number">50000</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>    <br>recall_90_precision = recalls[np.argmax(precisions &gt;= <span class="hljs-number">0.90</span>)]<br>threshold_90_precision = thresholds[np.argmax(precisions &gt;= <span class="hljs-number">0.90</span>)]<br><br><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">4</span>))            <br>&gt;&gt; &lt;Figure size 800x400 <span class="hljs-keyword">with</span> <span class="hljs-number">0</span> Axes&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">plot_precision_recall_vs_threshold(precisions, recalls, thresholds)<br>plt.plot([threshold_90_precision, threshold_90_precision], [<span class="hljs-number">0.</span>, <span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;r:&quot;</span>)      <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B4B54FD90</span>&gt;]<br>plt.plot([-<span class="hljs-number">50000</span>, threshold_90_precision], [<span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;r:&quot;</span>)          <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C2D3EB0</span>&gt;]<br>plt.plot([-<span class="hljs-number">50000</span>, threshold_90_precision], [recall_90_precision, recall_90_precision], <span class="hljs-string">&quot;r:&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C2E0820</span>&gt;]<br>plt.plot([threshold_90_precision], [<span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;ro&quot;</span>)                           <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C2E0400</span>&gt;]<br>plt.plot([threshold_90_precision], [recall_90_precision], <span class="hljs-string">&quot;ro&quot;</span>)           <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C2E0B50</span>&gt;]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.show()<br></code></pre></td></tr></table></figure><p><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-17-1.png"></p><p>注意：当提高阈值时，precision不一定总是上升的(以上面那个轴为例，当阈值从中间向右移动一位precision就会下降：4&#x2F;5→3&#x2F;4);但是Recall总是下降的</p><p>另外，我们也可以直接展示precision和recall的关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_precision_vs_recall</span>(<span class="hljs-params">precisions, recalls</span>):<br>    plt.plot(recalls, precisions, <span class="hljs-string">&quot;b-&quot;</span>, linewidth=<span class="hljs-number">2</span>)<br>    plt.xlabel(<span class="hljs-string">&quot;Recall&quot;</span>, fontsize=<span class="hljs-number">16</span>)<br>    plt.ylabel(<span class="hljs-string">&quot;Precision&quot;</span>, fontsize=<span class="hljs-number">16</span>)<br>    plt.axis([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>    plt.grid(<span class="hljs-literal">True</span>)<br><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>))<br>&gt;&gt; &lt;Figure size 800x600 <span class="hljs-keyword">with</span> <span class="hljs-number">0</span> Axes&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">plot_precision_vs_recall(precisions, recalls)<br>plt.plot([recall_90_precision, recall_90_precision], [<span class="hljs-number">0.</span>, <span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;r:&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C4F4880</span>&gt;]<br>plt.plot([<span class="hljs-number">0.0</span>, recall_90_precision], [<span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;r:&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C4F4C10</span>&gt;]<br>plt.plot([recall_90_precision], [<span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;ro&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C4F44F0</span>&gt;]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-20-1.png" width="672" /><p>假如我们现在想要分类器达到90%的precision，可以使用numpy的np.argmax函数(返回第一个最大值的index)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">threshold_90_precision = thresholds[np.argmax(precisions &gt;= <span class="hljs-number">0.90</span>)]<span class="hljs-comment">##true是1，false是0，因此返回第一个1，也就是第一个true的位置</span><br><br>y_train_pred_90 = (y_scores &gt;= threshold_90_precision)<span class="hljs-comment">##预测</span><br><br>precision_score(y_train_5, y_train_pred_90)<br>&gt;&gt; <span class="hljs-number">0.9000345901072293</span><br>recall_score(y_train_5, y_train_pred_90)<br>&gt;&gt; <span class="hljs-number">0.4799852425751706</span><br></code></pre></td></tr></table></figure><h3 id="ROC曲线"><a href="#ROC曲线" class="headerlink" title="ROC曲线"></a>ROC曲线</h3><p>ROC曲线全称为：receiver operating characteristic curve；ROC曲线展示了真阳性率(true positive rate, recall的另一个叫法)和假阳性率(false positive rate, FPR)的关系</p><p>$$<br>FPR &#x3D; \frac{FP}{FP+TN}&#x3D;1-TNR&#x3D;1-\frac{TN}{FP+TN}<br>$$</p><p>这里面的TNR又叫做特异性(specificity)，所以<strong>ROC曲线画的是recall&#x2F;sensitivity(两个是一样的)和1-specificity的关系</strong></p><p>可以使用roc_curve函数来计算FPR和TPR：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve<br><br>fpr, tpr, thresholds = roc_curve(y_train_5, y_scores)<br><br><span class="hljs-comment">##plot</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_roc_curve</span>(<span class="hljs-params">fpr, tpr, label=<span class="hljs-literal">None</span></span>):<br>    plt.plot(fpr, tpr, linewidth=<span class="hljs-number">2</span>, label=label)<br>    plt.plot([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <span class="hljs-string">&#x27;k--&#x27;</span>) <span class="hljs-comment"># dashed diagonal</span><br>    plt.axis([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])            <br>    plt.xlabel(<span class="hljs-string">&#x27;False Positive Rate&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;True Positive Rate (Recall)&#x27;</span>, fontsize=<span class="hljs-number">16</span>)  <br>    plt.grid(<span class="hljs-literal">True</span>)<br><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>))                  <br>&gt;&gt; &lt;Figure size 800x600 <span class="hljs-keyword">with</span> <span class="hljs-number">0</span> Axes&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">plot_roc_curve(fpr, tpr)<br>fpr_90 = fpr[np.argmax(tpr &gt;= recall_90_precision)]          <br>plt.plot([fpr_90, fpr_90], [<span class="hljs-number">0.</span>, recall_90_precision], <span class="hljs-string">&quot;r:&quot;</span>) <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C708A60</span>&gt;]<br>plt.plot([<span class="hljs-number">0.0</span>, fpr_90], [recall_90_precision, recall_90_precision], <span class="hljs-string">&quot;r:&quot;</span>) <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C708D60</span>&gt;]<br>plt.plot([fpr_90], [recall_90_precision], <span class="hljs-string">&quot;ro&quot;</span>)               <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C708580</span>&gt;]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-24-1.png" width="672" /><p>图中的虚线表示完全随机的分类器的ROC曲线，一个好的分类器要尽可能离这条线远，并且向左上角靠拢(高的recall并且比较低的假阳性)，一种比较不同的分类器的方法就是计算ROC曲线下面积(AUC)，越接近1说明这个模型越好(图中虚线的AUC是0.5)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_auc_score<br><br>roc_auc_score(y_train_5, y_scores)<br>&gt;&gt; <span class="hljs-number">0.9604938554008616</span><br></code></pre></td></tr></table></figure><p>现在我们可以来比较一下 随机森林分类器(RandomForestClassifier)和SVM分类器(SGDClassifier,默认参数)了。</p><p>要注意的是RandomForestClassifier没有decision_function方法而是predict_proba方法，该方法返回的是一个array数组，每一行是一个观测，每一列是该观测属于各类的概率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><br>forest_clf = RandomForestClassifier(random_state=<span class="hljs-number">42</span>)<br>y_probas_forest = cross_val_predict(forest_clf, X_train, y_train_5, cv=<span class="hljs-number">3</span>, method=<span class="hljs-string">&quot;predict_proba&quot;</span>)<br><br>y_probas_forest<br>&gt;&gt; array([[<span class="hljs-number">0.11</span>, <span class="hljs-number">0.89</span>],<br>&gt;&gt;        [<span class="hljs-number">0.99</span>, <span class="hljs-number">0.01</span>],<br>&gt;&gt;        [<span class="hljs-number">0.96</span>, <span class="hljs-number">0.04</span>],<br>&gt;&gt;        ...,<br>&gt;&gt;        [<span class="hljs-number">0.02</span>, <span class="hljs-number">0.98</span>],<br>&gt;&gt;        [<span class="hljs-number">0.92</span>, <span class="hljs-number">0.08</span>],<br>&gt;&gt;        [<span class="hljs-number">0.94</span>, <span class="hljs-number">0.06</span>]])<br></code></pre></td></tr></table></figure><p>roc_curve()函数需要的输入是label和score(用来选取不同的阈值)，所以在这里使用是5类(positive类)的概率作为score：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">y_scores_forest = y_probas_forest[:, <span class="hljs-number">1</span>]<br><br>fpr_forest, tpr_forest, thresholds_forest = roc_curve(y_train_5,y_scores_forest)<br><br><span class="hljs-comment">##plot</span><br>plt.plot(fpr, tpr, <span class="hljs-string">&quot;b:&quot;</span>, label=<span class="hljs-string">&quot;SGD&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9CD23580</span>&gt;]<br>plot_roc_curve(fpr_forest, tpr_forest, <span class="hljs-string">&quot;Random Forest&quot;</span>) <br>plt.legend(loc=<span class="hljs-string">&quot;lower right&quot;</span>) <br>&gt;&gt; &lt;matplotlib.legend.Legend <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9CD23EB0</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-27-1.png" width="672" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">roc_auc_score(y_train_5, y_scores_forest)<br>&gt;&gt; <span class="hljs-number">0.9983436731328145</span><br></code></pre></td></tr></table></figure><h2 id="多类别分类"><a href="#多类别分类" class="headerlink" title="多类别分类"></a>多类别分类</h2><p>有一些算法能够处理多分类问题(比如SGD 分类器，随随机森林分类器和朴素贝叶斯分类器)而一些算法只能处理二分类问题(比如逻辑斯蒂回归，支持向量机等)，但是我们可以使用一些方法来使这些算法可以用来处理多分类问题。</p><p>主要有两种方法：</p><ul><li><p>一对多策略(one-versus-the-rest (OvR)):<br>比如要将手写图片分为0-9一共10个类别，那么我们就可以训练10个分类器，每个分类器处理的是一个二分类问题(属于这一类还是不属于这一类)，都可以得到一个score，对于每个图片就选择10个分类器中score最高的分类器所对应的类作为该图片的预测类</p></li><li><p>一对一策略(one-versus-one<br>(OvO)):对所有的类两两组合训练二分类的分类器，如果有N类，那么就需要训练N*(N-1)&#x2F;2个分类器，对于一个图片就需要运行所有的分类器(10类别是45个)，在这些结果中预测次数最多的类就是该图片的预测类，这个方法的好处是在训练时只需要对一部分训练数据进行训练(只涉及要识别的类的数据，比如0-1分类器只需要对所有的0&#x2F;1图片进行训练)</p></li></ul><p>对于一些算法(比如支持向量机)对大的训练集处理比较困难(scale poorly with the size of the training set),对于这些算法OvO策略比较适合，因为训练的时候不需要全部的训练集；对于大部分的二分类算法，OvR比较适合。</p><p>Scikit-Learn会依据算法的不同来选择OvO或者OvR：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##支持向量机SVM算法，默认是使用OvO</span><br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br>svm_clf = SVC()<br>svm_clf.fit(X_train, y_train)<span class="hljs-comment">##多分类</span><br>&gt;&gt; SVC()<br>svm_clf.predict([some_digit])<br>&gt;&gt; array([<span class="hljs-number">5.</span>])<br></code></pre></td></tr></table></figure><p>如果想要指定OvO或者OvR，可以使用OneVsOneClassifier或者OneVsRestClassifier类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.multiclass <span class="hljs-keyword">import</span> OneVsRestClassifier<br><br>ovr_clf = OneVsRestClassifier(SVC())<span class="hljs-comment">##SVC的OVR策略</span><br>ovr_clf.fit(X_train, y_train)<br>&gt;&gt; OneVsRestClassifier(estimator=SVC())<br>ovr_clf.predict([some_digit])<br>&gt;&gt; array([<span class="hljs-number">5.</span>])<br></code></pre></td></tr></table></figure><p>对SGD分类器进行多分类任务的训练也是类似的，不过SGD分类器本身就可以进行多分类任务，所以不会运行OVO或者OVR：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">sgd_clf.fit(X_train, y_train)<br>&gt;&gt; SGDClassifier(random_state=<span class="hljs-number">42</span>)<br>sgd_clf.predict([some_digit])<br>&gt;&gt; array([<span class="hljs-number">3.</span>])<br>cross_val_score(sgd_clf, X_train, y_train, cv=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&quot;accuracy&quot;</span>)<span class="hljs-comment">##检测预测精度</span><br>&gt;&gt; array([<span class="hljs-number">0.87365</span>, <span class="hljs-number">0.85835</span>, <span class="hljs-number">0.8689</span> ])<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><br>scaler = StandardScaler()<br>X_train_scaled = scaler.fit_transform(X_train.astype(np.float64))<span class="hljs-comment">##将变量进行缩放</span><br>cross_val_score(sgd_clf, X_train_scaled, y_train, cv=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&quot;accuracy&quot;</span>)<span class="hljs-comment">##精度有所提升</span><br>&gt;&gt; array([<span class="hljs-number">0.8983</span>, <span class="hljs-number">0.891</span> , <span class="hljs-number">0.9018</span>])<br></code></pre></td></tr></table></figure><h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><p>当我们通过一系列的步骤找到了一个不错的模型并想要进一步提升其性能，一种方法就是分析这个模型犯的错误。</p><p>首先需要查看混淆矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">y_train_pred = cross_val_predict(sgd_clf, X_train_scaled, y_train, cv=<span class="hljs-number">3</span>)<br><br>conf_mx = confusion_matrix(y_train, y_train_pred)<br>conf_mx<br>&gt;&gt; array([[<span class="hljs-number">5577</span>,    <span class="hljs-number">0</span>,   <span class="hljs-number">22</span>,    <span class="hljs-number">5</span>,    <span class="hljs-number">8</span>,   <span class="hljs-number">43</span>,   <span class="hljs-number">36</span>,    <span class="hljs-number">6</span>,  <span class="hljs-number">225</span>,    <span class="hljs-number">1</span>],<br>&gt;&gt;        [   <span class="hljs-number">0</span>, <span class="hljs-number">6400</span>,   <span class="hljs-number">37</span>,   <span class="hljs-number">24</span>,    <span class="hljs-number">4</span>,   <span class="hljs-number">44</span>,    <span class="hljs-number">4</span>,    <span class="hljs-number">7</span>,  <span class="hljs-number">212</span>,   <span class="hljs-number">10</span>],<br>&gt;&gt;        [  <span class="hljs-number">27</span>,   <span class="hljs-number">27</span>, <span class="hljs-number">5220</span>,   <span class="hljs-number">92</span>,   <span class="hljs-number">73</span>,   <span class="hljs-number">27</span>,   <span class="hljs-number">67</span>,   <span class="hljs-number">36</span>,  <span class="hljs-number">378</span>,   <span class="hljs-number">11</span>],<br>&gt;&gt;        [  <span class="hljs-number">22</span>,   <span class="hljs-number">17</span>,  <span class="hljs-number">117</span>, <span class="hljs-number">5227</span>,    <span class="hljs-number">2</span>,  <span class="hljs-number">203</span>,   <span class="hljs-number">27</span>,   <span class="hljs-number">40</span>,  <span class="hljs-number">403</span>,   <span class="hljs-number">73</span>],<br>&gt;&gt;        [  <span class="hljs-number">12</span>,   <span class="hljs-number">14</span>,   <span class="hljs-number">41</span>,    <span class="hljs-number">9</span>, <span class="hljs-number">5182</span>,   <span class="hljs-number">12</span>,   <span class="hljs-number">34</span>,   <span class="hljs-number">27</span>,  <span class="hljs-number">347</span>,  <span class="hljs-number">164</span>],<br>&gt;&gt;        [  <span class="hljs-number">27</span>,   <span class="hljs-number">15</span>,   <span class="hljs-number">30</span>,  <span class="hljs-number">168</span>,   <span class="hljs-number">53</span>, <span class="hljs-number">4444</span>,   <span class="hljs-number">75</span>,   <span class="hljs-number">14</span>,  <span class="hljs-number">535</span>,   <span class="hljs-number">60</span>],<br>&gt;&gt;        [  <span class="hljs-number">30</span>,   <span class="hljs-number">15</span>,   <span class="hljs-number">42</span>,    <span class="hljs-number">3</span>,   <span class="hljs-number">44</span>,   <span class="hljs-number">97</span>, <span class="hljs-number">5552</span>,    <span class="hljs-number">3</span>,  <span class="hljs-number">131</span>,    <span class="hljs-number">1</span>],<br>&gt;&gt;        [  <span class="hljs-number">21</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">51</span>,   <span class="hljs-number">30</span>,   <span class="hljs-number">49</span>,   <span class="hljs-number">12</span>,    <span class="hljs-number">3</span>, <span class="hljs-number">5684</span>,  <span class="hljs-number">195</span>,  <span class="hljs-number">210</span>],<br>&gt;&gt;        [  <span class="hljs-number">17</span>,   <span class="hljs-number">63</span>,   <span class="hljs-number">48</span>,   <span class="hljs-number">86</span>,    <span class="hljs-number">3</span>,  <span class="hljs-number">126</span>,   <span class="hljs-number">25</span>,   <span class="hljs-number">10</span>, <span class="hljs-number">5429</span>,   <span class="hljs-number">44</span>],<br>&gt;&gt;        [  <span class="hljs-number">25</span>,   <span class="hljs-number">18</span>,   <span class="hljs-number">30</span>,   <span class="hljs-number">64</span>,  <span class="hljs-number">118</span>,   <span class="hljs-number">36</span>,    <span class="hljs-number">1</span>,  <span class="hljs-number">179</span>,  <span class="hljs-number">371</span>, <span class="hljs-number">5107</span>]],<br>&gt;&gt;       dtype=int64)<br></code></pre></td></tr></table></figure><p>可以用热图的形式将混淆矩阵可视化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.matshow(conf_mx, cmap=plt.cm.gray)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C0DC1C0</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-33-1.png" width="480" /><p>从这个图来看，结果是比较好的，因为大部分都集中在对角线上，但是这里面查看的是绝对数值，可能某个类的总数就比较小，比如5类，因此我们将混淆矩阵中的每个值除以相应类的图片总数(行和)得到相对值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">row_sums = conf_mx.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>)<br>norm_conf_mx = conf_mx / row_sums<br></code></pre></td></tr></table></figure><p>再将对角线上的值归为0，因此处理后的混淆矩阵中的值就是错误率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">np.fill_diagonal(norm_conf_mx, <span class="hljs-number">0</span>)<span class="hljs-comment">##对角线归0</span><br><br>plt.matshow(norm_conf_mx, cmap=plt.cm.gray)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C508E50</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-35-1.png" width="480" /><p>可以看到8类的列最亮，也就是说很多图片都被错误地分成8了；另外3和5也是经常被相互错分的。</p><p>我们可以针对这种错误来想办法提升模型，例如：可以收集更多的图片，这些图片长得像8但又不是8，用这些数据作为训练集；还可以编码一些新的特征，比如图像中闭环的数目(8有2个，6有1个，5没有)；也可以对图像进行预处理(使图像居中，突出某些特征等)。</p><h2 id="多标签分类"><a href="#多标签分类" class="headerlink" title="多标签分类"></a>多标签分类</h2><p>多标签分类指的是：对于一个观测值可以输出多个类别；比如一个人像识别系统被训练可以识别3张脸A,B,C，当来了一张A和C的照片，这个分类器就会输出[1,0,1],也就是对这一张照片可以有3个类别。</p><p>这里，我们可以将每个图片都赋予两个类的属性，图片上的数值是否大于7和数字是否为偶数(这里使用的是K近邻分类算法)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br><br>y_train_large = (y_train &gt;= <span class="hljs-number">7</span>) <br>y_train_odd = (y_train % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) <br>y_multilabel = np.c_[y_train_large, y_train_odd] <br>knn_clf = KNeighborsClassifier() <br>knn_clf.fit(X_train,y_multilabel)<br>&gt;&gt; KNeighborsClassifier()<br>knn_clf.predict([some_digit])<br>&gt;&gt; array([[<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>]])<br></code></pre></td></tr></table></figure><p>评估多标签分类器的方法有很多，取决于不同的项目;比如可以使用每个标签的F1 score的均值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">y_train_knn_pred = cross_val_predict(knn_clf, X_train, y_multilabel, cv=<span class="hljs-number">3</span>)<br><br>f1_score(y_multilabel, y_train_knn_pred, average=<span class="hljs-string">&quot;macro&quot;</span>)<span class="hljs-comment">##有不同的平均方法，具体可以看文档</span><br>&gt;&gt; <span class="hljs-number">0.976410265560605</span><br></code></pre></td></tr></table></figure><h2 id="多输出分类"><a href="#多输出分类" class="headerlink" title="多输出分类"></a>多输出分类</h2><p>全称为多输出-多标签分类，意思是：对于每个观测值有多个标签(像上面的多标签分类一样)，并且对于每个标签有多个值(上面只有T&#x2F;F两个值)，举个例子：我们现在有一个系统，输入是有噪声的图片，输出是降噪后的图片；那么对于每个图片，输出有多个标签(每个像素都是一个标签)并且每个标签有多个值(像素密度从0-255)。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GenomicRanges基因组区间操作</title>
    <link href="/2021/01/28/granges/"/>
    <url>/2021/01/28/granges/</url>
    
    <content type="html"><![CDATA[<p>利用<code>GenomicRanges</code>包进行基因组区间操作</p><span id="more"></span><p><code>GenomicRanges</code>是Bioconductor里面用来展示基因组位置、处理基因组区间的一个基础性的包</p><p>这个包主要通过引进3个类来进行对基因组的操作:</p><ul><li><p><em>GRanges:</em> 基因组区间</p></li><li><p><em>GPos</em>：基因组位置</p></li><li><p><em>GRangesList</em>：一组基因组区间</p></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>GenomicRanges<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Warning<span class="hljs-operator">:</span> package <span class="hljs-string">&#x27;S4Vectors&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.3<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Warning<span class="hljs-operator">:</span> package <span class="hljs-string">&#x27;IRanges&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Warning<span class="hljs-operator">:</span> package <span class="hljs-string">&#x27;GenomeInfoDb&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.3<br></code></pre></td></tr></table></figure><h2 id="GRanges"><a href="#GRanges" class="headerlink" title="GRanges"></a>GRanges</h2><p><em>GRanges</em>类储存的是一系列基因组区间，每个区间都有一个起始位点和终止位点，可用来存储基因组特征的位置(比如转录本，外显子等)；可以通过<code>GRanges</code>函数来创建：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r">gr <span class="hljs-operator">&lt;-</span> GRanges<span class="hljs-punctuation">(</span><br>    seqnames <span class="hljs-operator">=</span> Rle<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;chr1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;chr2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;chr1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;chr3&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    ranges <span class="hljs-operator">=</span> IRanges<span class="hljs-punctuation">(</span>start <span class="hljs-operator">=</span> <span class="hljs-number">101</span><span class="hljs-operator">:</span><span class="hljs-number">110</span><span class="hljs-punctuation">,</span> end <span class="hljs-operator">=</span> <span class="hljs-number">111</span><span class="hljs-operator">:</span><span class="hljs-number">120</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">names</span> <span class="hljs-operator">=</span> head<span class="hljs-punctuation">(</span><span class="hljs-built_in">letters</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    strand <span class="hljs-operator">=</span> Rle<span class="hljs-punctuation">(</span>strand<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;-&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;+&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;+&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;-&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    score <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>    GC <span class="hljs-operator">=</span> seq<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">length</span><span class="hljs-operator">=</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>gr<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   d     chr2   <span class="hljs-number">104</span><span class="hljs-operator">-</span><span class="hljs-number">114</span>      <span class="hljs-operator">*</span> <span class="hljs-operator">|</span>         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   e     chr1   <span class="hljs-number">105</span><span class="hljs-operator">-</span><span class="hljs-number">115</span>      <span class="hljs-operator">*</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   f     chr1   <span class="hljs-number">106</span><span class="hljs-operator">-</span><span class="hljs-number">116</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   g     chr3   <span class="hljs-number">107</span><span class="hljs-operator">-</span><span class="hljs-number">117</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">7</span> <span class="hljs-number">0.333333333333333</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   h     chr3   <span class="hljs-number">108</span><span class="hljs-operator">-</span><span class="hljs-number">118</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">8</span> <span class="hljs-number">0.222222222222222</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   i     chr3   <span class="hljs-number">109</span><span class="hljs-operator">-</span><span class="hljs-number">119</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">9</span> <span class="hljs-number">0.111111111111111</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p><code>Rle</code>函数是<code>IRanges</code><br>包提供的用来存储序列信息的函数(序列信息中有很多的重复内容)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">test1 <span class="hljs-operator">&lt;-</span> Rle<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;chr1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;chr2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;chr1&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2000</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>test2 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;chr1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;chr2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-number">3000</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;chr1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-number">2000</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##比较</span><br>identical<span class="hljs-punctuation">(</span>as.vector<span class="hljs-punctuation">(</span>test1<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> test2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br><br>object.size<span class="hljs-punctuation">(</span>test1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1320</span> bytes<br>object.size<span class="hljs-punctuation">(</span>test2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">48160</span> bytes<br></code></pre></td></tr></table></figure><p>创建的这个<em>GRanges</em>对象有10个基因组区间，可以看到<code>|</code>符号将数据分成左右两个部分；左边的是基因组坐标(包括seqnames,ranges, 和strand)，右边是元数据(metadata),也就是一些注释信息</p><p>对于基因组位置，我们可以通过<code>seqnames()</code>,<code>ranges()</code>,<code>strand()</code>函数来提取：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r">seqnames<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> factor<span class="hljs-operator">-</span>Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">10</span> with <span class="hljs-number">4</span> runs<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Lengths<span class="hljs-operator">:</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span>    <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Values <span class="hljs-operator">:</span> chr1 chr2 chr1 chr3<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Levels<span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> chr1 chr2 chr3<br><br>ranges<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> IRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         start       end     width<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a       <span class="hljs-number">101</span>       <span class="hljs-number">111</span>        <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b       <span class="hljs-number">102</span>       <span class="hljs-number">112</span>        <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>       <span class="hljs-number">103</span>       <span class="hljs-number">113</span>        <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   d       <span class="hljs-number">104</span>       <span class="hljs-number">114</span>        <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   e       <span class="hljs-number">105</span>       <span class="hljs-number">115</span>        <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   f       <span class="hljs-number">106</span>       <span class="hljs-number">116</span>        <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   g       <span class="hljs-number">107</span>       <span class="hljs-number">117</span>        <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   h       <span class="hljs-number">108</span>       <span class="hljs-number">118</span>        <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   i       <span class="hljs-number">109</span>       <span class="hljs-number">119</span>        <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j       <span class="hljs-number">110</span>       <span class="hljs-number">120</span>        <span class="hljs-number">11</span><br><br>strand<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> factor<span class="hljs-operator">-</span>Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">10</span> with <span class="hljs-number">5</span> runs<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Lengths<span class="hljs-operator">:</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Values <span class="hljs-operator">:</span> <span class="hljs-operator">-</span> <span class="hljs-operator">+</span> <span class="hljs-operator">*</span> <span class="hljs-operator">+</span> <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Levels<span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> <span class="hljs-operator">+</span> <span class="hljs-operator">-</span> <span class="hljs-operator">*</span><br></code></pre></td></tr></table></figure><p>也可以整体地提取左边和右边的内容：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##提取左边的基因组位置信息</span><br>granges<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   d     chr2   <span class="hljs-number">104</span><span class="hljs-operator">-</span><span class="hljs-number">114</span>      <span class="hljs-operator">*</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   e     chr1   <span class="hljs-number">105</span><span class="hljs-operator">-</span><span class="hljs-number">115</span>      <span class="hljs-operator">*</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   f     chr1   <span class="hljs-number">106</span><span class="hljs-operator">-</span><span class="hljs-number">116</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   g     chr3   <span class="hljs-number">107</span><span class="hljs-operator">-</span><span class="hljs-number">117</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   h     chr3   <span class="hljs-number">108</span><span class="hljs-operator">-</span><span class="hljs-number">118</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   i     chr3   <span class="hljs-number">109</span><span class="hljs-operator">-</span><span class="hljs-number">119</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">##提取右边的元数据信息</span><br>mcols<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> DataFrame with <span class="hljs-number">10</span> rows and <span class="hljs-number">2</span> columns<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> a         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> b         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">c</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> d         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> e         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> f         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> g         <span class="hljs-number">7</span> <span class="hljs-number">0.333333333333333</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> h         <span class="hljs-number">8</span> <span class="hljs-number">0.222222222222222</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> i         <span class="hljs-number">9</span> <span class="hljs-number">0.111111111111111</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> j        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>mcols<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>score<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="拆分-和并GRanges对象"><a href="#拆分-和并GRanges对象" class="headerlink" title="拆分,和并GRanges对象"></a>拆分,和并GRanges对象</h3><p>GRanges对象可以通过<code>split</code>函数进行拆分，拆分后产生的是GRangesList对象：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r">sp <span class="hljs-operator">&lt;-</span> split<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">,</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>each<span class="hljs-operator">=</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>sp<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>`<span class="hljs-number">1</span>`<br>&gt;&gt; GRanges object with 5 ranges and 2 metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   101-111      - |         1                 1<br>&gt;&gt;   b     chr2   102-112      + |         2 0.888888888888889<br>&gt;&gt;   c     chr2   103-113      + |         3 0.777777777777778<br>&gt;&gt;   d     chr2   104-114      * |         4 0.666666666666667<br>&gt;&gt;   e     chr1   105-115      * |         5 0.555555555555556<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: 3 sequences from an unspecified genome; no seqlengths<br>&gt;&gt; <br>&gt;&gt; $`2`<br>&gt;&gt; GRanges object with 5 ranges and 2 metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   f     chr1   106-116      + |         6 0.444444444444444<br>&gt;&gt;   g     chr3   107-117      + |         7 0.333333333333333<br>&gt;&gt;   h     chr3   108-118      + |         8 0.222222222222222<br>&gt;&gt;   i     chr3   109-119      - |         9 0.111111111111111<br>&gt;&gt;   j     chr3   110-120      - |        10                 0<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: 3 sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p>合并GRanges对象可以使用<code>c</code>和<code>append</code>函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>sp<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>sp<span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   d     chr2   <span class="hljs-number">104</span><span class="hljs-operator">-</span><span class="hljs-number">114</span>      <span class="hljs-operator">*</span> <span class="hljs-operator">|</span>         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   e     chr1   <span class="hljs-number">105</span><span class="hljs-operator">-</span><span class="hljs-number">115</span>      <span class="hljs-operator">*</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   f     chr1   <span class="hljs-number">106</span><span class="hljs-operator">-</span><span class="hljs-number">116</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   g     chr3   <span class="hljs-number">107</span><span class="hljs-operator">-</span><span class="hljs-number">117</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">7</span> <span class="hljs-number">0.333333333333333</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   h     chr3   <span class="hljs-number">108</span><span class="hljs-operator">-</span><span class="hljs-number">118</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">8</span> <span class="hljs-number">0.222222222222222</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   i     chr3   <span class="hljs-number">109</span><span class="hljs-operator">-</span><span class="hljs-number">119</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">9</span> <span class="hljs-number">0.111111111111111</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">##or</span><br>append<span class="hljs-punctuation">(</span>sp<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>sp<span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   d     chr2   <span class="hljs-number">104</span><span class="hljs-operator">-</span><span class="hljs-number">114</span>      <span class="hljs-operator">*</span> <span class="hljs-operator">|</span>         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   e     chr1   <span class="hljs-number">105</span><span class="hljs-operator">-</span><span class="hljs-number">115</span>      <span class="hljs-operator">*</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   f     chr1   <span class="hljs-number">106</span><span class="hljs-operator">-</span><span class="hljs-number">116</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   g     chr3   <span class="hljs-number">107</span><span class="hljs-operator">-</span><span class="hljs-number">117</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">7</span> <span class="hljs-number">0.333333333333333</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   h     chr3   <span class="hljs-number">108</span><span class="hljs-operator">-</span><span class="hljs-number">118</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">8</span> <span class="hljs-number">0.222222222222222</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   i     chr3   <span class="hljs-number">109</span><span class="hljs-operator">-</span><span class="hljs-number">119</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">9</span> <span class="hljs-number">0.111111111111111</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><h3 id="对GRanges对象取子集"><a href="#对GRanges对象取子集" class="headerlink" title="对GRanges对象取子集"></a>对GRanges对象取子集</h3><p>可以通过<code>[</code>操作符来选取子集：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">gr<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p>指定第二个参数来选取特定的<strong>metadata信息：</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">gr<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;GC&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">1</span> metadata column<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p>也可以通过这种取子集的方式对GRanges对象进行修改：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">singles <span class="hljs-operator">&lt;-</span> split<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">,</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##拆分</span><br>grMod <span class="hljs-operator">&lt;-</span> gr<br>grMod<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> singles<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-comment">##将第二行替换成第一行</span><br>head<span class="hljs-punctuation">(</span>grMod<span class="hljs-punctuation">,</span> n<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">3</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><h3 id="区间操作"><a href="#区间操作" class="headerlink" title="区间操作"></a>区间操作</h3><p>GRanges对象的基本区间特征可以使用<code>start</code> <code>end</code> <code>width</code> <code>range</code>函数来获得：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs r">g <span class="hljs-operator">&lt;-</span> gr<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br>g <span class="hljs-operator">&lt;-</span> append<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">,</span> singles<span class="hljs-punctuation">[[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>g<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">###起始</span><br>start<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">101</span> <span class="hljs-number">102</span> <span class="hljs-number">103</span> <span class="hljs-number">110</span><br><br><span class="hljs-comment">##终止</span><br>end<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">111</span> <span class="hljs-number">112</span> <span class="hljs-number">113</span> <span class="hljs-number">120</span><br><br><span class="hljs-comment">###区间长度</span><br>width<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">11</span> <span class="hljs-number">11</span> <span class="hljs-number">11</span> <span class="hljs-number">11</span><br><br><span class="hljs-comment">###range</span><br><span class="hljs-built_in">range</span><span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">3</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span>     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p>GRanges用来操作区间的函数可以分为3类：</p><ul><li><p><em>intra-range methods</em></p></li><li><p><em>inter-range methods</em></p></li><li><p><em>between-range methods</em></p></li></ul><p>intra-range对每个区间进行操作：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###flank取区间的上游或下游</span><br><span class="hljs-comment">##每个区间的上游10bp</span><br>flank<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">112</span><span class="hljs-operator">-</span><span class="hljs-number">121</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2    <span class="hljs-number">92</span><span class="hljs-operator">-</span><span class="hljs-number">101</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2    <span class="hljs-number">93</span><span class="hljs-operator">-</span><span class="hljs-number">102</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">121</span><span class="hljs-operator">-</span><span class="hljs-number">130</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">##每个区间的下游10bp</span><br>flank<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span>start <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1    <span class="hljs-number">91</span><span class="hljs-operator">-</span><span class="hljs-number">100</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">113</span><span class="hljs-operator">-</span><span class="hljs-number">122</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">114</span><span class="hljs-operator">-</span><span class="hljs-number">123</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">100</span><span class="hljs-operator">-</span><span class="hljs-number">109</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">###shift移动区间</span><br>shift<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">106</span><span class="hljs-operator">-</span><span class="hljs-number">116</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">107</span><span class="hljs-operator">-</span><span class="hljs-number">117</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">108</span><span class="hljs-operator">-</span><span class="hljs-number">118</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">115</span><span class="hljs-operator">-</span><span class="hljs-number">125</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br>shift<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">,</span><span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1    <span class="hljs-number">96</span><span class="hljs-operator">-</span><span class="hljs-number">106</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2    <span class="hljs-number">97</span><span class="hljs-operator">-</span><span class="hljs-number">107</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2    <span class="hljs-number">98</span><span class="hljs-operator">-</span><span class="hljs-number">108</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">105</span><span class="hljs-operator">-</span><span class="hljs-number">115</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">###resize拓展区间</span><br>resize<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">,</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1    <span class="hljs-number">82</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">131</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">132</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3    <span class="hljs-number">91</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br>resize<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">,</span><span class="hljs-number">30</span><span class="hljs-punctuation">,</span>fix <span class="hljs-operator">=</span> <span class="hljs-string">&quot;end&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">130</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2    <span class="hljs-number">83</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2    <span class="hljs-number">84</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">139</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210128155320852.png"></p><p>inter-range 涉及在单个GRanges对象中的区间比较：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###reduce 合并重复的区间</span><br>reduce<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">3</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span>     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">###gap 获取区间的间隔</span><br>gaps<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">3</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1     <span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">100</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr2     <span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">101</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span>     chr3     <span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">109</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">##由于没有提供染色体的长度，所以从1开始到指定的区间end结束</span><br><span class="hljs-comment">##提供染色体长度</span><br>seqlengths<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">249250621</span><span class="hljs-punctuation">,</span> <span class="hljs-number">243199373</span><span class="hljs-punctuation">,</span> <span class="hljs-number">198022430</span><span class="hljs-punctuation">)</span><br>seqlengths<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      chr1      chr2      chr3 <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">249250621</span> <span class="hljs-number">243199373</span> <span class="hljs-number">198022430</span><br><br>gaps<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">12</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        seqnames        ranges strand<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">249250621</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr1         <span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">100</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span>     chr1 <span class="hljs-number">112</span><span class="hljs-operator">-</span><span class="hljs-number">249250621</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">249250621</span>      <span class="hljs-operator">*</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span>     chr2         <span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">101</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    ...      ...           ...    ...<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-punctuation">[</span><span class="hljs-number">8</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">243199373</span>      <span class="hljs-operator">*</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span>     chr3   <span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">198022430</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">10</span><span class="hljs-punctuation">]</span>     chr3         <span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">109</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">11</span><span class="hljs-punctuation">]</span>     chr3 <span class="hljs-number">121</span><span class="hljs-operator">-</span><span class="hljs-number">198022430</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">12</span><span class="hljs-punctuation">]</span>     chr3   <span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">198022430</span>      <span class="hljs-operator">*</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome<br><br><span class="hljs-comment">###disjoin 重组GRanges对象得到互不重叠的区间</span><br>disjoin<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">5</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr2       <span class="hljs-number">102</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span>     chr2       <span class="hljs-number">113</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span>     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome<br><br><span class="hljs-comment">###coverage 计算重叠的程度</span><br>coverage<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> RleList of <span class="hljs-built_in">length</span> <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>chr1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> integer<span class="hljs-operator">-</span>Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">249250621</span> with <span class="hljs-number">3</span> runs<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Lengths<span class="hljs-operator">:</span>       <span class="hljs-number">100</span>        <span class="hljs-number">11</span> <span class="hljs-number">249250510</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Values <span class="hljs-operator">:</span>         <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>chr2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> integer<span class="hljs-operator">-</span>Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">243199373</span> with <span class="hljs-number">5</span> runs<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Lengths<span class="hljs-operator">:</span>       <span class="hljs-number">101</span>         <span class="hljs-number">1</span>        <span class="hljs-number">10</span>         <span class="hljs-number">1</span> <span class="hljs-number">243199260</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Values <span class="hljs-operator">:</span>         <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>         <span class="hljs-number">1</span>         <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>chr3<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> integer<span class="hljs-operator">-</span>Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">198022430</span> with <span class="hljs-number">3</span> runs<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Lengths<span class="hljs-operator">:</span>       <span class="hljs-number">109</span>        <span class="hljs-number">11</span> <span class="hljs-number">198022310</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Values <span class="hljs-operator">:</span>         <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>Between-range 计算不同的GRanges对象之间的关系：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###union 将GRanges视为位置的集合,取并集</span><br>g2 <span class="hljs-operator">&lt;-</span> head<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">,</span>n<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>g<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome<br>g2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br>union<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">,</span>g2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">3</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span>     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome<br><br><span class="hljs-comment">###intersect 取交集</span><br>intersect<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">,</span>g2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome<br><br><span class="hljs-comment">###setdiff 取差集</span><br>setdiff<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">,</span>g2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr2       <span class="hljs-number">113</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome<br></code></pre></td></tr></table></figure><p>当两个GRanges是相关联的时候，也就是要对两个对象进行成对操作(如对象1的第一行和对象2的第一行取交集等)，可以使用以<code>p</code>开头(parallel)的一系列操作：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs r">g3 <span class="hljs-operator">&lt;-</span> g<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br>ranges<span class="hljs-punctuation">(</span>g3<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> IRanges<span class="hljs-punctuation">(</span>start<span class="hljs-operator">=</span><span class="hljs-number">105</span><span class="hljs-punctuation">,</span> end<span class="hljs-operator">=</span><span class="hljs-number">112</span><span class="hljs-punctuation">)</span><br>g3<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">105</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome<br>punion<span class="hljs-punctuation">(</span>g2<span class="hljs-punctuation">,</span> g3<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome<br><br>pintersect<span class="hljs-punctuation">(</span>g2<span class="hljs-punctuation">,</span> g3<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">3</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC       hit<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>logical<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">105</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span>      <span class="hljs-literal">TRUE</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span>      <span class="hljs-literal">TRUE</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome<br><br>psetdiff<span class="hljs-punctuation">(</span>g2<span class="hljs-punctuation">,</span> g3<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">104</span>      <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">101</span>      <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome<br></code></pre></td></tr></table></figure><h2 id="GRangesList"><a href="#GRangesList" class="headerlink" title="GRangesList"></a>GRangesList</h2><p>当一个基因组特征由多个区间构成，那么用一个组合对象GRangesList来表示更有意义：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###两个转录本</span><br>gr1 <span class="hljs-operator">&lt;-</span> GRanges<span class="hljs-punctuation">(</span><br>    seqnames <span class="hljs-operator">=</span> <span class="hljs-string">&quot;chr2&quot;</span><span class="hljs-punctuation">,</span><br>    ranges <span class="hljs-operator">=</span> IRanges<span class="hljs-punctuation">(</span><span class="hljs-number">103</span><span class="hljs-punctuation">,</span> <span class="hljs-number">106</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    strand <span class="hljs-operator">=</span> <span class="hljs-string">&quot;+&quot;</span><span class="hljs-punctuation">,</span><br>    score <span class="hljs-operator">=</span> <span class="hljs-number">5L</span><span class="hljs-punctuation">,</span> GC <span class="hljs-operator">=</span> <span class="hljs-number">0.45</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##第二个转录本有两个外显子</span><br>gr2 <span class="hljs-operator">&lt;-</span> GRanges<span class="hljs-punctuation">(</span><br>    seqnames <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;chr1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;chr1&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    ranges <span class="hljs-operator">=</span> IRanges<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">107</span><span class="hljs-punctuation">,</span> <span class="hljs-number">113</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> width <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    strand <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;+&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;-&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    score <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-operator">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span> GC <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>grl <span class="hljs-operator">&lt;-</span> GRangesList<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;txA&quot;</span> <span class="hljs-operator">=</span> gr1<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;txB&quot;</span> <span class="hljs-operator">=</span> gr2<span class="hljs-punctuation">)</span><br>grl<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">106</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txB<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">107</span><span class="hljs-operator">-</span><span class="hljs-number">109</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">113</span><span class="hljs-operator">-</span><span class="hljs-number">115</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p>在GRanges上的方法在GRangesList上返回的就是list：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r">seqnames<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> RleList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> factor<span class="hljs-operator">-</span>Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">1</span> with <span class="hljs-number">1</span> run<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Lengths<span class="hljs-operator">:</span>    <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Values <span class="hljs-operator">:</span> chr2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Levels<span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> chr2 chr1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txB<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> factor<span class="hljs-operator">-</span>Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span> with <span class="hljs-number">1</span> run<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Lengths<span class="hljs-operator">:</span>    <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Values <span class="hljs-operator">:</span> chr1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Levels<span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> chr2 chr1<br>strand<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> RleList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> factor<span class="hljs-operator">-</span>Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">1</span> with <span class="hljs-number">1</span> run<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Lengths<span class="hljs-operator">:</span> <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Values <span class="hljs-operator">:</span> <span class="hljs-operator">+</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Levels<span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> <span class="hljs-operator">+</span> <span class="hljs-operator">-</span> <span class="hljs-operator">*</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txB<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> factor<span class="hljs-operator">-</span>Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span> with <span class="hljs-number">2</span> runs<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Lengths<span class="hljs-operator">:</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Values <span class="hljs-operator">:</span> <span class="hljs-operator">+</span> <span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Levels<span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> <span class="hljs-operator">+</span> <span class="hljs-operator">-</span> <span class="hljs-operator">*</span><br></code></pre></td></tr></table></figure><p>需要注意的是不同于GRanges的<code>mcols</code>方法，在GRangesList上返回的是列表层面的信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">mcols<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> DataFrame with <span class="hljs-number">2</span> rows and <span class="hljs-number">0</span> columns<br><br><span class="hljs-comment">###需要unlist来combine GRangesList中的GRanges</span><br>mcols<span class="hljs-punctuation">(</span>unlist<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> DataFrame with <span class="hljs-number">3</span> rows and <span class="hljs-number">2</span> columns<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> txA         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> txB         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> txB         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><p>在GRangesList上的区间操作和单独的GRanges类似：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs r">start<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> IntegerList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;txA&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-number">103</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;txB&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-number">107</span> <span class="hljs-number">113</span><br><br>end<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> IntegerList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;txA&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-number">106</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;txB&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-number">109</span> <span class="hljs-number">115</span><br><br>width<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> IntegerList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;txA&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;txB&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span><br><br><span class="hljs-comment">##这些操作返回的是整数列表</span><br><span class="hljs-built_in">class</span><span class="hljs-punctuation">(</span>width<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;CompressedIntegerList&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">attr</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;package&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;IRanges&quot;</span><br><span class="hljs-built_in">sum</span><span class="hljs-punctuation">(</span>width<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> txA txB <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-number">4</span>   <span class="hljs-number">6</span><br><br><span class="hljs-comment">###intra-, inter- and between-range对每个GRanges对象操作</span><br>shift<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">,</span> <span class="hljs-number">20</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">123</span><span class="hljs-operator">-</span><span class="hljs-number">126</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txB<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">127</span><span class="hljs-operator">-</span><span class="hljs-number">129</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">133</span><span class="hljs-operator">-</span><span class="hljs-number">135</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><br>coverage<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> RleList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>chr2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> integer<span class="hljs-operator">-</span>Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">106</span> with <span class="hljs-number">2</span> runs<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Lengths<span class="hljs-operator">:</span> <span class="hljs-number">102</span>   <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Values <span class="hljs-operator">:</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>chr1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> integer<span class="hljs-operator">-</span>Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">115</span> with <span class="hljs-number">4</span> runs<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Lengths<span class="hljs-operator">:</span> <span class="hljs-number">106</span>   <span class="hljs-number">3</span>   <span class="hljs-number">3</span>   <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Values <span class="hljs-operator">:</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>GRangesList的行为和list类似，也可以通过<code>[</code>,<code>[[</code>或者<code>$</code>来取子集：<code>[</code>返回的是GRangesList对象，<code>[[</code>和<code>$</code>返回的是GRanges对象</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs r">grl<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">106</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br>grl<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">106</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br>grl<span class="hljs-punctuation">[</span><span class="hljs-string">&quot;txA&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">106</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br>grl<span class="hljs-operator">$</span>txB<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">107</span><span class="hljs-operator">-</span><span class="hljs-number">109</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">113</span><span class="hljs-operator">-</span><span class="hljs-number">115</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-built_in">class</span><span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;CompressedGRangesList&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">attr</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;package&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;GenomicRanges&quot;</span><br><span class="hljs-built_in">class</span><span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;GRanges&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">attr</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;package&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;GenomicRanges&quot;</span><br></code></pre></td></tr></table></figure><h2 id="区间重叠"><a href="#区间重叠" class="headerlink" title="区间重叠"></a>区间重叠</h2><p>区间重叠的操作也属于上面提到的<em>between-range methods</em>(比较两个对象的区间),主要有3个函数：<code>findOverlaps</code>,<code>countOverlaps</code>和<code>subsetByOverlaps</code></p><p><code>findOverlaps</code>输入是query(查找对象)和subject(目标对象)，返回的是一个Hit对象</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs r">gr<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   a     chr1   <span class="hljs-number">101</span><span class="hljs-operator">-</span><span class="hljs-number">111</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   d     chr2   <span class="hljs-number">104</span><span class="hljs-operator">-</span><span class="hljs-number">114</span>      <span class="hljs-operator">*</span> <span class="hljs-operator">|</span>         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   e     chr1   <span class="hljs-number">105</span><span class="hljs-operator">-</span><span class="hljs-number">115</span>      <span class="hljs-operator">*</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   f     chr1   <span class="hljs-number">106</span><span class="hljs-operator">-</span><span class="hljs-number">116</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   g     chr3   <span class="hljs-number">107</span><span class="hljs-operator">-</span><span class="hljs-number">117</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">7</span> <span class="hljs-number">0.333333333333333</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   h     chr3   <span class="hljs-number">108</span><span class="hljs-operator">-</span><span class="hljs-number">118</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">8</span> <span class="hljs-number">0.222222222222222</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   i     chr3   <span class="hljs-number">109</span><span class="hljs-operator">-</span><span class="hljs-number">119</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">9</span> <span class="hljs-number">0.111111111111111</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   j     chr3   <span class="hljs-number">110</span><span class="hljs-operator">-</span><span class="hljs-number">120</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br>grl<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">106</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txB<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">107</span><span class="hljs-operator">-</span><span class="hljs-number">109</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">113</span><span class="hljs-operator">-</span><span class="hljs-number">115</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><br>findOverlaps<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">,</span> grl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Hits object with <span class="hljs-number">5</span> hits and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       queryHits subjectHits<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>         <span class="hljs-number">2</span>           <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>         <span class="hljs-number">3</span>           <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span>         <span class="hljs-number">4</span>           <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span>         <span class="hljs-number">5</span>           <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span>         <span class="hljs-number">6</span>           <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   queryLength<span class="hljs-operator">:</span> <span class="hljs-number">10</span> <span class="hljs-operator">/</span> subjectLength<span class="hljs-operator">:</span> <span class="hljs-number">2</span><br><br><span class="hljs-comment">###queryHits 是query中的index，subjectHits表示在subject哪一个元素与query相应的元素overlap</span><br><br>seqnames<span class="hljs-punctuation">(</span>grl<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;txB&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;chr2&quot;</span><br>grl<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txA<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">106</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">$</span>txB<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       seqnames    ranges strand <span class="hljs-operator">|</span>     score        GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>     chr1   <span class="hljs-number">107</span><span class="hljs-operator">-</span><span class="hljs-number">109</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>     chr2   <span class="hljs-number">113</span><span class="hljs-operator">-</span><span class="hljs-number">115</span>      <span class="hljs-operator">-</span> <span class="hljs-operator">|</span>         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><br>findOverlaps<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">,</span> grl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Hits object with <span class="hljs-number">6</span> hits and <span class="hljs-number">0</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       queryHits subjectHits<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span>         <span class="hljs-number">2</span>           <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span>         <span class="hljs-number">3</span>           <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span>         <span class="hljs-number">4</span>           <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-punctuation">]</span>         <span class="hljs-number">4</span>           <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span>         <span class="hljs-number">5</span>           <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">[</span><span class="hljs-number">6</span><span class="hljs-punctuation">]</span>         <span class="hljs-number">6</span>           <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   queryLength<span class="hljs-operator">:</span> <span class="hljs-number">10</span> <span class="hljs-operator">/</span> subjectLength<span class="hljs-operator">:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><code>countOverlaps</code> 计算在query中匹配到subject的元素个数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">countOverlaps<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">,</span> grl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> a b <span class="hljs-built_in">c</span> d e f g h i j <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><code>subsetByOverlaps</code> 在query中提取至少与subject重复一次的元素：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">subsetByOverlaps<span class="hljs-punctuation">(</span>gr<span class="hljs-punctuation">,</span>grl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> GRanges object with <span class="hljs-number">5</span> ranges and <span class="hljs-number">2</span> metadata columns<span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     seqnames    ranges strand <span class="hljs-operator">|</span>     score                GC<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>IRanges<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>Rle<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>integer<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>numeric<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   b     chr2   <span class="hljs-number">102</span><span class="hljs-operator">-</span><span class="hljs-number">112</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span><span class="hljs-operator">-</span><span class="hljs-number">113</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   d     chr2   <span class="hljs-number">104</span><span class="hljs-operator">-</span><span class="hljs-number">114</span>      <span class="hljs-operator">*</span> <span class="hljs-operator">|</span>         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   e     chr1   <span class="hljs-number">105</span><span class="hljs-operator">-</span><span class="hljs-number">115</span>      <span class="hljs-operator">*</span> <span class="hljs-operator">|</span>         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   f     chr1   <span class="hljs-number">106</span><span class="hljs-operator">-</span><span class="hljs-number">116</span>      <span class="hljs-operator">+</span> <span class="hljs-operator">|</span>         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   seqinfo<span class="hljs-operator">:</span> <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>生物信息</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>dplyr列式操作</title>
    <link href="/2021/01/23/dplyr_col_wise/"/>
    <url>/2021/01/23/dplyr_col_wise/</url>
    
    <content type="html"><![CDATA[<p>dplyr 按列操作，主要是 across 函数的用法</p><span id="more"></span><p>我们在数据分析过程中经常要做的一件事就是对数据框的多列进行同样的操作，但是如果采用粘贴复制的方法比较繁琐也容易出错，比如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">%&gt;%</span> <br>  group_by<span class="hljs-punctuation">(</span>g1<span class="hljs-punctuation">,</span> g2<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>a <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> b <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span>b<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span> <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> d <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>使用across函数就可以较简洁的重写上面的代码：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">%&gt;%</span> <br>  group_by<span class="hljs-punctuation">(</span>g1<span class="hljs-punctuation">,</span> g2<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>a<span class="hljs-operator">:</span>d<span class="hljs-punctuation">,</span> mean<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p><code>across</code>有两个基本的参数：</p><ul><li><p>第一个参数是<code>.cols</code> 选择想要操作的列，使用的方法是<em>tidy selection</em> (也就是和select一样，可以根据位置&#x2F;名称&#x2F;类型来选择)</p></li><li><p>第二个参数是<code>.fns</code> 是对每列进行操作的函数，可以是purrr风格的公式(比如~.x&#x2F;2，具体见<a href="sss">迭代—purrr</a>)</p></li></ul><p>across最常见的是与summarise一起使用(别的动词也可以)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.character</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>unique<span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    name hair_color skin_color eye_color   sex gender<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>    <span class="hljs-number">87</span>         <span class="hljs-number">13</span>         <span class="hljs-number">31</span>        <span class="hljs-number">15</span>     <span class="hljs-number">5</span>      <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 2 more variables: homeworld &lt;int&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   species &lt;int&gt;</span><br><br>starwars <span class="hljs-operator">%&gt;%</span> <br>  group_by<span class="hljs-punctuation">(</span>species<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  filter<span class="hljs-punctuation">(</span>n<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>sex<span class="hljs-punctuation">,</span> gender<span class="hljs-punctuation">,</span> homeworld<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> <span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>unique<span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 9 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   species    sex gender homeworld<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> Droid        <span class="hljs-number">1</span>      <span class="hljs-number">2</span>         <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> Gungan       <span class="hljs-number">1</span>      <span class="hljs-number">1</span>         <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> Human        <span class="hljs-number">2</span>      <span class="hljs-number">2</span>        <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> Kaminoan     <span class="hljs-number">2</span>      <span class="hljs-number">2</span>         <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> Mirialan     <span class="hljs-number">1</span>      <span class="hljs-number">1</span>         <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span> Twi<span class="hljs-string">&#x27;lek      2      2         1</span><br><span class="hljs-string">&gt;&gt; 7 Wookiee      1      1         1</span><br><span class="hljs-string">&gt;&gt; 8 Zabrak       1      1         2</span><br><span class="hljs-string">&gt;&gt; 9 &lt;NA&gt;         1      1         3</span><br><span class="hljs-string"></span><br><span class="hljs-string">starwars %&gt;% </span><br><span class="hljs-string">  group_by(homeworld) %&gt;% </span><br><span class="hljs-string">  filter(n() &gt; 1) %&gt;% </span><br><span class="hljs-string">  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))</span><br><span class="hljs-string">&gt;&gt; # A tibble: 10 x 4</span><br><span class="hljs-string">&gt;&gt;    homeworld height  mass birth_year</span><br><span class="hljs-string">&gt;&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;</span><br><span class="hljs-string">&gt;&gt;  1 Alderaan    176.  64         43  </span><br><span class="hljs-string">&gt;&gt;  2 Corellia    175   78.5       25  </span><br><span class="hljs-string">&gt;&gt;  3 Coruscant   174.  50         91  </span><br><span class="hljs-string">&gt;&gt;  4 Kamino      208.  83.1       31.5</span><br><span class="hljs-string">&gt;&gt;  5 Kashyyyk    231  124        200  </span><br><span class="hljs-string">&gt;&gt;  6 Mirial      168   53.1       49  </span><br><span class="hljs-string">&gt;&gt;  7 Naboo       175.  64.2       55  </span><br><span class="hljs-string">&gt;&gt;  8 Ryloth      179   55         48  </span><br><span class="hljs-string">&gt;&gt;  9 Tatooine    170.  85.4       54.6</span><br><span class="hljs-string">&gt;&gt; 10 &lt;NA&gt;        139.  82        334.</span><br></code></pre></td></tr></table></figure><p>需要注意的是：across在进行操作的时候不会选择分组变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>g <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> x <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span><span class="hljs-number">9</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>df <span class="hljs-operator">%&gt;%</span> <br>  group_by<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">sum</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 2 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       g     x     y<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>    <span class="hljs-operator">-</span><span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h3 id="多个函数"><a href="#多个函数" class="headerlink" title="多个函数"></a>多个函数</h3><p>也可以使用多个函数对列进行操作，只需要在第二个参数中提供具名函数的列表：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r">min_max <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><br>  <span class="hljs-built_in">min</span> <span class="hljs-operator">=</span> <span class="hljs-operator">~</span><span class="hljs-built_in">min</span><span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">,</span> na.rm <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-built_in">max</span> <span class="hljs-operator">=</span> <span class="hljs-operator">~</span><span class="hljs-built_in">max</span><span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">,</span> na.rm <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>starwars <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> min_max<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   height_min height_max mass_min mass_max birth_year_min<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>         <span class="hljs-number">66</span>        <span class="hljs-number">264</span>       <span class="hljs-number">15</span>     <span class="hljs-number">1358</span>              <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 1 more variable: birth_year_max &lt;dbl&gt;</span><br><br>starwars <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>height<span class="hljs-punctuation">,</span> mass<span class="hljs-punctuation">,</span> birth_year<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> min_max<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   height_min height_max mass_min mass_max birth_year_min<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>         <span class="hljs-number">66</span>        <span class="hljs-number">264</span>       <span class="hljs-number">15</span>     <span class="hljs-number">1358</span>              <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 1 more variable: birth_year_max &lt;dbl&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以看到默认的输出结果的列名是原来的列名加上函数的名称中间用下划线分割，也可以通过<code>.name</code>参数来指定输出的名称(以<code>glue</code>包中的格式)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> min_max<span class="hljs-punctuation">,</span> .names <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;.fn&#125;.&#123;.col&#125;&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##调换位置，并以点号分割</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   min.height max.height min.mass max.mass min.birth_year<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>         <span class="hljs-number">66</span>        <span class="hljs-number">264</span>       <span class="hljs-number">15</span>     <span class="hljs-number">1358</span>              <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 1 more variable: max.birth_year &lt;dbl&gt;</span><br><br>starwars <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>height<span class="hljs-punctuation">,</span> mass<span class="hljs-punctuation">,</span> birth_year<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> min_max<span class="hljs-punctuation">,</span> .names <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;.fn&#125;.&#123;.col&#125;&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   min.height max.height min.mass max.mass min.birth_year<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>         <span class="hljs-number">66</span>        <span class="hljs-number">264</span>       <span class="hljs-number">15</span>     <span class="hljs-number">1358</span>              <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 1 more variable: max.birth_year &lt;dbl&gt;</span><br></code></pre></td></tr></table></figure><p>如果想要同一个函数操作得到的结果放在一起，我们可以把上面两个函数拆开执行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span><br>  across<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>height<span class="hljs-punctuation">,</span> mass<span class="hljs-punctuation">,</span> birth_year<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span><span class="hljs-built_in">min</span><span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">,</span> na.rm <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> .names <span class="hljs-operator">=</span> <span class="hljs-string">&quot;min_&#123;.col&#125;&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  across<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>height<span class="hljs-punctuation">,</span> mass<span class="hljs-punctuation">,</span> birth_year<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span><span class="hljs-built_in">max</span><span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">,</span> na.rm <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> .names <span class="hljs-operator">=</span> <span class="hljs-string">&quot;max_&#123;.col&#125;&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   min_height min_mass min_birth_year max_height max_mass<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>         <span class="hljs-number">66</span>       <span class="hljs-number">15</span>              <span class="hljs-number">8</span>        <span class="hljs-number">264</span>     <span class="hljs-number">1358</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 1 more variable: max_birth_year &lt;dbl&gt;</span><br></code></pre></td></tr></table></figure><p>注意：在上面的代码中不能直接使用<code>where(is.numeric)</code> 因为第二个across会对新生成的数值变量(“min_height”, “min_mass” and“min_birth_year”)进行操作（执行有顺序）:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span><br>  across<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span><span class="hljs-built_in">min</span><span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">,</span> na.rm <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> .names <span class="hljs-operator">=</span> <span class="hljs-string">&quot;min_&#123;.col&#125;&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    across<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span><span class="hljs-built_in">max</span><span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">,</span> na.rm <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> .names <span class="hljs-operator">=</span> <span class="hljs-string">&quot;max_&#123;.col&#125;&quot;</span><span class="hljs-punctuation">)</span>  <br><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   min_height min_mass min_birth_year max_height max_mass<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>         <span class="hljs-number">66</span>       <span class="hljs-number">15</span>              <span class="hljs-number">8</span>        <span class="hljs-number">264</span>     <span class="hljs-number">1358</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 4 more variables: max_birth_year &lt;dbl&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   max_min_height &lt;int&gt;, max_min_mass &lt;dbl&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   max_min_birth_year &lt;dbl&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到生成了额外的三列：max_min_height &lt;int&gt;, max_min_mass &lt;dbl&gt;,<br>max_min_birth_year &lt;dbl&gt;</p><p>要解决这个问题可以将 <code>across</code> 的结果返回为一个 tibble，再输出：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars <span class="hljs-operator">%&gt;%</span> summarise<span class="hljs-punctuation">(</span><br>  tibble<span class="hljs-punctuation">(</span><br>    across<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span><span class="hljs-built_in">min</span><span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">,</span> na.rm <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> .names <span class="hljs-operator">=</span> <span class="hljs-string">&quot;min_&#123;.col&#125;&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>    across<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span><span class="hljs-built_in">max</span><span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">,</span> na.rm <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> .names <span class="hljs-operator">=</span> <span class="hljs-string">&quot;max_&#123;.col&#125;&quot;</span><span class="hljs-punctuation">)</span>  <br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   min_height min_mass min_birth_year max_height max_mass<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>         <span class="hljs-number">66</span>       <span class="hljs-number">15</span>              <span class="hljs-number">8</span>        <span class="hljs-number">264</span>     <span class="hljs-number">1358</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 1 more variable: max_birth_year &lt;dbl&gt;</span><br></code></pre></td></tr></table></figure><p>另外，我们也可以使用 <code>relocate</code> 函数来调整列的顺序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> min_max<span class="hljs-punctuation">,</span> .names <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;.fn&#125;.&#123;.col&#125;&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  relocate<span class="hljs-punctuation">(</span>starts_with<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;min&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   min.height min.mass min.birth_year max.height max.mass<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>         <span class="hljs-number">66</span>       <span class="hljs-number">15</span>              <span class="hljs-number">8</span>        <span class="hljs-number">264</span>     <span class="hljs-number">1358</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 1 more variable: max.birth_year &lt;dbl&gt;</span><br></code></pre></td></tr></table></figure><h2 id="当前列"><a href="#当前列" class="headerlink" title="当前列"></a>当前列</h2><p>通过 <code>cur_column</code> 来获取当前列的名称：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> z <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-operator">:</span><span class="hljs-number">7</span><span class="hljs-punctuation">)</span><br>mult <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> z <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br><br>df <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>all_of<span class="hljs-punctuation">(</span><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>mult<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> .x <span class="hljs-operator">*</span> mult<span class="hljs-punctuation">[[</span>cur_column<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     y     z<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>    <span class="hljs-number">30</span>   <span class="hljs-number">500</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>    <span class="hljs-number">40</span>   <span class="hljs-number">600</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">3</span>    <span class="hljs-number">50</span>   <span class="hljs-number">700</span><br></code></pre></td></tr></table></figure><p>在 <a href="https://stackoverflow.com/questions/65543579/can-you-use-dplyr-across-to-iterate-across-pairs-of-columns">stackoverflow</a> 看到一个有意思的例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>glue<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>stringr<span class="hljs-punctuation">)</span><br>df <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;label&quot;</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;c&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;d&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                 <span class="hljs-string">&quot;A&quot;</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">9</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                 <span class="hljs-string">&quot;B&quot;</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                 <span class="hljs-string">&quot;error_A&quot;</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                 <span class="hljs-string">&quot;error_B&quot;</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">##要成对计算</span><br><span class="hljs-comment">##get 获取对象的值</span><br>df <span class="hljs-operator">%&gt;%</span> <br>    mutate<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>A<span class="hljs-punctuation">,</span> B<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> <br>     .<span class="hljs-operator">/</span>get<span class="hljs-punctuation">(</span>str_c<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;error_&#x27;</span><span class="hljs-punctuation">,</span> cur_column<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> .names <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;R_&#123;.col&#125;&#x27;</span> <span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   label A  B error_A error_B R_A      R_B<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     a <span class="hljs-number">4</span> <span class="hljs-number">10</span>     <span class="hljs-number">0.4</span>     <span class="hljs-number">0.3</span>  <span class="hljs-number">10</span> <span class="hljs-number">33.33333</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     b <span class="hljs-number">3</span>  <span class="hljs-number">0</span>     <span class="hljs-number">0.3</span>     <span class="hljs-number">0.0</span>  <span class="hljs-number">10</span>      <span class="hljs-literal">NaN</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-built_in">c</span> <span class="hljs-number">8</span>  <span class="hljs-number">4</span>     <span class="hljs-number">0.2</span>     <span class="hljs-number">0.4</span>  <span class="hljs-number">40</span> <span class="hljs-number">10.00000</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>     d <span class="hljs-number">9</span>  <span class="hljs-number">1</span>     <span class="hljs-number">0.1</span>     <span class="hljs-number">0.1</span>  <span class="hljs-number">90</span> <span class="hljs-number">10.00000</span><br></code></pre></td></tr></table></figure><h2 id="其他动词"><a href="#其他动词" class="headerlink" title="其他动词"></a>其他动词</h2><p><code>across</code> 也可以和 <code>dplyr</code> 的其他动词联用：</p><ul><li><p>和 <code>mutate</code> 一起用：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##将数值变量的范围缩放到0-1</span><br>rescale01 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>rng <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">range</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> na.rm <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">(</span>x <span class="hljs-operator">-</span> rng<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">/</span> <span class="hljs-punctuation">(</span>rng<span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">-</span> rng<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>df <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>df <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span><span class="hljs-built_in">is.numeric</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> rescale01<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 4 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     y<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>     <span class="hljs-number">1</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-number">0.333</span> <span class="hljs-number">0.475</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-number">0.667</span> <span class="hljs-number">0</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span>     <span class="hljs-number">0.145</span><br></code></pre></td></tr></table></figure></li><li><p>和 <code>distinct</code> 一起用：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##看所有含有颜色变量有多少种类</span><br>starwars <span class="hljs-operator">%&gt;%</span> distinct<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>contains<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;color&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 67 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    hair_color    skin_color  eye_color<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> blond         fair        blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>          gold        yellow   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>          white<span class="hljs-punctuation">,</span> blue red      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> none          white       yellow   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> brown         light       brown    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> brown<span class="hljs-punctuation">,</span> grey   light       blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> brown         light       blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>          white<span class="hljs-punctuation">,</span> red  red      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> black         light       brown    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> auburn<span class="hljs-punctuation">,</span> white fair        blue<span class="hljs-operator">-</span>gray<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 57 more rows</span><br></code></pre></td></tr></table></figure></li><li><p>和 <code>count</code> 一起用：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars <span class="hljs-operator">%&gt;%</span> count<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>contains<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;color&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> sort <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 67 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    hair_color skin_color eye_color     n<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> brown      light      brown         <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> brown      fair       blue          <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> none       grey       black         <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> black      dark       brown         <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> blond      fair       blue          <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> black      fair       brown         <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> black      <span class="hljs-built_in">tan</span>        brown         <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> black      yellow     blue          <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> brown      fair       brown         <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> none       white      yellow        <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 57 more rows</span><br></code></pre></td></tr></table></figure></li><li><p>和 <code>filter</code> 一起用：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###没有缺失值的变量的所有行</span><br>starwars <span class="hljs-operator">%&gt;%</span> filter<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span>everything<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> <span class="hljs-operator">!</span><span class="hljs-built_in">is.na</span><span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 29 x 14</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    name      height  mass hair_color skin_color eye_color<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> Luke Sky<span class="hljs-operator">~</span>    <span class="hljs-number">172</span>    <span class="hljs-number">77</span> blond      fair       blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> Darth Va<span class="hljs-operator">~</span>    <span class="hljs-number">202</span>   <span class="hljs-number">136</span> none       white      yellow   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> Leia Org<span class="hljs-operator">~</span>    <span class="hljs-number">150</span>    <span class="hljs-number">49</span> brown      light      brown    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> Owen Lars    <span class="hljs-number">178</span>   <span class="hljs-number">120</span> brown<span class="hljs-punctuation">,</span> gr<span class="hljs-operator">~</span> light      blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> Beru Whi<span class="hljs-operator">~</span>    <span class="hljs-number">165</span>    <span class="hljs-number">75</span> brown      light      blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> Biggs Da<span class="hljs-operator">~</span>    <span class="hljs-number">183</span>    <span class="hljs-number">84</span> black      light      brown    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> Obi<span class="hljs-operator">-</span>Wan <span class="hljs-operator">~</span>    <span class="hljs-number">182</span>    <span class="hljs-number">77</span> auburn<span class="hljs-punctuation">,</span> w<span class="hljs-operator">~</span> fair       blue<span class="hljs-operator">-</span>gray<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> Anakin S<span class="hljs-operator">~</span>    <span class="hljs-number">188</span>    <span class="hljs-number">84</span> blond      fair       blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> Chewbacca    <span class="hljs-number">228</span>   <span class="hljs-number">112</span> brown      unknown    blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> Han Solo     <span class="hljs-number">180</span>    <span class="hljs-number">80</span> brown      fair       brown    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 19 more rows, and 8 more variables:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   birth_year &lt;dbl&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   vehicles &lt;list&gt;, starships &lt;list&gt;</span><br><br><span class="hljs-comment">##选择至少有一列不是 NA 的行</span><br>starwars <span class="hljs-operator">%&gt;%</span> <br>filter<span class="hljs-punctuation">(</span>if_any<span class="hljs-punctuation">(</span>everything<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> <span class="hljs-operator">!</span><span class="hljs-built_in">is.na</span><span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 87 x 14</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    name      height  mass hair_color skin_color eye_color<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> Luke Sky<span class="hljs-operator">~</span>    <span class="hljs-number">172</span>    <span class="hljs-number">77</span> blond      fair       blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> C<span class="hljs-operator">-</span><span class="hljs-number">3</span>PO        <span class="hljs-number">167</span>    <span class="hljs-number">75</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>       gold       yellow   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> R2<span class="hljs-operator">-</span>D2         <span class="hljs-number">96</span>    <span class="hljs-number">32</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>       white<span class="hljs-punctuation">,</span> bl<span class="hljs-operator">~</span> red      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> Darth Va<span class="hljs-operator">~</span>    <span class="hljs-number">202</span>   <span class="hljs-number">136</span> none       white      yellow   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> Leia Org<span class="hljs-operator">~</span>    <span class="hljs-number">150</span>    <span class="hljs-number">49</span> brown      light      brown    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> Owen Lars    <span class="hljs-number">178</span>   <span class="hljs-number">120</span> brown<span class="hljs-punctuation">,</span> gr<span class="hljs-operator">~</span> light      blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> Beru Whi<span class="hljs-operator">~</span>    <span class="hljs-number">165</span>    <span class="hljs-number">75</span> brown      light      blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> R5<span class="hljs-operator">-</span>D4         <span class="hljs-number">97</span>    <span class="hljs-number">32</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>       white<span class="hljs-punctuation">,</span> red red      <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> Biggs Da<span class="hljs-operator">~</span>    <span class="hljs-number">183</span>    <span class="hljs-number">84</span> black      light      brown    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> Obi<span class="hljs-operator">-</span>Wan <span class="hljs-operator">~</span>    <span class="hljs-number">182</span>    <span class="hljs-number">77</span> auburn<span class="hljs-punctuation">,</span> w<span class="hljs-operator">~</span> fair       blue<span class="hljs-operator">-</span>gray<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 77 more rows, and 8 more variables:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   birth_year &lt;dbl&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   vehicles &lt;list&gt;, starships &lt;list&gt;</span><br><br><span class="hljs-comment">##选择所有的列都不是NA的行</span><br>starwars <span class="hljs-operator">%&gt;%</span> <br>filter<span class="hljs-punctuation">(</span>if_all<span class="hljs-punctuation">(</span>everything<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> <span class="hljs-operator">!</span><span class="hljs-built_in">is.na</span><span class="hljs-punctuation">(</span>.x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 29 x 14</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    name      height  mass hair_color skin_color eye_color<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> Luke Sky<span class="hljs-operator">~</span>    <span class="hljs-number">172</span>    <span class="hljs-number">77</span> blond      fair       blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> Darth Va<span class="hljs-operator">~</span>    <span class="hljs-number">202</span>   <span class="hljs-number">136</span> none       white      yellow   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> Leia Org<span class="hljs-operator">~</span>    <span class="hljs-number">150</span>    <span class="hljs-number">49</span> brown      light      brown    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> Owen Lars    <span class="hljs-number">178</span>   <span class="hljs-number">120</span> brown<span class="hljs-punctuation">,</span> gr<span class="hljs-operator">~</span> light      blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> Beru Whi<span class="hljs-operator">~</span>    <span class="hljs-number">165</span>    <span class="hljs-number">75</span> brown      light      blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> Biggs Da<span class="hljs-operator">~</span>    <span class="hljs-number">183</span>    <span class="hljs-number">84</span> black      light      brown    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> Obi<span class="hljs-operator">-</span>Wan <span class="hljs-operator">~</span>    <span class="hljs-number">182</span>    <span class="hljs-number">77</span> auburn<span class="hljs-punctuation">,</span> w<span class="hljs-operator">~</span> fair       blue<span class="hljs-operator">-</span>gray<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> Anakin S<span class="hljs-operator">~</span>    <span class="hljs-number">188</span>    <span class="hljs-number">84</span> blond      fair       blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> Chewbacca    <span class="hljs-number">228</span>   <span class="hljs-number">112</span> brown      unknown    blue     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> Han Solo     <span class="hljs-number">180</span>    <span class="hljs-number">80</span> brown      fair       brown    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 19 more rows, and 8 more variables:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   birth_year &lt;dbl&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">#   vehicles &lt;list&gt;, starships &lt;list&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【hands on ML Ch2】-端到端机器学习</title>
    <link href="/2021/01/23/hands_on_ML_ch2/"/>
    <url>/2021/01/23/hands_on_ML_ch2/</url>
    
    <content type="html"><![CDATA[<p>hands on ML 第二章，展示了一个实例项目的完整流程</p><span id="more"></span><p>本章展示了一个实例项目的完整流程，主要步骤包括：</p><ul><li><p>组织项目(look at the big picture)</p></li><li><p>获取数据</p></li><li><p>对数据进行探索和可视化</p></li><li><p>对数据进行预处理</p></li><li><p>选择模型进行训练</p></li><li><p>微调模型</p></li><li><p>展示结果</p></li><li><p>启动，监控并维护系统</p></li></ul><p>本章使用的数据为加州房屋价格数据集，来自1990年的人口普查数据,包括每个地区(人口普查单位)的中位数收入，人口，中位数住房价格等信息，需要建立一个模型来预测住房价格</p><h2 id="Look-at-the-Big-Picture"><a href="#Look-at-the-Big-Picture" class="headerlink" title="Look at the Big Picture"></a>Look at the Big Picture</h2><p>第一步就是<strong>确定问题</strong> ：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210123145823410.png"></p><p>这个项目是处于一个数据管线(pipeline)上的一环，目的是预测出地区的住房价格以供后续的投资决策参考</p><p>有关机器学习系统的问题包括：这个系统是监督的还是非监督的还是增强学习类型；是分类任务还是回归任务还是其他；需要使用批量学习还是在线学习</p><p>这个任务是典型的监督学习，回归任务(单变量回归)；由于没有连续的数据流进入系统，所以采用批量学习(batch<br>learning)</p><p>第二步是选择一个<strong>性能衡量指标</strong>，对于回归问题最常用的是RMSE(Root Mean Square Error,均方根误差):</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210123152509580.png"></p><p>也可以使用其他的函数，比如，如果数据中离群点比较多，可以使用MAE(mean absolute error,平均绝对误差)，这个衡量相较RMSE对离群点更不敏感</p><p>第三步是 <strong>再次检查假设</strong> 帮助我们较早的发现可能的问题，比如如果系统的下游需要的不是数值而是价格的分类(低中高)，那么这个问题就变成分类问题而不是回归问题了；所以需要在项目开始前将这些问题考虑到，避免时间精力的浪费</p><h2 id="Get-the-Data"><a href="#Get-the-Data" class="headerlink" title="Get the Data"></a>Get the Data</h2><p>编写函数来自动下载数据并解压：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tarfile<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> urllib.request<br><br>DOWNLOAD_ROOT = <span class="hljs-string">&quot;https://raw.githubusercontent.com/ageron/handson-ml2/master/&quot;</span><br>HOUSING_PATH = os.path.join(<span class="hljs-string">&quot;../test/datasets&quot;</span>, <span class="hljs-string">&quot;housing&quot;</span>)<br>HOUSING_URL = DOWNLOAD_ROOT + <span class="hljs-string">&quot;datasets/housing/housing.tgz&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_housing_data</span>(<span class="hljs-params">housing_url=HOUSING_URL, housing_path=HOUSING_PATH</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(housing_path):<br>        os.makedirs(housing_path)<br>    tgz_path = os.path.join(housing_path, <span class="hljs-string">&quot;housing.tgz&quot;</span>)<br>    urllib.request.urlretrieve(housing_url, tgz_path)<br>    housing_tgz = tarfile.<span class="hljs-built_in">open</span>(tgz_path)<br>    housing_tgz.extractall(path=housing_path)<br>    housing_tgz.close()<br><br>fetch_housing_data()<br></code></pre></td></tr></table></figure><p>然后使用pandas来读入数据，返回一个pandas的DataFrame 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">HOUSING_PATH = os.path.join(<span class="hljs-string">&quot;../test/datasets&quot;</span>, <span class="hljs-string">&quot;housing&quot;</span>)<br><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_housing_data</span>(<span class="hljs-params">housing_path=HOUSING_PATH</span>):<br>    csv_path = os.path.join(housing_path, <span class="hljs-string">&quot;housing.csv&quot;</span>)<br>    <span class="hljs-keyword">return</span> pd.read_csv(csv_path)<br><br>housing = load_housing_data()<br></code></pre></td></tr></table></figure><p>可以看一下数据的结构：<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210123161251034.png"></p><p>也可以使用<code>info</code> 方法来查看数据的描述,可以展示数据的行数，每列的类型以及非空值的数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">housing.info()<br>&gt;&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;pandas.core.frame.DataFrame&#x27;</span>&gt;<br>&gt;&gt; RangeIndex: <span class="hljs-number">20640</span> entries, <span class="hljs-number">0</span> to <span class="hljs-number">20639</span><br>&gt;&gt; Data columns (total <span class="hljs-number">10</span> columns):<br>&gt;&gt;  <span class="hljs-comment">#   Column              Non-Null Count  Dtype  </span><br>&gt;&gt; ---  ------              --------------  -----  <br>&gt;&gt;  <span class="hljs-number">0</span>   longitude           <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">1</span>   latitude            <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">2</span>   housing_median_age  <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">3</span>   total_rooms         <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">4</span>   total_bedrooms      <span class="hljs-number">20433</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">5</span>   population          <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">6</span>   households          <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">7</span>   median_income       <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">8</span>   median_house_value  <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">9</span>   ocean_proximity     <span class="hljs-number">20640</span> non-null  <span class="hljs-built_in">object</span> <br>&gt;&gt; dtypes: float64(<span class="hljs-number">9</span>), <span class="hljs-built_in">object</span>(<span class="hljs-number">1</span>)<br>&gt;&gt; memory usage: <span class="hljs-number">1.6</span>+ MB<br></code></pre></td></tr></table></figure><p>注意到<code>total_bedrooms</code> 变量只有20433个非空值，因此后续可能要对该变量进行缺失值的处理</p><p>对于<code>ocean_proximity</code>这个变量，可以使用<code>value_counts()</code> 方法来看其具体的分类情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">housing[<span class="hljs-string">&quot;ocean_proximity&quot;</span>].value_counts()<br>&gt;&gt; &lt;1H OCEAN     <span class="hljs-number">9136</span><br>&gt;&gt; INLAND        <span class="hljs-number">6551</span><br>&gt;&gt; NEAR OCEAN    <span class="hljs-number">2658</span><br>&gt;&gt; NEAR BAY      <span class="hljs-number">2290</span><br>&gt;&gt; ISLAND           <span class="hljs-number">5</span><br>&gt;&gt; Name: ocean_proximity, dtype: int64<br></code></pre></td></tr></table></figure><p>使用<code>describe</code> 方法可以得到数据的汇总统计信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">housing.describe()<br>&gt;&gt;           longitude      latitude  ...  median_income  median_house_value<br>&gt;&gt; count  <span class="hljs-number">20640.000000</span>  <span class="hljs-number">20640.000000</span>  ...   <span class="hljs-number">20640.000000</span>        <span class="hljs-number">20640.000000</span><br>&gt;&gt; mean    -<span class="hljs-number">119.569704</span>     <span class="hljs-number">35.631861</span>  ...       <span class="hljs-number">3.870671</span>       <span class="hljs-number">206855.816909</span><br>&gt;&gt; std        <span class="hljs-number">2.003532</span>      <span class="hljs-number">2.135952</span>  ...       <span class="hljs-number">1.899822</span>       <span class="hljs-number">115395.615874</span><br>&gt;&gt; <span class="hljs-built_in">min</span>     -<span class="hljs-number">124.350000</span>     <span class="hljs-number">32.540000</span>  ...       <span class="hljs-number">0.499900</span>        <span class="hljs-number">14999.000000</span><br>&gt;&gt; <span class="hljs-number">25</span>%     -<span class="hljs-number">121.800000</span>     <span class="hljs-number">33.930000</span>  ...       <span class="hljs-number">2.563400</span>       <span class="hljs-number">119600.000000</span><br>&gt;&gt; <span class="hljs-number">50</span>%     -<span class="hljs-number">118.490000</span>     <span class="hljs-number">34.260000</span>  ...       <span class="hljs-number">3.534800</span>       <span class="hljs-number">179700.000000</span><br>&gt;&gt; <span class="hljs-number">75</span>%     -<span class="hljs-number">118.010000</span>     <span class="hljs-number">37.710000</span>  ...       <span class="hljs-number">4.743250</span>       <span class="hljs-number">264725.000000</span><br>&gt;&gt; <span class="hljs-built_in">max</span>     -<span class="hljs-number">114.310000</span>     <span class="hljs-number">41.950000</span>  ...      <span class="hljs-number">15.000100</span>       <span class="hljs-number">500001.000000</span><br>&gt;&gt; <br>&gt;&gt; [<span class="hljs-number">8</span> rows x <span class="hljs-number">9</span> columns]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">housing.describe()[<span class="hljs-string">&quot;median_house_value&quot;</span>]<br>&gt;&gt; count     <span class="hljs-number">20640.000000</span><br>&gt;&gt; mean     <span class="hljs-number">206855.816909</span><br>&gt;&gt; std      <span class="hljs-number">115395.615874</span><br>&gt;&gt; <span class="hljs-built_in">min</span>       <span class="hljs-number">14999.000000</span><br>&gt;&gt; <span class="hljs-number">25</span>%      <span class="hljs-number">119600.000000</span><br>&gt;&gt; <span class="hljs-number">50</span>%      <span class="hljs-number">179700.000000</span><br>&gt;&gt; <span class="hljs-number">75</span>%      <span class="hljs-number">264725.000000</span><br>&gt;&gt; <span class="hljs-built_in">max</span>      <span class="hljs-number">500001.000000</span><br>&gt;&gt; Name: median_house_value, dtype: float64<br></code></pre></td></tr></table></figure><p>除了得到一些数值信息之外，对数据的探索更直接的方式是通过可视化来得到数据的一些特征,最简单的就是画直方图来反映数据的分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>housing.hist(bins=<span class="hljs-number">50</span>, figsize=(<span class="hljs-number">20</span>,<span class="hljs-number">15</span>))<br>&gt;&gt; array([[&lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;longitude&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;latitude&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;housing_median_age&#x27;</span>&#125;&gt;],<br>&gt;&gt;        [&lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;total_rooms&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;total_bedrooms&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;population&#x27;</span>&#125;&gt;],<br>&gt;&gt;        [&lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;households&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;median_income&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;median_house_value&#x27;</span>&#125;&gt;]],<br>&gt;&gt;       dtype=<span class="hljs-built_in">object</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/unnamed-chunk-8-1.png" alt="unnamed-chunk-8-1"></p><p>观察数据的分布可以得到一些可能注意不到的信息：比如这里的<code>median income</code> 变量，看横坐标范围是0.5-15，所以不可能是以美元作为单位，这个时候我们就要尽量弄清楚这些已经经过处理的数值是怎么得到的(这里经过了转化，单位变成了$10000，并且下限是0.5，上限是15);另外我们看到这些<em>变量的尺度差异比较大</em>，后续需要进行缩放处理(scaling); 还有就是这些变量看起来都是偏向分布的(tailed distribution),这对于某些机器学习算法的学习可能比较困难，所以后续可能要进行转化，使其分布趋向于钟形分布</p><h3 id="创建测试集"><a href="#创建测试集" class="headerlink" title="创建测试集"></a>创建测试集</h3><p>为什么要在选择模型之前就要创建测试集呢？</p><p>因为人的大脑是一种惊人的模式检测系统，可能我们在观察了测试数据之后可能会偶然发现有意思的模式从而就会有偏向性的选择某个模型，在测试集上估计误差的时候就会过于乐观(data snooping bias)</p><p>因此我们需要提前将测试集划分好，并且在模型训练过程中不触及测试集</p><p>在划分训练集和测试集的时候主要有两种方法：</p><ul><li><p>完全随机抽样</p></li><li><p>分层抽样</p></li></ul><p>Scikit-Learn 提供了一些函数来划分训练集和测试集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###完全随机抽样</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br><span class="hljs-comment">##random_states是随机种子数</span><br>train_set, test_set = train_test_split(housing, test_size=<span class="hljs-number">0.2</span>,random_state=<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><p>假设这个项目中中位数收入(median income)对预测median housing prices是比较重要的变量，因此我们在创建测试集的时候希望能够代表不同类别的收入群体；由于median income是一个连续性的变量，所以我们需要将其转化成分类变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>housing[<span class="hljs-string">&quot;income_cat&quot;</span>] = pd.cut(housing[<span class="hljs-string">&quot;median_income&quot;</span>],<br>                               bins=[<span class="hljs-number">0.</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.5</span>, <span class="hljs-number">6.</span>, np.inf],<br>                               labels=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>                               <br>housing[<span class="hljs-string">&quot;income_cat&quot;</span>].value_counts()<br>&gt;&gt; <span class="hljs-number">3</span>    <span class="hljs-number">7236</span><br>&gt;&gt; <span class="hljs-number">2</span>    <span class="hljs-number">6581</span><br>&gt;&gt; <span class="hljs-number">4</span>    <span class="hljs-number">3639</span><br>&gt;&gt; <span class="hljs-number">5</span>    <span class="hljs-number">2362</span><br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">822</span><br>&gt;&gt; Name: income_cat, dtype: int64<br>housing[<span class="hljs-string">&quot;income_cat&quot;</span>].hist()<br>&gt;&gt; &lt;AxesSubplot:&gt;<br></code></pre></td></tr></table></figure><p>然后可以使用Scikit-Learn的<strong>StratifiedShuffleSplit类</strong>来进行分层抽样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> StratifiedShuffleSplit<br><br>split = StratifiedShuffleSplit(n_splits=<span class="hljs-number">1</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><span class="hljs-keyword">for</span> train_index, test_index <span class="hljs-keyword">in</span> split.split(housing, housing[<span class="hljs-string">&quot;income_cat&quot;</span>]):<br>    strat_train_set = housing.loc[train_index]<br>    strat_test_set = housing.loc[test_index]<br></code></pre></td></tr></table></figure><p>最后需要将我们创建的用于分层抽样的变量<code>income_cat</code> 删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> set_ <span class="hljs-keyword">in</span> (strat_train_set,strat_test_set):<br>  set_.drop(<span class="hljs-string">&quot;income_cat&quot;</span>,axis=<span class="hljs-number">1</span>,inplace=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="对数据进行探索和可视化"><a href="#对数据进行探索和可视化" class="headerlink" title="对数据进行探索和可视化"></a>对数据进行探索和可视化</h2><p>首先我们要确保对数据的探索和可视化只对训练集进行，另外如果数据集比较大，这一步骤也可以选择一部分数据集作为“exploration set”</p><p>对数据的可视化要选取合适的形式，比如这个项目是不同地区的房价，因此可以以经纬度来展示不同的变量(住房价格，人口密度等)；有些时候可视化需要调整一些参数使得模式更加清晰(比如点的透明度)，有时候可以将一些变量进行合并</p><p>对数据的探索是一个迭代的过程，当我们建立起一个原型系统之后，在运行的过程中可以分析其输出然后返回来再次进行这个探索步骤，从而获得更深的理解</p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>将数据(预)处理的过程包装成函数是非常有用的：</p><ul><li><p>在任何数据集上都可以便捷地重复数据转化步骤</p></li><li><p>可以将经常用到的函数打包成库，以便未来的项目进行复用</p></li><li><p>如果我们的项目是部署在动态的系统上，就可以使用这些函数对新输入的数据进行转化</p></li><li><p>更重要的是：通过函数，我们可以尝试不同的转化参数或不同的转化步骤的组合对最终模型性能的影响</p></li></ul><p>首先获取训练集的拷贝并将数据的labels去掉：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">housing = strat_train_set.drop(<span class="hljs-string">&quot;median_house_value&quot;</span>, axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># drop labels for training set</span><br>housing_labels = strat_train_set[<span class="hljs-string">&quot;median_house_value&quot;</span>].copy()<br></code></pre></td></tr></table></figure><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><p>大部分机器学习算法是不能够处理缺失值的，而我们之前看到<code>total_bedrooms</code> 变量是有一些缺失值的，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">sample_incomplete_rows = housing[housing.isnull().<span class="hljs-built_in">any</span>(axis=<span class="hljs-number">1</span>)].head()<br>sample_incomplete_rows<br>&gt;&gt;        longitude  latitude  ...  median_income  ocean_proximity<br>&gt;&gt; <span class="hljs-number">4629</span>     -<span class="hljs-number">118.30</span>     <span class="hljs-number">34.07</span>  ...         <span class="hljs-number">2.2708</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">6068</span>     -<span class="hljs-number">117.86</span>     <span class="hljs-number">34.01</span>  ...         <span class="hljs-number">5.1762</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">17923</span>    -<span class="hljs-number">121.97</span>     <span class="hljs-number">37.35</span>  ...         <span class="hljs-number">4.6328</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">13656</span>    -<span class="hljs-number">117.30</span>     <span class="hljs-number">34.05</span>  ...         <span class="hljs-number">1.6675</span>           INLAND<br>&gt;&gt; <span class="hljs-number">19252</span>    -<span class="hljs-number">122.79</span>     <span class="hljs-number">38.48</span>  ...         <span class="hljs-number">3.1662</span>        &lt;1H OCEAN<br>&gt;&gt; <br>&gt;&gt; [<span class="hljs-number">5</span> rows x <span class="hljs-number">9</span> columns]<br></code></pre></td></tr></table></figure><p>对于缺失值的处理可以有3种选择：</p><ul><li><p>将相应的地区删除(删除观测值，也就是行)</p></li><li><p>将有缺失值的变量删除(删除列)</p></li><li><p>将缺失值填补为某个值(比如0,平均值,中位数等)</p></li></ul><p>需要注意的是：如果采取用某个值填补缺失值，需要将这个值存储下来，不只是训练集，之后还要用这个值来填充测试集中的缺失值，新的数据中的缺失值</p><p>使用pandas DataFrame中的<code>dropna()</code> <code>drop</code> 和<code>fillna()</code>方法可以实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># option 1 </span><br>housing.dropna(subset=[<span class="hljs-string">&quot;total_bedrooms&quot;</span>]) <br>&gt;&gt;        longitude  latitude  ...  median_income  ocean_proximity<br>&gt;&gt; <span class="hljs-number">17606</span>    -<span class="hljs-number">121.89</span>     <span class="hljs-number">37.29</span>  ...         <span class="hljs-number">2.7042</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">18632</span>    -<span class="hljs-number">121.93</span>     <span class="hljs-number">37.05</span>  ...         <span class="hljs-number">6.4214</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">14650</span>    -<span class="hljs-number">117.20</span>     <span class="hljs-number">32.77</span>  ...         <span class="hljs-number">2.8621</span>       NEAR OCEAN<br>&gt;&gt; <span class="hljs-number">3230</span>     -<span class="hljs-number">119.61</span>     <span class="hljs-number">36.31</span>  ...         <span class="hljs-number">1.8839</span>           INLAND<br>&gt;&gt; <span class="hljs-number">3555</span>     -<span class="hljs-number">118.59</span>     <span class="hljs-number">34.23</span>  ...         <span class="hljs-number">3.0347</span>        &lt;1H OCEAN<br>&gt;&gt; ...          ...       ...  ...            ...              ...<br>&gt;&gt; <span class="hljs-number">6563</span>     -<span class="hljs-number">118.13</span>     <span class="hljs-number">34.20</span>  ...         <span class="hljs-number">4.9312</span>           INLAND<br>&gt;&gt; <span class="hljs-number">12053</span>    -<span class="hljs-number">117.56</span>     <span class="hljs-number">33.88</span>  ...         <span class="hljs-number">2.0682</span>           INLAND<br>&gt;&gt; <span class="hljs-number">13908</span>    -<span class="hljs-number">116.40</span>     <span class="hljs-number">34.09</span>  ...         <span class="hljs-number">3.2723</span>           INLAND<br>&gt;&gt; <span class="hljs-number">11159</span>    -<span class="hljs-number">118.01</span>     <span class="hljs-number">33.82</span>  ...         <span class="hljs-number">4.0625</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">15775</span>    -<span class="hljs-number">122.45</span>     <span class="hljs-number">37.77</span>  ...         <span class="hljs-number">3.5750</span>         NEAR BAY<br>&gt;&gt; <br>&gt;&gt; [<span class="hljs-number">16354</span> rows x <span class="hljs-number">9</span> columns]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># option 2 </span><br>housing.drop(<span class="hljs-string">&quot;total_bedrooms&quot;</span>, axis=<span class="hljs-number">1</span>) <br>&gt;&gt;        longitude  latitude  ...  median_income  ocean_proximity<br>&gt;&gt; <span class="hljs-number">17606</span>    -<span class="hljs-number">121.89</span>     <span class="hljs-number">37.29</span>  ...         <span class="hljs-number">2.7042</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">18632</span>    -<span class="hljs-number">121.93</span>     <span class="hljs-number">37.05</span>  ...         <span class="hljs-number">6.4214</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">14650</span>    -<span class="hljs-number">117.20</span>     <span class="hljs-number">32.77</span>  ...         <span class="hljs-number">2.8621</span>       NEAR OCEAN<br>&gt;&gt; <span class="hljs-number">3230</span>     -<span class="hljs-number">119.61</span>     <span class="hljs-number">36.31</span>  ...         <span class="hljs-number">1.8839</span>           INLAND<br>&gt;&gt; <span class="hljs-number">3555</span>     -<span class="hljs-number">118.59</span>     <span class="hljs-number">34.23</span>  ...         <span class="hljs-number">3.0347</span>        &lt;1H OCEAN<br>&gt;&gt; ...          ...       ...  ...            ...              ...<br>&gt;&gt; <span class="hljs-number">6563</span>     -<span class="hljs-number">118.13</span>     <span class="hljs-number">34.20</span>  ...         <span class="hljs-number">4.9312</span>           INLAND<br>&gt;&gt; <span class="hljs-number">12053</span>    -<span class="hljs-number">117.56</span>     <span class="hljs-number">33.88</span>  ...         <span class="hljs-number">2.0682</span>           INLAND<br>&gt;&gt; <span class="hljs-number">13908</span>    -<span class="hljs-number">116.40</span>     <span class="hljs-number">34.09</span>  ...         <span class="hljs-number">3.2723</span>           INLAND<br>&gt;&gt; <span class="hljs-number">11159</span>    -<span class="hljs-number">118.01</span>     <span class="hljs-number">33.82</span>  ...         <span class="hljs-number">4.0625</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">15775</span>    -<span class="hljs-number">122.45</span>     <span class="hljs-number">37.77</span>  ...         <span class="hljs-number">3.5750</span>         NEAR BAY<br>&gt;&gt; <br>&gt;&gt; [<span class="hljs-number">16512</span> rows x <span class="hljs-number">8</span> columns]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># option 3</span><br>median = housing[<span class="hljs-string">&quot;total_bedrooms&quot;</span>].median() <br><br>housing[<span class="hljs-string">&quot;total_bedrooms&quot;</span>].fillna(median, inplace=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>Scikit-Learn提供了一个方便的类<code>SimpleImputer</code> 来处理缺失值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###首先需要创建一个SimpleImputer实例</span><br><span class="hljs-keyword">from</span> sklearn.impute <span class="hljs-keyword">import</span> SimpleImputer<br><br>imputer = SimpleImputer(strategy=<span class="hljs-string">&quot;median&quot;</span>)<br><br><span class="hljs-comment">###由于只能对数值变量计算meidan，所以将字符变量删除</span><br>housing_num = housing.drop(<span class="hljs-string">&quot;ocean_proximity&quot;</span>,axis=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">###使用fit方法计算median</span><br>imputer.fit(housing_num)<br><br><span class="hljs-comment">##计算的结果存储在statistics_实例变量中</span><br>&gt;&gt; SimpleImputer(strategy=<span class="hljs-string">&#x27;median&#x27;</span>)<br>imputer.statistics_<br>&gt;&gt; array([-<span class="hljs-number">118.51</span>  ,   <span class="hljs-number">34.26</span>  ,   <span class="hljs-number">29.</span>    , <span class="hljs-number">2119.5</span>   ,  <span class="hljs-number">433.</span>    , <span class="hljs-number">1164.</span>    ,<br>&gt;&gt;         <span class="hljs-number">408.</span>    ,    <span class="hljs-number">3.5409</span>])<br>housing_num.median().values<br><br>&gt;&gt; array([-<span class="hljs-number">118.51</span>  ,   <span class="hljs-number">34.26</span>  ,   <span class="hljs-number">29.</span>    , <span class="hljs-number">2119.5</span>   ,  <span class="hljs-number">433.</span>    , <span class="hljs-number">1164.</span>    ,<br>&gt;&gt;         <span class="hljs-number">408.</span>    ,    <span class="hljs-number">3.5409</span>])<br>X = imputer.transform(housing_num)<span class="hljs-comment">####现在就相当于在训练集上&quot;trained&quot; 这个imputer，再使用他去对数据集进行transform(填充缺失值)</span><br>X<br><br><span class="hljs-comment">###将Numpy array转化成数据框</span><br>&gt;&gt; array([[-<span class="hljs-number">121.89</span>  ,   <span class="hljs-number">37.29</span>  ,   <span class="hljs-number">38.</span>    , ...,  <span class="hljs-number">710.</span>    ,  <span class="hljs-number">339.</span>    ,<br>&gt;&gt;            <span class="hljs-number">2.7042</span>],<br>&gt;&gt;        [-<span class="hljs-number">121.93</span>  ,   <span class="hljs-number">37.05</span>  ,   <span class="hljs-number">14.</span>    , ...,  <span class="hljs-number">306.</span>    ,  <span class="hljs-number">113.</span>    ,<br>&gt;&gt;            <span class="hljs-number">6.4214</span>],<br>&gt;&gt;        [-<span class="hljs-number">117.2</span>   ,   <span class="hljs-number">32.77</span>  ,   <span class="hljs-number">31.</span>    , ...,  <span class="hljs-number">936.</span>    ,  <span class="hljs-number">462.</span>    ,<br>&gt;&gt;            <span class="hljs-number">2.8621</span>],<br>&gt;&gt;        ...,<br>&gt;&gt;        [-<span class="hljs-number">116.4</span>   ,   <span class="hljs-number">34.09</span>  ,    <span class="hljs-number">9.</span>    , ..., <span class="hljs-number">2098.</span>    ,  <span class="hljs-number">765.</span>    ,<br>&gt;&gt;            <span class="hljs-number">3.2723</span>],<br>&gt;&gt;        [-<span class="hljs-number">118.01</span>  ,   <span class="hljs-number">33.82</span>  ,   <span class="hljs-number">31.</span>    , ..., <span class="hljs-number">1356.</span>    ,  <span class="hljs-number">356.</span>    ,<br>&gt;&gt;            <span class="hljs-number">4.0625</span>],<br>&gt;&gt;        [-<span class="hljs-number">122.45</span>  ,   <span class="hljs-number">37.77</span>  ,   <span class="hljs-number">52.</span>    , ..., <span class="hljs-number">1269.</span>    ,  <span class="hljs-number">639.</span>    ,<br>&gt;&gt;            <span class="hljs-number">3.575</span> ]])<br>housing_tr = pd.DataFrame(X, columns=housing_num.columns, index=housing_num.index)<br></code></pre></td></tr></table></figure><h3 id="处理分类变量"><a href="#处理分类变量" class="headerlink" title="处理分类变量"></a>处理分类变量</h3><p>这个例子中只有一个变量是分类变量<code>ocean_proximity</code> ,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">housing_cat = housing[[<span class="hljs-string">&quot;ocean_proximity&quot;</span>]]<br>housing_cat.head(<span class="hljs-number">10</span>)<br>&gt;&gt;       ocean_proximity<br>&gt;&gt; <span class="hljs-number">17606</span>       &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">18632</span>       &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">14650</span>      NEAR OCEAN<br>&gt;&gt; <span class="hljs-number">3230</span>           INLAND<br>&gt;&gt; <span class="hljs-number">3555</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">19480</span>          INLAND<br>&gt;&gt; <span class="hljs-number">8879</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">13685</span>          INLAND<br>&gt;&gt; <span class="hljs-number">4937</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">4861</span>        &lt;1H OCEAN<br></code></pre></td></tr></table></figure><p>对于分类变量一般有两种处理方法：</p><ul><li><p>用多个数值去编码不同的类别</p></li><li><p>使用dummy变量，也就是one-hot编码(该类别为1，其他类别为0)</p></li></ul><p>使用Scikit-Learn的OrdinalEncoder类和OneHotEncoder类可以分别处理上述两种情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> OrdinalEncoder<br><br><span class="hljs-comment">###fit_transform相当于上面的先fit再transform</span><br>ordinal_encoder = OrdinalEncoder()<br>housing_cat_encoded = ordinal_encoder.fit_transform(housing_cat)<br>housing_cat_encoded[:<span class="hljs-number">10</span>]<br><br><span class="hljs-comment">###结果存储在categories_变量中</span><br>&gt;&gt; array([[<span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">4.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>]])<br>ordinal_encoder.categories_<br>&gt;&gt; [array([<span class="hljs-string">&#x27;&lt;1H OCEAN&#x27;</span>, <span class="hljs-string">&#x27;INLAND&#x27;</span>, <span class="hljs-string">&#x27;ISLAND&#x27;</span>, <span class="hljs-string">&#x27;NEAR BAY&#x27;</span>, <span class="hljs-string">&#x27;NEAR OCEAN&#x27;</span>],<br>&gt;&gt;       dtype=<span class="hljs-built_in">object</span>)]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> OneHotEncoder<br><br>cat_encoder = OneHotEncoder()<br>housing_cat_1hot = cat_encoder.fit_transform(housing_cat)<br>housing_cat_1hot<br>&gt;&gt; &lt;16512x5 sparse matrix of <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;&lt;class &#x27;</span>numpy.float64<span class="hljs-string">&#x27;&gt;&#x27;</span><br>&gt;&gt;  <span class="hljs-keyword">with</span> <span class="hljs-number">16512</span> stored elements <span class="hljs-keyword">in</span> Compressed Sparse Row <span class="hljs-built_in">format</span>&gt;<br>cat_encoder.categories_<br><br><span class="hljs-comment">###为了便于储存，结果是稀疏矩阵，可以转化为正常的矩阵形式</span><br>&gt;&gt; [array([<span class="hljs-string">&#x27;&lt;1H OCEAN&#x27;</span>, <span class="hljs-string">&#x27;INLAND&#x27;</span>, <span class="hljs-string">&#x27;ISLAND&#x27;</span>, <span class="hljs-string">&#x27;NEAR BAY&#x27;</span>, <span class="hljs-string">&#x27;NEAR OCEAN&#x27;</span>],<br>&gt;&gt;       dtype=<span class="hljs-built_in">object</span>)]<br>housing_cat_1hot.toarray()<br><span class="hljs-comment">###也可以使用参数OneHotEncoder(sparse=False)</span><br>&gt;&gt; array([[<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>],<br>&gt;&gt;        ...,<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>]])<br></code></pre></td></tr></table></figure><p>需要注意的点是：在机器学习算法中通常会认为差值较小的值比差值较大的值更相似，如果使用不同的数值来编码分类变量(第一种方法)，需要注意其含义(在这里0和4比0和1更相似)</p><h3 id="Custom-Transformers"><a href="#Custom-Transformers" class="headerlink" title="Custom Transformers"></a><strong>Custom Transformers</strong></h3><p>我们也可以定义自己的转化器，需要做的就是：创建一个类，并实现3个方法(fit, transfrom,fit_transform),可以通过添加Scikit Learn的<code>TransformerMixin</code>类作为一个基础类来自动添加最后一个类(fit_ftansform),除此之外，还可以添加<code>BaseEstimator</code>作为基础类，从而可以获得两个额外的方法(get_params() 和set_params())，来更方便的<strong>进行超参数的调试</strong>，下面是一个合并变量的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.base <span class="hljs-keyword">import</span> BaseEstimator, TransformerMixin<br><br><span class="hljs-comment"># column index</span><br>rooms_ix, bedrooms_ix, population_ix, households_ix = <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CombinedAttributesAdder</span>(BaseEstimator, TransformerMixin):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, add_bedrooms_per_room=<span class="hljs-literal">True</span></span>): <span class="hljs-comment"># no *args or **kargs</span><br>        self.add_bedrooms_per_room = add_bedrooms_per_room<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fit</span>(<span class="hljs-params">self, X, y=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-keyword">return</span> self  <span class="hljs-comment"># nothing else to do</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">transform</span>(<span class="hljs-params">self, X</span>):<br>        rooms_per_household = X[:, rooms_ix] / X[:, households_ix]<br>        population_per_household = X[:, population_ix] / X[:, households_ix]<br>        <span class="hljs-keyword">if</span> self.add_bedrooms_per_room:<br>            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]<br>            <span class="hljs-keyword">return</span> np.c_[X, rooms_per_household, population_per_household,<br>                         bedrooms_per_room]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> np.c_[X, rooms_per_household, population_per_household]<br><br>attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=<span class="hljs-literal">False</span>)<br>housing_extra_attribs = attr_adder.transform(housing.values)<br></code></pre></td></tr></table></figure><h3 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h3><p>当输入数据的范围(scale)相差较大，机器学习算法一般不会表现很好</p><p>一般有两种方法可以使所有的变量的尺度一致：</p><ul><li><p>min-max 缩放(也叫normalization) 将数据缩放到0-1的范围(也可以选择其他的范围)，计算方法是：减去最小值然后除以最大值与最小值的差值；Scikit-learn 提供了<code>MinMaxScaler</code> 转化器(feature_range超参数来修改范围)</p></li><li><p>Standardization 减去均值然后除以标准差，这种方法并不会将数值绑定到某个范围并且受离群值影响比较小；Scikit-learn提供了<code>StandardScaler</code> 转化器</p></li></ul><h3 id="Transformation-Pipelines"><a href="#Transformation-Pipelines" class="headerlink" title="Transformation Pipelines"></a><strong>Transformation Pipelines</strong></h3><p>Scikit-Learn提供了<code>Pipeline</code>类可以用来组合一系列的数据转化过程，下面是将之前对数值变量的处理组合成pipeline：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.pipeline <span class="hljs-keyword">import</span> Pipeline<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><br>num_pipeline = Pipeline([<br>        (<span class="hljs-string">&#x27;imputer&#x27;</span>, SimpleImputer(strategy=<span class="hljs-string">&quot;median&quot;</span>)),<br>        (<span class="hljs-string">&#x27;attribs_adder&#x27;</span>, CombinedAttributesAdder()),<br>        (<span class="hljs-string">&#x27;std_scaler&#x27;</span>, StandardScaler()),<br>    ])<br><br>housing_num_tr = num_pipeline.fit_transform(housing_num)<br></code></pre></td></tr></table></figure><p><code>Pipeline</code> 的输入是一个列表，每个元素都是name&#x2F;estimator对，最后一个estimator必须是转化器(也就是说最后一个必须有fit_transform方法)</p><p>为了可以<strong>同时处理数值变量和分类变量</strong>，我们可以使用Scikit-Learn的<strong>ColumnTransformer</strong>(0.20版本)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.compose <span class="hljs-keyword">import</span> ColumnTransformer<br><br>num_attribs = <span class="hljs-built_in">list</span>(housing_num)<br>cat_attribs = [<span class="hljs-string">&quot;ocean_proximity&quot;</span>]<br><br>full_pipeline = ColumnTransformer([<br>        (<span class="hljs-string">&quot;num&quot;</span>, num_pipeline, num_attribs),<br>        (<span class="hljs-string">&quot;cat&quot;</span>, OneHotEncoder(), cat_attribs),<br>    ])<br><br>housing_prepared = full_pipeline.fit_transform(housing)<br></code></pre></td></tr></table></figure><p>ColumnTransformer的输入是一个列表，列表的元素是元组，元组包含：名称+转化器+需要转化的列名</p><h2 id="选择并训练模型"><a href="#选择并训练模型" class="headerlink" title="选择并训练模型"></a>选择并训练模型</h2><h3 id="在测试集上训练并评估模型"><a href="#在测试集上训练并评估模型" class="headerlink" title="在测试集上训练并评估模型"></a>在测试集上训练并评估模型</h3><p>首先尝试线性回归模型并在训练集上计算误差(RMSE):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br><br><span class="hljs-comment">###构建线性回归模型</span><br>lin_reg = LinearRegression()<br>lin_reg.fit(housing_prepared, housing_labels)<br><br><span class="hljs-comment">###计算RMSE</span><br>&gt;&gt; LinearRegression()<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><br>housing_predictions = lin_reg.predict(housing_prepared)<br>lin_mse = mean_squared_error(housing_labels, housing_predictions)<br>lin_rmse = np.sqrt(lin_mse)<br>lin_rmse<br>&gt;&gt; <span class="hljs-number">68628.19819848923</span><br></code></pre></td></tr></table></figure><p>需要预测的变量<code>median_housing_values</code>的范围在$14999~$500001之间，所以这个误差有点大，也就是<strong>underfitting</strong>,上一章讲到解决欠拟合可以从3个方面考虑：选择一个更复杂的模型；选择更好的变量；减少模型的约束(现在这个线性回归没有正则化，所以不用考虑这一点)，这里首先尝试一个更复杂的模型：决策树回归，模型的使用类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeRegressor<br><br>tree_reg = DecisionTreeRegressor() <br>tree_reg.fit(housing_prepared,housing_labels)<br>&gt;&gt; DecisionTreeRegressor()<br>housing_predictions = tree_reg.predict(housing_prepared)<br>tree_mse = mean_squared_error(housing_labels, housing_predictions)<br>tree_rmse = np.sqrt(tree_mse)<br>tree_rmse<br>&gt;&gt; <span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure><p>现在这个模型的误差是0！很大可能是过拟合了，但是要注意：<strong>我们不能够在测试集上测试我们的模型看看是不是过拟合，然后再来调整</strong>，所以这里我们需要应用上章讲到的<strong>将训练集再划分成训练集和验证集</strong>，在训练集中训练模型，在验证集中检测模型然后再进行模型的调整，得到一个较好的结果后再去测试集上检测</p><h3 id="使用交叉验证来更好的评估模型"><a href="#使用交叉验证来更好的评估模型" class="headerlink" title="使用交叉验证来更好的评估模型"></a>使用交叉验证来更好的评估模型</h3><p>交叉验证指的是：随机将训练集分成几份(一般是10份)，每一份称为fold；然后进行训练和评估10次，每次选择一个不同的fold进行评估，在剩余9份中进行训练：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_val_score <br>scores = cross_val_score(tree_reg, housing_prepared, housing_labels, scoring=<span class="hljs-string">&quot;neg_mean_squared_error&quot;</span>, cv=<span class="hljs-number">10</span>) <br>tree_rmse_scores = np.sqrt(-scores)<br></code></pre></td></tr></table></figure><p>注意：在Scikit-Learn中得到的score是功效函数(越大越好)而不是损失函数，所以是负数；得到的结果是评估分数的数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">display_scores</span>(<span class="hljs-params">scores</span>):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Scores:&quot;</span>,scores)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mean:&quot;</span>,scores.mean())<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SD:&quot;</span>,scores.std())<br>  <br>display_scores(tree_rmse_scores)<br>&gt;&gt; Scores: [<span class="hljs-number">68524.35504919</span> <span class="hljs-number">66981.1355597</span>  <span class="hljs-number">70797.83977591</span> <span class="hljs-number">69247.66817087</span><br>&gt;&gt;  <span class="hljs-number">69998.59463448</span> <span class="hljs-number">74424.9303865</span>  <span class="hljs-number">71390.885174</span>   <span class="hljs-number">71908.43423181</span><br>&gt;&gt;  <span class="hljs-number">77419.30345977</span> <span class="hljs-number">68252.98473013</span>]<br>&gt;&gt; Mean: <span class="hljs-number">70894.61311723632</span><br>&gt;&gt; SD: <span class="hljs-number">2962.180203662978</span><br></code></pre></td></tr></table></figure><p>可以看到这个决策树模型在验证集上的误差比线性回归模型还要差;另外使用交叉验证除了可以估计模型的性能之外还可以衡量这个估计的精确度(标准差)</p><p>我们再算一下线性回归模型的交叉验证结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">lin_scores = cross_val_score(lin_reg, housing_prepared, housing_labels,<br>scoring=<span class="hljs-string">&quot;neg_mean_squared_error&quot;</span>, cv=<span class="hljs-number">10</span>)<br><br>lin_rmse_scores = np.sqrt(-lin_scores)<br>display_scores(lin_rmse_scores)<br>&gt;&gt; Scores: [<span class="hljs-number">66782.73843989</span> <span class="hljs-number">66960.118071</span>   <span class="hljs-number">70347.95244419</span> <span class="hljs-number">74739.57052552</span><br>&gt;&gt;  <span class="hljs-number">68031.13388938</span> <span class="hljs-number">71193.84183426</span> <span class="hljs-number">64969.63056405</span> <span class="hljs-number">68281.61137997</span><br>&gt;&gt;  <span class="hljs-number">71552.91566558</span> <span class="hljs-number">67665.10082067</span>]<br>&gt;&gt; Mean: <span class="hljs-number">69052.46136345083</span><br>&gt;&gt; SD: <span class="hljs-number">2731.674001798342</span><br></code></pre></td></tr></table></figure><p>最后再尝试另一种集成学习模型：随机森林回归(通过随机选特征的子集来训练多个决策树然后对预测进行平均)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestRegressor<br><br>forest_reg = RandomForestRegressor()<br><br><span class="hljs-comment">##看一下再训练集上的误差</span><br>forest_reg.fit(housing_prepared,housing_labels)<br>&gt;&gt; RandomForestRegressor()<br>housing_predictions = forest_reg.predict(housing_prepared)<br>forest_mse = mean_squared_error(housing_labels, housing_predictions)<br>forest_rmse = np.sqrt(forest_mse)<br>forest_rmse<br><br><br><span class="hljs-comment">##交叉验证</span><br>&gt;&gt; <span class="hljs-number">18695.54976048593</span><br>forest_reg_score = cross_val_score(forest_reg,housing_prepared, housing_labels,scoring=<span class="hljs-string">&quot;neg_mean_squared_error&quot;</span>, cv=<span class="hljs-number">10</span>)<br><br>forest_reg_rmse_scores = np.sqrt(-forest_reg_score)<br>display_scores(forest_reg_rmse_scores)<br>&gt;&gt; Scores: [<span class="hljs-number">49766.07996985</span> <span class="hljs-number">47777.52088347</span> <span class="hljs-number">49930.25427399</span> <span class="hljs-number">52365.21532167</span><br>&gt;&gt;  <span class="hljs-number">49565.91367179</span> <span class="hljs-number">53400.89852447</span> <span class="hljs-number">48887.63710491</span> <span class="hljs-number">47989.04820215</span><br>&gt;&gt;  <span class="hljs-number">52920.62118389</span> <span class="hljs-number">50075.38104365</span>]<br>&gt;&gt; Mean: <span class="hljs-number">50267.857017983544</span><br>&gt;&gt; SD: <span class="hljs-number">1882.7452463475934</span><br></code></pre></td></tr></table></figure><p>随机森林的误差已经要小很多了，但是在训练集上的误差仍然要比在验证集上的误差小很多，说明还是有过拟合的(回顾：可以通过简化模型，加上正则项或者收集更多的数据)</p><p>当我们实验了多个模型，应该将每个模型都保存起来，包括模型的超参数，训练参数，交叉验证的值，预测值等以便于模型间的比较，在Python中可以通过<code>pickle</code>模块或者<code>joblib</code>库来存储scikit-learn模型(jonlib在存储大的Numpy数组上更有效率)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> joblib<br>joblib.dump(my_model,<span class="hljs-string">&quot;my_model.pkl)</span><br><span class="hljs-string"></span><br><span class="hljs-string">my_model_loaded = joblib.load(&quot;</span>my_model.pkl<span class="hljs-string">&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="微调模型"><a href="#微调模型" class="headerlink" title="微调模型"></a>微调模型</h2><p>调整模型的超参数，有以下几种常用方法</p><h3 id="网格搜索"><a href="#网格搜索" class="headerlink" title="网格搜索"></a>网格搜索</h3><p>网格搜索就是类似于穷举法，尝试所有的可能；Scikit-learn提供了<code>GridSearchCV</code>来进行网格搜索并使用交叉验证来评估所有的超参数的组合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br><br><span class="hljs-comment">##提供需要实验的超参数值</span><br>param_grid = [ &#123;<span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>], <span class="hljs-string">&#x27;max_features&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]&#125;, &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: [<span class="hljs-literal">False</span>], <span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">10</span>], <span class="hljs-string">&#x27;max_features&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]&#125;,]<br><br>forest_reg = RandomForestRegressor()<br>grid_search = GridSearchCV(forest_reg, param_grid, cv=<span class="hljs-number">5</span>, scoring=<span class="hljs-string">&#x27;neg_mean_squared_error&#x27;</span>, return_train_score=<span class="hljs-literal">True</span>)<br><br>grid_search.fit(housing_prepared, housing_labels)<br>&gt;&gt; GridSearchCV(cv=<span class="hljs-number">5</span>, estimator=RandomForestRegressor(),<br>&gt;&gt;              param_grid=[&#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>],<br>&gt;&gt;                           <span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>]&#125;,<br>&gt;&gt;                          &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: [<span class="hljs-literal">False</span>], <span class="hljs-string">&#x27;max_features&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>&gt;&gt;                           <span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">10</span>]&#125;],<br>&gt;&gt;              return_train_score=<span class="hljs-literal">True</span>, scoring=<span class="hljs-string">&#x27;neg_mean_squared_error&#x27;</span>)<br></code></pre></td></tr></table></figure><p>param_grid 提供需要实验的超参数值，是一个列表，列表的元素是字典，每个字典里面是需要尝试的超参数的值，所以这里面就是：首先评估第一个字典中的<code>3*4</code>个超参数的组合，一共12个模型，再评估第二个字典中的<code>2*3</code>个超参数的组合，一个6个模型，所以总的需要评估12+6&#x3D;18个模型，对每个模型训练5次(交叉验证中CV&#x3D;5)</p><p>得到的最好的结果存储在<code>best_params_</code>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.best_params_<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">30</span>&#125;<br></code></pre></td></tr></table></figure><p>整个模型在<code>best_estimator_</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.best_estimator_<br>&gt;&gt; RandomForestRegressor(max_features=<span class="hljs-number">8</span>, n_estimators=<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p>我们也可以得到每个超参数组合的交叉验证的score：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">cvres = grid_search.cv_results_<br><br><span class="hljs-comment">##平均误差</span><br><span class="hljs-keyword">for</span> mean_score, params <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(cvres[<span class="hljs-string">&quot;mean_test_score&quot;</span>], cvres[<span class="hljs-string">&quot;params&quot;</span>]):<br>  <span class="hljs-built_in">print</span>(np.sqrt(-mean_score), params)<br>&gt;&gt; <span class="hljs-number">64530.62351934246</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">55357.890909127585</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">52935.050118540785</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">30</span>&#125;<br>&gt;&gt; <span class="hljs-number">60838.564876061646</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">53294.075996366715</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">50664.777897014326</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">30</span>&#125;<br>&gt;&gt; <span class="hljs-number">58678.16606697331</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">51832.23262797085</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">50022.944964854985</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">30</span>&#125;<br>&gt;&gt; <span class="hljs-number">58836.35998556703</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">51798.661030790616</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">49981.14999745153</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">30</span>&#125;<br>&gt;&gt; <span class="hljs-number">62437.81349999718</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">54286.58589119645</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">59249.56753707383</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">52761.26326802062</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">59203.193281533706</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">52169.3677107009</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br></code></pre></td></tr></table></figure><p>使用max_feature&#x3D;8和n_estimators&#x3D;30得到的误差为49682，比之前要好，说明微调模型是有效果的</p><p>注意：一些数据处理的步骤也可以认为是超参数，比如前面的是否添加一些合并的变量(add_bedrooms_per_room)，缺失值的处理，特征选择等；也可以使用类似的方法进行调整</p><h3 id="随机搜索"><a href="#随机搜索" class="headerlink" title="随机搜索"></a>随机搜索</h3><p>当超参数的搜索空间比较大的时候，使用随机搜索的方法比较好<br>随机搜索不是尝试所有可能的组合，而是在每次迭代中对每个超参数随机选取一个值，然后对这些随机选取的超参数组合进行评估，这种方法有两个主要的优势：</p><ul><li>如果我们设置循环数目为1000，那么这种方法对每个超参数都会尝试1000个不同的值(网格法只会尝试给定的值)</li><li>通过设定循环的次数就可以控制进行超参数搜寻的成本</li></ul><h3 id="集成方法"><a href="#集成方法" class="headerlink" title="集成方法"></a>集成方法</h3><p>另一个调整模型的方法就是将表现最好的不同模型结合起来(就像决策树回归模型一样)</p><h3 id="分析最好的模型和其误差"><a href="#分析最好的模型和其误差" class="headerlink" title="分析最好的模型和其误差"></a>分析最好的模型和其误差</h3><p>我们可以通过对模型的检查来获得对问题的更好的理解，比如我们可以查看在随机森林回归模型中不同变量对模型预测的重要性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">feature_importances = grid_search.best_estimator_.feature_importances_<br><br>feature_importances<br>&gt;&gt; array([<span class="hljs-number">6.77924618e-02</span>, <span class="hljs-number">6.07623085e-02</span>, <span class="hljs-number">4.33993956e-02</span>, <span class="hljs-number">1.47232036e-02</span>,<br>&gt;&gt;        <span class="hljs-number">1.49909386e-02</span>, <span class="hljs-number">1.44308483e-02</span>, <span class="hljs-number">1.44214759e-02</span>, <span class="hljs-number">3.75628068e-01</span>,<br>&gt;&gt;        <span class="hljs-number">4.07637376e-02</span>, <span class="hljs-number">1.13639737e-01</span>, <span class="hljs-number">6.10155827e-02</span>, <span class="hljs-number">6.75873135e-03</span>,<br>&gt;&gt;        <span class="hljs-number">1.66811158e-01</span>, <span class="hljs-number">1.30669013e-04</span>, <span class="hljs-number">1.75998132e-03</span>, <span class="hljs-number">2.97170208e-03</span>])<br>extra_attribs = [<span class="hljs-string">&quot;rooms_per_hhold&quot;</span>, <span class="hljs-string">&quot;pop_per_hhold&quot;</span>, <span class="hljs-string">&quot;bedrooms_per_room&quot;</span>]<br>cat_encoder = full_pipeline.named_transformers_[<span class="hljs-string">&quot;cat&quot;</span>]<br>cat_one_hot_attribs = <span class="hljs-built_in">list</span>(cat_encoder.categories_[<span class="hljs-number">0</span>])<br>attributes = num_attribs + extra_attribs + cat_one_hot_attribs<br><span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">zip</span>(feature_importances, attributes), reverse=<span class="hljs-literal">True</span>)<br>&gt;&gt; [(<span class="hljs-number">0.3756280684089266</span>, <span class="hljs-string">&#x27;median_income&#x27;</span>), (<span class="hljs-number">0.16681115793474138</span>, <span class="hljs-string">&#x27;INLAND&#x27;</span>), (<span class="hljs-number">0.11363973729374365</span>, <span class="hljs-string">&#x27;pop_per_hhold&#x27;</span>), (<span class="hljs-number">0.06779246179070629</span>, <span class="hljs-string">&#x27;longitude&#x27;</span>), (<span class="hljs-number">0.06101558267732972</span>, <span class="hljs-string">&#x27;bedrooms_per_room&#x27;</span>), (<span class="hljs-number">0.06076230849002859</span>, <span class="hljs-string">&#x27;latitude&#x27;</span>), (<span class="hljs-number">0.04339939564469106</span>, <span class="hljs-string">&#x27;housing_median_age&#x27;</span>), (<span class="hljs-number">0.04076373758593783</span>, <span class="hljs-string">&#x27;rooms_per_hhold&#x27;</span>), (<span class="hljs-number">0.014990938598037237</span>, <span class="hljs-string">&#x27;total_bedrooms&#x27;</span>), (<span class="hljs-number">0.0147232036472</span>, <span class="hljs-string">&#x27;total_rooms&#x27;</span>), (<span class="hljs-number">0.01443084830180091</span>, <span class="hljs-string">&#x27;population&#x27;</span>), (<span class="hljs-number">0.014421475858182577</span>, <span class="hljs-string">&#x27;households&#x27;</span>), (<span class="hljs-number">0.006758731352675241</span>, <span class="hljs-string">&#x27;&lt;1H OCEAN&#x27;</span>), (<span class="hljs-number">0.002971702084100027</span>, <span class="hljs-string">&#x27;NEAR OCEAN&#x27;</span>), (<span class="hljs-number">0.001759981318404895</span>, <span class="hljs-string">&#x27;NEAR BAY&#x27;</span>), (<span class="hljs-number">0.0001306690134939975</span>, <span class="hljs-string">&#x27;ISLAND&#x27;</span>)]<br></code></pre></td></tr></table></figure><p>通过这个信息，我们就可以将那些不重要的变量丢弃(比如这里的ocean_proximity分类变量中除了INLAND外的其他类别)</p><h3 id="在测试集上评估模型系统"><a href="#在测试集上评估模型系统" class="headerlink" title="在测试集上评估模型系统"></a>在测试集上评估模型系统</h3><p>在测试集上的计算和前面的流程类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">final_model = grid_search.best_estimator_<br><br>X_test = strat_test_set.drop(<span class="hljs-string">&quot;median_house_value&quot;</span>, axis=<span class="hljs-number">1</span>) <br>y_test = strat_test_set[<span class="hljs-string">&quot;median_house_value&quot;</span>].copy()<br><br>X_test_prepared = full_pipeline.transform(X_test)<span class="hljs-comment">##注意，仅仅是transform,使用在训练集上已经&quot;train&quot;的参数来transfrom测试集</span><br>final_predictions = final_model.predict(X_test_prepared)<br><br>final_mse = mean_squared_error(y_test, final_predictions)<br>final_rmse = np.sqrt(final_mse)<br></code></pre></td></tr></table></figure><p>有些时候，这样的点估计不太够，我们可以使用<code>scipy.stats.t.interval()</code>来计算置信区间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>confidence = <span class="hljs-number">0.95</span><br>squared_errors = (final_predictions - y_test) ** <span class="hljs-number">2</span><br><br>np.sqrt(stats.t.interval(confidence, <span class="hljs-built_in">len</span>(squared_errors) - <span class="hljs-number">1</span>,loc=squared_errors.mean(),scale=stats.sem(squared_errors)))<br>&gt;&gt; array([<span class="hljs-number">46303.36875963</span>, <span class="hljs-number">50242.61230504</span>])<br></code></pre></td></tr></table></figure><p>最后就是部署模型了：<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210203174058586.png"></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>do.call 用法</title>
    <link href="/2021/01/21/do_call/"/>
    <url>/2021/01/21/do_call/</url>
    
    <content type="html"><![CDATA[<p>do.call函数的用法</p><span id="more"></span><p>do.call从名称或者函数构建和执行函数调用，并且使用list来存放函数的参数，基本用法为：</p><blockquote><p>do.call(what, args, quote &#x3D; FALSE, envir &#x3D; parent.frame())</p></blockquote><ul><li><p>what 是一个函数或者表示函数名称的字符</p></li><li><p>args 是函数调用的参数，列表形式，列表的names属性就是参数名</p></li><li><p>quote 逻辑值，表示是否对参数进行捕获</p></li><li><p>envir 执行调用的环境</p></li></ul><p>如果quote是FALSE，那么参数会被计算(执行的环境是调用环境，而不是envir指定的环境)；如果quote是TRUE，那么每个参数会被捕获(也就是在调用被构建的时候不计算参数,从而使我们可以通过envir调整计算的环境)</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">x1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">)</span><br><br>do.call<span class="hljs-punctuation">(</span><span class="hljs-built_in">sum</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">,</span>na.rm<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>do.call函数的文档中有一个从哪里寻找对象的例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs r">A <span class="hljs-operator">&lt;-</span> 2<br>f <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> print<span class="hljs-punctuation">(</span>x<span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>env <span class="hljs-operator">&lt;-</span> new.env<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br>assign<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> envir <span class="hljs-operator">=</span> env<span class="hljs-punctuation">)</span><br>env<span class="hljs-operator">$</span>A<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">10</span><br><br>assign<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f&quot;</span><span class="hljs-punctuation">,</span> f<span class="hljs-punctuation">,</span> envir <span class="hljs-operator">=</span> env<span class="hljs-punctuation">)</span><br>env<span class="hljs-operator">$</span>f<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> print<span class="hljs-punctuation">(</span>x<span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">###改变了全局环境中的f，但是env中的f没有变</span><br>f <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> print<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br>f<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> print<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br>env<span class="hljs-operator">$</span>f<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> print<span class="hljs-punctuation">(</span>x<span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><br>f<span class="hljs-punctuation">(</span>A<span class="hljs-punctuation">)</span>     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br>do.call<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>A<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##在调用环境(全局环境)中寻找f和A</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br>do.call<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>A<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> envir <span class="hljs-operator">=</span> env<span class="hljs-punctuation">)</span><span class="hljs-comment">##在env中找到了f，但是由于参数没有被捕获，所以参数在调用环境(全局环境)中计算  </span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span><br><br>do.call<span class="hljs-punctuation">(</span>f<span class="hljs-punctuation">,</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>A<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> envir <span class="hljs-operator">=</span> env<span class="hljs-punctuation">)</span><span class="hljs-comment">##在全局中寻找f，但是由于参数没有被捕获，所以参数在调用环境(全局环境)中计算    </span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br>do.call<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">quote</span><span class="hljs-punctuation">(</span>A<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> envir <span class="hljs-operator">=</span> env<span class="hljs-punctuation">)</span><span class="hljs-comment">##由于A被捕获所以在env中寻找f和A</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">100</span><br><span class="hljs-comment">##为什么和下面的不一样？</span><br>do.call<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>A<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">quote</span> <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> envir <span class="hljs-operator">=</span> env<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span><br><br>do.call<span class="hljs-punctuation">(</span>f<span class="hljs-punctuation">,</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">quote</span><span class="hljs-punctuation">(</span>A<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> envir <span class="hljs-operator">=</span> env<span class="hljs-punctuation">)</span><span class="hljs-comment">#由于A被捕获所以在env中寻找A，但是f并不是语言对象(symbol)，所以在env中找不到   </span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">10</span><br><br>do.call<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>as.name<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> envir <span class="hljs-operator">=</span> env<span class="hljs-punctuation">)</span><span class="hljs-comment">##这里面as.name和quote的作用一样,都是获取symbol对象</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>dplyr基础</title>
    <link href="/2021/01/20/dplyr_base/"/>
    <url>/2021/01/20/dplyr_base/</url>
    
    <content type="html"><![CDATA[<p>dplyr基础知识</p><span id="more"></span><p>参考： <a href="https://github.com/tidyverse/dplyr/blob/master/vignettes/base.Rmd">dplyrbase</a> <a href="https://github.com/tidyverse/dplyr/blob/master/vignettes/two-table.Rmd">twotable</a></p><p>这篇文章主要比较dplyr函数和base R的区别</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ol><li>dplyr动词输入和输出都是数据框，而base R大部分是单独的向量    </li><li>dplyr依赖非标准计算，所以不需要$来选择变量(列)</li><li>dplyr使用一系列具有单个目的的动词，而在baseR中通常使用[]</li><li>dplyr的动词通常可以通过管道(%&gt;%)连在一起，而baseR中常常需要将中间结果保存为变量</li><li>所有的dplyr动词都可以处理分组数据并且和处理整个数据框类似，但是在baseR中可能每个组的处理都有着不同的形式</li></ol><h2 id="One-table-verbs"><a href="#One-table-verbs" class="headerlink" title="One table verbs"></a>One table verbs</h2><table><thead><tr><th>dplyr</th><th>base</th></tr></thead><tbody><tr><td><code>arrange(df, x)</code></td><td><code>df[order(x), , drop = FALSE]</code></td></tr><tr><td><code>distinct(df, x)</code></td><td><code>df[!duplicated(x), , drop = FALSE]</code>, <code>unique()</code></td></tr><tr><td><code>filter(df, x)</code></td><td><code>df[which(x), , drop = FALSE]</code>, <code>subset()</code></td></tr><tr><td><code>mutate(df, z = x + y)</code></td><td><code>df$z &lt;- df$x + df$y</code>, <code>transform()</code></td></tr><tr><td><code>pull(df, 1)</code></td><td><code>df[[1]]</code></td></tr><tr><td><code>pull(df, x)</code></td><td><code>df$x</code></td></tr><tr><td><code>rename(df, y = x)</code></td><td><code>names(df)[names(df) == &quot;x&quot;] &lt;- &quot;y&quot;</code></td></tr><tr><td><code>relocate(df, y)</code></td><td><code>df[union(&quot;y&quot;, names(df))]</code></td></tr><tr><td><code>select(df, x, y)</code></td><td><code>df[c(&quot;x&quot;, &quot;y&quot;)]</code>, <code>subset()</code></td></tr><tr><td><code>select(df, starts_with(&quot;x&quot;)</code></td><td><code>df[grepl(names(df), &quot;^x&quot;)]</code></td></tr><tr><td><code>summarise(df, mean(x))</code></td><td><code>mean(df$x)</code>, <code>tapply()</code>, <code>aggregate()</code>, <code>by()</code></td></tr><tr><td><code>slice(df, c(1, 2, 5))</code></td><td><code>df[c(1, 2, 5), , drop = FALSE]</code></td></tr></tbody></table><p>首先载入示例数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>dplyr<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Warning<span class="hljs-operator">:</span> package <span class="hljs-string">&#x27;dplyr&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.3<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Attaching package<span class="hljs-operator">:</span> <span class="hljs-string">&#x27;dplyr&#x27;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> The following objects are masked from <span class="hljs-string">&#x27;package:stats&#x27;</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     filter<span class="hljs-punctuation">,</span> lag<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> The following objects are masked from <span class="hljs-string">&#x27;package:base&#x27;</span><span class="hljs-operator">:</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     intersect<span class="hljs-punctuation">,</span> setdiff<span class="hljs-punctuation">,</span> setequal<span class="hljs-punctuation">,</span> union<br><br>mtcars <span class="hljs-operator">&lt;-</span> as_tibble<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">)</span><br>iris <span class="hljs-operator">&lt;-</span> as_tibble<span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="arrange-通过变量来组织行"><a href="#arrange-通过变量来组织行" class="headerlink" title="arrange() 通过变量来组织行"></a><code>arrange()</code> 通过变量来组织行</h3><p><code>dplyr::arrange()</code>通过一列或多列的值来对数据框的行进行排序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars <span class="hljs-operator">%&gt;%</span> arrange<span class="hljs-punctuation">(</span>cyl<span class="hljs-punctuation">,</span>disp<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 32 x 11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">33.9</span>     <span class="hljs-number">4</span>  <span class="hljs-number">71.1</span>    <span class="hljs-number">65</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">1.84</span>  <span class="hljs-number">19.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">75.7</span>    <span class="hljs-number">52</span>  <span class="hljs-number">4.93</span>  <span class="hljs-number">1.62</span>  <span class="hljs-number">18.5</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">32.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">78.7</span>    <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">2.2</span>   <span class="hljs-number">19.5</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">27.3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">79</span>      <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">1.94</span>  <span class="hljs-number">18.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">95.1</span>   <span class="hljs-number">113</span>  <span class="hljs-number">3.77</span>  <span class="hljs-number">1.51</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span> <span class="hljs-number">108</span>      <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">21.5</span>     <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">97</span>  <span class="hljs-number">3.7</span>   <span class="hljs-number">2.46</span>  <span class="hljs-number">20.0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">26</span>       <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">91</span>  <span class="hljs-number">4.43</span>  <span class="hljs-number">2.14</span>  <span class="hljs-number">16.7</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">4</span> <span class="hljs-number">121</span>     <span class="hljs-number">109</span>  <span class="hljs-number">4.11</span>  <span class="hljs-number">2.78</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span> <span class="hljs-number">141.</span>     <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><p><code>desc()</code>辅助函数可以进行降序排序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars <span class="hljs-operator">%&gt;%</span> arrange<span class="hljs-punctuation">(</span>desc<span class="hljs-punctuation">(</span>cyl<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>desc<span class="hljs-punctuation">(</span>disp<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 32 x 11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">472</span>   <span class="hljs-number">205</span>  <span class="hljs-number">2.93</span>  <span class="hljs-number">5.25</span>  <span class="hljs-number">18.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">460</span>   <span class="hljs-number">215</span>  <span class="hljs-number">3</span>     <span class="hljs-number">5.42</span>  <span class="hljs-number">17.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">14.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">440</span>   <span class="hljs-number">230</span>  <span class="hljs-number">3.23</span>  <span class="hljs-number">5.34</span>  <span class="hljs-number">17.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">400</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">8</span>   <span class="hljs-number">351</span>   <span class="hljs-number">264</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">3.17</span>  <span class="hljs-number">14.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">13.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">350</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.73</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">15.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">15.5</span>     <span class="hljs-number">8</span>   <span class="hljs-number">318</span>   <span class="hljs-number">150</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.52</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">15.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">304</span>   <span class="hljs-number">150</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><p>在base R中可以使用[+order函数对行进行排序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars<span class="hljs-punctuation">[</span>order<span class="hljs-punctuation">(</span>mtcars<span class="hljs-operator">$</span>cyl<span class="hljs-punctuation">,</span>mtcars<span class="hljs-operator">$</span>disp<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span>drop<span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 32 x 11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">33.9</span>     <span class="hljs-number">4</span>  <span class="hljs-number">71.1</span>    <span class="hljs-number">65</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">1.84</span>  <span class="hljs-number">19.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">75.7</span>    <span class="hljs-number">52</span>  <span class="hljs-number">4.93</span>  <span class="hljs-number">1.62</span>  <span class="hljs-number">18.5</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">32.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">78.7</span>    <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">2.2</span>   <span class="hljs-number">19.5</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">27.3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">79</span>      <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">1.94</span>  <span class="hljs-number">18.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">95.1</span>   <span class="hljs-number">113</span>  <span class="hljs-number">3.77</span>  <span class="hljs-number">1.51</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span> <span class="hljs-number">108</span>      <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">21.5</span>     <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">97</span>  <span class="hljs-number">3.7</span>   <span class="hljs-number">2.46</span>  <span class="hljs-number">20.0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">26</span>       <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">91</span>  <span class="hljs-number">4.43</span>  <span class="hljs-number">2.14</span>  <span class="hljs-number">16.7</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">4</span> <span class="hljs-number">121</span>     <span class="hljs-number">109</span>  <span class="hljs-number">4.11</span>  <span class="hljs-number">2.78</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span> <span class="hljs-number">141.</span>     <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><p>记得加上drop&#x3D;<br>FALSE，不然如果输入是只有一列的数据框，输出就是一个向量而不是数据框了：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">dt <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span><br>  x <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>dt<span class="hljs-punctuation">[</span>order<span class="hljs-punctuation">(</span>dt<span class="hljs-operator">$</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>dt<span class="hljs-punctuation">[</span>order<span class="hljs-punctuation">(</span>dt<span class="hljs-operator">$</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span>drop<span class="hljs-operator">=</span><span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   x<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>进行倒序排序，base R有两种选择：</p><ul><li><p>对于数值变量可以加上负号-</p></li><li><p>在order函数中指定参数decreasing&#x3D;TRUE</p></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars<span class="hljs-punctuation">[</span>order<span class="hljs-punctuation">(</span>mtcars<span class="hljs-operator">$</span>cyl<span class="hljs-punctuation">,</span> mtcars<span class="hljs-operator">$</span>disp<span class="hljs-punctuation">,</span> decreasing <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">,</span> drop <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 32 x 11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">472</span>   <span class="hljs-number">205</span>  <span class="hljs-number">2.93</span>  <span class="hljs-number">5.25</span>  <span class="hljs-number">18.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">460</span>   <span class="hljs-number">215</span>  <span class="hljs-number">3</span>     <span class="hljs-number">5.42</span>  <span class="hljs-number">17.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">14.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">440</span>   <span class="hljs-number">230</span>  <span class="hljs-number">3.23</span>  <span class="hljs-number">5.34</span>  <span class="hljs-number">17.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">400</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">8</span>   <span class="hljs-number">351</span>   <span class="hljs-number">264</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">3.17</span>  <span class="hljs-number">14.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">13.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">350</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.73</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">15.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">15.5</span>     <span class="hljs-number">8</span>   <span class="hljs-number">318</span>   <span class="hljs-number">150</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.52</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">15.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">304</span>   <span class="hljs-number">150</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 22 more rows</span><br><br><span class="hljs-comment">###or</span><br>mtcars<span class="hljs-punctuation">[</span>order<span class="hljs-punctuation">(</span><span class="hljs-operator">-</span>mtcars<span class="hljs-operator">$</span>cyl<span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span>mtcars<span class="hljs-operator">$</span>disp<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">,</span> drop <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 32 x 11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">472</span>   <span class="hljs-number">205</span>  <span class="hljs-number">2.93</span>  <span class="hljs-number">5.25</span>  <span class="hljs-number">18.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">460</span>   <span class="hljs-number">215</span>  <span class="hljs-number">3</span>     <span class="hljs-number">5.42</span>  <span class="hljs-number">17.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">14.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">440</span>   <span class="hljs-number">230</span>  <span class="hljs-number">3.23</span>  <span class="hljs-number">5.34</span>  <span class="hljs-number">17.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">400</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">8</span>   <span class="hljs-number">351</span>   <span class="hljs-number">264</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">3.17</span>  <span class="hljs-number">14.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">13.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">350</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.73</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">15.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">15.5</span>     <span class="hljs-number">8</span>   <span class="hljs-number">318</span>   <span class="hljs-number">150</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.52</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">15.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">304</span>   <span class="hljs-number">150</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><h3 id="distinct-选择唯一的行"><a href="#distinct-选择唯一的行" class="headerlink" title="distinct():选择唯一的行"></a><code>distinct()</code>:选择唯一的行</h3><p><code>dplyr::distinct()</code>选择唯一的行:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span><br>  x <span class="hljs-operator">=</span> sample<span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">rep</span> <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  y <span class="hljs-operator">=</span> sample<span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">rep</span> <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br>df <span class="hljs-operator">%&gt;%</span> distinct<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 10 x 1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        x<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>    <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>     <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>     <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>     <span class="hljs-number">7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>     <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>     <span class="hljs-number">9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>     <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>     <span class="hljs-number">2</span><br><br><span class="hljs-comment">###使用.keep_all保留其他的列</span><br>df <span class="hljs-operator">%&gt;%</span> distinct<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>.keep_all <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 10 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        x     y<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>    <span class="hljs-number">10</span>     <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>     <span class="hljs-number">3</span>     <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>     <span class="hljs-number">6</span>     <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>     <span class="hljs-number">7</span>     <span class="hljs-number">9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>     <span class="hljs-number">8</span>     <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>     <span class="hljs-number">9</span>     <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>     <span class="hljs-number">5</span>     <span class="hljs-number">7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>在base R中基于想要选择的列还是全部的数据框也有两种实现方法：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs r">unique<span class="hljs-punctuation">(</span>df<span class="hljs-punctuation">[</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 10 x 1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        x<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>    <span class="hljs-number">10</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>     <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>     <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>     <span class="hljs-number">7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>     <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>     <span class="hljs-number">9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>     <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>     <span class="hljs-number">2</span><br><br>df<span class="hljs-punctuation">[</span><span class="hljs-operator">!</span>duplicated<span class="hljs-punctuation">(</span>df<span class="hljs-operator">$</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">,</span> drop <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 10 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        x     y<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>    <span class="hljs-number">10</span>     <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>     <span class="hljs-number">3</span>     <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>     <span class="hljs-number">6</span>     <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>     <span class="hljs-number">7</span>     <span class="hljs-number">9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>     <span class="hljs-number">8</span>     <span class="hljs-number">5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>     <span class="hljs-number">9</span>     <span class="hljs-number">3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>     <span class="hljs-number">5</span>     <span class="hljs-number">7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="filter-返回符合条件的行"><a href="#filter-返回符合条件的行" class="headerlink" title="filter()返回符合条件的行"></a><code>filter()</code>返回符合条件的行</h3><p><code>dplyr::filter()</code> 返回表达式是TRUE的行</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars <span class="hljs-operator">%&gt;%</span> filter<span class="hljs-punctuation">(</span>species <span class="hljs-operator">==</span> <span class="hljs-string">&quot;Human&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 35 x 14</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>lis<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> Luke<span class="hljs-operator">~</span>    <span class="hljs-number">172</span>    <span class="hljs-number">77</span> blond      fair       blue            <span class="hljs-number">19</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> Dart<span class="hljs-operator">~</span>    <span class="hljs-number">202</span>   <span class="hljs-number">136</span> none       white      yellow          <span class="hljs-number">41.9</span> male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> Leia<span class="hljs-operator">~</span>    <span class="hljs-number">150</span>    <span class="hljs-number">49</span> brown      light      brown           <span class="hljs-number">19</span>   fema<span class="hljs-operator">~</span> femin<span class="hljs-operator">~</span> Alderaan  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> Owen<span class="hljs-operator">~</span>    <span class="hljs-number">178</span>   <span class="hljs-number">120</span> brown<span class="hljs-punctuation">,</span> gr<span class="hljs-operator">~</span> light      blue            <span class="hljs-number">52</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> Beru<span class="hljs-operator">~</span>    <span class="hljs-number">165</span>    <span class="hljs-number">75</span> brown      light      blue            <span class="hljs-number">47</span>   fema<span class="hljs-operator">~</span> femin<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> Bigg<span class="hljs-operator">~</span>    <span class="hljs-number">183</span>    <span class="hljs-number">84</span> black      light      brown           <span class="hljs-number">24</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> Obi<span class="hljs-operator">-</span><span class="hljs-operator">~</span>    <span class="hljs-number">182</span>    <span class="hljs-number">77</span> auburn<span class="hljs-punctuation">,</span> w<span class="hljs-operator">~</span> fair       blue<span class="hljs-operator">-</span>gray       <span class="hljs-number">57</span>   male  mascu<span class="hljs-operator">~</span> Stewjon   Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> Anak<span class="hljs-operator">~</span>    <span class="hljs-number">188</span>    <span class="hljs-number">84</span> blond      fair       blue            <span class="hljs-number">41.9</span> male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> Wilh<span class="hljs-operator">~</span>    <span class="hljs-number">180</span>    <span class="hljs-literal">NA</span> auburn<span class="hljs-punctuation">,</span> g<span class="hljs-operator">~</span> fair       blue            <span class="hljs-number">64</span>   male  mascu<span class="hljs-operator">~</span> Eriadu    Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> Han <span class="hljs-operator">~</span>    <span class="hljs-number">180</span>    <span class="hljs-number">80</span> brown      fair       brown           <span class="hljs-number">29</span>   male  mascu<span class="hljs-operator">~</span> Corellia  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 25 more rows, and 1 more variable: starships &lt;list&gt;</span><br><br>starwars <span class="hljs-operator">%&gt;%</span> filter<span class="hljs-punctuation">(</span>mass <span class="hljs-operator">&gt;</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 14</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>lis<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> Jabb<span class="hljs-operator">~</span>    <span class="hljs-number">175</span>  <span class="hljs-number">1358</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>       green<span class="hljs-operator">-</span><span class="hljs-built_in">tan</span><span class="hljs-operator">~</span> orange           <span class="hljs-number">600</span> herm<span class="hljs-operator">~</span> mascu<span class="hljs-operator">~</span> Nal Hutta Hutt    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 1 more variable: starships &lt;list&gt;</span><br><br>starwars <span class="hljs-operator">%&gt;%</span> filter<span class="hljs-punctuation">(</span>hair_color <span class="hljs-operator">==</span> <span class="hljs-string">&quot;none&quot;</span> <span class="hljs-operator">&amp;</span> eye_color <span class="hljs-operator">==</span> <span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 9 x 14</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>lis<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> Nien<span class="hljs-operator">~</span>    <span class="hljs-number">160</span>    <span class="hljs-number">68</span> none       grey       black             <span class="hljs-literal">NA</span> male  mascu<span class="hljs-operator">~</span> Sullust   Sullus<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> Gasg<span class="hljs-operator">~</span>    <span class="hljs-number">122</span>    <span class="hljs-literal">NA</span> none       white<span class="hljs-punctuation">,</span> bl<span class="hljs-operator">~</span> black             <span class="hljs-literal">NA</span> male  mascu<span class="hljs-operator">~</span> Troiken   Xexto   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> Kit <span class="hljs-operator">~</span>    <span class="hljs-number">196</span>    <span class="hljs-number">87</span> none       green      black             <span class="hljs-literal">NA</span> male  mascu<span class="hljs-operator">~</span> Glee Ans<span class="hljs-operator">~</span> Nautol<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> Plo <span class="hljs-operator">~</span>    <span class="hljs-number">188</span>    <span class="hljs-number">80</span> none       orange     black             <span class="hljs-number">22</span> male  mascu<span class="hljs-operator">~</span> Dorin     Kel Dor <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span> Lama<span class="hljs-operator">~</span>    <span class="hljs-number">229</span>    <span class="hljs-number">88</span> none       grey       black             <span class="hljs-literal">NA</span> male  mascu<span class="hljs-operator">~</span> Kamino    Kamino<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span> Taun<span class="hljs-operator">~</span>    <span class="hljs-number">213</span>    <span class="hljs-literal">NA</span> none       grey       black             <span class="hljs-literal">NA</span> fema<span class="hljs-operator">~</span> femin<span class="hljs-operator">~</span> Kamino    Kamino<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span> Shaa<span class="hljs-operator">~</span>    <span class="hljs-number">178</span>    <span class="hljs-number">57</span> none       red<span class="hljs-punctuation">,</span> blue<span class="hljs-operator">~</span> black             <span class="hljs-literal">NA</span> fema<span class="hljs-operator">~</span> femin<span class="hljs-operator">~</span> Shili     Togruta <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span> Tion<span class="hljs-operator">~</span>    <span class="hljs-number">206</span>    <span class="hljs-number">80</span> none       grey       black             <span class="hljs-literal">NA</span> male  mascu<span class="hljs-operator">~</span> Utapau    Pau<span class="hljs-string">&#x27;an  &lt;chr~ &lt;chr [0~</span><br><span class="hljs-string">&gt;&gt; 9 BB8       NA    NA none       none       black             NA none  mascu~ &lt;NA&gt;      Droid   &lt;chr~ &lt;chr [0~</span><br><span class="hljs-string">&gt;&gt; # ... with 1 more variable: starships &lt;list&gt;</span><br></code></pre></td></tr></table></figure><p>在baseR中有相似功能的函数是subset</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">subset<span class="hljs-punctuation">(</span>starwars<span class="hljs-punctuation">,</span> species <span class="hljs-operator">==</span> <span class="hljs-string">&quot;Human&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 35 x 14</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>lis<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> Luke<span class="hljs-operator">~</span>    <span class="hljs-number">172</span>    <span class="hljs-number">77</span> blond      fair       blue            <span class="hljs-number">19</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> Dart<span class="hljs-operator">~</span>    <span class="hljs-number">202</span>   <span class="hljs-number">136</span> none       white      yellow          <span class="hljs-number">41.9</span> male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> Leia<span class="hljs-operator">~</span>    <span class="hljs-number">150</span>    <span class="hljs-number">49</span> brown      light      brown           <span class="hljs-number">19</span>   fema<span class="hljs-operator">~</span> femin<span class="hljs-operator">~</span> Alderaan  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> Owen<span class="hljs-operator">~</span>    <span class="hljs-number">178</span>   <span class="hljs-number">120</span> brown<span class="hljs-punctuation">,</span> gr<span class="hljs-operator">~</span> light      blue            <span class="hljs-number">52</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> Beru<span class="hljs-operator">~</span>    <span class="hljs-number">165</span>    <span class="hljs-number">75</span> brown      light      blue            <span class="hljs-number">47</span>   fema<span class="hljs-operator">~</span> femin<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> Bigg<span class="hljs-operator">~</span>    <span class="hljs-number">183</span>    <span class="hljs-number">84</span> black      light      brown           <span class="hljs-number">24</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> Obi<span class="hljs-operator">-</span><span class="hljs-operator">~</span>    <span class="hljs-number">182</span>    <span class="hljs-number">77</span> auburn<span class="hljs-punctuation">,</span> w<span class="hljs-operator">~</span> fair       blue<span class="hljs-operator">-</span>gray       <span class="hljs-number">57</span>   male  mascu<span class="hljs-operator">~</span> Stewjon   Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> Anak<span class="hljs-operator">~</span>    <span class="hljs-number">188</span>    <span class="hljs-number">84</span> blond      fair       blue            <span class="hljs-number">41.9</span> male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> Wilh<span class="hljs-operator">~</span>    <span class="hljs-number">180</span>    <span class="hljs-literal">NA</span> auburn<span class="hljs-punctuation">,</span> g<span class="hljs-operator">~</span> fair       blue            <span class="hljs-number">64</span>   male  mascu<span class="hljs-operator">~</span> Eriadu    Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> Han <span class="hljs-operator">~</span>    <span class="hljs-number">180</span>    <span class="hljs-number">80</span> brown      fair       brown           <span class="hljs-number">29</span>   male  mascu<span class="hljs-operator">~</span> Corellia  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 25 more rows, and 1 more variable: starships &lt;list&gt;</span><br></code></pre></td></tr></table></figure><p>也可以使用[来选择行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars<span class="hljs-punctuation">[</span>starwars<span class="hljs-operator">$</span>species <span class="hljs-operator">==</span> <span class="hljs-string">&quot;Human&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 39 x 14</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>lis<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> Luke<span class="hljs-operator">~</span>    <span class="hljs-number">172</span>    <span class="hljs-number">77</span> blond      fair       blue            <span class="hljs-number">19</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> Dart<span class="hljs-operator">~</span>    <span class="hljs-number">202</span>   <span class="hljs-number">136</span> none       white      yellow          <span class="hljs-number">41.9</span> male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> Leia<span class="hljs-operator">~</span>    <span class="hljs-number">150</span>    <span class="hljs-number">49</span> brown      light      brown           <span class="hljs-number">19</span>   fema<span class="hljs-operator">~</span> femin<span class="hljs-operator">~</span> Alderaan  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> Owen<span class="hljs-operator">~</span>    <span class="hljs-number">178</span>   <span class="hljs-number">120</span> brown<span class="hljs-punctuation">,</span> gr<span class="hljs-operator">~</span> light      blue            <span class="hljs-number">52</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> Beru<span class="hljs-operator">~</span>    <span class="hljs-number">165</span>    <span class="hljs-number">75</span> brown      light      blue            <span class="hljs-number">47</span>   fema<span class="hljs-operator">~</span> femin<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> Bigg<span class="hljs-operator">~</span>    <span class="hljs-number">183</span>    <span class="hljs-number">84</span> black      light      brown           <span class="hljs-number">24</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> Obi<span class="hljs-operator">-</span><span class="hljs-operator">~</span>    <span class="hljs-number">182</span>    <span class="hljs-number">77</span> auburn<span class="hljs-punctuation">,</span> w<span class="hljs-operator">~</span> fair       blue<span class="hljs-operator">-</span>gray       <span class="hljs-number">57</span>   male  mascu<span class="hljs-operator">~</span> Stewjon   Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> Anak<span class="hljs-operator">~</span>    <span class="hljs-number">188</span>    <span class="hljs-number">84</span> blond      fair       blue            <span class="hljs-number">41.9</span> male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> Wilh<span class="hljs-operator">~</span>    <span class="hljs-number">180</span>    <span class="hljs-literal">NA</span> auburn<span class="hljs-punctuation">,</span> g<span class="hljs-operator">~</span> fair       blue            <span class="hljs-number">64</span>   male  mascu<span class="hljs-operator">~</span> Eriadu    Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> Han <span class="hljs-operator">~</span>    <span class="hljs-number">180</span>    <span class="hljs-number">80</span> brown      fair       brown           <span class="hljs-number">29</span>   male  mascu<span class="hljs-operator">~</span> Corellia  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 29 more rows, and 1 more variable: starships &lt;list&gt;</span><br></code></pre></td></tr></table></figure><p>但是这样处理会出现NA的情况，为了避免NA，可以结合使用which：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars<span class="hljs-punctuation">[</span>which<span class="hljs-punctuation">(</span>starwars<span class="hljs-operator">$</span>species <span class="hljs-operator">==</span> <span class="hljs-string">&quot;Human&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">,</span> drop <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 35 x 14</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>lis<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span><span class="hljs-built_in">list</span><span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> Luke<span class="hljs-operator">~</span>    <span class="hljs-number">172</span>    <span class="hljs-number">77</span> blond      fair       blue            <span class="hljs-number">19</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> Dart<span class="hljs-operator">~</span>    <span class="hljs-number">202</span>   <span class="hljs-number">136</span> none       white      yellow          <span class="hljs-number">41.9</span> male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> Leia<span class="hljs-operator">~</span>    <span class="hljs-number">150</span>    <span class="hljs-number">49</span> brown      light      brown           <span class="hljs-number">19</span>   fema<span class="hljs-operator">~</span> femin<span class="hljs-operator">~</span> Alderaan  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> Owen<span class="hljs-operator">~</span>    <span class="hljs-number">178</span>   <span class="hljs-number">120</span> brown<span class="hljs-punctuation">,</span> gr<span class="hljs-operator">~</span> light      blue            <span class="hljs-number">52</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> Beru<span class="hljs-operator">~</span>    <span class="hljs-number">165</span>    <span class="hljs-number">75</span> brown      light      blue            <span class="hljs-number">47</span>   fema<span class="hljs-operator">~</span> femin<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> Bigg<span class="hljs-operator">~</span>    <span class="hljs-number">183</span>    <span class="hljs-number">84</span> black      light      brown           <span class="hljs-number">24</span>   male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> Obi<span class="hljs-operator">-</span><span class="hljs-operator">~</span>    <span class="hljs-number">182</span>    <span class="hljs-number">77</span> auburn<span class="hljs-punctuation">,</span> w<span class="hljs-operator">~</span> fair       blue<span class="hljs-operator">-</span>gray       <span class="hljs-number">57</span>   male  mascu<span class="hljs-operator">~</span> Stewjon   Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> Anak<span class="hljs-operator">~</span>    <span class="hljs-number">188</span>    <span class="hljs-number">84</span> blond      fair       blue            <span class="hljs-number">41.9</span> male  mascu<span class="hljs-operator">~</span> Tatooine  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> Wilh<span class="hljs-operator">~</span>    <span class="hljs-number">180</span>    <span class="hljs-literal">NA</span> auburn<span class="hljs-punctuation">,</span> g<span class="hljs-operator">~</span> fair       blue            <span class="hljs-number">64</span>   male  mascu<span class="hljs-operator">~</span> Eriadu    Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> Han <span class="hljs-operator">~</span>    <span class="hljs-number">180</span>    <span class="hljs-number">80</span> brown      fair       brown           <span class="hljs-number">29</span>   male  mascu<span class="hljs-operator">~</span> Corellia  Human   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">~</span> <span class="hljs-operator">&lt;</span>chr <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 25 more rows, and 1 more variable: starships &lt;list&gt;</span><br></code></pre></td></tr></table></figure><h3 id="mutate-创建或转化变量"><a href="#mutate-创建或转化变量" class="headerlink" title="mutate()创建或转化变量"></a><code>mutate()</code>创建或转化变量</h3><p><code>dplyr::mutate</code>从已存在的变量中创建新的变量</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">df <span class="hljs-operator">%&gt;%</span> mutate<span class="hljs-punctuation">(</span>z <span class="hljs-operator">=</span> x <span class="hljs-operator">+</span> y<span class="hljs-punctuation">,</span> z2 <span class="hljs-operator">=</span> z <span class="hljs-operator">^</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 100 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>        x     y     z    z2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span>     <span class="hljs-number">7</span>    <span class="hljs-number">49</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>    <span class="hljs-number">10</span>     <span class="hljs-number">8</span>    <span class="hljs-number">18</span>   <span class="hljs-number">324</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>    <span class="hljs-number">10</span>     <span class="hljs-number">7</span>    <span class="hljs-number">17</span>   <span class="hljs-number">289</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">3</span>     <span class="hljs-number">6</span>    <span class="hljs-number">36</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>     <span class="hljs-number">6</span>     <span class="hljs-number">5</span>    <span class="hljs-number">11</span>   <span class="hljs-number">121</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>     <span class="hljs-number">7</span>     <span class="hljs-number">9</span>    <span class="hljs-number">16</span>   <span class="hljs-number">256</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>     <span class="hljs-number">8</span>     <span class="hljs-number">5</span>    <span class="hljs-number">13</span>   <span class="hljs-number">169</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>     <span class="hljs-number">1</span>     <span class="hljs-number">9</span>    <span class="hljs-number">10</span>   <span class="hljs-number">100</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>     <span class="hljs-number">6</span>     <span class="hljs-number">8</span>    <span class="hljs-number">14</span>   <span class="hljs-number">196</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>    <span class="hljs-number">10</span>     <span class="hljs-number">7</span>    <span class="hljs-number">17</span>   <span class="hljs-number">289</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 90 more rows</span><br></code></pre></td></tr></table></figure><p>在base<br>R里面相似的有transform函数，但是要注意的是transform函数不能使用刚创建的变量，只能使用已有的变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">head<span class="hljs-punctuation">(</span>transform<span class="hljs-punctuation">(</span>df<span class="hljs-punctuation">,</span>z<span class="hljs-operator">=</span>x<span class="hljs-operator">+</span>y<span class="hljs-punctuation">,</span>z2<span class="hljs-operator">=</span>z<span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> eval<span class="hljs-punctuation">(</span><span class="hljs-built_in">substitute</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>...<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> `_data`<span class="hljs-punctuation">,</span> parent.frame<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> 找不到对象<span class="hljs-string">&#x27;z&#x27;</span><br><br>head<span class="hljs-punctuation">(</span>transform<span class="hljs-punctuation">(</span>df<span class="hljs-punctuation">,</span>z<span class="hljs-operator">=</span>x<span class="hljs-operator">+</span>y<span class="hljs-punctuation">,</span>z2<span class="hljs-operator">=</span><span class="hljs-punctuation">(</span>x<span class="hljs-operator">+</span>y<span class="hljs-punctuation">)</span><span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    x y  z  z2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">49</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-number">10</span> <span class="hljs-number">8</span> <span class="hljs-number">18</span> <span class="hljs-number">324</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-number">10</span> <span class="hljs-number">7</span> <span class="hljs-number">17</span> <span class="hljs-number">289</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>  <span class="hljs-number">3</span> <span class="hljs-number">3</span>  <span class="hljs-number">6</span>  <span class="hljs-number">36</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">11</span> <span class="hljs-number">121</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>  <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">16</span> <span class="hljs-number">256</span><br></code></pre></td></tr></table></figure><p>也可以使用<code>$&lt;-</code>来创建新的变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars<span class="hljs-operator">$</span>cy12 <span class="hljs-operator">&lt;-</span> mtcars<span class="hljs-operator">$</span>cyl <span class="hljs-operator">*</span> <span class="hljs-number">2</span><br>mtcars<span class="hljs-operator">$</span>cy14 <span class="hljs-operator">&lt;-</span> mtcars<span class="hljs-operator">$</span>cy12 <span class="hljs-operator">*</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>当应用到分组的数据框上，mutate可以对每个组别计算新的变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">gf <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span>g <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> x <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3.5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>gf <span class="hljs-operator">%&gt;%</span> <br>  group_by<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  mutate<span class="hljs-punctuation">(</span>x_mean <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> x_rank <span class="hljs-operator">=</span> rank<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 4 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># Groups:   g [2]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       g     x x_mean x_rank<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0.5</span>      <span class="hljs-number">1</span>      <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">1</span>   <span class="hljs-number">1.5</span>      <span class="hljs-number">1</span>      <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">2</span>   <span class="hljs-number">2.5</span>      <span class="hljs-number">3</span>      <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>     <span class="hljs-number">2</span>   <span class="hljs-number">3.5</span>      <span class="hljs-number">3</span>      <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>在baseR中可以用使用<code>ave</code>函数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">transform<span class="hljs-punctuation">(</span>gf<span class="hljs-punctuation">,</span> <br>  x_mean <span class="hljs-operator">=</span> ave<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> g<span class="hljs-punctuation">,</span> FUN <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>  x_rank <span class="hljs-operator">=</span> ave<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> g<span class="hljs-punctuation">,</span> FUN <span class="hljs-operator">=</span> rank<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   g   x x_mean x_rank<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0.5</span>      <span class="hljs-number">1</span>      <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1.5</span>      <span class="hljs-number">1</span>      <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">2.5</span>      <span class="hljs-number">3</span>      <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">3.5</span>      <span class="hljs-number">3</span>      <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="pull-抽提变量"><a href="#pull-抽提变量" class="headerlink" title="pull() 抽提变量"></a><code>pull()</code> 抽提变量</h3><p><code>dplyr::pull()</code>可以通过名称或者位置提取变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars <span class="hljs-operator">%&gt;%</span> pull<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">21.0</span> <span class="hljs-number">21.0</span> <span class="hljs-number">22.8</span> <span class="hljs-number">21.4</span> <span class="hljs-number">18.7</span> <span class="hljs-number">18.1</span> <span class="hljs-number">14.3</span> <span class="hljs-number">24.4</span> <span class="hljs-number">22.8</span> <span class="hljs-number">19.2</span> <span class="hljs-number">17.8</span> <span class="hljs-number">16.4</span> <span class="hljs-number">17.3</span> <span class="hljs-number">15.2</span> <span class="hljs-number">10.4</span> <span class="hljs-number">10.4</span> <span class="hljs-number">14.7</span> <span class="hljs-number">32.4</span> <span class="hljs-number">30.4</span> <span class="hljs-number">33.9</span> <span class="hljs-number">21.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">22</span><span class="hljs-punctuation">]</span> <span class="hljs-number">15.5</span> <span class="hljs-number">15.2</span> <span class="hljs-number">13.3</span> <span class="hljs-number">19.2</span> <span class="hljs-number">27.3</span> <span class="hljs-number">26.0</span> <span class="hljs-number">30.4</span> <span class="hljs-number">15.8</span> <span class="hljs-number">19.7</span> <span class="hljs-number">15.0</span> <span class="hljs-number">21.4</span><br><br>mtcars <span class="hljs-operator">%&gt;%</span> pull<span class="hljs-punctuation">(</span>cyl<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>在base R中相当于[[和$:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;cyl&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span><br>mtcars<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">21.0</span> <span class="hljs-number">21.0</span> <span class="hljs-number">22.8</span> <span class="hljs-number">21.4</span> <span class="hljs-number">18.7</span> <span class="hljs-number">18.1</span> <span class="hljs-number">14.3</span> <span class="hljs-number">24.4</span> <span class="hljs-number">22.8</span> <span class="hljs-number">19.2</span> <span class="hljs-number">17.8</span> <span class="hljs-number">16.4</span> <span class="hljs-number">17.3</span> <span class="hljs-number">15.2</span> <span class="hljs-number">10.4</span> <span class="hljs-number">10.4</span> <span class="hljs-number">14.7</span> <span class="hljs-number">32.4</span> <span class="hljs-number">30.4</span> <span class="hljs-number">33.9</span> <span class="hljs-number">21.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">22</span><span class="hljs-punctuation">]</span> <span class="hljs-number">15.5</span> <span class="hljs-number">15.2</span> <span class="hljs-number">13.3</span> <span class="hljs-number">19.2</span> <span class="hljs-number">27.3</span> <span class="hljs-number">26.0</span> <span class="hljs-number">30.4</span> <span class="hljs-number">15.8</span> <span class="hljs-number">19.7</span> <span class="hljs-number">15.0</span> <span class="hljs-number">21.4</span><br><br>mtcars<span class="hljs-operator">$</span>cyl<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="relocate-改变列的顺序"><a href="#relocate-改变列的顺序" class="headerlink" title="relocate() 改变列的顺序"></a><code>relocate()</code> 改变列的顺序</h3><p><code>dplyr::relocate()</code><br>可以方便的将列移到新的位置(默认是最前面,下面要讲的<code>select</code>只能将列移到最前面):</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># to front</span><br>mtcars <span class="hljs-operator">%&gt;%</span> relocate<span class="hljs-punctuation">(</span>gear<span class="hljs-punctuation">,</span> carb<span class="hljs-punctuation">)</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 32 x 13</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     gear  carb   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  cy12  cy14<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.62</span>  <span class="hljs-number">16.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.88</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>  <span class="hljs-number">108</span>     <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">6</span>  <span class="hljs-number">258</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.22</span>  <span class="hljs-number">19.4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>  <span class="hljs-number">360</span>    <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>  <span class="hljs-number">18.1</span>     <span class="hljs-number">6</span>  <span class="hljs-number">225</span>    <span class="hljs-number">105</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.46</span>  <span class="hljs-number">20.2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>  <span class="hljs-number">360</span>    <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>  <span class="hljs-number">24.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">147.</span>    <span class="hljs-number">62</span>  <span class="hljs-number">3.69</span>  <span class="hljs-number">3.19</span>  <span class="hljs-number">20</span>       <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>  <span class="hljs-number">141.</span>    <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">6</span>  <span class="hljs-number">168.</span>   <span class="hljs-number">123</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">18.3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 22 more rows</span><br><br><span class="hljs-comment"># to back</span><br>mtcars <span class="hljs-operator">%&gt;%</span> relocate<span class="hljs-punctuation">(</span>mpg<span class="hljs-punctuation">,</span> cyl<span class="hljs-punctuation">,</span> .after <span class="hljs-operator">=</span> last_col<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 32 x 13</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     disp    hp  drat    wt  qsec    vs    am  gear  carb  cy12  cy14   mpg   cyl<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.62</span>  <span class="hljs-number">16.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.88</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">108</span>     <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">258</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.22</span>  <span class="hljs-number">19.4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">360</span>    <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">225</span>    <span class="hljs-number">105</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.46</span>  <span class="hljs-number">20.2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">18.1</span>     <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">360</span>    <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">147.</span>    <span class="hljs-number">62</span>  <span class="hljs-number">3.69</span>  <span class="hljs-number">3.19</span>  <span class="hljs-number">20</span>       <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">24.4</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">141.</span>    <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">168.</span>   <span class="hljs-number">123</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">18.3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 22 more rows</span><br><br><span class="hljs-comment"># to after disp</span><br>mtcars <span class="hljs-operator">%&gt;%</span> relocate<span class="hljs-punctuation">(</span>mpg<span class="hljs-punctuation">,</span> cyl<span class="hljs-punctuation">,</span> .after <span class="hljs-operator">=</span> disp<span class="hljs-punctuation">)</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 32 x 13</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     disp   mpg   cyl    hp  drat    wt  qsec    vs    am  gear  carb  cy12  cy14<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">160</span>   <span class="hljs-number">21</span>       <span class="hljs-number">6</span>   <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.62</span>  <span class="hljs-number">16.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">160</span>   <span class="hljs-number">21</span>       <span class="hljs-number">6</span>   <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.88</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">108</span>   <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>    <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">258</span>   <span class="hljs-number">21.4</span>     <span class="hljs-number">6</span>   <span class="hljs-number">110</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.22</span>  <span class="hljs-number">19.4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">360</span>   <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">225</span>   <span class="hljs-number">18.1</span>     <span class="hljs-number">6</span>   <span class="hljs-number">105</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.46</span>  <span class="hljs-number">20.2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">360</span>   <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">147.</span>  <span class="hljs-number">24.4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">62</span>  <span class="hljs-number">3.69</span>  <span class="hljs-number">3.19</span>  <span class="hljs-number">20</span>       <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">141.</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>    <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">168.</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">6</span>   <span class="hljs-number">123</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">18.3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><p>在base R中就有一点复杂：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##to front</span><br>mtcars<span class="hljs-punctuation">[</span>union<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;gear&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;carb&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 32 x 13</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     gear  carb   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  cy12  cy14<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.62</span>  <span class="hljs-number">16.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.88</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>  <span class="hljs-number">108</span>     <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">6</span>  <span class="hljs-number">258</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.22</span>  <span class="hljs-number">19.4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>  <span class="hljs-number">360</span>    <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>  <span class="hljs-number">18.1</span>     <span class="hljs-number">6</span>  <span class="hljs-number">225</span>    <span class="hljs-number">105</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.46</span>  <span class="hljs-number">20.2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>  <span class="hljs-number">360</span>    <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>  <span class="hljs-number">24.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">147.</span>    <span class="hljs-number">62</span>  <span class="hljs-number">3.69</span>  <span class="hljs-number">3.19</span>  <span class="hljs-number">20</span>       <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>  <span class="hljs-number">141.</span>    <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">6</span>  <span class="hljs-number">168.</span>   <span class="hljs-number">123</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">18.3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 22 more rows</span><br><br><span class="hljs-comment">###to back</span><br><span class="hljs-comment">##先将要移动的列去掉，再重组到后面</span><br>to_back <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;mpg&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;cyl&quot;</span><span class="hljs-punctuation">)</span><br>mtcars<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>setdiff<span class="hljs-punctuation">(</span><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> to_back<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> to_back<span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 32 x 13</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     disp    hp  drat    wt  qsec    vs    am  gear  carb  cy12  cy14   mpg   cyl<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.62</span>  <span class="hljs-number">16.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.88</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">108</span>     <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">258</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.22</span>  <span class="hljs-number">19.4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">360</span>    <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">225</span>    <span class="hljs-number">105</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.46</span>  <span class="hljs-number">20.2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">18.1</span>     <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">360</span>    <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">147.</span>    <span class="hljs-number">62</span>  <span class="hljs-number">3.69</span>  <span class="hljs-number">3.19</span>  <span class="hljs-number">20</span>       <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">24.4</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">141.</span>    <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">168.</span>   <span class="hljs-number">123</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">18.3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><h3 id="rename-重命名变量"><a href="#rename-重命名变量" class="headerlink" title="rename() 重命名变量"></a><code>rename()</code> 重命名变量</h3><p><code>dplyr::rename()</code>可以通过旧的名称或者位置来重命名变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">iris <span class="hljs-operator">%&gt;%</span> rename<span class="hljs-punctuation">(</span>sepal_length <span class="hljs-operator">=</span> Sepal.Length<span class="hljs-punctuation">,</span> sepal_width <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    sepal_length sepal_width Petal.Length Petal.Width Species<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><p>在base R中根据位置来重命名变量是比较直接的：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">iris2 <span class="hljs-operator">&lt;-</span> iris<br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>iris2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;sepal_width&quot;</span><br></code></pre></td></tr></table></figure><p>通过旧的变量名来重命名有一点繁琐：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>iris2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>iris2<span class="hljs-punctuation">)</span> <span class="hljs-operator">==</span> <span class="hljs-string">&quot;Sepal.Length&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;sepal_length&quot;</span><br></code></pre></td></tr></table></figure><h3 id="rename-with-通过函数来重命名变量"><a href="#rename-with-通过函数来重命名变量" class="headerlink" title="rename_with()通过函数来重命名变量"></a><code>rename_with()</code>通过函数来重命名变量</h3><p><code>dplyr::rename_with()</code>通过函数来转化列名：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs r">iris <span class="hljs-operator">%&gt;%</span> rename_with<span class="hljs-punctuation">(</span>toupper<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    SEPAL.LENGTH SEPAL.WIDTH PETAL.LENGTH PETAL.WIDTH SPECIES<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">###也可以选择范围，默认是所有列</span><br>rename_with<span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">,</span> toupper<span class="hljs-punctuation">,</span> starts_with<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Petal&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Sepal.Length Sepal.Width PETAL.LENGTH PETAL.WIDTH Species<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">###也可以自定义函数</span><br>rename_with<span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">,</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  gsub<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;_&quot;</span><span class="hljs-punctuation">,</span>x<span class="hljs-punctuation">,</span>fixed <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>starts_with<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Petal&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Sepal.Length Sepal.Width Petal_Length Petal_Width Species<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">###或者公式类型的函数</span><br>rename_with<span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">,</span> <span class="hljs-operator">~</span> tolower<span class="hljs-punctuation">(</span>gsub<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;_&quot;</span><span class="hljs-punctuation">,</span> .x<span class="hljs-punctuation">,</span> fixed <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    sepal_length sepal_width petal_length petal_width species<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><p>在base R中可以使用<code>setNames()</code>来实现：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">setNames<span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">,</span> toupper<span class="hljs-punctuation">(</span><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    SEPAL.LENGTH SEPAL.WIDTH PETAL.LENGTH PETAL.WIDTH SPECIES<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><h3 id="select-通过列名选择变量"><a href="#select-通过列名选择变量" class="headerlink" title="select()通过列名选择变量"></a><code>select()</code>通过列名选择变量</h3><p><code>dplyr::select()</code>根据列名，位置，和列名相关的函数或者其他特征来选择列：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###位置</span><br>iris <span class="hljs-operator">%&gt;%</span> select<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Sepal.Length Sepal.Width Petal.Length<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">##列名</span><br>iris <span class="hljs-operator">%&gt;%</span> select<span class="hljs-punctuation">(</span>Species<span class="hljs-punctuation">,</span> Sepal.Length<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Species Sepal.Length<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> setosa           <span class="hljs-number">5.1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> setosa           <span class="hljs-number">4.9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> setosa           <span class="hljs-number">4.7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> setosa           <span class="hljs-number">4.6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> setosa           <span class="hljs-number">5</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> setosa           <span class="hljs-number">5.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> setosa           <span class="hljs-number">4.6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> setosa           <span class="hljs-number">5</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> setosa           <span class="hljs-number">4.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> setosa           <span class="hljs-number">4.9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">##函数</span><br>iris <span class="hljs-operator">%&gt;%</span> select<span class="hljs-punctuation">(</span>starts_with<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Petal&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Petal.Length Petal.Width<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br>iris <span class="hljs-operator">%&gt;%</span> select<span class="hljs-punctuation">(</span>where<span class="hljs-punctuation">(</span>is.factor<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Species<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><p>在base R中通过位置选择变量是比较直接的:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r">iris<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-comment">##单个参数是取列的</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Sepal.Length Sepal.Width Petal.Length<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br><br>iris<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">,</span> drop <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span><span class="hljs-comment">##也可以加多个参数，第二个参数是列</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 5</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa<br></code></pre></td></tr></table></figure><p>按照名称选择列可以有两种选择：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###直接按照字符向量选择</span><br>iris<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Species&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Sepal.Length&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Species Sepal.Length<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> setosa           <span class="hljs-number">5.1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> setosa           <span class="hljs-number">4.9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> setosa           <span class="hljs-number">4.7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> setosa           <span class="hljs-number">4.6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> setosa           <span class="hljs-number">5</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> setosa           <span class="hljs-number">5.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> setosa           <span class="hljs-number">4.6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> setosa           <span class="hljs-number">5</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> setosa           <span class="hljs-number">4.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> setosa           <span class="hljs-number">4.9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">###使用subset函数，subset使用了和dplyr相同的机制(元编程)</span><br>subset<span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">,</span> select <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>Species<span class="hljs-punctuation">,</span> Sepal.Length<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Species Sepal.Length<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> setosa           <span class="hljs-number">5.1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> setosa           <span class="hljs-number">4.9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> setosa           <span class="hljs-number">4.7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> setosa           <span class="hljs-number">4.6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> setosa           <span class="hljs-number">5</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> setosa           <span class="hljs-number">5.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> setosa           <span class="hljs-number">4.6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> setosa           <span class="hljs-number">5</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> setosa           <span class="hljs-number">4.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> setosa           <span class="hljs-number">4.9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><p>通过名称的函数来选择列，可以使用<code>grep</code>函数来匹配：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">iris<span class="hljs-punctuation">[</span>grep<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;^Petal&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Petal.Length Petal.Width<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>       <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><p>也可以通过Filter函数根据变量的类型来选择列：Filter是高阶函数，接受别的函数作为参数，高阶函数的内容见<a href="https://wutaoblog.com.cn/p/meta_r_prom/">review</a></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###</span><br>Filter<span class="hljs-punctuation">(</span>is.factor<span class="hljs-punctuation">,</span>iris<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 150 x 1</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    Species<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>fct<span class="hljs-operator">&gt;</span>  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span> setosa <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><h3 id="summarise-将多个值汇总成单个值"><a href="#summarise-将多个值汇总成单个值" class="headerlink" title="summarise()将多个值汇总成单个值"></a><code>summarise()</code>将多个值汇总成单个值</h3><p><code>dplyr::summarise</code> 计算每个组别的汇总信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars <span class="hljs-operator">%&gt;%</span> <br>  group_by<span class="hljs-punctuation">(</span>cyl<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>mean <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span>disp<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> n <span class="hljs-operator">=</span> n<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> `summarise()` ungrouping output <span class="hljs-punctuation">(</span>override with `.groups` argument<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     cyl  mean     n<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">4</span>  <span class="hljs-number">105.</span>    <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">6</span>  <span class="hljs-number">183.</span>     <span class="hljs-number">7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">8</span>  <span class="hljs-number">353.</span>    <span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><p>在base R里面比较相似的是by函数，但是by函数返回的是list：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###先来看一下by函数的用法</span><br><span class="hljs-comment">##by(data, data$byvar, FUN)</span><br><span class="hljs-comment">##data是数据，data$byvar是分组依据，fun是函数</span><br><br><br>mtcars_by <span class="hljs-operator">&lt;-</span> by<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">,</span> mtcars<span class="hljs-operator">$</span>cyl<span class="hljs-punctuation">,</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>df<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  with<span class="hljs-punctuation">(</span>df<span class="hljs-punctuation">,</span> data.frame<span class="hljs-punctuation">(</span>cyl <span class="hljs-operator">=</span> cyl<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> mean <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span>disp<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> n <span class="hljs-operator">=</span> nrow<span class="hljs-punctuation">(</span>df<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br>mtcars_by<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> mtcars<span class="hljs-operator">$</span>cyl<span class="hljs-operator">:</span> <span class="hljs-number">4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   cyl     mean  n<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>   <span class="hljs-number">4</span> <span class="hljs-number">105.1364</span> <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> mtcars<span class="hljs-operator">$</span>cyl<span class="hljs-operator">:</span> <span class="hljs-number">6</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   cyl     mean n<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>   <span class="hljs-number">6</span> <span class="hljs-number">183.3143</span> <span class="hljs-number">7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> mtcars<span class="hljs-operator">$</span>cyl<span class="hljs-operator">:</span> <span class="hljs-number">8</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   cyl  mean  n<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>   <span class="hljs-number">8</span> <span class="hljs-number">353.1</span> <span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><p>我们可以使用<a href="">do.call函数</a>来将这个列表合并成数据框：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">do.call<span class="hljs-punctuation">(</span>rbind<span class="hljs-punctuation">,</span>mtcars_by<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   cyl     mean  n<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>   <span class="hljs-number">4</span> <span class="hljs-number">105.1364</span> <span class="hljs-number">11</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>   <span class="hljs-number">6</span> <span class="hljs-number">183.3143</span>  <span class="hljs-number">7</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span>   <span class="hljs-number">8</span> <span class="hljs-number">353.1000</span> <span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><h3 id="slice-根据位置选择行"><a href="#slice-根据位置选择行" class="headerlink" title="slice() 根据位置选择行"></a><code>slice()</code> 根据位置选择行</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###n表示行数</span><br>slice<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">,</span> <span class="hljs-number">25</span><span class="hljs-operator">:</span>n<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 8 x 13</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb  cy12  cy14<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">8</span> <span class="hljs-number">400</span>     <span class="hljs-number">175</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>  <span class="hljs-number">27.3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">79</span>      <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">1.94</span>  <span class="hljs-number">18.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>  <span class="hljs-number">26</span>       <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">91</span>  <span class="hljs-number">4.43</span>  <span class="hljs-number">2.14</span>  <span class="hljs-number">16.7</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">95.1</span>   <span class="hljs-number">113</span>  <span class="hljs-number">3.77</span>  <span class="hljs-number">1.51</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">8</span> <span class="hljs-number">351</span>     <span class="hljs-number">264</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">3.17</span>  <span class="hljs-number">14.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>  <span class="hljs-number">19.7</span>     <span class="hljs-number">6</span> <span class="hljs-number">145</span>     <span class="hljs-number">175</span>  <span class="hljs-number">3.62</span>  <span class="hljs-number">2.77</span>  <span class="hljs-number">15.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span>  <span class="hljs-number">15</span>       <span class="hljs-number">8</span> <span class="hljs-number">301</span>     <span class="hljs-number">335</span>  <span class="hljs-number">3.54</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">14.6</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">4</span> <span class="hljs-number">121</span>     <span class="hljs-number">109</span>  <span class="hljs-number">4.11</span>  <span class="hljs-number">2.78</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>在base R中可以直接使用[来选取：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars<span class="hljs-punctuation">[</span><span class="hljs-number">25</span><span class="hljs-operator">:</span>nrow<span class="hljs-punctuation">(</span>mtcars<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">,</span> drop <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 8 x 13</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb  cy12  cy14<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">8</span> <span class="hljs-number">400</span>     <span class="hljs-number">175</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>  <span class="hljs-number">27.3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">79</span>      <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">1.94</span>  <span class="hljs-number">18.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>  <span class="hljs-number">26</span>       <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">91</span>  <span class="hljs-number">4.43</span>  <span class="hljs-number">2.14</span>  <span class="hljs-number">16.7</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">95.1</span>   <span class="hljs-number">113</span>  <span class="hljs-number">3.77</span>  <span class="hljs-number">1.51</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">8</span> <span class="hljs-number">351</span>     <span class="hljs-number">264</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">3.17</span>  <span class="hljs-number">14.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">6</span>  <span class="hljs-number">19.7</span>     <span class="hljs-number">6</span> <span class="hljs-number">145</span>     <span class="hljs-number">175</span>  <span class="hljs-number">3.62</span>  <span class="hljs-number">2.77</span>  <span class="hljs-number">15.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">7</span>  <span class="hljs-number">15</span>       <span class="hljs-number">8</span> <span class="hljs-number">301</span>     <span class="hljs-number">335</span>  <span class="hljs-number">3.54</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">14.6</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">8</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">4</span> <span class="hljs-number">121</span>     <span class="hljs-number">109</span>  <span class="hljs-number">4.11</span>  <span class="hljs-number">2.78</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h2 id="Two-table-verbs"><a href="#Two-table-verbs" class="headerlink" title="Two-table verbs"></a>Two-table verbs</h2><p>增加：<a href="https://github.com/tidyverse/dplyr/blob/master/vignettes/two-table.Rmd">two-table</a></p><p>two-table<br>verbs指的是合并两个数据框的操作，在dplyr中使用*_join操作代替base<br>R中的各种merge操作：</p><table><thead><tr><th>dplyr</th><th>base</th></tr></thead><tbody><tr><td><code>inner_join(df1, df2)</code></td><td><code>merge(df1, df2)</code></td></tr><tr><td><code>left_join(df1, df2)</code></td><td><code>merge(df1, df2, all.x = TRUE)</code></td></tr><tr><td><code>right_join(df1, df2)</code></td><td><code>merge(df1, df2, all.y = TRUE)</code></td></tr><tr><td><code>full_join(df1, df2)</code></td><td><code>merge(df1, df2, all = TRUE)</code></td></tr><tr><td><code>semi_join(df1, df2)</code></td><td><code>df1[df1$x %in% df2$x, , drop = FALSE]</code></td></tr><tr><td><code>anti_join(df1, df2)</code></td><td><code>df1[!df1$x %in% df2$x, , drop = FALSE]</code></td></tr></tbody></table><p>在dplyr中有3类动词可以同时对两个table进行操作：</p><ul><li><p>Mutating join 根据匹配的行来添加变量</p></li><li><p>Filtering joins 根据匹配的行来筛选变量</p></li><li><p>Set operations 将数据集的行作为集合的元素来操作</p></li></ul><h3 id="Mutating-joins"><a href="#Mutating-joins" class="headerlink" title="Mutating joins"></a>Mutating joins</h3><p>Mutating<br>join可以将两个table的变量结合到一起；比如在nycflights13数据中一个table有航班信息，并且每个航班有相应的航空公司的缩写，另一个table有航空公司的缩写和全称的对应信息，我们可以将这两个table合并：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;nycflights13&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Warning<span class="hljs-operator">:</span> package <span class="hljs-string">&#x27;nycflights13&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.3<br><br>flights2 <span class="hljs-operator">&lt;-</span> flights <span class="hljs-operator">%&gt;%</span> select<span class="hljs-punctuation">(</span>year<span class="hljs-operator">:</span>day<span class="hljs-punctuation">,</span> hour<span class="hljs-punctuation">,</span> origin<span class="hljs-punctuation">,</span> dest<span class="hljs-punctuation">,</span> tailnum<span class="hljs-punctuation">,</span> carrier<span class="hljs-punctuation">)</span><br><br>flights2 <span class="hljs-operator">%&gt;%</span> <br>  left_join<span class="hljs-punctuation">(</span>airlines<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Joining<span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;carrier&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 336,776 x 9</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     year month   day  hour origin dest  tailnum carrier name                    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>                   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    IAH   N14228  UA      United Air Lines Inc.   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> LGA    IAH   N24211  UA      United Air Lines Inc.   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    MIA   N619AA  AA      American Airlines Inc.  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    BQN   N804JB  B6      JetBlue Airways         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ATL   N668DN  DL      Delta Air Lines Inc.    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    ORD   N39463  UA      United Air Lines Inc.   <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> EWR    FLL   N516JB  B6      JetBlue Airways         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    IAD   N829AS  EV      ExpressJet Airlines Inc.<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> JFK    MCO   N593JB  B6      JetBlue Airways         <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ORD   N3ALAA  AA      American Airlines Inc.  <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 336,766 more rows</span><br></code></pre></td></tr></table></figure><h4 id="控制table如何匹配"><a href="#控制table如何匹配" class="headerlink" title="控制table如何匹配"></a>控制table如何匹配</h4><p>每一个Mutating join函数都有一个by参数，控制哪个变量被用来进行匹配</p><ul><li><p><code>NULL</code><br>默认值，使用两个table中共有的变量，比如flights和weather两个表的共有列为year,<br>month, day, hour 和origin</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">flights2 <span class="hljs-operator">%&gt;%</span> left_join<span class="hljs-punctuation">(</span>weather<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Joining<span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;year&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;month&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;day&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;hour&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;origin&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 336,776 x 18</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     year month   day  hour origin dest  tailnum carrier  temp  dewp humid wind_dir wind_speed wind_gust precip<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>      <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    IAH   N14228  UA       <span class="hljs-number">39.0</span>  <span class="hljs-number">28.0</span>  <span class="hljs-number">64.4</span>      <span class="hljs-number">260</span>       <span class="hljs-number">12.7</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> LGA    IAH   N24211  UA       <span class="hljs-number">39.9</span>  <span class="hljs-number">25.0</span>  <span class="hljs-number">54.8</span>      <span class="hljs-number">250</span>       <span class="hljs-number">15.0</span>      <span class="hljs-number">21.9</span>      <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    MIA   N619AA  AA       <span class="hljs-number">39.0</span>  <span class="hljs-number">27.0</span>  <span class="hljs-number">61.6</span>      <span class="hljs-number">260</span>       <span class="hljs-number">15.0</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    BQN   N804JB  B6       <span class="hljs-number">39.0</span>  <span class="hljs-number">27.0</span>  <span class="hljs-number">61.6</span>      <span class="hljs-number">260</span>       <span class="hljs-number">15.0</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ATL   N668DN  DL       <span class="hljs-number">39.9</span>  <span class="hljs-number">25.0</span>  <span class="hljs-number">54.8</span>      <span class="hljs-number">260</span>       <span class="hljs-number">16.1</span>      <span class="hljs-number">23.0</span>      <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    ORD   N39463  UA       <span class="hljs-number">39.0</span>  <span class="hljs-number">28.0</span>  <span class="hljs-number">64.4</span>      <span class="hljs-number">260</span>       <span class="hljs-number">12.7</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> EWR    FLL   N516JB  B6       <span class="hljs-number">37.9</span>  <span class="hljs-number">28.0</span>  <span class="hljs-number">67.2</span>      <span class="hljs-number">240</span>       <span class="hljs-number">11.5</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    IAD   N829AS  EV       <span class="hljs-number">39.9</span>  <span class="hljs-number">25.0</span>  <span class="hljs-number">54.8</span>      <span class="hljs-number">260</span>       <span class="hljs-number">16.1</span>      <span class="hljs-number">23.0</span>      <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> JFK    MCO   N593JB  B6       <span class="hljs-number">37.9</span>  <span class="hljs-number">27.0</span>  <span class="hljs-number">64.3</span>      <span class="hljs-number">260</span>       <span class="hljs-number">13.8</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ORD   N3ALAA  AA       <span class="hljs-number">39.9</span>  <span class="hljs-number">25.0</span>  <span class="hljs-number">54.8</span>      <span class="hljs-number">260</span>       <span class="hljs-number">16.1</span>      <span class="hljs-number">23.0</span>      <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 336,766 more rows, and 3 more variables: pressure &lt;dbl&gt;, visib &lt;dbl&gt;, time_hour &lt;dttm&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>字符向量，<code>by=&quot;x&quot;</code> 使用指定的变量进行匹配</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r">flights2 <span class="hljs-operator">%&gt;%</span> left_join<span class="hljs-punctuation">(</span>planes<span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tailnum&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 336,776 x 16</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    year.x month   day  hour origin dest  tailnum carrier year.y type  manufacturer model engines seats speed<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>        <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    IAH   N14228  UA        <span class="hljs-number">1999</span> Fixe<span class="hljs-operator">~</span> BOEING       <span class="hljs-number">737</span><span class="hljs-operator">-</span><span class="hljs-operator">~</span>       <span class="hljs-number">2</span>   <span class="hljs-number">149</span>    <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> LGA    IAH   N24211  UA        <span class="hljs-number">1998</span> Fixe<span class="hljs-operator">~</span> BOEING       <span class="hljs-number">737</span><span class="hljs-operator">-</span><span class="hljs-operator">~</span>       <span class="hljs-number">2</span>   <span class="hljs-number">149</span>    <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    MIA   N619AA  AA        <span class="hljs-number">1990</span> Fixe<span class="hljs-operator">~</span> BOEING       <span class="hljs-number">757</span><span class="hljs-operator">-</span><span class="hljs-operator">~</span>       <span class="hljs-number">2</span>   <span class="hljs-number">178</span>    <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    BQN   N804JB  B6        <span class="hljs-number">2012</span> Fixe<span class="hljs-operator">~</span> AIRBUS       A320<span class="hljs-operator">~</span>       <span class="hljs-number">2</span>   <span class="hljs-number">200</span>    <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ATL   N668DN  DL        <span class="hljs-number">1991</span> Fixe<span class="hljs-operator">~</span> BOEING       <span class="hljs-number">757</span><span class="hljs-operator">-</span><span class="hljs-operator">~</span>       <span class="hljs-number">2</span>   <span class="hljs-number">178</span>    <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    ORD   N39463  UA        <span class="hljs-number">2012</span> Fixe<span class="hljs-operator">~</span> BOEING       <span class="hljs-number">737</span><span class="hljs-operator">-</span><span class="hljs-operator">~</span>       <span class="hljs-number">2</span>   <span class="hljs-number">191</span>    <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> EWR    FLL   N516JB  B6        <span class="hljs-number">2000</span> Fixe<span class="hljs-operator">~</span> AIRBUS INDU<span class="hljs-operator">~</span> A320<span class="hljs-operator">~</span>       <span class="hljs-number">2</span>   <span class="hljs-number">200</span>    <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    IAD   N829AS  EV        <span class="hljs-number">1998</span> Fixe<span class="hljs-operator">~</span> CANADAIR     CL<span class="hljs-operator">-</span><span class="hljs-number">6</span><span class="hljs-operator">~</span>       <span class="hljs-number">2</span>    <span class="hljs-number">55</span>    <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> JFK    MCO   N593JB  B6        <span class="hljs-number">2004</span> Fixe<span class="hljs-operator">~</span> AIRBUS       A320<span class="hljs-operator">~</span>       <span class="hljs-number">2</span>   <span class="hljs-number">200</span>    <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ORD   N3ALAA  AA          <span class="hljs-literal">NA</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>         <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>       <span class="hljs-literal">NA</span>    <span class="hljs-literal">NA</span>    <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 336,766 more rows, and 1 more variable: engine &lt;chr&gt;</span><br><br><span class="hljs-comment">##两个table的其他的共有列会加上后缀</span><br></code></pre></td></tr></table></figure></li><li><p>具名字符向量，<code>by=c(&quot;a&quot;=&quot;b&quot;)</code><br>将一个table中的a变量与另一个table中的b变量进行匹配(输出中保留a)</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs r">flights2 <span class="hljs-operator">%&gt;%</span> left_join<span class="hljs-punctuation">(</span>airports<span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;dest&quot;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;faa&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 336,776 x 15</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     year month   day  hour origin dest  tailnum carrier name                lat   lon   alt    tz dst   tzone    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>             <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    IAH   N14228  UA      George Bush Inte<span class="hljs-operator">~</span>  <span class="hljs-number">30.0</span> <span class="hljs-operator">-</span><span class="hljs-number">95.3</span>    <span class="hljs-number">97</span>    <span class="hljs-operator">-</span><span class="hljs-number">6</span> A     America<span class="hljs-operator">/</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> LGA    IAH   N24211  UA      George Bush Inte<span class="hljs-operator">~</span>  <span class="hljs-number">30.0</span> <span class="hljs-operator">-</span><span class="hljs-number">95.3</span>    <span class="hljs-number">97</span>    <span class="hljs-operator">-</span><span class="hljs-number">6</span> A     America<span class="hljs-operator">/</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    MIA   N619AA  AA      Miami Intl         <span class="hljs-number">25.8</span> <span class="hljs-operator">-</span><span class="hljs-number">80.3</span>     <span class="hljs-number">8</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    BQN   N804JB  B6      <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>               <span class="hljs-literal">NA</span>    <span class="hljs-literal">NA</span>      <span class="hljs-literal">NA</span>    <span class="hljs-literal">NA</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span>     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ATL   N668DN  DL      Hartsfield Jacks<span class="hljs-operator">~</span>  <span class="hljs-number">33.6</span> <span class="hljs-operator">-</span><span class="hljs-number">84.4</span>  <span class="hljs-number">1026</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    ORD   N39463  UA      Chicago Ohare In<span class="hljs-operator">~</span>  <span class="hljs-number">42.0</span> <span class="hljs-operator">-</span><span class="hljs-number">87.9</span>   <span class="hljs-number">668</span>    <span class="hljs-operator">-</span><span class="hljs-number">6</span> A     America<span class="hljs-operator">/</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> EWR    FLL   N516JB  B6      Fort Lauderdale <span class="hljs-operator">~</span>  <span class="hljs-number">26.1</span> <span class="hljs-operator">-</span><span class="hljs-number">80.2</span>     <span class="hljs-number">9</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    IAD   N829AS  EV      Washington Dulle<span class="hljs-operator">~</span>  <span class="hljs-number">38.9</span> <span class="hljs-operator">-</span><span class="hljs-number">77.5</span>   <span class="hljs-number">313</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> JFK    MCO   N593JB  B6      Orlando Intl       <span class="hljs-number">28.4</span> <span class="hljs-operator">-</span><span class="hljs-number">81.3</span>    <span class="hljs-number">96</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ORD   N3ALAA  AA      Chicago Ohare In<span class="hljs-operator">~</span>  <span class="hljs-number">42.0</span> <span class="hljs-operator">-</span><span class="hljs-number">87.9</span>   <span class="hljs-number">668</span>    <span class="hljs-operator">-</span><span class="hljs-number">6</span> A     America<span class="hljs-operator">/</span><span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 336,766 more rows</span><br><br>flights2 <span class="hljs-operator">%&gt;%</span> left_join<span class="hljs-punctuation">(</span>airports<span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;origin&quot;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;faa&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 336,776 x 15</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     year month   day  hour origin dest  tailnum carrier name             lat   lon   alt    tz dst   tzone       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>    <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>  <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>          <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span>       <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    IAH   N14228  UA      Newark Libert<span class="hljs-operator">~</span>  <span class="hljs-number">40.7</span> <span class="hljs-operator">-</span><span class="hljs-number">74.2</span>    <span class="hljs-number">18</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span>New<span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">2</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> LGA    IAH   N24211  UA      La Guardia      <span class="hljs-number">40.8</span> <span class="hljs-operator">-</span><span class="hljs-number">73.9</span>    <span class="hljs-number">22</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span>New<span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">3</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    MIA   N619AA  AA      John <span class="hljs-built_in">F</span> Kenned<span class="hljs-operator">~</span>  <span class="hljs-number">40.6</span> <span class="hljs-operator">-</span><span class="hljs-number">73.8</span>    <span class="hljs-number">13</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span>New<span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">4</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    BQN   N804JB  B6      John <span class="hljs-built_in">F</span> Kenned<span class="hljs-operator">~</span>  <span class="hljs-number">40.6</span> <span class="hljs-operator">-</span><span class="hljs-number">73.8</span>    <span class="hljs-number">13</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span>New<span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">5</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ATL   N668DN  DL      La Guardia      <span class="hljs-number">40.8</span> <span class="hljs-operator">-</span><span class="hljs-number">73.9</span>    <span class="hljs-number">22</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span>New<span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">6</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    ORD   N39463  UA      Newark Libert<span class="hljs-operator">~</span>  <span class="hljs-number">40.7</span> <span class="hljs-operator">-</span><span class="hljs-number">74.2</span>    <span class="hljs-number">18</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span>New<span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">7</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> EWR    FLL   N516JB  B6      Newark Libert<span class="hljs-operator">~</span>  <span class="hljs-number">40.7</span> <span class="hljs-operator">-</span><span class="hljs-number">74.2</span>    <span class="hljs-number">18</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span>New<span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">8</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    IAD   N829AS  EV      La Guardia      <span class="hljs-number">40.8</span> <span class="hljs-operator">-</span><span class="hljs-number">73.9</span>    <span class="hljs-number">22</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span>New<span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-number">9</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> JFK    MCO   N593JB  B6      John <span class="hljs-built_in">F</span> Kenned<span class="hljs-operator">~</span>  <span class="hljs-number">40.6</span> <span class="hljs-operator">-</span><span class="hljs-number">73.8</span>    <span class="hljs-number">13</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span>New<span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ORD   N3ALAA  AA      La Guardia      <span class="hljs-number">40.8</span> <span class="hljs-operator">-</span><span class="hljs-number">73.9</span>    <span class="hljs-number">22</span>    <span class="hljs-operator">-</span><span class="hljs-number">5</span> A     America<span class="hljs-operator">/</span>New<span class="hljs-operator">~</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># ... with 336,766 more rows</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="匹配的类型"><a href="#匹配的类型" class="headerlink" title="匹配的类型"></a>匹配的类型</h4><p>有4种类型的mutating join，他们的区别在于如何处理找不到匹配的情况</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##示例数据</span><br>df1 <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-operator">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>df2 <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> a <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> b <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">)</span><br><br>df1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 2 x 2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     y<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span><br><br>df2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 2 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     a b    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">3</span>    <span class="hljs-number">10</span> a    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">1</span>    <span class="hljs-number">10</span> a<br></code></pre></td></tr></table></figure><ul><li><p><code>inner_join(x,y)</code> 只包含x和y中都有的行</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">df1 <span class="hljs-operator">%&gt;%</span> inner_join<span class="hljs-punctuation">(</span>df2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Joining<span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;x&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 1 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     y     a b    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>    <span class="hljs-number">10</span> a<br></code></pre></td></tr></table></figure></li><li><p><code>left_join(x,y)</code> 包含x的所有行，不管有没有匹配(没有匹配的为NA)</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">df1 <span class="hljs-operator">%&gt;%</span> left_join<span class="hljs-punctuation">(</span>df2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Joining<span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;x&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 2 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     y     a b    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>    <span class="hljs-number">10</span> a    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span>    <span class="hljs-literal">NA</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>right_join(x,y)</code> 包含y的所有行(和<code>left_join(y,x)</code><br>的差别在于行和列的顺序不一样)</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">df1 <span class="hljs-operator">%&gt;%</span> right_join<span class="hljs-punctuation">(</span>df2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Joining<span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;x&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 2 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     y     a b    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>    <span class="hljs-number">10</span> a    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">3</span>    <span class="hljs-literal">NA</span>    <span class="hljs-number">10</span> a<br><br>df2 <span class="hljs-operator">%&gt;%</span> left_join<span class="hljs-punctuation">(</span>df1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Joining<span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;x&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 2 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     a b         y<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">3</span>    <span class="hljs-number">10</span> a        <span class="hljs-literal">NA</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">1</span>    <span class="hljs-number">10</span> a         <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p><code>full_join(x,y)</code> 包含x和y的所有行</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">df1 <span class="hljs-operator">%&gt;%</span> full_join<span class="hljs-punctuation">(</span>df2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Joining<span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;x&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 3 x 4</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     y     a b    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>    <span class="hljs-number">10</span> a    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span>    <span class="hljs-literal">NA</span> <span class="hljs-operator">&lt;</span><span class="hljs-literal">NA</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">3</span>    <span class="hljs-literal">NA</span>    <span class="hljs-number">10</span> a<br></code></pre></td></tr></table></figure></li></ul><p>需要注意的一点是：如果匹配不唯一(比如x里面用来匹配的变量有几行是一样的)，那么进行join时会加上所有可能的组合(笛卡尔积)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">df1 <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br>df2 <span class="hljs-operator">&lt;-</span> tibble<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> z <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>df1 <span class="hljs-operator">%&gt;%</span> left_join<span class="hljs-punctuation">(</span>df2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Joining<span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;x&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment"># A tibble: 5 x 3</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>       x     y z    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-operator">&lt;</span>dbl<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>chr<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span> a    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span> b    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span> a    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span> b    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span> a<br></code></pre></td></tr></table></figure><h3 id="Filtering-joins"><a href="#Filtering-joins" class="headerlink" title="Filtering joins"></a>Filtering joins</h3><p>filter join影响的是观测不是变量，有两种类型：</p><ul><li><p><code>semi_join(x,y)</code> 保留x在y中有匹配的观测</p></li><li><p><code>anti_join(x,y)</code> 丢弃x在y中有匹配的观测</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git简介</title>
    <link href="/2021/01/17/git_notes/"/>
    <url>/2021/01/17/git_notes/</url>
    
    <content type="html"><![CDATA[<p>主要参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的Git教程</a></p><h2 id="安装创建Git"><a href="#安装创建Git" class="headerlink" title="安装创建Git"></a>安装创建Git</h2><p>Ubuntu 可以直接通过<code>apt</code>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install git<br></code></pre></td></tr></table></figure><p>Windows可以上Git 官网下载相应的安装包安装</p><p>安装完成后需要设置用户名和邮件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;Your Name&quot;<br>git config --global user.email &quot;email@example.com&quot;<br></code></pre></td></tr></table></figure><p>接下来就可以创建一个版本库了，版本库(repository)就相当于一个目录，Git可以跟踪该目录中所有文件的修改，删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir learninggit<br></code></pre></td></tr></table></figure><p>通过<code>git init</code>来初始化目录为可以被管理的仓库</p><p>然后就可以将文件添加到版本库中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#在该文件夹下新建一个文件</span></span><br>touch readme.txt<br>vi readme.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Git is a version control system.</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Git is free software.</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#将文件添加到仓库</span></span><br>git add readme.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#将文件提交到仓库</span></span><br>git commit -m &#x27;write a readme file&#x27;<br></code></pre></td></tr></table></figure><p><code>-m</code>后面加的字符串是提交的文件的描叙，<code>git commit</code>命令是提交整个文件夹，也就是他可以检查整个文件的改动，所以在前面可以<code>add</code>多个文件，最后一次<code>commit</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add file1.txt<br>git add file2.txt file3.txt<br>git commit -m &quot;add 3 files.&quot;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wt12318/picgo/master/img/20200411224439.png"></p><p>上面的图简单的说明了<code>add</code>和<code>commit</code>的作用，在文件夹下所有可见的文件都是工作区，而不可见的<code>.git</code>文件夹就是版本库，版本库中有一个暂存区(stage)，当<code>add</code>文件后，文件就被储存到这个空间里，<code>add</code>结束后，<code>commit</code>会一次性将暂存区的文件提交到master的分支上,也就是不<code>add</code>是不会被提交的</p><h2 id="修改，管理，版本控制"><a href="#修改，管理，版本控制" class="headerlink" title="修改，管理，版本控制"></a>修改，管理，版本控制</h2><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>前面讲过Git可以监控文件夹中的文件的修改，现在来修改<code>readme.txt</code>看看会发生什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi readme.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Git is a distributed version control system.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Git is free software.</span><br></code></pre></td></tr></table></figure><p>可以用<code>git status</code>查看仓库的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br>On branch master<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>modified:   readme.txt<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br></code></pre></td></tr></table></figure><p>上面结果说明<code>readme.txt</code>已经被修改，但是还没有准备提交</p><p>可以用<code>git diff</code>来查看修改的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff readme.txt <br><span class="hljs-meta prompt_">#</span><span class="language-bash">diff --git a/readme.txt b/readme.txt</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">index 46d49bf..9247db6 100644</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">--- a/readme.txt</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">+++ b/readme.txt</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">@@ -1,2 +1,2 @@</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-Git is a version control system.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">+Git is a distributed version control system.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Git is free software.</span><br></code></pre></td></tr></table></figure><p>要将修改后的文件提交到仓库，就和之前一样，先<code>add</code>再<code>commit</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add readme.txt<br><br>git status<br>On branch master<br>Changes to be committed:<br>  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)<br><br>modified:   readme.txt<br><br>git commit -m &quot;add distributed&quot;<br>[master e475afc] add distributed<br> 1 file changed, 1 insertion(+), 1 deletion(-)<br> <br> git status<br>On branch master<br>nothing to commit, working tree clean<br></code></pre></td></tr></table></figure><p>可以看到在<code>add</code>之后，文件的状态变成待提交(to be committed)，提交之后变成clean了</p><p>每一次<code>commit</code>文件就相当于对文件进行快照，可以从这些快照中来恢复之前的文件版本</p><p>可以使用<code>git log</code>命令来查看这些<code>commit</code>历史：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br>commit 3288eec6192ff2d876c9d0140ce2ddfdba30f5bc (HEAD -&gt; master)<br>Author: wt12318 &lt;1650464505@qq.com&gt;<br>Date:   Sat Apr 11 21:22:36 2020 +0800<br><br>    add distributed<br><br>commit a524903c1f9612bc4f3b85f29936565818c13e2c<br>Author: wt12318 &lt;1650464505@qq.com&gt;<br>Date:   Sat Apr 11 20:34:55 2020 +0800<br><br>    wrote a readme file<br></code></pre></td></tr></table></figure><p>可以看到Git将当前版本用HEAD 标记，在Git中上一个版本就是<code>HEAD^</code>,每往前一个版本就在后面加上<code>^</code>，当数量较多的时候可以用<code>HEAD~number</code>代替</p><p>比如，现在要将<code>readme.txt</code>恢复到前一个版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard HEAD^<br><span class="hljs-meta prompt_"># </span><span class="language-bash">HEAD is now at a524903 wrote a readme file</span><br><br>cat readme.txt<br>Git is a version control system.<br>Git is free software.<br><br>git log<br>commit a524903c1f9612bc4f3b85f29936565818c13e2c (HEAD -&gt; master)<br>Author: wt12318 &lt;1650464505@qq.com&gt;<br>Date:   Sat Apr 11 20:34:55 2020 +0800<br><br>    wrote a readme file<br></code></pre></td></tr></table></figure><p>现在add distributed的那个版本已经不见了，如果想要恢复该版本（回到未来）可以用该版本的<code>commit id</code>来进行(可以不写全）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard 3288eec<br>HEAD is now at 3288eec add distributed<br><br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br></code></pre></td></tr></table></figure><p>但是如果关掉了terminal，又想要恢复“未来”的文件该怎么办？可以用<code>git reflog</code>，记录了每一次的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reflog<br>3288eec (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 3288eec<br>a524903 HEAD@&#123;1&#125;: reset: moving to HEAD^<br>3288eec (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: add distributed<br>a524903 HEAD@&#123;3&#125;: commit (initial): wrote a readme file<br></code></pre></td></tr></table></figure><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p><code>git checkout --file</code>可以撤销工作区的修改，现在在<code>readme.txt</code>中添加一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br>Git check out<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -- readme.txt<br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br></code></pre></td></tr></table></figure><p>这样就复原来最近的一次<code>add</code>或者<code>commit</code>的版本了</p><p>但是如果现在已经将文件<code>add</code>到暂存区了，可以用<code>git reset HEAD file</code>将文件返回到工作区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br>Git check out<br><br>git add readme.txt<br>git status<br>On branch master<br>Changes to be committed:<br>  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)<br><br>        modified:   readme.txt<br>        <br>git reset HEAD readme.txt<br>Unstaged changes after reset:<br>M       readme.txt<br>git status<br>On branch master<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>        modified:   readme.txt<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br><br></code></pre></td></tr></table></figure><p>可以看到在<code>reset</code>之后，暂存区没有文件待提交，现在可以用<code>checkout</code>来删除修改了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -- readme.txt<br>git status<br>On branch master<br>nothing to commit, working tree clean<br><br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br></code></pre></td></tr></table></figure><p>已经将文件提交了，可以用之前讲过的<code>git reset --hard commit_id/HEAD^^...</code>来恢复</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>先创建一个新文件：<code>touch test.txt</code>,再像之前一样提交到版本库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add test.txt<br>git commit -m &#x27;add test.txt&#x27;<br>[master f1d6024] add test.txt<br> 1 file changed, 0 insertions(+), 0 deletions(-)<br> create mode 100644 test.txt<br></code></pre></td></tr></table></figure><p>现在删除该文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm test.txt<br>git status<br>On branch master<br>Changes not staged for commit:<br>  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>        deleted:    test.txt<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br></code></pre></td></tr></table></figure><p>Git可以发现删除了一个文件，如果是删错了，可以从版本库中恢复，还是用之前那个<code>checkout</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -- test.txt<br>ls<br>readme.txt  test.txt<br></code></pre></td></tr></table></figure><p>其实<code>checkout</code>就是用版本库的内容覆盖工作区的内容，所以可以恢复修改和删除</p><p>如果确实想删除该文件，可以用<code>git rm</code>然后再提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git rm test.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">rm</span> <span class="hljs-string">&#x27;test.txt&#x27;</span></span><br><br>git commit -m &#x27;remove test.txt&#x27;<br>[master a6b89a8] remove test.txt<br> 1 file changed, 0 insertions(+), 0 deletions(-)<br> delete mode 100644 test.txt<br></code></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>创建SSH key：<code>ssh-keygen -t rsa -C &quot;youremail@example.com</code> 一路回车，完成后就会在主目录的<code>.ssh</code>目录下看到<code>id_rsa  id_rsa.pub</code>两个文件</p><p>登陆Github，在<code>setting</code>里面找到<code>SSH and GPG keys</code> 添加<code>New SSH key</code>,将<code>id_rsa.pub</code>中的内容复制进去</p><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><p>在Github上添加一个Repository 名字为<code>learngit</code>,然后将本地的库与远程的库关联：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin git@github.com:wt12318/learngit.git ## 或者https://github.com/wt12318/learngit.git<br>git push -u origin master<br></code></pre></td></tr></table></figure><p>以后在本地提交了之后就可以通过<code>git push origin master</code>将修改推送到远程库了</p><h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><p>现在在Github上新建一个远程库，名为<code>gitskills</code> 并初始化<code>README</code> ,然后就可以在本地克隆该仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:wt12318/gitskills<br></code></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>在<strong>团队协作</strong>中可以建一个自己的分支，在里面修改，提交别人是看不到的，最后开发完成后再与原来的分支合并</p><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>Git的创建和合并分支就是一个改变指针的动作，上面的那些提交都是在master分支上进行的，master指向最新的提交，HEAD指向master，当我们新建一个分支的时候，在以后操作过程中就是由该新建的分支指向提交，再由HEAD指向这个分支，最后合并的时候就是把指针还给master，HEAD重新指向master</p><p>现在新建一个分支<code>dev</code>，并切换到该分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b dev <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#或者 git switch -c dev</span></span><br></code></pre></td></tr></table></figure><p><code>git checkout -b </code>(<code>git switch -c dev</code>)相当于创建并切换，等于下面两个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch dev<br>git checkout dev## git switch dev<br></code></pre></td></tr></table></figure><p>使用<code>git branch</code>可以查看当前的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch<br>* dev<br>  master<br></code></pre></td></tr></table></figure><p>当前分支前面会有一个星号</p><p>现在试试在dev上修改，提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 加一行:Creating a new branch is quick</span></span><br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br>Creating a new branch is quick<br><br>git add readme.txt<br>git commit -m &#x27;branch test&#x27;<br></code></pre></td></tr></table></figure><p>然后切换到master分支上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout master ## git switch master<br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br></code></pre></td></tr></table></figure><p>就会发现之前在dev上修改的内容不见了，原因就是master和dev分支的提交点不一样：</p><p><img src="https://raw.githubusercontent.com/wt12318/picgo/master/img/20200412194020.png"></p><p>所以要想将master移动到当前的修改，就需要将dev分支合并到master上，抗可以用<code>git merge</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge dev<br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br>Creating a new branch is quick<br></code></pre></td></tr></table></figure><p>现在就可以删除分支dev了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -d dev<br>git branch<br>* master<br></code></pre></td></tr></table></figure><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>合并冲突可能会出现冲突，需要手动编辑冲突的文件</p><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p>一般情况下，Git会使用<code>fast forward</code>方式进行合并分支，这种方法就是直接将master的指针移动到分支的最新提交上，当分支删除后就不能看成分支信息了，可以用<code>--no-ff</code>选项禁用<code>fast forward</code>模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">git switch -c dev<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#修改readme</span></span><br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br>Creating a new branch is quick<br>no fast forward<br><br>git add readme.txt<br>git commit -m &quot;add merge&quot;<br>git switch master<br><br>git merge --no-ff -m &quot;merge with no-ff&quot; dev ##这种合并会创建一个新的commit，所以要加-m<br></code></pre></td></tr></table></figure><p>可以用<code>git log --graph</code>查看合并图：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log --graph --pretty=oneline --abbrev-commit<br>*   7e4a555 (HEAD -&gt; master) merge with no-ff<br>|\<br>| * 0c38472 (dev) add merge<br>|/<br>* 58a2bf7 branch test<br>* a6b89a8 (origin/master) remove test.txt<br>* f1d6024 add test.txt<br>* c500238 git tracks changes<br>* 3288eec add distributed<br>* a524903 wrote a readme file<br></code></pre></td></tr></table></figure><p>另外如果想要删除一个没有被合并的分支，可以通过<code>git branch -D name</code>来删除</p><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>远程仓库的默认名是<code>orign</code></p><p>查看远程库的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote<br>git remote -v ##详细信息<br>origin  https://github.com/limbo1996/neoantigens_depletion.git (fetch)<br>origin  https://github.com/limbo1996/neoantigens_depletion.git (push)<br></code></pre></td></tr></table></figure><p>推送不同的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin master<br>git push origin dev<br></code></pre></td></tr></table></figure><p>多人协作的时候，首先需要将远程仓库克隆到本地：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:wt12318/learngit.git<br></code></pre></td></tr></table></figure><p>要在已经创建的分支dev上工作，需要创建远程仓库中的dev分支对应的本地分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b dev origin/dev<br>git branch --set-upstream-to=origin/dev dev#指定本地dev分支与远程origin/dev分支的链接<br></code></pre></td></tr></table></figure><p>拉取，推送分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin dev<br>git pull<br></code></pre></td></tr></table></figure><h4 id="github"><a href="#github" class="headerlink" title="github"></a><code>github</code></h4><p>首先要fork别人的仓库，然后clone：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:***<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#添加远程仓库</span></span><br>git remote add upstream https://github.com/***<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#获取最新源码</span></span><br>git pull upstream branch<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#将最新代码提交到自己的分支中</span></span><br>git push origin branch<br></code></pre></td></tr></table></figure><p>最后提交后，再去作者的<code>github</code>里pull request</p><p>如何与原仓库同步？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add upstream https://github.com/origin_rep<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#如果报错fatal: remote upstream already exists.</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#先git remote rm upstream</span></span><br>git fetch upstream<br></code></pre></td></tr></table></figure><p>然后合并远程分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout master<br>git merge upstream/master<br></code></pre></td></tr></table></figure><p>此时已经将本地库与原仓库合并，要更新自己github上的仓库还需要<code>git push</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push --set-upstream origin master<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h3><p>克隆已有的库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone ssh://user@domain.com/repo.git<br></code></pre></td></tr></table></figure><p>创建本地新库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><h3 id="本地改变"><a href="#本地改变" class="headerlink" title="本地改变"></a>本地改变</h3><p>查看改变的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><p>查看文件修改的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff<br></code></pre></td></tr></table></figure><p>将改变添加到暂存区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add <br></code></pre></td></tr></table></figure><p>将改变提交到分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit<br></code></pre></td></tr></table></figure><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p>显示所有的提交（从最新的开始）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br></code></pre></td></tr></table></figure><p>显示对于某个文件的改变：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log -p &lt;file&gt;<br></code></pre></td></tr></table></figure><p>显示谁在什么时候改变了什么：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git blame &lt;file&gt;<br></code></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>显示所有的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -v<br></code></pre></td></tr></table></figure><p>切换分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout &lt;branch&gt; ##or git switch &lt;branch&gt;<br></code></pre></td></tr></table></figure><p>创建新分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch &lt;new-branch&gt;<br></code></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -d &lt;branch&gt;<br></code></pre></td></tr></table></figure><h3 id="远程协作"><a href="#远程协作" class="headerlink" title="远程协作"></a>远程协作</h3><p>查看远程库的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote -v<br></code></pre></td></tr></table></figure><p>推送分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin &lt;branch&gt;<br></code></pre></td></tr></table></figure><p>拉取分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull<br></code></pre></td></tr></table></figure><h3 id="撤销修改-1"><a href="#撤销修改-1" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>将文件返回工作区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset HEAD file<br></code></pre></td></tr></table></figure><p>撤销工作区的删改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout --file<br></code></pre></td></tr></table></figure><h3 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard &lt;commit&gt;<br></code></pre></td></tr></table></figure><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p>git出错：“Please make sure you have the correct access rights and the repository exists.</p><p>参考：<a href="https://cloud.tencent.com/developer/article/1572090">https://cloud.tencent.com/developer/article/1572090</a></p><p>ssh 需要重置</p><p>1、重置用户名和邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global [user.name](http://user.name/) “yourname” git config --global user.email“your@email.com&quot;  <br></code></pre></td></tr></table></figure><p><strong>注：yourname是你要设置的名字，your@email是你要设置的邮箱。</strong></p><p>2、删除.ssh文件夹下的known_hosts<br>3、git输入命令</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C your<span class="hljs-variable">@email</span>.com<br></code></pre></td></tr></table></figure><p>一路yes和回车 然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub将全部的内容复制<br>4、打开<a href="https://github.com/%EF%BC%8C%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84%E8%B4%A6%E6%88%B7%EF%BC%8C%E8%BF%9B%E5%85%A5%E8%AE%BE%E7%BD%AE--%E8%BF%9B%E5%85%A5ssh%E8%AE%BE%E7%BD%AE">https://github.com/，登陆你的账户，进入设置--进入ssh设置</a> 在key中将刚刚复制的粘贴进去<br>5、在git中输入命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com <br></code></pre></td></tr></table></figure><p>然后会跳出一堆话 输入命令：回车</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础</title>
    <link href="/2021/01/16/python-base/"/>
    <url>/2021/01/16/python-base/</url>
    
    <content type="html"><![CDATA[<p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210118230926897.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/py2.png" alt="py2"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/py33.png" alt="py33"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/py44.png" alt="py44"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【R语言编程指南】元编程</title>
    <link href="/2021/01/14/r-meta/"/>
    <url>/2021/01/14/r-meta/</url>
    
    <content type="html"><![CDATA[<p>函数式编程，基于语言的计算，非标准计算</p><span id="more"></span><p>本章主要学习3个内容：</p><ul><li>函数式编程<ul><li>在函数内部定义的函数→闭包</li><li>与其他函数组合使用的函数→高阶函数</li></ul></li><li>基于语言的计算</li><li>非标准计算</li></ul><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包(closure)就是在函数内部定义的函数,下面创建一个简单的闭包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">addn <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>    x<span class="hljs-operator">+</span>y<br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面的函数在其内部创建一个函数，所以其返回值是一个闭包；这个addn就相当于一个“函数工厂”，通过提供不同的参数就可以创建不同的函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">add1 <span class="hljs-operator">&lt;-</span> addn<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>add2 <span class="hljs-operator">&lt;-</span> addn<span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><br>add1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     x<span class="hljs-operator">+</span>y<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>   <span class="hljs-punctuation">&#125;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> <span class="hljs-number">0x00000209f3243f80</span><span class="hljs-operator">&gt;</span><br><span class="hljs-comment">##当函数不在当前工作环境，输出该函数时会显示其所在的环境</span><br><br>add1<span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">11</span><br>add2<span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>我们可以通过在<a href="http://localhost:4321/p/r-inter/">R内部机制</a>中提到的ennironment()来查看这两个闭包的封闭环境：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">environment<span class="hljs-punctuation">(</span>add1<span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>y<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br>environment<span class="hljs-punctuation">(</span>add2<span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>y<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>既然闭包可以用来创建函数，我们就可以将一些大部分情况下只会用到一部分参数的函数包装起来形成一个简版的“专用函数”.<br>比如画图的时候可能在不同的图之间只需要更改线条的颜色，那么就可以将其他参数包装起来，使代码更简洁：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">color_line <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>col<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>...<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>    plot<span class="hljs-punctuation">(</span>...<span class="hljs-punctuation">,</span>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span>lty<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span>col<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">##生成专用函数</span><br>red_line <span class="hljs-operator">&lt;-</span> color_line<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">)</span><br>red_line<span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/ex4-1.png"><!-- --></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##也可以设置其他参数，因为上面的闭包中使用...来处理其他的参数</span><br>red_line<span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>main<span class="hljs-operator">=</span><span class="hljs-string">&quot;Red line plot&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/ex4-2.png"><!-- --></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###与下面的代码相比较，使用闭包创建专用函数可以使代码更简洁</span><br><span class="hljs-comment">#plot(rnorm(30),type = &quot;l&quot;,lty=1,col=&quot;red&quot;,main = &quot;Red line plot&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶函数指的是：将另外一个函数作为参数的函数<br>将函数作为参数也就是将现有的函数和一个变量名绑定，那么将一个函数赋给一个变量会影响函数的封闭环境吗(这可能会影响到变量的搜索路径)，答案是不会改变，下面的实验证明了这一点：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs r">f1 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f1 的执行环境为 &quot;</span><span class="hljs-punctuation">)</span><br>  print<span class="hljs-punctuation">(</span>environment<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f1 的封闭环境为 &quot;</span><span class="hljs-punctuation">)</span><br>  print<span class="hljs-punctuation">(</span>parent.env<span class="hljs-punctuation">(</span>environment<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f1 的调用环境为 &quot;</span><span class="hljs-punctuation">)</span><br>  print<span class="hljs-punctuation">(</span>parent.frame<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>f2 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f2 的执行环境为 &quot;</span><span class="hljs-punctuation">)</span><br>  print<span class="hljs-punctuation">(</span>environment<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f2 的封闭环境为 &quot;</span><span class="hljs-punctuation">)</span><br>  print<span class="hljs-punctuation">(</span>parent.env<span class="hljs-punctuation">(</span>environment<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  cat<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;f2 的调用环境为 &quot;</span><span class="hljs-punctuation">)</span><br>  print<span class="hljs-punctuation">(</span>parent.frame<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  p <span class="hljs-operator">&lt;-</span> f1<br>  p<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>f1<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> f1 的执行环境为 <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> <span class="hljs-number">0x00000209f26542b0</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> f1 的封闭环境为 <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> R_GlobalEnv<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> f1 的调用环境为 <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> R_GlobalEnv<span class="hljs-operator">&gt;</span><br>f2<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> f2 的执行环境为 <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> <span class="hljs-number">0x00000209f26000d0</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> f2 的封闭环境为 <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> R_GlobalEnv<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> f2 的调用环境为 <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> R_GlobalEnv<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> f1 的执行环境为 <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> <span class="hljs-number">0x00000209f25f5928</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> f1 的封闭环境为 <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> R_GlobalEnv<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> f1 的调用环境为 <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> <span class="hljs-number">0x00000209f26000d0</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到在f2内部将f1赋给p并调用p，并不改变f1的封闭环境(定义的地方)，所以将一个函数赋给一个变量仅仅是给了函数一个“别名”:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">f3 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-keyword">if</span><span class="hljs-punctuation">(</span>x <span class="hljs-operator">&gt;</span> y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>    x<span class="hljs-operator">-</span>y<br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-keyword">else</span><span class="hljs-punctuation">&#123;</span><br>    x<span class="hljs-operator">+</span>y<br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">###给+,-函数起别名</span><br>f4 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  op <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">if</span><span class="hljs-punctuation">(</span>x<span class="hljs-operator">&gt;</span>y<span class="hljs-punctuation">)</span> `-` <span class="hljs-keyword">else</span> `+`<br>  op<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>f3<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br>f4<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>既然函数可以作为变量使用，那么函数也可以作为参数来传递：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">add <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">,</span>z<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  x<span class="hljs-operator">+</span>y<span class="hljs-operator">+</span>z<br><span class="hljs-punctuation">&#125;</span><br><br>product <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">,</span>z<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  x<span class="hljs-operator">*</span>y<span class="hljs-operator">*</span>z<br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">###定义高阶函数，以其他函数作为参数</span><br>combine <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>f<span class="hljs-punctuation">,</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">,</span>z<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  f<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">,</span>z<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里的参数名f就相当于在高阶函数内部给传入的函数起了个别名，在combine函数内部这个函数就叫f了</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###将add和product传给combine</span><br>combine<span class="hljs-punctuation">(</span>add<span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">12</span><br>combine<span class="hljs-punctuation">(</span>product<span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><p>我们经常使用的apply函数族就是高阶函数，接受其他的函数作为参数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">sapply<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span>addn<span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h2 id="基于语言的计算-元编程"><a href="#基于语言的计算-元编程" class="headerlink" title="基于语言的计算(元编程)"></a>基于语言的计算(元编程)</h2><p>元编程可以允许我们调整语言本身，使特定的语言结构在特定情况下更方便使用(不是很懂)<br>先来看一个元编程的用处：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###将iris数据集中数值列的大于80%分位数的数挑出来</span><br>iris<span class="hljs-punctuation">[</span>iris<span class="hljs-operator">$</span>Sepal.Length <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>iris<span class="hljs-operator">$</span>Sepal.Length<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>     iris<span class="hljs-operator">$</span>Sepal.Width <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>iris<span class="hljs-operator">$</span>Sepal.Width<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>     iris<span class="hljs-operator">$</span>Petal.Length <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>iris<span class="hljs-operator">$</span>Petal.Length<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>     iris<span class="hljs-operator">$</span>Petal.Width <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>iris<span class="hljs-operator">$</span>Petal.Width<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> `[.data.frame`<span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">,</span> iris<span class="hljs-operator">$</span>Sepal.Length <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>iris<span class="hljs-operator">$</span>Sepal.Length<span class="hljs-punctuation">,</span> <span class="hljs-operator">:</span> 参数没有用<span class="hljs-punctuation">(</span>iris<span class="hljs-operator">$</span>Petal.Width <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>iris<span class="hljs-operator">$</span>Petal.Width<span class="hljs-punctuation">,</span> <span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##上面的代码就比较繁琐，需要多次写iris$</span><br><span class="hljs-comment">##subset函数可以简化上述代码</span><br>subset<span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">,</span><br>       Sepal.Length <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>Sepal.Length<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span><br>       Sepal.Width <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>Sepal.Width<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span><br>       Petal.Length <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>Petal.Length<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span><br>       Petal.Width <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>Petal.Width<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">110</span>          <span class="hljs-number">7.2</span>         <span class="hljs-number">3.6</span>          <span class="hljs-number">6.1</span>         <span class="hljs-number">2.5</span> virginica<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">118</span>          <span class="hljs-number">7.7</span>         <span class="hljs-number">3.8</span>          <span class="hljs-number">6.7</span>         <span class="hljs-number">2.2</span> virginica<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">132</span>          <span class="hljs-number">7.9</span>         <span class="hljs-number">3.8</span>          <span class="hljs-number">6.4</span>         <span class="hljs-number">2.0</span> virginica<br><br><br><span class="hljs-comment">###但是下面的代码就不能运行：</span><br>iris<span class="hljs-punctuation">[</span>Sepal.Length <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>Sepal.Length<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span><br>     Sepal.Width <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>Sepal.Width<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span><br>     Petal.Length <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>Petal.Length<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span><br>     Petal.Width <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>Petal.Width<span class="hljs-punctuation">,</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> `[.data.frame`<span class="hljs-punctuation">(</span>iris<span class="hljs-punctuation">,</span> Sepal.Length <span class="hljs-operator">&gt;</span> quantile<span class="hljs-punctuation">(</span>Sepal.Length<span class="hljs-punctuation">,</span> <span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span> <span class="hljs-operator">:</span> 找不到对象<span class="hljs-string">&#x27;Sepal.Length&#x27;</span><br></code></pre></td></tr></table></figure><p>这是因为subset函数使用<strong>元编程调整了其参数的计算环境</strong>(也就是不是去全局环境寻找这些变量，所以不会产生后面那样的报错)，这个过程分为两步：<em>捕获表达式；调整表达式的计算(修改计算的环境等)</em></p><h3 id="捕获表达式"><a href="#捕获表达式" class="headerlink" title="捕获表达式"></a>捕获表达式</h3><p>捕获表达式指的是：将表达式本身存储为变量的形式，防止表达式的直接执行(执行了还修改什么)；使用函数quote()</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r">call1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">quote</span><span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>call1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><br>typeof<span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;language&quot;</span><br><span class="hljs-built_in">class</span><span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;call&quot;</span><br><br>name1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">quote</span><span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">)</span><br>name1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> rnorm<br><br>typeof<span class="hljs-punctuation">(</span>name1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;symbol&quot;</span><br><span class="hljs-built_in">class</span><span class="hljs-punctuation">(</span>name1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;name&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到当我们捕获一个函数调用的时候返回的是一个语言对象(language)&#x2F;函数调用(call),当捕获一个函数名(变量名)返回的是符号(symbol)&#x2F;名称(name)</p><p>因此这里面我们需要区分的是：</p><ul><li><p>变量和符号对象：变量表示的是一个对象的名称，而这个名称本身也是一个对象，这个对象就是符号对象</p></li><li><p>函数和调用对象：函数是可以被调用(计算)的对象，而调用对象是函数调用的语言对象，是不会被计算的</p></li></ul><p>可以将对象转化成列表以便查看其内部结构：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">as.list<span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> rnorm<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span><br><br>typeof<span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;symbol&quot;</span><br><span class="hljs-built_in">class</span><span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;name&quot;</span><br><br>typeof<span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;double&quot;</span><br><span class="hljs-built_in">class</span><span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">[[</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;numeric&quot;</span><br></code></pre></td></tr></table></figure><p>符号对象和调用对象都是语言对象，可以使用is.symbol&#x2F;is.name检查对象是否为符号对象，使用is.call()检查是否为调用对象；也可以使用is.language()同时检查：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">is.call</span><span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-built_in">is.call</span><span class="hljs-punctuation">(</span>name1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">FALSE</span><br><span class="hljs-built_in">is.symbol</span><span class="hljs-punctuation">(</span>name1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-built_in">is.symbol</span><span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">FALSE</span><br><br><span class="hljs-built_in">is.language</span><span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br><span class="hljs-built_in">is.language</span><span class="hljs-punctuation">(</span>name1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure><p>捕获已知的表达式可以使用quote()，但是需要捕获用户输入的参数就不行了:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">func1 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-built_in">quote</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>func1<span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> x<br></code></pre></td></tr></table></figure><p>这个时候可以使用函数substitute,substitute基本用法为：substitute(expr,<br>env),expr为表达式，env为环境或者列表，默认是当前的执行环境,<em>将表达式中的变量替换成环境中的值</em>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">fun2 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-built_in">substitute</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-comment">##默认是当前的执行环境</span><br><span class="hljs-punctuation">&#125;</span><br><br>fun2<span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##substitute 用法</span><br><span class="hljs-comment">##将x替换成执行环境中x所绑定的值，也就是函数的输入</span><br><span class="hljs-built_in">substitute</span><span class="hljs-punctuation">(</span>x<span class="hljs-operator">+</span>y<span class="hljs-punctuation">,</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> y<br><br><span class="hljs-built_in">substitute</span><span class="hljs-punctuation">(</span>f<span class="hljs-punctuation">(</span>x<span class="hljs-operator">+</span>f<span class="hljs-punctuation">(</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>f <span class="hljs-operator">=</span> <span class="hljs-built_in">quote</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">sin</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">sin</span><span class="hljs-punctuation">(</span>x <span class="hljs-operator">+</span> <span class="hljs-built_in">sin</span><span class="hljs-punctuation">(</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>除了将表达式捕获为语言对象之外，还可以直接创建语言对象:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##quote捕获</span><br>call2 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">quote</span><span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span>mean <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##call 创建函数调用</span><br>call3 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">call</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;rnorm&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span>mean<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br>call3<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> mean <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##as.call将列表转化成函数调用</span><br>call4 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">as.call</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">quote</span><span class="hljs-punctuation">(</span>rnorm<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span>mean<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>call4<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> mean <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><br>identical<span class="hljs-punctuation">(</span>call3<span class="hljs-punctuation">,</span>call4<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br>identical<span class="hljs-punctuation">(</span>call2<span class="hljs-punctuation">,</span>call3<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure><h3 id="修改表达式"><a href="#修改表达式" class="headerlink" title="修改表达式"></a>修改表达式</h3><p>当一个表达式被捕获为调用对象后，可以将其当作列表来修改:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">call1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> rnorm<span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##可以修改第一个元素来更改要调用的函数</span><br>call1<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">quote</span><span class="hljs-punctuation">(</span>runif<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>call1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> runif<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment">##也可以添加新的元素来添加参数</span><br>call1<span class="hljs-punctuation">[[</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;min&quot;</span> <br>call1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> runif<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;min&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="执行表达式"><a href="#执行表达式" class="headerlink" title="执行表达式"></a>执行表达式</h3><p>捕获表达式后，下一步就是对其求值，可使用eval()函数  </p><p>eval的基本用法为：eval(expr,envir,enclos),expr是需要被计算的对象，envir是执行环境，enclos是封闭环境(在执行环境中找不到变量就会到这里找)，enclos如果不指定就取决于envir的类型，如果envir是列表则enclos是当前执行函数的调用环境(parent.frame()),如果envir不是列表则enclos是baseenv()</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs r">call1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">quote</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">sin</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>eval<span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> eval<span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> 找不到对象<span class="hljs-string">&#x27;x&#x27;</span><br><br>x <span class="hljs-operator">&lt;-</span> 1<br>eval<span class="hljs-punctuation">(</span>call1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">0.841471</span><br><br>call2 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">quote</span><span class="hljs-punctuation">(</span>x<span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-operator">+</span>y<span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>eval<span class="hljs-punctuation">(</span>call2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> eval<span class="hljs-punctuation">(</span>call2<span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> 找不到对象<span class="hljs-string">&#x27;y&#x27;</span><br><br>eval<span class="hljs-punctuation">(</span>call2<span class="hljs-punctuation">,</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>y<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br>rm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Warning <span class="hljs-keyword">in</span> rm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> 找不到对象<span class="hljs-string">&#x27;y&#x27;</span><br><br>e1 <span class="hljs-operator">&lt;-</span> new.env<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>e1<span class="hljs-operator">$</span>x <span class="hljs-operator">&lt;-</span> 1<br><br>eval<span class="hljs-punctuation">(</span>call2<span class="hljs-punctuation">,</span>envir <span class="hljs-operator">=</span> e1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> eval<span class="hljs-punctuation">(</span>call2<span class="hljs-punctuation">,</span> envir <span class="hljs-operator">=</span> e1<span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> 找不到对象<span class="hljs-string">&#x27;y&#x27;</span><br><br><span class="hljs-comment">###新建一个环境 其父环境是e1</span><br>e2 <span class="hljs-operator">&lt;-</span> new.env<span class="hljs-punctuation">(</span>parent <span class="hljs-operator">=</span> e1<span class="hljs-punctuation">)</span><br>e2<span class="hljs-operator">$</span>y <span class="hljs-operator">&lt;-</span> 2<br><br>eval<span class="hljs-punctuation">(</span>call2<span class="hljs-punctuation">,</span>e2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span><br><br><span class="hljs-comment">###也可以指定封闭环境</span><br>e3 <span class="hljs-operator">&lt;-</span> new.env<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>e3<span class="hljs-operator">$</span>y  <span class="hljs-operator">&lt;-</span> 1<br>eval<span class="hljs-punctuation">(</span>call2<span class="hljs-punctuation">,</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>e3<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>所以通过捕获表达式–执行表达式，我们可以<strong>调整表达式的执行环境和封闭环境来定制计算过程</strong>,这就是一开始subset函数的“魔力”所在,我们来看一下subset函数的源码：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r">subset.data.frame<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">function</span> <span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> subset<span class="hljs-punctuation">,</span> select<span class="hljs-punctuation">,</span> drop <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span> ...<span class="hljs-punctuation">)</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     r <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">missing</span><span class="hljs-punctuation">(</span>subset<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         rep_len<span class="hljs-punctuation">(</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> nrow<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     <span class="hljs-keyword">else</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         e <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">substitute</span><span class="hljs-punctuation">(</span>subset<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         r <span class="hljs-operator">&lt;-</span> eval<span class="hljs-punctuation">(</span>e<span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> parent.frame<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span><span class="hljs-built_in">is.logical</span><span class="hljs-punctuation">(</span>r<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>             stop<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;&#x27;subset&#x27; must be logical&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         r <span class="hljs-operator">&amp;</span> <span class="hljs-operator">!</span><span class="hljs-built_in">is.na</span><span class="hljs-punctuation">(</span>r<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     <span class="hljs-punctuation">&#125;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     vars <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">missing</span><span class="hljs-punctuation">(</span>select<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         <span class="hljs-literal">TRUE</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     <span class="hljs-keyword">else</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         nl <span class="hljs-operator">&lt;-</span> as.list<span class="hljs-punctuation">(</span><span class="hljs-built_in">seq_along</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>nl<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>         eval<span class="hljs-punctuation">(</span><span class="hljs-built_in">substitute</span><span class="hljs-punctuation">(</span>select<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> nl<span class="hljs-punctuation">,</span> parent.frame<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     <span class="hljs-punctuation">&#125;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>     x<span class="hljs-punctuation">[</span>r<span class="hljs-punctuation">,</span> vars<span class="hljs-punctuation">,</span> drop <span class="hljs-operator">=</span> drop<span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>bytecode<span class="hljs-operator">:</span> <span class="hljs-number">0x00000209ea31b388</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> namespace<span class="hljs-operator">:</span>base<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到这里也使用了substitute和eval的组合来选择特定的实例或者变量</p><h2 id="非标准计算"><a href="#非标准计算" class="headerlink" title="非标准计算"></a>非标准计算</h2><p>为了理解非标准计算，我们先来看一个例子，从向量中取子集：<br>假设现在有一个整数向量，我们想从中提取第3个到倒数第5个元素</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">x <span class="hljs-operator">&lt;-</span> 1<span class="hljs-operator">:</span><span class="hljs-number">10</span><br>x<span class="hljs-punctuation">[</span><span class="hljs-number">3</span><span class="hljs-operator">:</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>上面的表达式用了两次x，有点繁琐；我们可以使用之前讲过的元编程技术来定义一个函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">qs <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span><span class="hljs-built_in">range</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-built_in">range</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">substitute</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">range</span><span class="hljs-punctuation">)</span><br>  selector <span class="hljs-operator">&lt;-</span> eval<span class="hljs-punctuation">(</span><span class="hljs-built_in">range</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>.<span class="hljs-operator">=</span><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-comment">###用x向量的长度来代替点号</span><br>  x<span class="hljs-punctuation">[</span>selector<span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个函数可以使用点号来表示向量的长度：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">qs<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-operator">:</span><span class="hljs-punctuation">(</span>.<span class="hljs-operator">-</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><br><span class="hljs-comment">###</span><br>qs<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>.<span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>基于qs，下面的函数用于修剪x两端的n个元素，返回去掉前n个和后n个元素的中间部分</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">trim_margin <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>n<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  qs<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span><span class="hljs-punctuation">(</span>n<span class="hljs-operator">+</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span><span class="hljs-punctuation">(</span>.<span class="hljs-operator">-</span>n<span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>但是我们调用这个函数的时候，会出现错误：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">trim_margin<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> n <span class="hljs-operator">+</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span> 二进列运算符中有非数值参数<br></code></pre></td></tr></table></figure><p>我们来分析一下为什么会报错：<br>当调用trim_margin(x,3)时，会在一个新的执行环境中调用qs(x,(n+1):(.-n-1))，而在qs内部使用eval来执行捕获到的表达式，回忆一下eval的用法,</p><blockquote><p>eval的基本用法为：eval(expr,envir,enclos),expr是需要被计算的对象，envir是执行环境，enclos是封闭环境(在执行环境中找不到变量就会到这里找)，enclos如果不指定就取决于envir的类型，如果envir是列表则enclos是当前执行函数的调用环境(parent.frame()),如果envir不是列表则enclos是baseenv()</p></blockquote><p>而qs内部的eval提供的就是一个列表并且只有点号，所以当找不到n的时候就会到eval的调用环境(parent.frame())中去找，也就是qs的执行环境，而qs的执行环境当然时没有n的(n在qs的调用环境，也是trim_margin的执行环境中)，所以会报错</p><p>解决这个报错也比较简单，我们只需要指定eval的封闭环境就行</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">qs <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span><span class="hljs-built_in">range</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-built_in">range</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">substitute</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">range</span><span class="hljs-punctuation">)</span><br>  selector <span class="hljs-operator">&lt;-</span> eval<span class="hljs-punctuation">(</span><span class="hljs-built_in">range</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>.<span class="hljs-operator">=</span><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>enclos <span class="hljs-operator">=</span> parent.frame<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-comment">###用x向量的长度来代替点号</span><br>  x<span class="hljs-punctuation">[</span>selector<span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【hands on ML Ch2】 机器学习简介</title>
    <link href="/2021/01/13/hands_on_ML_ch1/"/>
    <url>/2021/01/13/hands_on_ML_ch1/</url>
    
    <content type="html"><![CDATA[<p>第一章：The Machine Learning Landscape<br>对机器学习的概述，包括机器学习系统的分类，机器学习的挑战和一些术语的解释(验证集，训练集，测试集，正则化，超参数，交叉验证等)</p><p>机器学习对数据挖掘的作用除了预测之外：我们也可以通过检查机器学习模型从数据中学习到的模式来对问题有更深入的理解，也就是机器学习可以帮助人去学习</p><p>机器学习系统的类型：</p><ul><li><p><strong>监督学习和非监督学习</strong> 在监督学习中有两类算法容易混肴：Anomaly detection and novelty detection 异常检测和新奇检测 异常检测指的是来了新数据，检测其是否属于正常的数据(训练集的数据)，而新奇检测则是检测其是否不同于训练集中的数据 比如训练集中有几千张狗的图像只有1%的图像是吉娃娃，那么来了一个新的吉娃娃图像，那么就判断其为异常数据 而新奇检测则不会将其判断为是新奇的数据</p></li><li><p><strong>Batch and Online Learning</strong>  </p><ul><li><p><em>batch learning</em> 不能够增量学习 必须使用所有的数据进行训练 每次有新的数据来的时候必须要和旧数据进行整合来重新训练模型 也就是说当新数据来的时候我们必须要将旧的模型关闭下线，重新训练后再上线运行，所以这种模式也叫做离线学习 offline learning</p></li><li><p><em>online learning</em> 可以依次传入数据进行<strong>增量学习</strong>，传入的形式可以是单个的数据也可以是小批量数据(mini batch) 因此有两种应用场景：依次传入的数据；非常大的数据(拆分进行训练)</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210111183408092.png" alt="image-20210111183408092"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210111183443429.png" alt="image-20210111183443429"></p></li></ul></li><li><p><strong>Instance</strong> <strong>Based Versus Model</strong> <strong>Based Learning</strong>  依据泛化方式的不同进行分类</p><ul><li>基于实例的：根据相似性度量</li><li>基于模型：依据训练数据选择模型—训练模型—进行推断(在新的数据上应用，也就是泛化)</li></ul></li></ul><p>机器学习的主要挑战：</p><ul><li><p>训练数据的数量不足</p></li><li><p>训练数据的代表性不足 可能有两个原因导致：训练数据比较小(<em>sampling noise</em> :由于随机性产生的不具代表性的数据)；尽管数据比较大，但是由于抽样方法的错误导致的抽样偏差(<em>sampling bias</em>)</p></li><li><p>低质量数据</p></li><li><p>不相关的特征 <em>garbage in, garbage out</em> 机器学习的重要步骤就是我们要选取一系列好的特征来训练我们的模型，这个步骤也叫做<strong>特征工程</strong>( <em>feature engineering</em>),包括以下几个步骤：</p><ul><li>特征选择 在已有的特征中选择最有用的特征来训练模型</li><li>特征提取 组合已有的特征产生更有用的特征，比如使用降维算法</li><li>通过收集新的数据来创造(发现)新的特征</li></ul></li><li><p>在训练数据上的过拟合 过拟合指的是模型在训练集上表现比较好，但是在测试集上表现不好，也就是泛化能力不足；解决过拟合可能有以下几种方法：</p><ul><li>简化模型：选择更少的模型参数，减少训练数据的属性数量(特征)，约束模型(正则化)</li><li>收集更多的训练数据</li><li>减少训练数据的噪音：消除数据错误，移除数据中的离群点等</li></ul><p>这里比较重要的模型的约束，也就是<strong>正则化</strong>(<em>regularization</em>)，比如在简单线性回归中我们可以限制直线斜率的大小的变化从而限制模型的自由度；在学习过程中应用的正则化的数量是通过<strong>超参数</strong>(<em>hyperparameter</em>)来控制的,<em>超参数是学习算法的参数而不是模型的参数</em>，需要在训练模型之前就确定好</p></li><li><p>在训练数据上的欠拟合(underfitting) 当模型过于简单而不能学习到数据的内在结构时，那么该模型即使在训练集上也表现不好，可能通过以下方法来改进：</p><ul><li>选择一个更复杂的模型，使用更多的参数</li><li>通过特征工程喂给学习算法更好的特征</li><li>减小模型的约束，比如减少正则化超参数等</li></ul></li></ul><p>评估模型的泛化能力，即模型在没有见过的数据上的表现. 可以使用将数据分为<strong>训练集(<em>training set</em> )和测试集(<em>test set</em>)</strong> 并在训练集上训练模型，在测试集上测试模型. 模型在新的样本上的错误率叫做泛化误差(generalization error或者out-of-sample error),通过在测试集上评估模型可以估计这个错误率，从而告诉我们模型在没有见过的数据上表现如何；如果模型在测试集上误差很小，而泛化误差比较大，说明该模型在训练数据上过拟合 【一般将数据的80%作为训练集，20%作为测试集，不过这也看数据集的大小而定】</p><p>当我们在不同的模型之间做选择的时候，可以看这些模型在测试集上的误差从而选择表现最好的模型</p><p>当我们需要在一个模型上进行超参数的调试的时候，比如有100个需要尝试的超参数的值，我们用这100个不同的超参数训练模型并在测试集上评估，选择一个表现最好的超参数，但是这可能会发生一种情况：这个模型在测试集上泛化误差比较低，但是应用到新数据上表现又不是很好 我的理解是：在测试集上反复评估模型调整超参数，从而产生一个在测试集上表现最好的模型，所以这个时候测试集变成了“训练集”，这个模型可能形成了新的过拟合现象</p><p>一个普遍的解决方法是从训练集中拿出一部分数据来评估备选的模型并选择最好的模型，这一部分数据叫做<em><strong>validation set</strong></em> 也就是说流程为：在剩下的训练集来训练不同的超参数构成的模型，然后选择在<em>validation set</em>上表现最好的模型，这就相当于在全部的训练数据上来得到最好的模型，最后使用测试集得到泛化误差来评估这个模型</p><p>还有一个问题就是验证集的大小，如果验证集太小，模型评估就会不精确；如果验证集太大，那么剩下的训练集就会比较小(也就是用来训练模型的数据比较少，一个比喻就是选择短跑健将来参加马拉松). 解决这种问题可以使用<strong>交叉验证(cross-validation)</strong> :使用很多小的验证集，每个模型在余下的训练集上训练后再在验证集上进行评估，对每个验证集都进行这个步骤，最后将一个模型在所有验证集上的评估的平均作为该模型表现的更精确的衡量</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>利用blogdown创建博客</title>
    <link href="/2021/01/06/blog_down/"/>
    <url>/2021/01/06/blog_down/</url>
    
    <content type="html"><![CDATA[<p>使用blogdown来创建静态网页</p><span id="more"></span><h3 id="创建静态网页"><a href="#创建静态网页" class="headerlink" title="创建静态网页"></a>创建静态网页</h3><p>首先需要安装blogdown包</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;blogdown&#x27;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>由于blogdown是基于静态网页生成器Hugo的，所以我们也需要安装Hugo，可以通过blogdown的函数<code>install_hugo()</code>来安装：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">blogdown<span class="hljs-operator">::</span>install_hugo<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>然后在Rstudio中创建一个新的项目，然后使用函数<code>new_site()</code>就可以快速的创建一个静态网页(注意，如果不是新创建的项目则需要在空文件夹下运行该命令)，该命令会在当前目录下创建多个文件</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201229200413627.png" alt="image-20201229200413627"> \<br>当我们直接运行<code>new_site()</code>时是使用默认的模板(“yihui&#x2F;hugo-lithium”),如果想要使用其他的模板，可以在这个网页中<a href="https://themes.gohugo.io/%E9%80%89%E6%8B%A9%E6%83%B3%E8%A6%81%E7%9A%84%E6%A8%A1%E6%9D%BF%EF%BC%9A">https://themes.gohugo.io/选择想要的模板：</a></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210106233046381.png" alt="image-20210106233046381"> </p><p>比如这里选择的是Minimal,可以直接点击Minimal就会出来详细的介绍界面：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210107000102918.png" alt="image-20210107000102918"></p><p>接着点击Download就会跳转到Github界面，这时我们需要记下这个仓库的名称，这里是calintat&#x2F;minimal，然后就可以回到Rstudio，运行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">new_site<span class="hljs-punctuation">(</span>theme <span class="hljs-operator">=</span> <span class="hljs-string">&quot;calintat/minimal&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>在新版的Rstudio中，在创建项目的时候可以直接选择创建<strong>website using blogdown</strong>   </p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210106232404163.png" alt="image-20210106232404163"></p><p>随后在设置的时候可以在Hugo theme选项里面填上calintat&#x2F;minimal</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210107000355358.png" alt="image-20210107000355358"></p><p>点击create project 我们就可以创建一个静态网页了</p><p>在写博客之前，为了随时可以预览所写的内容，我们需要运行<code>blogdown::serve_site()</code>函数，该函数使用LiveReload技术，可以实时预览内容(注意只需要在启动Rstudio或者restart session的时候才需要运行这个函数)，另外也可以使用Rstudio的Addin(Serve Site)来运行这个函数：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210107000650949.png" alt="image-20210107000650949"></p><p>接下来我们就可以开始写博客了，使用<code>blogdown::new_post()</code>函数可以创建新的博客，但是需要指定作者，日期;这个时候可以使用Rstudio的New Post(见上图)快捷直观的创建博客：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210107001022040.png" alt="image-20210107001022040"></p><p>填写相应的信息，按照想要的类型(markdown,Rmarkdown)写作</p><h3 id="部署静态网页"><a href="#部署静态网页" class="headerlink" title="部署静态网页"></a>部署静态网页</h3><p>当我们在本地写好博客之后，有很多方案可以将本地的静态网页部署到web上，这里选用的是Github+Netlify+阿里云(域名)，其他的方案可以查看<a href="https://bookdown.org/yihui/blogdown/deployment.html">https://bookdown.org/yihui/blogdown/deployment.html</a>  </p><p>我们首先需要在Github上新建一个仓库(这里创建的仓库名为blog_test)用来存放博客，然后将本地的文件和仓库连接并将内容推送到仓库中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br>git remote add origin git@github.com:wt12318/blog_test.git<br>git add .<br>git commit -m &quot;init&quot;<br>git push origin master<br></code></pre></td></tr></table></figure><p>接着我们需要到Netlify官网：<a href="https://www.netlify.com/%EF%BC%8C%E6%B2%A1%E6%9C%89%E8%B4%A6%E5%8F%B7%E7%9A%84%E9%9C%80%E8%A6%81%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%EF%BC%8C%E4%BE%9D%E6%AC%A1%E7%82%B9%E5%87%BBNew">https://www.netlify.com/，没有账号的需要注册一个账号，依次点击New</a> site from Git,选择Github，选择之前创建的仓库，点击Deploy site<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210107002631823.png" alt="image-20210107002631823"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210107002724523.png" alt="image-20210107002724523"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210107002834588.png" alt="image-20210107002834588"></p><p>等待一会后就部署成功了，netlify会生成一个随机的域名(比如<a href="https://pensive-neumann-5a4669.netlify.app),我们可以通过domain/">https://pensive-neumann-5a4669.netlify.app),我们可以通过Domain</a> Setting—Edit site name 来修改：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210107195330204.png" alt="image-20210107195330204"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210107195352396.png" alt="image-20210107195352396"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210107195413647.png" alt="image-20210107195413647"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210107195518614.png" alt="image-20210107195518614"></p><p>总结一下，主要有以下几个步骤：</p><ul><li>在<a href="https://themes.gohugo.io/%E9%80%89%E6%8B%A9%E6%83%B3%E8%A6%81%E7%9A%84%E6%A8%A1%E6%9D%BF">https://themes.gohugo.io/选择想要的模板</a></li><li>在Rstudio中创建新项目(website using blogdown)</li><li>运行Rstudio的Addin(Serve Site)</li><li>运行Rstudio的Addin(New Post)新建博客，开始写作</li><li>部署博客：<ul><li>创建Github仓库，并将本地内容与仓库连接</li><li>将Github的内容部署到Netlify上</li></ul></li><li>每次写完博客只需要将内容push到Github上，Netlify就会自动更新</li></ul><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>通过上面的步骤，Netlify提供的域名都是有后缀的(.netlify.app)，我们也可以绑定自己的域名，具体可以参考这篇文章<a href="https://blog.csdn.net/mqdxiaoxiao/article/details/96365253">Netlify搭建个人博客设置域名</a></p>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【R】按列分组计算</title>
    <link href="/2021/01/05/group_by_column/"/>
    <url>/2021/01/05/group_by_column/</url>
    
    <content type="html"><![CDATA[<p>R按列进行分组计算</p><span id="more"></span><p>现在有一个数据框<code>dt</code>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">dt <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span><br>  x <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  y <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  z <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>dt<br><span class="hljs-comment">##   x y z</span><br><span class="hljs-comment">## 1 1 2 a</span><br><span class="hljs-comment">## 2 2 3 a</span><br><span class="hljs-comment">## 3 3 4 b</span><br></code></pre></td></tr></table></figure><p>想要依据<code>z</code>列分组并计算<code>x</code>,<code>y</code>列的均值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>dplyr<span class="hljs-punctuation">)</span><br>dt <span class="hljs-operator">%&gt;%</span> <br>  group_by<span class="hljs-punctuation">(</span>z<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>mean_x<span class="hljs-operator">=</span>mean<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>mean_y<span class="hljs-operator">=</span>mean<span class="hljs-punctuation">(</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## # A tibble: 2 x 3</span><br><span class="hljs-comment">##   z     mean_x mean_y</span><br><span class="hljs-comment">##   &lt;fct&gt;  &lt;dbl&gt;  &lt;dbl&gt;</span><br><span class="hljs-comment">## 1 a        1.5    2.5</span><br><span class="hljs-comment">## 2 b        3      4</span><br></code></pre></td></tr></table></figure><p>但是如果传入的是字符就会出现我们不想要的结果：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">dt <span class="hljs-operator">%&gt;%</span> <br>  group_by<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;z&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>mean_x<span class="hljs-operator">=</span>mean<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>mean_y<span class="hljs-operator">=</span>mean<span class="hljs-punctuation">(</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## `summarise()` ungrouping output (override with `.groups` argument)</span><br><span class="hljs-comment">## # A tibble: 1 x 3</span><br><span class="hljs-comment">##   `&quot;z&quot;` mean_x mean_y</span><br><span class="hljs-comment">##   &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;</span><br><span class="hljs-comment">## 1 z          2      3</span><br></code></pre></td></tr></table></figure><p>这里实际上是创建了一个新的变量<code>z</code>并且他的值也是<code>z</code>，然后计算了x和y列的均值 <br>这种情况下可以使用<code>group_by_at</code>来选择变量</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">dt <span class="hljs-operator">%&gt;%</span> <br>  group_by_at<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;z&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>mean_x<span class="hljs-operator">=</span>mean<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>mean_y<span class="hljs-operator">=</span>mean<span class="hljs-punctuation">(</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## `summarise()` ungrouping output (override with `.groups` argument)</span><br><span class="hljs-comment">## # A tibble: 2 x 3</span><br><span class="hljs-comment">##   z     mean_x mean_y</span><br><span class="hljs-comment">##   &lt;fct&gt;  &lt;dbl&gt;  &lt;dbl&gt;</span><br><span class="hljs-comment">## 1 a        1.5    2.5</span><br><span class="hljs-comment">## 2 b        3      4</span><br></code></pre></td></tr></table></figure><p>在<code>dplyr</code>的最新版本中(1.0+)有新的函数<code>across</code>也可以做同样的事:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">dt <span class="hljs-operator">%&gt;%</span> <br>  group_by<span class="hljs-punctuation">(</span>across<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;z&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>mean_x<span class="hljs-operator">=</span>mean<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>mean_y<span class="hljs-operator">=</span>mean<span class="hljs-punctuation">(</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## `summarise()` ungrouping output (override with `.groups` argument)</span><br><span class="hljs-comment">## # A tibble: 2 x 3</span><br><span class="hljs-comment">##   z     mean_x mean_y</span><br><span class="hljs-comment">##   &lt;fct&gt;  &lt;dbl&gt;  &lt;dbl&gt;</span><br><span class="hljs-comment">## 1 a        1.5    2.5</span><br><span class="hljs-comment">## 2 b        3      4</span><br></code></pre></td></tr></table></figure><p>另外我们也可以使用<code>eval</code>加<code>parse</code>来将字符解析为对象：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">dt <span class="hljs-operator">%&gt;%</span> <br>  group_by<span class="hljs-punctuation">(</span>eval<span class="hljs-punctuation">(</span>parse<span class="hljs-punctuation">(</span>text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;z&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> <br>  summarise<span class="hljs-punctuation">(</span>mean_x<span class="hljs-operator">=</span>mean<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>mean_y<span class="hljs-operator">=</span>mean<span class="hljs-punctuation">(</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## `summarise()` ungrouping output (override with `.groups` argument)</span><br><span class="hljs-comment">## # A tibble: 2 x 3</span><br><span class="hljs-comment">##   `eval(parse(text = &quot;z&quot;))` mean_x mean_y</span><br><span class="hljs-comment">##   &lt;fct&gt;                      &lt;dbl&gt;  &lt;dbl&gt;</span><br><span class="hljs-comment">## 1 a                            1.5    2.5</span><br><span class="hljs-comment">## 2 b                            3      4</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【R】switch函数用法</title>
    <link href="/2021/01/04/r-switch/"/>
    <url>/2021/01/04/r-switch/</url>
    
    <content type="html"><![CDATA[<p><code>switch</code>函数的基本用法</p><span id="more"></span><p><code>switch</code>的基本用法为<code>switch (expression, list)</code>  <br>第一个参数是表达式，第二个参数是列表；基于表达式的值返回列表中相应元素(按照名称)的值<br>来看一些具体的例子：<br>如果expression的结果是整数，那么会按照位置返回值  <br>如果expression的结果是字符，那么会按照其后参数构成的列表中元素的名称返回相应的值</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>x<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>y<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] 1</span><br><br>centre <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span>type<span class="hljs-punctuation">,</span><br>         mean <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         median <span class="hljs-operator">=</span> median<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         trimmed <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> trim <span class="hljs-operator">=</span> <span class="hljs-number">.1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>centre<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;mean&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] 2</span><br></code></pre></td></tr></table></figure><p>对于数字的情况，如果输入是负数或者超出范围，不会报错，返回的是NULL(<code>print</code>后才可见)</p><p>对于字符，如果输入没有匹配的名称也会返回NULL，这个时候可以在list的最后加上没有名称的值捕获其他的输入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">for</span><span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">9</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>  print<span class="hljs-punctuation">(</span><span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span>i<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span> <span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## NULL</span><br><span class="hljs-comment">## NULL</span><br><span class="hljs-comment">## [1] 1</span><br><span class="hljs-comment">## [1] 2</span><br><span class="hljs-comment">## [1] 3</span><br><span class="hljs-comment">## NULL</span><br><br>print<span class="hljs-punctuation">(</span><span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>b<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## NULL</span><br>print<span class="hljs-punctuation">(</span><span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>b<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment">## [1] 3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【R语言编程指南】R内部机制</title>
    <link href="/2021/01/04/r-inter/"/>
    <url>/2021/01/04/r-inter/</url>
    
    <content type="html"><![CDATA[<p>本章主要是学习四个方面：</p><ul><li>惰性求值</li><li>复制修改机制</li><li>词法作用域</li><li>环境</li></ul><span id="more"></span><h2 id="惰性求值"><a href="#惰性求值" class="headerlink" title="惰性求值"></a>惰性求值</h2><p>惰性求值指的是：在函数调用时，参数的值只在用到的时侯才会被调用&#x2F;执行</p><p>比如下面这个函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">test0 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-keyword">if</span><span class="hljs-punctuation">(</span>x <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>    x<br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-keyword">else</span><span class="hljs-punctuation">&#123;</span><br>    y<br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br>test0<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>stop<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Stop nrow&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br>test0<span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>stop<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Stop nrow&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> test0<span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> stop<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Stop nrow&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> Stop nrow<br></code></pre></td></tr></table></figure><p>可以看到当调用<code>test0(1,stop(&quot;Stop nrow&quot;))</code>并不会报错，因为这种情况下函数不会运行y(因为不需要y的值)；而在调用<code>test0(-1,stop(&quot;Stop nrow&quot;))</code>的时候会发生报错是因为输入x是负数，因此会进入<code>else</code>运行y，而y的值是表达式<code>stop(&quot;Stop nrow&quot;)</code>所以会报错</p><p>在这一节中还有一个巧妙的用法:使用<code>stop</code>和<code>switch</code>来控制函数的输入:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">check_input <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-built_in">switch</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span><br>         y <span class="hljs-operator">=</span> message<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;yes&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         n <span class="hljs-operator">=</span> message<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;no&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         stop<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Invalid input&quot;</span><span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>check_input<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;y&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> yes<br>check_input<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> no<br>check_input<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> check_input<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> Invalid input<br></code></pre></td></tr></table></figure><h2 id="复制——修改机制"><a href="#复制——修改机制" class="headerlink" title="复制——修改机制"></a>复制——修改机制</h2><p>复制修改机制指的是：当有多个变量指向同一个对象，那么修改一个变量(包括值和属性)就会生成该对象的一个副本</p><p>我们可以看一个例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">x1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br>x2 <span class="hljs-operator">&lt;-</span> x1<br><br><span class="hljs-comment">##使用tracemem可以追踪变量的内存地址</span><br><span class="hljs-built_in">tracemem</span><span class="hljs-punctuation">(</span>x1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;&lt;00000209EAA600E0&gt;&quot;</span><br><span class="hljs-built_in">tracemem</span><span class="hljs-punctuation">(</span>x2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;&lt;00000209EAA600E0&gt;&quot;</span><br><br>x1<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">0</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">tracemem</span><span class="hljs-punctuation">[</span><span class="hljs-number">0x00000209eaa600e0</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-number">0x00000209ea315e78</span><span class="hljs-punctuation">]</span><span class="hljs-operator">:</span> eval eval withVisible withCallingHandlers handle timing_fn evaluate_call <span class="hljs-operator">&lt;</span>Anonymous<span class="hljs-operator">&gt;</span> evaluate in_dir block_exec call_block process_group.block process_group withCallingHandlers process_file <span class="hljs-operator">&lt;</span>Anonymous<span class="hljs-operator">&gt;</span> render<br></code></pre></td></tr></table></figure><p>可以看到在赋值操作中变量所指向的内存地址是一样的，但是在改变其中一个变量的值的时候，该变量的内存地址发生了变化，也就是说修改操作会生成一个副本，然后在该副本上进行修改</p><p>对于函数的参数也是这样，当我们传一个变量给函数的参数时，就相当于该变量和函数参数所表示的变量都指向我们传入的数据，所以在函数内部进行修改时并不会修改传入的变量，而是将该变量的值复制后再进行修改:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">modify <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  x<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">2</span><br>  x<br><span class="hljs-punctuation">&#125;</span><br><br>v1 <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br>modify<span class="hljs-punctuation">(</span>v1<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>v1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>可用下图来说明：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/image-20220226110746801.png"></p><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>本节中有几个知识点：</p><ol><li>函数只有在被调用的时候才寻找变量：</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##定义函数</span><br>fun1 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">,</span>x<span class="hljs-punctuation">,</span>b<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">#现在并没有定义a和b,但是创建函数时不会报错</span><br><br>fun1<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> fun1<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> 找不到对象<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">##由于调用函数时找不到相应的变量所以报错</span><br><br>a <span class="hljs-operator">&lt;-</span> b <span class="hljs-operator">&lt;-</span> 1<br>fun1<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol><li>当函数被调用时，先会在函数内部搜索变量，如果在内部找不到相应的变量，就会在自己被定义的地方(所在的域或者环境)而不是被调用的地方搜索相应的变量—-<strong>词法作用域</strong></li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r">f1 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  x <span class="hljs-operator">+</span> p <br><span class="hljs-punctuation">&#125;</span><br><br>g1 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  p <span class="hljs-operator">&lt;-</span> 1 <br>  f1<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>g1<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> f1<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> 找不到对象<span class="hljs-string">&#x27;p&#x27;</span><br><span class="hljs-comment">##在g1内部调用f1，f1先在其内部找p，找不到；接着f1到其被定义的域/环境中找p，也找不到(因为p是在g1内部被定义的)，所以会报错</span><br><br>p <span class="hljs-operator">&lt;-</span> 1<br>g1<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><span class="hljs-comment">##在g1内部调用f1，f1先在其内部找p，找不到；接着f1到其被定义的域/环境中找p,这时就可以找到了</span><br></code></pre></td></tr></table></figure><p>接下来看一个有意思的例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r">f1 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  p <span class="hljs-operator">&lt;-</span> 1<br>  q <span class="hljs-operator">&lt;-</span> 2<br>  cat<span class="hljs-punctuation">(</span>sprintf<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;1. [f1] p: %d, q: %d\n&quot;</span><span class="hljs-punctuation">,</span>p<span class="hljs-punctuation">,</span>q<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  f2 <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>    p <span class="hljs-operator">&lt;-</span> 3<br>    cat<span class="hljs-punctuation">(</span>sprintf<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;2. [f2] p: %d, q: %d\n&quot;</span><span class="hljs-punctuation">,</span>p<span class="hljs-punctuation">,</span>q<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span>x<span class="hljs-punctuation">,</span> p<span class="hljs-operator">=</span>p<span class="hljs-punctuation">,</span> q<span class="hljs-operator">=</span>q<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br>  cat<span class="hljs-punctuation">(</span>sprintf<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;3. [f1] p: %d, q: %d&quot;</span><span class="hljs-punctuation">,</span>p<span class="hljs-punctuation">,</span>q<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>  f2<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br>f1<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1.</span> <span class="hljs-punctuation">[</span>f1<span class="hljs-punctuation">]</span> p<span class="hljs-operator">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> q<span class="hljs-operator">:</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">3.</span> <span class="hljs-punctuation">[</span>f1<span class="hljs-punctuation">]</span> p<span class="hljs-operator">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> q<span class="hljs-operator">:</span> <span class="hljs-number">22.</span> <span class="hljs-punctuation">[</span>f2<span class="hljs-punctuation">]</span> p<span class="hljs-operator">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> q<span class="hljs-operator">:</span> <span class="hljs-number">2</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> x p q <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><br><span class="hljs-comment">##注意运行的顺序和展示的值</span><br></code></pre></td></tr></table></figure><h2 id="环境的工作方式"><a href="#环境的工作方式" class="headerlink" title="环境的工作方式"></a>环境的工作方式</h2><p>环境是一组名称组成的对象，每个名称(变量)都指向一个对象，并且每个环境(除了空环境)都要一个父环境，当我们寻找某个名称的时候会沿着“环境链”进行搜索</p><p>我们可以通过<code>new.env</code>来创建新环境，通过$和[]来在新环境中创建变量(和列表操作类似)</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">e1 <span class="hljs-operator">&lt;-</span> new.env<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>e1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> <span class="hljs-number">0x00000209ed933aa0</span><span class="hljs-operator">&gt;</span><br><span class="hljs-comment">##环境是用内存地址来表示</span><br><br><span class="hljs-comment">##创建变量</span><br>e1<span class="hljs-operator">$</span>x <span class="hljs-operator">&lt;-</span> 1<br>e1<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;y&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>但是在访问变量的时候，环境不能像列表那样通过索引来提取元素：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">e1<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> e1<span class="hljs-punctuation">[[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-operator">:</span> 取子集环境时的参数不对<br>e1<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> e1<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">]</span><span class="hljs-operator">:</span> 类别为<span class="hljs-string">&#x27;environment&#x27;</span>的对象不可以取子集<br></code></pre></td></tr></table></figure><p>可以通过使用变量的名称或者专门的函数(exist&#x2F;get&#x2F;ls)来访问环境中的变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">e1<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br>exists<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span>e1<span class="hljs-punctuation">)</span> <span class="hljs-comment">##exist判断某个变量是否在环境中</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br>get<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span>e1<span class="hljs-punctuation">)</span><span class="hljs-comment">##get从环境中获取相应的对象</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br>ls<span class="hljs-punctuation">(</span>e1<span class="hljs-punctuation">)</span><span class="hljs-comment">##ls查看环境中所有变量</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;x&quot;</span> <span class="hljs-string">&quot;y&quot;</span><br></code></pre></td></tr></table></figure><p>环境还有两个重要的特征：</p><ul><li>环境有父环境</li><li>环境有引用语义</li></ul><h3 id="链接环境"><a href="#链接环境" class="headerlink" title="链接环境"></a>链接环境</h3><p>环境有父环境，当我们寻找一个变量的时候，在当前环境中找不到就会去父环境中寻找<br>在创建环境时可以指定其父环境：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">e2 <span class="hljs-operator">&lt;-</span> new.env<span class="hljs-punctuation">(</span>parent <span class="hljs-operator">=</span> e1<span class="hljs-punctuation">)</span> <span class="hljs-comment">##创建新环境e2，其父环境是e1</span><br>e1<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> <span class="hljs-number">0x00000209ed933aa0</span><span class="hljs-operator">&gt;</span><br>e2<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> <span class="hljs-number">0x00000209ece0a5b0</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-comment">##可以使用parent.env查看环境的父环境</span><br>parent.env<span class="hljs-punctuation">(</span>e2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> <span class="hljs-number">0x00000209ed933aa0</span><span class="hljs-operator">&gt;</span><br><span class="hljs-comment">##可以看到和e1的内存地址一样</span><br></code></pre></td></tr></table></figure><p>需要注意的是：只有环境访问函数(exists&#x2F;get)会沿着环境链寻找变量，操作符($&#x2F;[])不会.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs r">e2<span class="hljs-operator">$</span>y <span class="hljs-operator">&lt;-</span> 2<br>ls<span class="hljs-punctuation">(</span>e2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;y&quot;</span><br>e2<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;y&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br>e2<span class="hljs-operator">$</span>y<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><br>exists<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;y&quot;</span><span class="hljs-punctuation">,</span>e2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br>exists<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span>e2<span class="hljs-punctuation">)</span><span class="hljs-comment">##x在e2中并没有，但是exists会到e2的父环境e1中找到x</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">TRUE</span><br>get<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span>e2<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br>e2<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-literal">NULL</span><br>e2<span class="hljs-operator">$</span>x<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-literal">NULL</span><br><br><span class="hljs-comment">##我们也可以让这些函数不去在父环境中寻找，加上参数inherits = FALSE</span><br>exists<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span>e2<span class="hljs-punctuation">,</span>inherits <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-literal">FALSE</span><br>get<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span>e2<span class="hljs-punctuation">,</span>inherits <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> get<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span> e2<span class="hljs-punctuation">,</span> inherits <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> 找不到对象<span class="hljs-string">&#x27;x&#x27;</span><br></code></pre></td></tr></table></figure><p>当每次开启一个新的R会话时工作环境都会时R的一个内置环境，即全局环境(R_GlobalEnv)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">environment<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-comment">##使用environment()查看当前工作环境</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> R_GlobalEnv<span class="hljs-operator">&gt;</span><br><br><span class="hljs-comment">##还可以通过其他方式访问全局环境</span><br><span class="hljs-built_in">globalenv</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> R_GlobalEnv<span class="hljs-operator">&gt;</span><br>.GlobalEnv<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>environment<span class="hljs-operator">:</span> R_GlobalEnv<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>那么全局环境的父环境是什么？全局环境的父环境的父环境是什么？最终有没有尽头呢？<br>我们可以通过下面的函数来探索一下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs r">parents <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>env<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-keyword">while</span><span class="hljs-punctuation">(</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>    name <span class="hljs-operator">&lt;-</span> environmentName<span class="hljs-punctuation">(</span>env<span class="hljs-punctuation">)</span><br>    txt <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">nzchar</span><span class="hljs-punctuation">(</span>name<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>      name<br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-keyword">else</span><span class="hljs-punctuation">&#123;</span><br>      format<span class="hljs-punctuation">(</span>env<span class="hljs-punctuation">)</span><br>    <span class="hljs-punctuation">&#125;</span><br>    cat<span class="hljs-punctuation">(</span>txt<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">)</span><br>    env <span class="hljs-operator">&lt;-</span> parent.env<span class="hljs-punctuation">(</span>env<span class="hljs-punctuation">)</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br>parents<span class="hljs-punctuation">(</span><span class="hljs-built_in">globalenv</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> R_GlobalEnv <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>rtracklayer <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>GenomicRanges <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>GenomeInfoDb <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>IRanges <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>S4Vectors <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>BiocGenerics <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>parallel <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>stats4 <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>dplyr <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>rmarkdown <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> tools<span class="hljs-operator">:</span>rstudio <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>stats <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>graphics <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>grDevices <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>utils <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>datasets <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> package<span class="hljs-operator">:</span>methods <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Autoloads <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> base <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> R_EmptyEnv<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Error <span class="hljs-keyword">in</span> parent.env<span class="hljs-punctuation">(</span>env<span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> 空环境没有父母环境<br></code></pre></td></tr></table></figure><p>可以看到这个环境链条从空环境起始经过多个拓展包的环境最后终止于空环境，并且空环境没有父环境，这个结果和search(搜索路径)的结果相似：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">search<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;.GlobalEnv&quot;</span>            <span class="hljs-string">&quot;package:rtracklayer&quot;</span>   <span class="hljs-string">&quot;package:GenomicRanges&quot;</span> <span class="hljs-string">&quot;package:GenomeInfoDb&quot;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:IRanges&quot;</span>       <span class="hljs-string">&quot;package:S4Vectors&quot;</span>     <span class="hljs-string">&quot;package:BiocGenerics&quot;</span>  <span class="hljs-string">&quot;package:parallel&quot;</span>     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:stats4&quot;</span>        <span class="hljs-string">&quot;package:dplyr&quot;</span>         <span class="hljs-string">&quot;package:rmarkdown&quot;</span>     <span class="hljs-string">&quot;tools:rstudio&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">13</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:stats&quot;</span>         <span class="hljs-string">&quot;package:graphics&quot;</span>      <span class="hljs-string">&quot;package:grDevices&quot;</span>     <span class="hljs-string">&quot;package:utils&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">17</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:datasets&quot;</span>      <span class="hljs-string">&quot;package:methods&quot;</span>       <span class="hljs-string">&quot;Autoloads&quot;</span>             <span class="hljs-string">&quot;package:base&quot;</span><br></code></pre></td></tr></table></figure><p>需要注意的是：我们每加载一个包，该包的环境就会加到全局路径的后面，所以如果需要调用两个包中同名函数，会优先选取后加载的包的函数(后加载的包mask了前面包的同名函数)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>dplyr<span class="hljs-punctuation">)</span><br>search<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;.GlobalEnv&quot;</span>            <span class="hljs-string">&quot;package:rtracklayer&quot;</span>   <span class="hljs-string">&quot;package:GenomicRanges&quot;</span> <span class="hljs-string">&quot;package:GenomeInfoDb&quot;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:IRanges&quot;</span>       <span class="hljs-string">&quot;package:S4Vectors&quot;</span>     <span class="hljs-string">&quot;package:BiocGenerics&quot;</span>  <span class="hljs-string">&quot;package:parallel&quot;</span>     <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:stats4&quot;</span>        <span class="hljs-string">&quot;package:dplyr&quot;</span>         <span class="hljs-string">&quot;package:rmarkdown&quot;</span>     <span class="hljs-string">&quot;tools:rstudio&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">13</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:stats&quot;</span>         <span class="hljs-string">&quot;package:graphics&quot;</span>      <span class="hljs-string">&quot;package:grDevices&quot;</span>     <span class="hljs-string">&quot;package:utils&quot;</span>        <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">17</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:datasets&quot;</span>      <span class="hljs-string">&quot;package:methods&quot;</span>       <span class="hljs-string">&quot;Autoloads&quot;</span>             <span class="hljs-string">&quot;package:base&quot;</span><br><br>library<span class="hljs-punctuation">(</span>data.table<span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> Warning<span class="hljs-operator">:</span> package <span class="hljs-string">&#x27;data.table&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.2<br>search<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;.GlobalEnv&quot;</span>            <span class="hljs-string">&quot;package:data.table&quot;</span>    <span class="hljs-string">&quot;package:rtracklayer&quot;</span>   <span class="hljs-string">&quot;package:GenomicRanges&quot;</span><br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:GenomeInfoDb&quot;</span>  <span class="hljs-string">&quot;package:IRanges&quot;</span>       <span class="hljs-string">&quot;package:S4Vectors&quot;</span>     <span class="hljs-string">&quot;package:BiocGenerics&quot;</span> <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span>  <span class="hljs-punctuation">[</span><span class="hljs-number">9</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:parallel&quot;</span>      <span class="hljs-string">&quot;package:stats4&quot;</span>        <span class="hljs-string">&quot;package:dplyr&quot;</span>         <span class="hljs-string">&quot;package:rmarkdown&quot;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">13</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;tools:rstudio&quot;</span>         <span class="hljs-string">&quot;package:stats&quot;</span>         <span class="hljs-string">&quot;package:graphics&quot;</span>      <span class="hljs-string">&quot;package:grDevices&quot;</span>    <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">17</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:utils&quot;</span>         <span class="hljs-string">&quot;package:datasets&quot;</span>      <span class="hljs-string">&quot;package:methods&quot;</span>       <span class="hljs-string">&quot;Autoloads&quot;</span>            <br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">21</span><span class="hljs-punctuation">]</span> <span class="hljs-string">&quot;package:base&quot;</span><br><br><span class="hljs-comment">##可以看到data.table到前面去了</span><br></code></pre></td></tr></table></figure><h3 id="引用语义"><a href="#引用语义" class="headerlink" title="引用语义"></a>引用语义</h3><p>引用语义指的是：修改环境并不会复制环境的副本(也就是没有复制修改机制)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">e3 <span class="hljs-operator">&lt;-</span> e1<br>e1<span class="hljs-operator">$</span>x<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br>e3<span class="hljs-operator">$</span>x<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">1</span><br><br>e3<span class="hljs-operator">$</span>x <span class="hljs-operator">&lt;-</span> 2<br>e1<span class="hljs-operator">$</span>x<br><span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-number">2</span><br><span class="hljs-comment">##因此e3和e1指向同一个对象，改变e3中的变量值，e1中的变量值也会改变</span><br></code></pre></td></tr></table></figure><h3 id="与函数相关的环境"><a href="#与函数相关的环境" class="headerlink" title="与函数相关的环境"></a>与函数相关的环境</h3><p>有3个与函数及其运行过程相关的环境：</p><ul><li>执行环境(executing environment):<br>每次函数执行时，R都会新建一个环境来管理函数的执行过程，所以函数的参数和在函数内部创建的变量都是执行环境中的变量</li><li>封闭环境(enclosing<br>environment)：定义函数的环境，也是执行环境的父环境，所以在函数执行的时候，没有在执行环境中找到的变量就会到其父环境，也就是封闭环境中寻找(词法作用域)，可以使用environment()来获取函数的封闭环境</li><li>调用环境(calling environment):<br>调用函数的环境，可以使用parent.frame()来获取调用环境</li></ul>]]></content>
    
    
    <categories>
      
      <category>R</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习入门</title>
    <link href="/2021/01/03/deep_learning/"/>
    <url>/2021/01/03/deep_learning/</url>
    
    <content type="html"><![CDATA[<p>主要内容来自<em>深度学习入门</em>：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201227171954771.png"></p><h2 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h2><p>感知机也可以称为人工神经元，是神经网络的基础</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223224321725.png"></p><p>感知机接受多个信号(x1,x2)，输出一个信号(y), w1&#x2F;w2是权重，圆圈就代表神经元</p><p>输入信号被传递到神经元的时候会被乘上<strong>权重</strong>(<em>w</em>1<em>x</em>1、<em>w</em>2<em>x</em>2)，神经元会计算输入的信号总和，只有这个总和超过某个阈值才会输出1，这个状态就叫做神经元的激活，这个过程用函数表示如下( $\theta$表示阈值)：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223224937885.png"></p><p>也可以对上式进行形式上的转化(将$\theta$移到左边)：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223225500139.png"></p><p>这里面b叫做<strong>偏置</strong></p><p>可以看出<em>w</em>1和<em>w</em>2是控制输入信号的重要性的参数，而偏置b是调整神经元被激活的容易程度的参数</p><p>我们再进一步简化上面函数的形式，引入一个新的函数$h(x)$，将上面的函数改写：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223230119601.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223230140674.png"></p><p>函数$h(x)$对输入信号的总和进行转化，转化后的值就是输出y</p><p>这个函数$h(x)$就是<strong>激活函数</strong></p><p>我们可以将上面的感知机进行细化，展示出激活函数的运算过程：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223230609708.png"></p><p>$a&#x3D;w_1x_1+w_2x_2+b$, $y&#x3D;h(a)$ </p><p><em>a</em>计算计算加权输入信号和偏置的总和，用<em>h</em>(x)函数将<em>a</em>转换为输出<em>y</em></p><p>这样的激活函数称为<strong>阶跃函数</strong>，超过某个阈值就会改变函数的输出，函数的图像呈阶梯状：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223231248638.png"></p><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>神经网络可以看作是多层感知机，并且使用的激活函数不再是阶跃函数了</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223233340355.png"></p><p>上图展示的是一个简单的3层(从0开始计算)神经网络</p><p>先来看一下常用的激活函数：</p><h3 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a><code>sigmoid</code>函数</h3><p><code>sigmoid</code>函数的表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223233716730.png"></p><p>可以通过<code>python</code>简单的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pylab <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment">###sigmoid function</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x)) <br><br>X = np.arange(-<span class="hljs-number">5.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">0.1</span>)<br>Y = sigmoid(X)<br>plt.plot(X, Y)<br>plt.ylim(-<span class="hljs-number">0.1</span>, <span class="hljs-number">1.1</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223234952100.png"></p><p><code>sigmoid</code>函数和阶跃函数的主要区别在于其是平滑的曲线，连续可导</p><h3 id="ReLU函数"><a href="#ReLU函数" class="headerlink" title="ReLU函数"></a><code>ReLU</code>函数</h3><p><code>ReLU</code>全称为Rectified Linear Unit，线性整流函数</p><p><code>ReLU</code>函数在输入大于0时，直接输出该值；在输入小于等于0时，输出0:</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110740713.png" alt="image-20210103110740713"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##relu</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">relu</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> np.maximum(<span class="hljs-number">0</span>, x)<br><br>x = np.arange(-<span class="hljs-number">5.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">0.1</span>)<br>y = relu(x)<br>plt.plot(x, y)<br>plt.ylim(-<span class="hljs-number">1.0</span>, <span class="hljs-number">5.5</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110758248.png" alt="image-20210103110758248"></p><h3 id="3层神经网络的实现"><a href="#3层神经网络的实现" class="headerlink" title="3层神经网络的实现"></a>3层神经网络的实现</h3><p>各层间信号的传递可以用下图来表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110840483.png" alt="image-20210103110840483"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#####three layer network</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_network</span>():<br> network = &#123;&#125;<br> network[<span class="hljs-string">&#x27;W1&#x27;</span>] = np.array([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.5</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.6</span>]])<br> network[<span class="hljs-string">&#x27;b1&#x27;</span>] = np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>])<br> network[<span class="hljs-string">&#x27;W2&#x27;</span>] = np.array([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.4</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>], [<span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>]])<br> network[<span class="hljs-string">&#x27;b2&#x27;</span>] = np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>])<br> network[<span class="hljs-string">&#x27;W3&#x27;</span>] = np.array([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>]])<br> network[<span class="hljs-string">&#x27;b3&#x27;</span>] = np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>])<br> <span class="hljs-keyword">return</span> network<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">network, x</span>):<br> W1, W2, W3 = network[<span class="hljs-string">&#x27;W1&#x27;</span>], network[<span class="hljs-string">&#x27;W2&#x27;</span>], network[<span class="hljs-string">&#x27;W3&#x27;</span>]<br> b1, b2, b3 = network[<span class="hljs-string">&#x27;b1&#x27;</span>], network[<span class="hljs-string">&#x27;b2&#x27;</span>], network[<span class="hljs-string">&#x27;b3&#x27;</span>]<br> a1 = np.dot(x, W1) + b1<br> z1 = sigmoid(a1)<br> a2 = np.dot(z1, W2) + b2<br> z2 = sigmoid(a2)<br> a3 = np.dot(z2, W3) + b3<br> y = identity_function(a3)<br> <span class="hljs-keyword">return</span> y<br><br><br>network = init_network()<br>x = np.array([<span class="hljs-number">1.0</span>, <span class="hljs-number">0.5</span>])<span class="hljs-comment">##初始输入</span><br>y = forward(network, x)<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><p>这里面需要注意的点是输出层的激活函数使用的是恒等函数，一般地，回归问题可以使用恒等函数，二元分类问题可以使用 sigmoid函数，多元分类问题可以使用 softmax函数</p><p>softmax函数可以表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201227183549421.png"></p><p>但是这个函数在进行计算的时候，指数运算可能会产生非常大的数(可能会出现Inf)，需要对其进行变换：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110919951.png" alt="image-20210103110919951"></p><p>可以将$C’$替换为输入信号的最大值的负值来减小运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">softmax</span>(<span class="hljs-params">a</span>):<br> c = np.<span class="hljs-built_in">max</span>(a)<br> exp_a = np.exp(a - c) <span class="hljs-comment"># 溢出对策</span><br> sum_exp_a = np.<span class="hljs-built_in">sum</span>(exp_a)<br> y = exp_a / sum_exp_a<br> <span class="hljs-keyword">return</span> y<br><br> a = np.array([<span class="hljs-number">0.3</span>, <span class="hljs-number">2.9</span>, <span class="hljs-number">4.0</span>])<br> y = softmax(a)<br> <span class="hljs-built_in">print</span>(y)<span class="hljs-comment">#[0.01821127 0.24519181 0.73659691]</span><br> np.<span class="hljs-built_in">sum</span>(y)<span class="hljs-comment">#1.0</span><br></code></pre></td></tr></table></figure><p>softmax函数会将输入信号映射到0~1上，并且转化后的值总和为1，这就使我们可以把softmax函数的输出解释为</p><p>概率值；另外指数函数在求导时也比较方便(导数还是指数函数)</p><h2 id="神经网络的学习"><a href="#神经网络的学习" class="headerlink" title="神经网络的学习"></a>神经网络的学习</h2><p>神经网络的学习过程就是通过某种指标来寻找最优权重参数，这个指标就称为<strong>损失函数</strong>,损失函数表示的是神经网络对当前训练数据在多大程度上不拟合，所以目标就是使损失函数尽可能小</p><p>损失函数一般使用均方误差和交叉熵误差</p><p><strong>均方误差</strong>如下所示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110936719.png" alt="image-20210103110936719"></p><p>y表示神经网络得输出，t表示训练数据，k表示维度</p><p>分类问题和回归问题都可以使用均方误差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###mean_squared_error</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mean_squared_error</span>(<span class="hljs-params">y, t</span>):<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0.5</span> * np.<span class="hljs-built_in">sum</span>((y-t)**<span class="hljs-number">2</span>)<br><br><br>t = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>y = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>]<br>mean_squared_error(np.array(y), np.array(t))<br><span class="hljs-comment">##0.09750000000000003</span><br><br>y = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>]<br>mean_squared_error(np.array(y), np.array(t))<br><span class="hljs-comment">##0.5975</span><br></code></pre></td></tr></table></figure><p><strong>交叉熵误差</strong>一般作为分类问题的损失函数：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110944944.png" alt="image-20210103110944944"></p><p>y表示神经网络的输出，t表示训练数据的标签，相应的类标签为1，其他为0，所以交叉熵误差只计算正确标签对应的神经网络的输出，当这个输出越接近于1，E值就越小(等于1时,E&#x3D;0)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cross_entropy_error</span>(<span class="hljs-params">y, t</span>):<br> delta = <span class="hljs-number">1e-7</span><br> <span class="hljs-keyword">return</span> -np.<span class="hljs-built_in">sum</span>(t * np.log(y + delta))<br><br>t = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>y = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>]<br>cross_entropy_error(np.array(y), np.array(t))<br><span class="hljs-comment">##0.510825457099338</span><br><br>y = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>]<br>cross_entropy_error(np.array(y), np.array(t))<br><span class="hljs-comment">##2.302584092994546</span><br></code></pre></td></tr></table></figure><p>神经网络学习的任务就是找到损失函数取最小值(或尽可能小)时的参数(权重和偏置)，这个过程可以通过梯度法来实现</p><h3 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h3><p>在介绍梯度之前需要知道导数的概念</p><p>导数表示的是某个瞬间的变化量，即<em>x</em>的微小变化将导致函数<em>f</em>（<em>x</em>）的值在多大程度上发生变化：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201224122322725.png"></p><p>在实现求导的时候，可以人为导入一个微小的h，并且使用中心差分的形式($f(x+h)-f(x-h)$,以x为中心可以减少误差)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">numerical_diff</span>(<span class="hljs-params">f, x</span>):<br> h = <span class="hljs-number">1e-4</span><br> <span class="hljs-keyword">return</span> (f(x+h) - f(x-h)) / (<span class="hljs-number">2</span>*h)<br></code></pre></td></tr></table></figure><p>这种通过微小的差分来求导数的过程称为数值微分，和利用数学推导求导数的解析性求导区分</p><p>当我们需要对有多个变量的函数中每个变量进行求导，这个时候的导数就叫做偏导数，求偏导数就是将某个变量定为目标变量，其余变量固定为常数，然后对目标变量求导的过程</p><p>比如有一个二变量的函数：$f(x_0,x_1)&#x3D;x_0^2+x_1^2$ ,求$x_0&#x3D;3,x_1&#x3D;4$的时候，关于各个变量的偏导数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##定义函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function_2</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> x[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span> + x[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>求偏导就是将无关的变量设为常量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##x0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function_tmp1</span>(<span class="hljs-params">x0</span>):<br><span class="hljs-keyword">return</span> x0*x0 + <span class="hljs-number">4.0</span>**<span class="hljs-number">2.0</span><br><br>numerical_diff(function_tmp1, <span class="hljs-number">3.0</span>)<span class="hljs-comment">#6.00000000000378</span><br><br><span class="hljs-comment">##x1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function_tmp2</span>(<span class="hljs-params">x1</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-number">3.0</span>**<span class="hljs-number">2.0</span> + x1*x1<br><br>numerical_diff(function_tmp2, <span class="hljs-number">4.0</span>)<span class="hljs-comment">#7.999999999999119</span><br></code></pre></td></tr></table></figure><p>由全部变量的偏导数汇总而成的向量称为<strong>梯度</strong>（gradient）比如对于上面的二变量函数，梯度就是$(\frac{\partial f}{\partial x_0},\frac{\partial f}{\partial x_1})$ 构成的向量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">numerical_gradient</span>(<span class="hljs-params">f, x</span>):<br>    h = <span class="hljs-number">1e-4</span> <br>    grad = np.zeros_like(x) <span class="hljs-comment"># 生成和x形状相同的数组</span><br>    <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x.size):<br>        tmp_val = x[idx]<br>        <span class="hljs-comment"># f(x+h)的计算</span><br>        x[idx] = tmp_val + h<br>        fxh1 = f(x)<br>        <span class="hljs-comment"># f(x-h)的计算</span><br>        x[idx] = tmp_val - h<br>        fxh2 = f(x)<br>        grad[idx] = (fxh1 - fxh2) / (<span class="hljs-number">2</span>*h)<br>        x[idx] = tmp_val <span class="hljs-comment"># 还原值</span><br>    <span class="hljs-keyword">return</span> grad<br><br>numerical_gradient(function_2, np.array([<span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>]))<br><span class="hljs-comment">#array([6., 8.])</span><br></code></pre></td></tr></table></figure><p>计算这个函数各点的梯度：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111038666.png" alt="image-20210103111038666"></p><p>这个箭头就代表了梯度，可以看到梯度的方向指向这个函数的最小值(0,0); 虽然在其他情况下梯度的方向并不总是指向最小值，但沿着它的方向能够最大限度地减小函数的值；因此通过不断地沿梯度方向前进，逐渐减小函数值的过程就是<strong>梯度法</strong>（gradient method）(一般指的的梯度下降)</p><p>用数学式表示梯度法：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111049842.png" alt="image-20210103111049842"></p><p>其中<em>η</em>表示更新量，表示每次沿着梯度的方向下降的程度，在神经网络中称为<strong>学习率</strong>(learning rate)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##gradient_descent</span><br><span class="hljs-comment">##f 进行最优化的函数</span><br><span class="hljs-comment">##init_x 初始值</span><br><span class="hljs-comment">##lr 学习率</span><br><span class="hljs-comment">##step_num 迭代次数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gradient_descent</span>(<span class="hljs-params">f, init_x, lr=<span class="hljs-number">0.01</span>, step_num=<span class="hljs-number">100</span></span>):<br>    x = init_x<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(step_num):<br>     grad = numerical_gradient(f, x)<br>     x -= lr * grad<br>    <span class="hljs-keyword">return</span> x<br><br>init_x = np.array([-<span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>])<br>gradient_descent(function_2, init_x=init_x, lr=<span class="hljs-number">0.1</span>, step_num=<span class="hljs-number">100</span>)<br><span class="hljs-comment">#array([-6.11110793e-10,  8.14814391e-10])</span><br></code></pre></td></tr></table></figure><p>像学习率这样的参数称为<strong>超参数</strong> ， 神经网络的权重参数是通过学习得到的，而超参数是人为设定的，所以需要尝试</p><h3 id="学习算法的实现"><a href="#学习算法的实现" class="headerlink" title="学习算法的实现"></a>学习算法的实现</h3><p>神经网络的学习步骤可以分成以下几步：</p><ul><li>mini-batch: 从训练数据中随机选出一部分数据，这部分数据称为mini batch。我们的目标是减小mini batch的损失函数的值</li><li>计算梯度：为了减小mini batch的损失函数的值，需要求出各个权重参数的梯度；梯度表示损失函数的值减小最多的方向</li><li>更新参数：将权重参数沿梯度方向进行微小更新</li><li>迭代：重复前3个步骤</li></ul><p>由于选择mini batch是随机的，因此这种方法叫做<strong>随机梯度下降法</strong>(stochastic gradient descent,SGD)</p><p>下面是两层神经网络的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###TwoLayerNet</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TwoLayerNet</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, input_size, hidden_size, output_size, weight_init_std=<span class="hljs-number">0.01</span></span>):<br>        <span class="hljs-comment"># 初始化权重</span><br>        self.params = &#123;&#125;<br>        self.params[<span class="hljs-string">&#x27;W1&#x27;</span>] = weight_init_std * np.random.randn(input_size, hidden_size)<br>        self.params[<span class="hljs-string">&#x27;b1&#x27;</span>] = np.zeros(hidden_size)<br>        self.params[<span class="hljs-string">&#x27;W2&#x27;</span>] = weight_init_std * np.random.randn(hidden_size, output_size)<br>        self.params[<span class="hljs-string">&#x27;b2&#x27;</span>] = np.zeros(output_size)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, x</span>):<br>        W1, W2 = self.params[<span class="hljs-string">&#x27;W1&#x27;</span>], self.params[<span class="hljs-string">&#x27;W2&#x27;</span>]<br>        b1, b2 = self.params[<span class="hljs-string">&#x27;b1&#x27;</span>], self.params[<span class="hljs-string">&#x27;b2&#x27;</span>]<br>    <br>        a1 = np.dot(x, W1) + b1<br>        z1 = sigmoid(a1)<br>        a2 = np.dot(z1, W2) + b2<br>        y = softmax(a2)<br>        <br>        <span class="hljs-keyword">return</span> y<br>        <br>    <span class="hljs-comment"># x:输入数据, t:监督数据</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">self, x, t</span>):<br>        y = self.predict(x)<br>        <br>        <span class="hljs-keyword">return</span> cross_entropy_error(y, t)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accuracy</span>(<span class="hljs-params">self, x, t</span>):<br>        y = self.predict(x)<br>        y = np.argmax(y, axis=<span class="hljs-number">1</span>)<br>        t = np.argmax(t, axis=<span class="hljs-number">1</span>)<br>        <br>        accuracy = np.<span class="hljs-built_in">sum</span>(y == t) / <span class="hljs-built_in">float</span>(x.shape[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> accuracy<br>        <br>    <span class="hljs-comment"># x:输入数据, t:监督数据</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numerical_gradient</span>(<span class="hljs-params">self, x, t</span>):<br>        loss_W = <span class="hljs-keyword">lambda</span> W: self.loss(x, t)<br>        <br>        grads = &#123;&#125;<br>        grads[<span class="hljs-string">&#x27;W1&#x27;</span>] = numerical_gradient(loss_W, self.params[<span class="hljs-string">&#x27;W1&#x27;</span>])<br>        grads[<span class="hljs-string">&#x27;b1&#x27;</span>] = numerical_gradient(loss_W, self.params[<span class="hljs-string">&#x27;b1&#x27;</span>])<br>        grads[<span class="hljs-string">&#x27;W2&#x27;</span>] = numerical_gradient(loss_W, self.params[<span class="hljs-string">&#x27;W2&#x27;</span>])<br>        grads[<span class="hljs-string">&#x27;b2&#x27;</span>] = numerical_gradient(loss_W, self.params[<span class="hljs-string">&#x27;b2&#x27;</span>])<br>        <br>        <span class="hljs-keyword">return</span> grads<br></code></pre></td></tr></table></figure><p>我们接下来在MNIST数据集上(MNIST的图像数据是28像素 <em>×</em> 28像素的灰度图像,各个像素的取值在0到255之间。每个图像数据都相应地标有相应的标签)利用这个两层神经网络实现手写体的识别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###MNIST</span><br><span class="hljs-comment"># 读入数据</span><br><span class="hljs-keyword">from</span> dataset.mnist <span class="hljs-keyword">import</span> load_mnist<br>(x_train, t_train), (x_test, t_test) = load_mnist(normalize=<span class="hljs-literal">True</span>, one_hot_label=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(x_train.shape)<br><span class="hljs-built_in">print</span>(t_train.shape)<br><span class="hljs-built_in">print</span>(x_test.shape)<br><span class="hljs-built_in">print</span>(t_test.shape)<br><br><br>network = TwoLayerNet(input_size=<span class="hljs-number">784</span>, hidden_size=<span class="hljs-number">50</span>, output_size=<span class="hljs-number">10</span>)<br><br>iters_num = <span class="hljs-number">10000</span>  <span class="hljs-comment"># 适当设定循环的次数</span><br>train_size = x_train.shape[<span class="hljs-number">0</span>]<br>batch_size = <span class="hljs-number">100</span><br>learning_rate = <span class="hljs-number">0.1</span><br><br>train_loss_list = []<br>train_acc_list = []<br>test_acc_list = []<br><br><span class="hljs-comment">##平均每个epoch的重复次数</span><br>iter_per_epoch = <span class="hljs-built_in">max</span>(train_size / batch_size, <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iters_num):<br>    batch_mask = np.random.choice(train_size, batch_size)<br>    x_batch = x_train[batch_mask]<br>    t_batch = t_train[batch_mask]<br>    <br>    <span class="hljs-comment"># 计算梯度</span><br>    grad = network.numerical_gradient(x_batch, t_batch)<br>    <br>    <span class="hljs-comment"># 更新参数</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;W1&#x27;</span>, <span class="hljs-string">&#x27;b1&#x27;</span>, <span class="hljs-string">&#x27;W2&#x27;</span>, <span class="hljs-string">&#x27;b2&#x27;</span>):<br>        network.params[key] -= learning_rate * grad[key]<br>    <br>    <span class="hljs-comment">##记录学习过程</span><br>    loss = network.loss(x_batch, t_batch)<br>    train_loss_list.append(loss)<br>    <br>    <span class="hljs-comment">#计算每个epoch的识别精度</span><br>    <span class="hljs-keyword">if</span> i % iter_per_epoch == <span class="hljs-number">0</span>:<br>        train_acc = network.accuracy(x_train, t_train)<br>        test_acc = network.accuracy(x_test, t_test)<br>        train_acc_list.append(train_acc)<br>        test_acc_list.append(test_acc)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;train acc, test acc | &quot;</span> + <span class="hljs-built_in">str</span>(train_acc) + <span class="hljs-string">&quot;, &quot;</span> + <span class="hljs-built_in">str</span>(test_acc))<br><br><span class="hljs-comment"># 绘制图形</span><br>markers = &#123;<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-string">&#x27;s&#x27;</span>&#125;<br>x = np.arange(<span class="hljs-built_in">len</span>(train_acc_list))<br>plt.plot(x, train_acc_list, label=<span class="hljs-string">&#x27;train acc&#x27;</span>)<br>plt.plot(x, test_acc_list, label=<span class="hljs-string">&#x27;test acc&#x27;</span>, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;epochs&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;accuracy&quot;</span>)<br>plt.ylim(<span class="hljs-number">0</span>, <span class="hljs-number">1.0</span>)<br>plt.legend(loc=<span class="hljs-string">&#x27;lower right&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>先将所有训练数据随机打乱，然后按指定的批次大小，按序生成mini batch，给每个batch编号，按顺序遍历所有的batch，遍历一次所有的batch称为一个epoch(但是上面的实现是随机选取的)</p><h3 id="误差反向传播算法"><a href="#误差反向传播算法" class="headerlink" title="误差反向传播算法"></a>误差反向传播算法</h3><p>上面我们通过数值微分来计算权重参数的梯度，但是计算非常费时间，而误差反向传播算法就是一个可以高效计算权重参数的方法，这里通过<strong>计算图</strong>的方式来理解误差方向传播计算梯度的方法</p><p>先来介绍计算图：</p><p>问题是：超市买了2个100日元一个的苹果，消费税是10%，请计算支付金额</p><p>可以通过计算图来计算这个过程：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111113876.png" alt="image-20210103111113876"></p><p>箭头上面标上结果，在节点内部进行计算</p><p>这种从左到右的计算方向称为正向传播，如果我们现在要计算<em>苹果价格的波动会在多大程度上影响最终的支付金额</em>，也就是要计算最终的支付金额对苹果价格的导数，这个时候就可以从右到左进行计算导数，这个过程就叫<strong>反向传播</strong></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111122966.png" alt="image-20210103111122966"></p><p>反向传播的计算顺序为：将传来的信号乘以局部导数再传递给下个节点</p><p>反向传播实现的关键是<strong>链式法则</strong>：</p><blockquote><p>如果某个函数由复合函数表示，则该复合函数的导数可以用构成复合函数的各个函数的导数的乘积表示</p></blockquote><p>举个例子：有一个函数：$z&#x3D;(x+y)^2$是复合函数，可以拆成两个函数：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111132022.png" alt="image-20210103111132022"></p><p>那么这个函数对x的偏导数就可以这样求：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111139878.png" alt="image-20210103111139878"></p><p>这个过程利用计算图求解如下：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111151298.png" alt="image-20210103111151298"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111206447.png" alt="image-20210103111206447"></p><p>我们现在基于计算图来实现各个层的反向传播</p><p>首先是加法节点：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111217127.png" alt="image-20210103111217127"></p><p>左边是正向传播，右边是反向传播</p><p>由于$\frac{\partial f}{\partial x}和\frac{\partial f}{\partial y}$都等于1，所以加法节点将上游的值<strong>原封不动地输出到下游</strong></p><p>然后是乘法节点，考虑$z&#x3D;xy$：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111230193.png" alt="image-20210103111230193"></p><p>因此乘法的反向传播会<strong>乘以输入信号的翻转值</strong>，所以在实现乘法的反向传播的时候需要保存正向传播的输入信号</p><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MulLayer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.x = <span class="hljs-literal">None</span><br>        self.y = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x<br>        self.y = y<br>        out = x * y<br>        <span class="hljs-keyword">return</span> out<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">backward</span>(<span class="hljs-params">self, dout</span>):<br>        dx = dout * self.y <span class="hljs-comment"># 翻转x和y</span><br>        dy = dout * self.x<br>        <span class="hljs-keyword">return</span> dx, dy<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddLayer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x, y</span>):<br>        out = x + y<br>        <span class="hljs-keyword">return</span> out<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">backward</span>(<span class="hljs-params">self, dout</span>):<br>        dx = dout * <span class="hljs-number">1</span><br>        dy = dout * <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> dx, dy<br></code></pre></td></tr></table></figure><p>接下来实现激活函数ReLU层和Sigmoid层</p><p><strong>ReLU激活函数</strong>及其导数：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111246475.png" alt="image-20210103111246475"></p><p>用计算图表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111257385.png" alt="image-20210103111257385"></p><p>ReLU激活函数就像一个开关，正向传播的时候有电流通过就将开关打开，这个时候反向传播电流就会直接通过；如果正向传播时没有电流就把开关关闭，反向传播时就不会有电流通过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Relu</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.mask = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        self.mask = (x &lt;= <span class="hljs-number">0</span>)<br>        out = x.copy()<br>        out[self.mask] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> out<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">backward</span>(<span class="hljs-params">self, dout</span>):<br>        dout[self.mask] = <span class="hljs-number">0</span><br>        dx = dout<br>        <span class="hljs-keyword">return</span> dx<br></code></pre></td></tr></table></figure><p><strong>sigmoid函数</strong>为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111308934.png" alt="image-20210103111308934"></p><p>利用计算图表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111321535.png" alt="image-20210103111321535"></p><p>这里面出现了几个新的节点：<code>/</code>和<code>exp</code>节点</p><p><code>/</code>节点表示的函数为：$y&#x3D;\frac{1}{x}$ ,导数为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111330640.png" alt="image-20210103111330640"></p><p>因此该节点将上游的值乘以正向传播的输出平方后再乘以-1传给下游</p><p><code>exp</code>节点表示$y&#x3D;exp(x)$ 其导数还是其自身：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111338055.png" alt="image-20210103111338055"></p><p>因此<code>exp</code>节点将上游的值乘以正向传播的输出后传给下游</p><p>所以结合前面的<code>+</code>和<code>×</code>节点，sigmoid的导数计算图为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111349060.png" alt="image-20210103111349060"></p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201224171928291.png" alt="image-20201224171928291" style="zoom:67%;" /><p>进一步整理得到：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111358136.png" alt="image-20210103111358136"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sigmoid</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.out = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        out = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))<br>        self.out = out<br>        <span class="hljs-keyword">return</span> out<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">backward</span>(<span class="hljs-params">self, dout</span>):<br>        dx = dout * (<span class="hljs-number">1.0</span> - self.out) * self.out<br>        <span class="hljs-keyword">return</span> dx<br></code></pre></td></tr></table></figure><p>对输入信号进行加权求和的层叫做<strong>Affine层</strong>，可以用如下的计算图来表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111408215.png" alt="image-20210103111408215"></p><p>其中dot表示矩阵相乘</p><p>其反向传播过程：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111416858.png" alt="image-20210103111416858"></p><p>对于1，2可以类比于乘法，再根据矩阵的维度来理解:比如$\frac{\partial (X \cdot W) }{\partial X}$  如果结果是W，那么W的维度为(2,3)而$\frac{\partial L}{\partial Y}$的维度为(3,1),这样就不能相乘，所以结果是W的转置</p><p>基于上面的计算图，可以使用python来实现<strong>Affine层</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Affine</span>:<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, W, b</span>):<br> self.W = W<br> self.b = b<br> self.x = <span class="hljs-literal">None</span><br> self.dW = <span class="hljs-literal">None</span><br> self.db = <span class="hljs-literal">None</span><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br> self.x = x<br> out = np.dot(x, self.W) + self.b<br> <span class="hljs-keyword">return</span> out<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">backward</span>(<span class="hljs-params">self, dout</span>):<br> dx = np.dot(dout, self.W.T)<br> self.dW = np.dot(self.x.T, dout)<br> self.db = np.<span class="hljs-built_in">sum</span>(dout, axis=<span class="hljs-number">0</span>)<br> <span class="hljs-keyword">return</span> dx<br></code></pre></td></tr></table></figure><p>最后还有一个比较重要的是<strong>Softmax-with-Loss 层</strong> ,也就是包含Softmax函数和交叉熵误差的层</p><p>交叉熵误差表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111429635.png" alt="image-20210103111429635"></p><p>用计算图表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111437312.png" alt="image-20210103111437312"></p><p>这个反向传播的要注意的就是log节点：</p><p>log函数为$y&#x3D;log(x)$ ,所以其导数为$\frac{\partial y }{\partial x}&#x3D;\frac{1}{x}$ ，而加节点(原封不动)和乘节点(翻转)之前已经见过了</p><p>因此交叉熵误差的反向传播用计算图表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111446952.png" alt="image-20210103111446952"></p><p>Softmax函数为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111453904.png" alt="image-20210103111453904"></p><p>用计算图表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111502001.png" alt="image-20210103111502001"></p><p>反向传播可以分成几个步骤：</p><ul><li><p>交叉熵误差层传过来的值</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111512352.png" alt="image-20210103111512352"></p></li><li><p>乘节点将正向传播的值翻转后相乘：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111523824.png" alt="image-20210103111523824"></p></li><li><p>正向传播时若有分支流出，则反向传播时它们的反向传播的值会相加，因此对于除节点反向传播的输入为$-S(t_1+t_2+t_3)$ 然后进行除节点的反向传播:$-S(t_1+t_2+t_3)×(\frac{1}{S})^2&#x3D;\frac{1}{S}(t_1+t_2+t_3)$ ,这里面t表示训练数据的标签为ont-hot向量(0,1向量)，因此结果为$\frac{1}{S}$，用计算图表示如下：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111536294.png" alt="image-20210103111536294"></p></li><li><p>加节点原封不动的传递，乘节点进行翻转：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111547342.png" alt="image-20210103111547342"></p></li><li><p>exp节点根据前面的推导，将上游的值乘以正向传播的输出后传给下游，也就是$(\frac{1}{S}-\frac{t_1}{exp(a_1)})exp(a_1)$ 整理可得$y_1-t_1$ :</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201227191132812.png"></p></li></ul><p>将上面的交叉熵误差和softmax总结起来可以用下面的计算图表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111609941.png" alt="image-20210103111609941"></p><p>这样就可以使用python进行简单的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SoftmaxWithLoss</span>:<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br> self.loss = <span class="hljs-literal">None</span> <span class="hljs-comment"># 损失</span><br> self.y = <span class="hljs-literal">None</span> <span class="hljs-comment"># softmax的输出</span><br> self.t = <span class="hljs-literal">None</span> <span class="hljs-comment"># 监督数据（one-hot vector）</span><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x, t</span>):<br> self.t = t<br> self.y = softmax(x)<br> self.loss = cross_entropy_error(self.y, self.t)<br> <span class="hljs-keyword">return</span> self.loss<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">backward</span>(<span class="hljs-params">self, dout=<span class="hljs-number">1</span></span>):<br> batch_size = self.t.shape[<span class="hljs-number">0</span>]<br> dx = (self.y - self.t) / batch_size<br> <span class="hljs-keyword">return</span> dx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[2022060322455249eb93ed5ca904f342add95f29e58706]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[.markdown-body img {    margin: auto;    display: block;    box-shadow: 0 5px 11px 0 rgba(0,0,0,.18),0 4px 15px 0 rgba(0,0,0,.15);    border-radius: 3px;}]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[/* -----------------设置代码块最大长度，添加纵向滚动条------------------------------ *//* .protyle-wysiwyg:not([id="preview"])  .code-block {    overflow-y: auto;    max-height: 80vh;}.protyle-wysiwyg:not([id="preview"])  .code-block::-webkit-scrollbar-thumb{    border-left:solid 0px transparent}.protyle-wysiwyg:not([id="preview"])  .li .code-block:not(:nth-child(2)) {    overflow-y: inherit;    max-height: inherit;} *//* -------------------------------代码块样式-------------------------------------- */.protyle-reset .hljs,.protyle-wysiwyg .hljs ,.b3-typography .hljs{    padding-top: 4px !important;    padding-bottom: 4px !important;    padding-left: 16px;    font-family: var(--b3-font-family-code);    background-size: 20px 20px;    background-image: none !important;    background: #fff;    border-radius: 0px 0px 4px 4px;}.code-block {    position: relative;    display: block;    border-radius: 4px;    background: #e6ebf1 ;    /* border: 1.5px solid rgb(0 0 0 / 8%); */    box-shadow:  0 0 0 1px #1e25351a;    /* margin-top: 15px !important; */    padding-top: 32px !important;}.protyle-wysiwyg[id="preview"] .code-block {    box-shadow:  0 0 0 1.5px #1e25351a;}/* .code-block .protyle-action {    position: relative;    .hljs::before} */.code-block::after{    content: ' ';    position: absolute;    background: #fa625c;    box-shadow: 23px 0 #fdbc40, 45px 0 #35cd4b;    border-radius: 50%;    /* margin-top: 10px; */    top:10px;    left: 15px;    height: 12px;    width: 12px;    z-index: 1;}/*  代码块行数*/.protyle-linenumber__rows {    margin-top: 32px !important;    background-color: var(--b3-protyle-code-background);    font-family: var(--b3-font-family-code);    opacity: 0.5;    width: 45px;    left:0px;}/* 代码语言显示 */.code-block .protyle-icons {    background-color: transparent;    border-radius: 4px;}.code-block .protyle-icons>span:hover {    background-color: #cad8dd;}.code-block .protyle-icons .protyle-action__language,.code-block .protyle-icons>span{    color: rgba(13, 56, 50, 0.719);    font-weight: 600;}/* 代码块编辑时不闪 */.code-block .protyle-icons {    opacity: 1;}.code-block .protyle-icons .protyle-action__copy {    opacity: 0;}.code-block:hover .protyle-icons .protyle-action__copy {    opacity: 1;}.code-block:focus-within .protyle-icons .protyle-action__copy{    opacity: 0;}.code-block .protyle-icons .protyle-action__copy:hover{    opacity: 1;}.code-block:hover .protyle-icons {    opacity: 1 !important;}]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>上海科技大学在读博士生，研究方向：癌症多组学数据分析，邮箱：<a href="mailto:&#49;&#x36;&#x35;&#48;&#52;&#54;&#52;&#53;&#x30;&#53;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#x6d;">&#49;&#x36;&#x35;&#48;&#52;&#54;&#52;&#53;&#x30;&#53;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#x6d;</a></p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[function load_language() {    var blocks = $('code.hljs');    for (var i = 0; i < blocks.length; i++) {        var span = document.createElement('span');        span.classList.add('codeblock-language');        span.innerHTML = blocks[i].classList[1];        blocks[i].insertBefore(span, blocks[i].children[0]);    }}$(document).ready(load_language);]]></content>
    
  </entry>
  
  
  
</search>
