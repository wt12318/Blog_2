<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【R】switch函数用法</title>
    <link href="/2021/05/26/r-switch/"/>
    <url>/2021/05/26/r-switch/</url>
    
    <content type="html"><![CDATA[<p><code>switch</code>的基本用法为<code>switch (expression, list)</code>  <br>第一个参数是表达式，第二个参数是列表；基于表达式的值返回列表中相应元素(按照名称)的值<br>来看一些具体的例子：<br>如果expression的结果是整数，那么会按照位置返回值  <br>如果expression的结果是字符，那么会按照其后参数构成的列表中元素的名称返回相应的值</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">switch</span>(<span class="hljs-number">1</span>,x=<span class="hljs-number">1</span>,y=<span class="hljs-number">2</span>)<br><span class="hljs-comment">## [1] 1</span><br><br>centre &lt;- <span class="hljs-keyword">function</span>(x, type) &#123;<br>  <span class="hljs-built_in">switch</span>(type,<br>         mean = mean(x),<br>         median = median(x),<br>         trimmed = mean(x, trim = <span class="hljs-number">.1</span>))<br>&#125;<br><br>centre(<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),<span class="hljs-string">&quot;mean&quot;</span>)<br><span class="hljs-comment">## [1] 2</span><br></code></pre></td></tr></table></figure><p>对于数字的情况，如果输入是负数或者超出范围，不会报错，返回的是NULL(<code>print</code>后才可见)</p><p>对于字符，如果输入没有匹配的名称也会返回NULL，这个时候可以在list的最后加上没有名称的值捕获其他的输入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> <span class="hljs-built_in">c</span>(-<span class="hljs-number">1</span>:<span class="hljs-number">3</span>, <span class="hljs-number">9</span>))  print(<span class="hljs-built_in">switch</span>(i, <span class="hljs-number">1</span>, <span class="hljs-number">2</span> , <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br><span class="hljs-comment">## NULL</span><br><span class="hljs-comment">## NULL</span><br><span class="hljs-comment">## [1] 1</span><br><span class="hljs-comment">## [1] 2</span><br><span class="hljs-comment">## [1] 3</span><br><span class="hljs-comment">## NULL</span><br><br>print(<span class="hljs-built_in">switch</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-built_in">c</span>=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>))<br><span class="hljs-comment">## NULL</span><br>print(<span class="hljs-built_in">switch</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-built_in">c</span>=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br><span class="hljs-comment">## [1] 3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拉格朗日对偶性</title>
    <link href="/2021/03/28/lagrange_duality/"/>
    <url>/2021/03/28/lagrange_duality/</url>
    
    <content type="html"><![CDATA[<p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_17-38-13.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_17-40-35_1.jpg"><br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-28_17-40-35_0.jpg"></p><p>参考：李航《统计学习方法》</p>]]></content>
    
    
    <categories>
      
      <category>math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用NeoPredPipe预测新抗原</title>
    <link href="/2021/03/25/neo_pred/"/>
    <url>/2021/03/25/neo_pred/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/MathOnco/NeoPredPipe">NeoPredPipe</a>是一个可以从单区域或多区域测序得到的VCF文件来预测新抗原的流程工具,使用的注释软件为<code>ANNOVAR</code>;另外该软件在预测新抗原之后还有一个筛选步骤,这个筛选步骤是依据<a href="https://www.nature.com/articles/nature24473">2017 Nature</a>提出的<code>Neoantigen recognition potential</code>来进行的</p><h2 id="安装ANNOVAR"><a href="#安装ANNOVAR" class="headerlink" title="安装ANNOVAR"></a>安装ANNOVAR</h2><p>在<a href="https://annovar.openbioinformatics.org/en/latest/user-guide/download/">官网</a> 下载ANNOVAR软件(需要填申请表,下载链接会发到邮箱), ANNOVAR是用perl写的,所以在安装之前需要先下载安装perl</p><p>下载解压后将路径添加到PATH中,向<code>~/.bashrc</code>中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/public/slst/home/wutao2/software/annovar:<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><p>使用<code>source ~/.bashrc </code>激活PATH</p><p>下载注释所需的参考文件,这里下载的是<code>hg38的refgene</code>：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210325085447536.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">perl annotate_variation.pl --downdb --webfrom annovar --buildver hg38 refGene ~/software/annovar/humandb/<br><span class="hljs-comment"># -downdb表明该命令的用途是下载数据库</span><br><span class="hljs-comment"># -buildver指定基因组版本</span><br><span class="hljs-comment"># -webform annovar 从annovar提供的镜像下载</span><br><span class="hljs-comment"># refGene代表的是下载的数据库的名字</span><br><span class="hljs-comment">#~/software/annovar/humandb/表示数据库存储的路径</span><br></code></pre></td></tr></table></figure><p>下载的文件为：<code>hg38_refGeneMrna.fa</code>,<code>hg38_refGene.txt</code>和<code>hg38_refGeneVersion.txt</code></p><h2 id="下载PeptideMatch和参考多肽序列"><a href="#下载PeptideMatch和参考多肽序列" class="headerlink" title="下载PeptideMatch和参考多肽序列"></a>下载PeptideMatch和参考多肽序列</h2><p> <code>PeptideMatch</code>可以用来将得到的新抗原肽与参考肽序列进行比对,进而检查预测的<code>neoantigen</code>是不是”新”的</p><p><code>PeptideMatch</code>的下载地址在<a href="https://research.bioinformatics.udel.edu/peptidematch/commandlinetool.jsp">here</a>(需要安装<code>java</code>)</p><p>另外还需要下载<code>fasta </code>格式的参考蛋白序列,数据在<a href="https://www.ebi.ac.uk/reference_proteomes/">here</a>,可以看到人的数据为<a href="ftp://ftp.ebi.ac.uk/pub/databases/reference_proteomes/QfO/Eukaryota/UP000005640_9606.fasta.gz">UP000005640 9606 HUMAN Homo sapiens</a> 从FTP下载得到<code>UP000005640_9606.fasta</code>文件,然后利用<code>PeptideMatch</code>处理得到<code>index</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar ~/software/PeptideMatchCMD_1.0.jar -a index -d UP000005640_9606.fasta -i UP000005640_9606_index<br><br>Command line options: -a index -d UP000005640_9606.fasta -i UP000005640_9606_index <br>Indexing to directory &quot;/slst/home/wutao2/protein_database/UP000005640_9606_index&quot; ...<br>Indexing &quot;UP000005640_9606.fasta&quot; ...<br>Indexing &quot;UP000005640_9606.fasta&quot; finished<br>Time used: 00 hours, 00 mins, 24.869 seconds<br></code></pre></td></tr></table></figure><h2 id="安装和配置NeoPredPipe"><a href="#安装和配置NeoPredPipe" class="headerlink" title="安装和配置NeoPredPipe"></a>安装和配置NeoPredPipe</h2><p>该工具使用的是<code>python2.7</code>,所以需要先创建一个<code>python2</code>的<code>conda</code>环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">mamba create -n python27 python=2.7.13<br><br><span class="hljs-comment">###安装依赖</span><br>pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span class="hljs-comment">##设置镜像</span><br>python -m pip install biopython==1.70<br></code></pre></td></tr></table></figure><p>然后下载安装该软件</p><p>首先克隆<code>github</code>仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/MathOnco/NeoPredPipe.git<br></code></pre></td></tr></table></figure><p>然后需要配置<code>usr_path.ini</code>文件,将原始的文件内容进行修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[annovar]<br>convert2annovar = /public/slst/home/wutao2/software/annovar/convert2annovar.pl<br>annotatevariation = /public/slst/home/wutao2/software/annovar/annotate_variation.pl<br>coding_change =/public/slst/home/wutao2/software/annovar/coding_change.pl<br>gene_table = /public/slst/home/wutao2/software/annovar/humandb/hg38_refGene.txt<br>gene_fasta =/public/slst/home/wutao2/software/annovar/humandb/hg38_refGeneMrna.fa<br>humandb =/public/slst/home/wutao2/software/annovar/humandb/<br>[netMHCpan]<br>netMHCpan = /public/slst/home/wutao2/software/netMHCpan-4.1/netMHCpan<br>[PeptideMatch]<br>peptidematch_jar = /public/slst/home/wutao2/software/PeptideMatchCMD_1.0.jar<br>reference_index = /public/slst/home/wutao2/protein_database/UP000005640_9606_index/<br>[blast]<br>blastp =/public/slst/home/wutao2/software/ncbi-blast-2.11.0+/bin/blastp<br></code></pre></td></tr></table></figure><p>测试安装是否成功:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs bash">python ./NeoPredPipe.py --<span class="hljs-built_in">help</span><br>usage: NeoPredPipe.py [-h] [-E EPITOPES [EPITOPES ...]] [-l] [-d] [-r] [-p]<br>                      [--manualproc] [--EL] [-I VCFDIR] [-H HLAFILE]<br>                      [-o OUTPUTDIR] [-n OUTNAME] [-pp]<br>                      [-c COLREGIONS [COLREGIONS ...]] [-a] [-m]<br>                      [-x EXPRESSION] [--expmulti] [-t]<br><br>optional arguments:<br>  -h, --<span class="hljs-built_in">help</span>            show this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  -E EPITOPES [EPITOPES ...], --epitopes EPITOPES [EPITOPES ...]<br>                        Epitope lengths <span class="hljs-keyword">for</span> predictions. Default: 8 9 10<br>  -l                    Specifies whether to delete the ANNOVAR <span class="hljs-built_in">log</span> file.<br>                        Default: True. Note: Use <span class="hljs-keyword">for</span> debugging.<br>  -d                    Specifies whether to delete intermediate files created<br>                        by program. Default: True. Note: Set flag to resume<br>                        job.<br>  -r, --cleanrun        Specify this alone with no other options to clean-up a<br>                        run. Be careful that you mean to <span class="hljs-keyword">do</span> this!!<br>  -p, --preponly        Prep files only without running neoantigen<br>                        predictions. The prediction step takes the most time.<br>  --manualproc          Process vcf files into annovar-input format manually,<br>                        to avoid issues from non <span class="hljs-string">&#x27;genotype-calling&#x27;</span> formats.<br>  --EL                  Flag to perform netMHCpan predictions with Eluted<br>                        Ligand option (without the -BA flag). Please note that<br>                        the output will NOT be compatible with downstream<br>                        Recognition Potential analysis. Default=False (BA<br>                        predictions)<br><br>Required arguments:<br>  -I VCFDIR             Input vcf file directory location. Example: -I<br>                        ./Example/input_vcfs/<br>  -H HLAFILE            HLA file <span class="hljs-keyword">for</span> vcf patient samples OR directory with<br>                        patient-specific directories from running POLYSOLVER<br>                        (see Readme).<br>  -o OUTPUTDIR          Output Directory Path<br>  -n OUTNAME            Name of the output file <span class="hljs-keyword">for</span> neoantigen predictions<br><br>Post Processing Options:<br>  -pp                   Flag to perform post processing. Default=True.<br>  -c COLREGIONS [COLREGIONS ...]<br>                        Columns of regions within vcf that are not normal<br>                        within a multiregion vcf file after the format field.<br>                        Example: 0 is normal <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span> samples, tumor are the<br>                        other columns. Program can handle different number of<br>                        regions per vcf file.<br>  -a                    Flag to not filter neoantigen predictions and keep all<br>                        regardless of prediction value.<br>  -m                    Specifies whether to perform check <span class="hljs-keyword">if</span> predicted<br>                        epitopes match any normal peptide. If <span class="hljs-built_in">set</span> to True,<br>                        output is added as a column to neoantigens file.<br>                        Requires PeptideMatch specified <span class="hljs-keyword">in</span> usr_paths.ini.<br>                        Default=False<br>  -x EXPRESSION, --expression EXPRESSION<br>                        RNAseq expression quantification file(s), <span class="hljs-keyword">if</span><br>                        specified, expression information is added to output<br>                        tables.<br>  --expmulti            Flag to specify <span class="hljs-keyword">if</span> expression file(s) has information<br>                        on multiple regions <span class="hljs-keyword">in</span> multiple columns.<br>                        Default=False.<br>  -t                    Flag to turn off a neoantigen burden summary table.<br>                        Default=True.<br></code></pre></td></tr></table></figure><p>该软件的输入文件有：</p><ul><li><p>VCF文件：可以是单区域测序也可以是多区域测序</p></li><li><p>hla文件：hla文件的格式如下</p><table><thead><tr><th>Patient</th><th>HLA-A_1</th><th>HLA-A_2</th><th>HLA-B_1</th><th>HLA-B_2</th><th>HLA-C_1</th><th>HLA-C_2</th></tr></thead><tbody><tr><td>test1</td><td>hla_a_31_01_02</td><td>hla_a_02_01_80</td><td>hla_b_40_01_02</td><td>hla_b_50_01_01</td><td>hla_c_03_04_20</td><td>hla_c_06_02_01_02</td></tr><tr><td>test2</td><td>hla_a_01_01_01_01</td><td>NA</td><td>hla_b_07_02_01</td><td>NA</td><td>hla_c_01_02_01</td><td>NA</td></tr></tbody></table><p>  Patient名称要和vcf文件的名称相匹配；制表符分割；可以不要列名,但是顺序要匹配；当两个位点预测的HLA是一样的时候(A1和A2,B1和B2,C1和C2),需要用NA代替</p></li><li><p>表达文件：在-x参数后指定,制表符分割,第一列是gene id第二列是表达值;支持的id有：Ensembl gene ID, Ensembl transcript ID, RefSeq transcript ID, UCSC transcript ID</p></li></ul><p>使用测试数据进行测试(该软件提供的测试数据的参考基因组是<code>hg19</code>,因此将上面配置文件中的<code>gene_table</code>和<code>gene_fasta</code>改成<code>hg19</code>的)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">NeoPredPipe.py --preponly -I ~/software/NeoPredPipe/Example/input_vcfs -H   ~/software/NeoPredPipe/Example/HLAtypes/hlatypes.txt -o ./<span class="hljs-built_in">test</span>/ -n TestRun -c 1 2 -E 8 9 10<br><br>INFO: Annovar reference files of build hg19 were given, using this build <span class="hljs-keyword">for</span> all analysis.<br>INFO: Begin.<br>INFO: Running convert2annovar.py on /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test1.vcf<br>INFO: ANNOVAR VCF Conversion Process complete /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test1.vcf<br>INFO: Running annotate_variation.pl on ./<span class="hljs-built_in">test</span>/avready/test1.avinput<br>INFO: ANNOVAR annotation Process complete <span class="hljs-keyword">for</span> ./<span class="hljs-built_in">test</span>/avready/test1.avinput<br>INFO: Running coding_change.pl on ./<span class="hljs-built_in">test</span>/avannotated/test1.avannotated.exonic_variant_function<br>INFO: Coding predictions complete <span class="hljs-keyword">for</span> ./<span class="hljs-built_in">test</span>/avannotated/test1.avannotated.exonic_variant_function<br>INFO: Input files prepared and completed <span class="hljs-keyword">for</span> test1<br>INFO: Running convert2annovar.py on /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test2.vcf<br>INFO: ANNOVAR VCF Conversion Process complete /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test2.vcf<br>INFO: Running annotate_variation.pl on ./<span class="hljs-built_in">test</span>/avready/test2.avinput<br>INFO: ANNOVAR annotation Process complete <span class="hljs-keyword">for</span> ./<span class="hljs-built_in">test</span>/avready/test2.avinput<br>INFO: Running coding_change.pl on ./<span class="hljs-built_in">test</span>/avannotated/test2.avannotated.exonic_variant_function<br>INFO: Coding predictions complete <span class="hljs-keyword">for</span> ./<span class="hljs-built_in">test</span>/avannotated/test2.avannotated.exonic_variant_function<br>INFO: Input files prepared and completed <span class="hljs-keyword">for</span> test2<br>INFO: Complete.<br>INFO: Preprocessed intermediary files are <span class="hljs-keyword">in</span> avready, avannotated and fastaFiles. If you wish to perform epitope prediction, run the pipeline again without the --preponly flag, intermediary files will be automatically detected.<br></code></pre></td></tr></table></figure><p>这一步是准备输入文件的,也就是运行<code>ANNOVAR</code>将变异进行注释得到多肽序列(<code>convert2annovar.py</code>,<code>annotate_variation.pl</code>,和<code>coding_change.pl </code>)</p><p>也可以直接预测得到结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">NeoPredPipe.py -I ~/software/NeoPredPipe/Example/input_vcfs -H ~/software/NeoPredPipe/Example/HLAtypes/hlatypes.txt -o ./test_results/ -n TestRun -c 1 2 -E 8 9 10<br><br>INFO: Annovar reference files of build hg19 were given, using this build <span class="hljs-keyword">for</span> all analysis.<br>INFO: Begin.<br>INFO: Running convert2annovar.py on /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test1.vcf<br>INFO: ANNOVAR VCF Conversion Process complete /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test1.vcf<br>INFO: Running annotate_variation.pl on ./test_results/avready/test1.avinput<br>INFO: ANNOVAR annotation Process complete <span class="hljs-keyword">for</span> ./test_results/avready/test1.avinput<br>INFO: Running coding_change.pl on ./test_results/avannotated/test1.avannotated.exonic_variant_function<br>INFO: Coding predictions complete <span class="hljs-keyword">for</span> ./test_results/avannotated/test1.avannotated.exonic_variant_function<br>INFO: Predicting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 9.Indels<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 9<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 8<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 8.Indels<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 10<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test1 on epitopes of length 10.Indels<br>INFO: Predictions complete <span class="hljs-keyword">for</span> test1 on epitopes of length 10.Indels<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Object size of neoantigens: 48472 Kb<br>Processing genotype information according to A (list of alleles) field.<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test1<br>INFO: Object size of neoantigens: 3768 Kb<br>Processing genotype information according to A (list of alleles) field.<br>INFO: Running convert2annovar.py on /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test2.vcf<br>INFO: ANNOVAR VCF Conversion Process complete /public/slst/home/wutao2/software/NeoPredPipe/Example/input_vcfs/test2.vcf<br>INFO: Running annotate_variation.pl on ./test_results/avready/test2.avinput<br>INFO: ANNOVAR annotation Process complete <span class="hljs-keyword">for</span> ./test_results/avready/test2.avinput<br>INFO: Running coding_change.pl on ./test_results/avannotated/test2.avannotated.exonic_variant_function<br>INFO: Coding predictions complete <span class="hljs-keyword">for</span> ./test_results/avannotated/test2.avannotated.exonic_variant_function<br>INFO: Predicting neoantigens <span class="hljs-keyword">for</span> test2<br>INFO: Skipping Sample! No peptides to predict <span class="hljs-keyword">for</span> test2<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test2 on epitopes of length 9<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test2 on epitopes of length 8<br>INFO: Skipping Sample! No peptides to predict <span class="hljs-keyword">for</span> test2<br>INFO: Running Epitope Predictions <span class="hljs-keyword">for</span> test2 on epitopes of length 10<br>INFO: Skipping Sample! No peptides to predict <span class="hljs-keyword">for</span> test2<br>INFO: Predictions complete <span class="hljs-keyword">for</span> test2 on epitopes of length 10.Indels<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test2<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test2<br>INFO: Digesting neoantigens <span class="hljs-keyword">for</span> test2<br>INFO: Object size of neoantigens: 26744 Kb<br>Processing genotype information according to A (list of alleles) field.<br>INFO: Summary Tables Complete.<br>INFO: Summary Tables Complete.<br>INFO: Complete<br></code></pre></td></tr></table></figure><p>输出文件是没有表头的,每列的信息为：</p><blockquote><p>The primary output file of neoantigens has the following format, separated by tabulators (columns 12-26 are taken from <a href="http://www.cbs.dtu.dk/services/NetMHCpan/output.php">here</a>):</p><ul><li><strong>Sample</strong>: vcf filename/patient identifier</li><li><strong>R1</strong>: Region 1 of a multiregion sample, binary for presence (1) or absence (0), regions above the number of regions in the sample (for varying number of biopsies) are indicated by -1. Can be <em>n</em> numbers of regions. <em>Only present in multiregion samples</em>.</li><li><strong>R2</strong>: Region 2 of a multiregion sample, binary for presence (1) or absence (0), regions above the number of regions in the sample (for varying number of biopsies) are indicated by -1. Can be <em>n</em> numbers of regions. <em>Only present in multiregion samples</em>.</li><li><strong>R3</strong>: Region 3 of a multiregion sample, binary for presence (1) or absence (0), regions above the number of regions in the sample (for varying number of biopsies) are indicated by -1. Can be <em>n</em> numbers of regions. <em>Only present in multiregion samples</em>.</li><li><strong>Line</strong>: Line number from the *.avready file (same as the vcf) to identify mutation yielding corresponding neoantigen.</li><li><strong>chr</strong>: Chromosome of mutation</li><li><strong>allelepos</strong>: Position of the mutation</li><li><strong>ref</strong>: Reference base at the position</li><li><strong>alt</strong>: Alternative base at the location</li><li><strong>GeneName:RefID</strong>: Gene name and RefSeq ID separated by a colon. Multiple genes/RefSeq IDs separated by a comma.</li><li><strong>Expression</strong>: Expression value of the gene. Expression values for multiple regions (<em>if using the -expmulti flag</em>) are comma-separated. NA for genes that are not found in the corresponding expression file, or for samples without expression information. <em>Only present if the -x flag is used</em>.</li><li><strong>pos</strong>: Residue number (starting from 0)</li><li><strong>hla</strong>: Molecule/allele name</li><li><strong>peptide</strong>: Amino acid sequence of the potential ligand</li><li><strong>core</strong>: The minimal 9 amino acid binding core directly in contact with the MHC</li><li><strong>Of</strong>: The starting position of the Core within the Peptide (if &gt; 0, the method predicts a N-terminal protrusion)</li><li><strong>Gp</strong>: Position of the deletion, if any.</li><li><strong>Gl</strong>: Length of the deletion.</li><li><strong>Ip</strong>: Position of the insertions, if any.</li><li><strong>Il</strong>: Length of the insertion.</li><li><strong>Icore</strong>: Interaction core. This is the sequence of the binding core including eventual insertions of deletions.</li><li><strong>Identity</strong>: Protein identifier, i.e. the name of the Fasta entry.</li><li><strong>Score</strong>: The raw prediction score</li><li><strong>Binding Affinity</strong>: Predicted binding affinity in nanoMolar units.</li><li><strong>Rank</strong>: Rank of the predicted affinity compared to a set of random natural peptides. This measure is not affected by inherent bias of certain molecules towards higher or lower mean predicted affinities. Strong binders are defined as having %rank&lt;0.5, and weak binders with %rank&lt;2. We advise to select candidate binders based on %Rank rather than nM Affinity</li><li><strong>Candidate</strong>: Symbol (&lt;=) used to denote a Strong or Week Binder in BindLevel</li><li><strong>BindLevel</strong>: (SB: strong binder, WB: weak binder). The peptide will be identified as a strong binder if the % Rank is below the specified threshold for the strong binders, by default 0.5%. The peptide will be identified as a weak binder if the % Rank is above the threshold of the strong binders but below the specified threshold for the weak binders, by default 2%.</li><li><strong>Novelty</strong>: Binary value for indicating if the epitope is novel (1) or exists in the reference proteome (0). <em>Only present if -m flag is set to perform peptide matching in postprocessing</em>.</li></ul></blockquote><h2 id="Recognition-Potential"><a href="#Recognition-Potential" class="headerlink" title="Recognition Potential"></a>Recognition Potential</h2><p>在预测新抗原之后,该工具还可以根据2017 nature文章的方法计算neoantigen recognition potential</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p><code>-c</code>参数的含义：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210324145740028.png"><code>-c</code>参数表示从<code>FORMAT</code>列往后第几列是需要关注的(一般是tumor列);在单区域测序的样本中可以不指定</p></li><li><p>如果有表达数据,表达数据的<code>gene id</code>如果是<code>Ensembl gene ID</code>(也就是<code>ENSG</code>开头),要去掉版本号(小数点后的数字),因为该软件进行ID转化时使用的文件<a href="https://github.com/MathOnco/NeoPredPipe/blob/master/mart_table_hg38_unique.txt">mart_table_hg38_unique.txt</a> 时不带版本号的</p></li><li><p>HLA的格式需要是像HLA-A03:01这样的</p></li><li><p>输出的列：注意netMHCpan的版本<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210326124059938.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>skills</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bioinformatics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Snakemake搭建流程</title>
    <link href="/2021/03/19/snakemake/"/>
    <url>/2021/03/19/snakemake/</url>
    
    <content type="html"><![CDATA[<p>学习<code>snakemake</code> 官方文档</p><span id="more"></span><p>创建一个<code>snakemake_tutorial</code>目录,并下载示例数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/snakemake/snakemake-tutorial-data/archive/v5.24.1.tar.gz<br><br>tar --wildcards -xf snakemake-tutorial-data-5.24.1.tar.gz --strip 1 <span class="hljs-string">&quot;*/data&quot;</span> <span class="hljs-string">&quot;*/environment.yaml&quot;</span><br><span class="hljs-comment">##--wildcards 根据通配符来提取压缩文件,这里是只提取data文件夹和environment.yaml文件</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">(snakemake-tutorial) -bash-<span class="hljs-number">4.2</span>$ tree .<br>.<br>├── data<br>│   ├── genome<span class="hljs-selector-class">.fa</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.amb</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.ann</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.bwt</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.fai</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.pac</span><br>│   ├── genome<span class="hljs-selector-class">.fa</span><span class="hljs-selector-class">.sa</span><br>│   └── samples<br>│       ├── A<span class="hljs-selector-class">.fastq</span><br>│       ├── B<span class="hljs-selector-class">.fastq</span><br>│       └── C<span class="hljs-selector-class">.fastq</span><br>├── environment<span class="hljs-selector-class">.yaml</span><br>└── snakemake-tutorial-data-<span class="hljs-number">5.24</span>.<span class="hljs-number">1</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span><br><br><span class="hljs-number">2</span> directories, <span class="hljs-number">12</span> files<br></code></pre></td></tr></table></figure><p>其中<code>environment.yaml</code>文件是用来创建所需的<code>conda</code>环境:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat environment.yaml<br><br>channels:<br>  - bioconda<br>  - conda-forge<br>dependencies:<br>  - snakemake-minimal &gt;=5.24.1<br>  - jinja2 =2.11<br>  - networkx =2.5<br>  - matplotlib =3.3<br>  - graphviz =2.42<br>  - bcftools =1.9<br>  - samtools =1.9<br>  - bwa =0.7<br>  - pysam =0.15<br></code></pre></td></tr></table></figure><p>使用该配置文件创建<code>snakemake-tutorial</code>的环境(使用mamba代替conda来加速下载)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mamba env create --name snakemake-tutorial --file environment.yaml<br><br>conda activate snakemake-tutorial<br></code></pre></td></tr></table></figure><h2 id="基础：以一个生物信息学流程为例"><a href="#基础：以一个生物信息学流程为例" class="headerlink" title="基础：以一个生物信息学流程为例"></a>基础：以一个生物信息学流程为例</h2><p>一个<code>Snakemake</code>流程由<code>Snakefile</code>文件中的一系列规则(rules)来创建；这些规则通过说明<strong>如何从输入文件得到输出文件</strong>来将流程分解成多个小的步骤,<code>Snakemake</code>会通过匹配文件名来自动的决定规则间的依赖关系</p><p>接下来以一个生物信息学的流程为例来学习<code>Snakemake</code>流程的搭建</p><p>这个流程做的工作为：将测序的reads匹配到参考基因组上,并且检测匹配上的reads的变异</p><h3 id="第一步：Mapping-reads"><a href="#第一步：Mapping-reads" class="headerlink" title="第一步：Mapping reads"></a>第一步：Mapping reads</h3><p>第一个<code>Snakemake</code>规则将给定样本的测序reads回帖到给定的参考基因组上去,使用的工具为<a href="http://bio-bwa.sourceforge.net/">bwa的mem算法</a></p><p>创建一个<code>Snakefile</code>文件,写上下面的规则：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">rule bwa_map:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        <span class="hljs-string">&quot;data/samples/A.fastq&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;mapped_reads/A.bam&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;bwa mem &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>一个<code>Snakemake</code>规则有一个名字,这里是<code>bwa_map</code>;还有一些指令,上面的例子里是<code>input</code>, <code>output</code>和<code>shell</code>;<code>input</code>和<code>output</code>指令中是一系列的文件名(python 字符串),指定了输入和输出文件(如果有多个文件,用逗号分割);<code>shell</code>指令也是一个字符串,表示需要执行的shell命令,在shell命令字符串中可以使用花括号来指代规则中的其他部分,比如这里使用<code>&#123;input&#125;</code>来指代<code>input</code>指令中的内容,使用<code>&#123;output&#125;</code>指代<code>output</code>指令中的内容;上面的<code>input</code>里面有两个字符串,这时<code>snakemake</code>替代<code>&#123;input&#125;</code>时会用空格分隔开两个输入文件 </p><p>接下来可以执行这个流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake --cores 1 <br><br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Using shell: /usr/bin/bash<br>Provided cores: 1 (use --cores to define parallelism)<br>Rules claiming more threads will be scaled down.<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1<br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Sat Mar 20 18:17:43 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/A.fastq<br>    output: mapped_reads/A.bam<br>    jobid: 0<br><br>[M::bwa_idx_load_from_disk] <span class="hljs-built_in">read</span> 0 ALT contigs<br>[M::process] <span class="hljs-built_in">read</span> 25000 sequences (2525000 bp)...<br>[M::mem_process_seqs] Processed 25000 reads <span class="hljs-keyword">in</span> 1.267 CPU sec, 1.267 real sec<br>[main] Version: 0.7.17-r1188<br>[main] CMD: bwa mem data/genome.fa data/samples/A.fastq<br>[main] Real time: 1.757 sec; CPU: 1.318 sec<br>[Sat Mar 20 18:17:44 2021]<br>Finished job 0.<br>1 of 1 steps (100%) <span class="hljs-keyword">done</span><br>Complete <span class="hljs-built_in">log</span>: /slst/home/wutao2/snakemake_tutorial/.snakemake/<span class="hljs-built_in">log</span>/2021-03-20T181738.569944.snakemake.log<br><br>tree .<br>.<br>├── data<br>│   ├── genome.fa<br>│   ├── genome.fa.amb<br>│   ├── genome.fa.ann<br>│   ├── genome.fa.bwt<br>│   ├── genome.fa.fai<br>│   ├── genome.fa.pac<br>│   ├── genome.fa.sa<br>│   └── samples<br>│       ├── A.fastq<br>│       ├── B.fastq<br>│       └── C.fastq<br>├── environment.yaml<br>├── mapped_reads<br>│   └── A.bam<br>├── Snakefile<br>└── snakemake-tutorial-data-5.24.1.tar.gz<br></code></pre></td></tr></table></figure><p>也可以使用<code>-n</code>或者<code>--dry-run</code>参数使snakemake显示执行的”计划“(没有真正的执行流程);使用<code>-p</code>参数来打印需要执行的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake -np<br><br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1<br><br>[Sat Mar 20 18:25:11 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/A.fastq<br>    output: mapped_reads/A.bam<br>    jobid: 0<br><br>bwa mem data/genome.fa data/samples/A.fastq | samtools view -Sb - &gt; mapped_reads/A.bam<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1<br>This was a dry-run (flag -n). The order of <span class="hljs-built_in">jobs</span> does not reflect the order of execution.<br></code></pre></td></tr></table></figure><h3 id="第二步：使规则适用的范围更广"><a href="#第二步：使规则适用的范围更广" class="headerlink" title="第二步：使规则适用的范围更广"></a>第二步：使规则适用的范围更广</h3><p>上面的规则只能对单个样本<code>data/samples/A.fastq</code>适用,在snakemake中可以使用通配符(wildcard)来扩展规则的适用范围：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">rule bwa_map:<br>    input:<br>        <span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        <span class="hljs-string">&quot;data/samples/&#123;sample&#125;.fastq&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;bwa mem &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><code>Snakemake</code>会将<code>output</code>中的<code>&#123;sample&#125;</code>替换成一个合适的值,并且将<code>input</code>中的<code>&#123;sample&#125;</code>也替换成同样的值,我们在运行流程就需要指定输出文件的名称(这样snakemake才知道如何替换通配符)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake -np mapped_reads/B.bam<br><br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1<br><br>[Sat Mar 20 18:50:12 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/B.fastq<br>    output: mapped_reads/B.bam<br>    jobid: 0<br>    wildcards: sample=B<br><br>bwa mem data/genome.fa data/samples/B.fastq | samtools view -Sb - &gt; mapped_reads/B.bam<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1<br>This was a dry-run (flag -n). The order of <span class="hljs-built_in">jobs</span> does not reflect the order of execution.<br></code></pre></td></tr></table></figure><p>这个时候snakemake就将<code>&#123;sample&#125;</code>替换成<code>B</code>了<br>也可以同时生成多个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake -np mapped_reads/A.bam mapped_reads/B.bam<br><span class="hljs-comment">##或snakemake -np mapped_reads/&#123;A,B&#125;.bam</span><br><br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        2       bwa_map<br>        2<br><br>[Sat Mar 20 18:52:00 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/B.fastq<br>    output: mapped_reads/B.bam<br>    jobid: 0<br>    wildcards: sample=B<br><br>bwa mem data/genome.fa data/samples/B.fastq | samtools view -Sb - &gt; mapped_reads/B.bam<br><br>[Sat Mar 20 18:52:00 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/A.fastq<br>    output: mapped_reads/A.bam<br>    jobid: 1<br>    wildcards: sample=A<br><br>bwa mem data/genome.fa data/samples/A.fastq | samtools view -Sb - &gt; mapped_reads/A.bam<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        2       bwa_map<br>        2<br>This was a dry-run (flag -n). The order of <span class="hljs-built_in">jobs</span> does not reflect the order of execution.<br></code></pre></td></tr></table></figure><h3 id="第三步：Sorting-read-alignments"><a href="#第三步：Sorting-read-alignments" class="headerlink" title="第三步：Sorting read alignments"></a>第三步：Sorting read alignments</h3><p>接下来需要使用<code>samtools</code>中的<code>sort</code>命令来对BAM文件进行排序,将下面的规则写到刚才的<code>bwa_map</code>规则的下面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">rule samtools_sort:<br>    input:<br>        <span class="hljs-string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;_sorted.bam&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;samtools sort -T sorted_reads/&#123;wildcards.sample&#125; -O bam &#123;input&#125; &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>这个规则的输入文件是刚才<code>bwa_map</code>规则的输出文件;这里面需要注意的是在shell命令中可以通过<code>wildcards</code>对象来获取不同通配符的值(即wildcards对象的属性)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake -np sorted_reads/B_sorted.bam<br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1       samtools_sort<br>        2<br><br>[Sun Mar 21 16:06:07 2021]<br>rule bwa_map:<br>    input: data/genome.fa, data/samples/B.fastq<br>    output: mapped_reads/B.bam<br>    jobid: 1<br>    wildcards: sample=B<br><br>bwa mem data/genome.fa data/samples/B.fastq | samtools view -Sb - &gt; mapped_reads/B.bam<br><br>[Sun Mar 21 16:06:07 2021]<br>rule samtools_sort:<br>    input: mapped_reads/B.bam<br>    output: sorted_reads/B_sorted.bam<br>    jobid: 0<br>    wildcards: sample=B<br><br>samtools sort -T sorted_reads/B -O bam mapped_reads/B.bam &gt; sorted_reads/B_sorted.bam<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       bwa_map<br>        1       samtools_sort<br>        2<br>This was a dry-run (flag -n). The order of <span class="hljs-built_in">jobs</span> does not reflect the order of execution.<br></code></pre></td></tr></table></figure><p>可以看到当指定输出为<code>B_sorted.bam</code>的时候,会先运行bwa得到<code>B.bam</code>然后再运行samtools得到<code>B_sorted.bam</code></p><h3 id="第四步：Indexing-read-alignments"><a href="#第四步：Indexing-read-alignments" class="headerlink" title="第四步：Indexing read alignments"></a>第四步：Indexing read alignments</h3><p>接下来我们需要使用<code>samtools</code>对排序的read alignments建立索引,将下面的规则补充到之前的规则下面:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">rule samtools_index:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;_sorted.bam&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;.bam.bai&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;samtools index &#123;input&#125; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>snakemake会将不同的任务串成有向无环图(DAG),可以使用下面的命令来可视化流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake --dag sorted_reads/&#123;A,B&#125;.bam.bai | dot -Tsvg &gt; dag.svg<br></code></pre></td></tr></table></figure><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/dag.svg"></p></center><p>DAG图的节点表示任务,边表示任务间的依赖关系,在节点中还会展示通配符的值(如<code>sample:B</code>);另外不需要运行的规则就用虚线边框表示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##运行第一个规则</span><br>snakemake --cores 1 mapped_reads/A.bam<br><br><span class="hljs-comment">##再创建DAG</span><br>snakemake --dag sorted_reads/&#123;A,B&#125;.bam.bai | dot -Tsvg &gt; dag1.svg<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/dag1.svg"></p><h3 id="第五步：Calling-genomic-variants"><a href="#第五步：Calling-genomic-variants" class="headerlink" title="第五步：Calling genomic variants"></a>第五步：Calling genomic variants</h3><p>接下来需要检测reads中的变异信息,用的工具为：<code>samtools</code>和<code>bcftools</code></p><p>需要注意的是<code>snakemake</code>是通过目标文件(输出)来反推输入文件的,上面几个规则中的输出和输入共用一个通配符(sample);而这个步骤的输入是所有的bam及其索引,输出是一个文件(vcf)，所以需要在input指令下将所有的输入文件都写出来(因为此时snakemake无法通过输出推断输入)</p><p>snakemake提供了一个<code>expand</code>函数,可以方便的将文件名收集起来,就不需要一个一个写了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SAMPLES = [<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>]<br><br>expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;.bam&quot;</span>, sample=SAMPLES)<br><br></code></pre></td></tr></table></figure><p>将<code>SAMPLE</code>列表中的内容取代前面的通配符,也可以提供多个通配符,得到的结果是多个通配符的乘积：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;.&#123;replicate&#125;.bam&quot;</span>, sample=SAMPLES, replicate=[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br><br><span class="hljs-comment">###结果是：</span><br>[<span class="hljs-string">&quot;sorted_reads/A.0.bam&quot;</span>, <span class="hljs-string">&quot;sorted_reads/A.1.bam&quot;</span>, <span class="hljs-string">&quot;sorted_reads/B.0.bam&quot;</span>, <span class="hljs-string">&quot;sorted_reads/B.1.bam&quot;</span>]<br></code></pre></td></tr></table></figure><p>因此需要在<code>Snakefile</code>的最前面定义<code>SAMPLES</code>,然后将下面的规则放到之前的规则下面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">SAMPLES = [<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>]<br><br>...<br><br><br>rule bcftools_call:<br>    <span class="hljs-built_in">input</span>:<br>        fa=<span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        bam=expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;_sorted.bam&quot;</span>, sample=SAMPLES),<br>        bai=expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;.bam.bai&quot;</span>, sample=SAMPLES)<br>    output:<br>        <span class="hljs-string">&quot;calls/all.vcf&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;samtools mpileup -g -f &#123;input.fa&#125; &#123;input.bam&#125; | &quot;</span><br>        <span class="hljs-string">&quot;bcftools call -mv - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>在shell命令中可以通过名称或者位置来指定输入或输出文件：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210321171336544.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210321171348704.png"></p><p>另外一个需要注意的是：如果命令太长,可以分多行写,但是在每行的命令的末尾要留一个空格:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##如果不留空格,拼起来会出错</span><br><span class="hljs-string">&quot;samtools mpileup&quot;</span><br><span class="hljs-string">&quot;-g -f &#123;input.fa&#125; &#123;input.bam&#125;&quot;</span><br><br><span class="hljs-string">&quot;samtools mpileup-g -f &#123;input.fa&#125; &#123;input.bam&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>现在再来看一下DAG图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake --dag calls/all.vcf | dot -Tsvg &gt; dag2.svg<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/dag2.svg"></p><h3 id="第六步：Using-custom-scripts"><a href="#第六步：Using-custom-scripts" class="headerlink" title="第六步：Using custom scripts"></a>第六步：Using custom scripts</h3><p>在Snakemake中还可以引用外部的脚本(python/R)来完成一系列的工作;需要在<code>script</code>指令中指定脚本的路径:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">rule plot_quals:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;calls/all.vcf&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;plots/quals.svg&quot;</span><br>    script:<br>        <span class="hljs-string">&quot;scripts/plot-quals.py&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##plot-quals.py</span><br><span class="hljs-keyword">import</span> matplotlib<br>matplotlib.use(<span class="hljs-string">&quot;Agg&quot;</span>)<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> pysam <span class="hljs-keyword">import</span> VariantFile<br><br>quals = [record.qual <span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> VariantFile(snakemake.<span class="hljs-built_in">input</span>[<span class="hljs-number">0</span>])]<br>plt.hist(quals)<br><br>plt.savefig(snakemake.output[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>上面的规则和python脚本最终产生一个变异检测质量值的直方图</p><p>规则的不同部分(input,output,wildcards等)在外部脚本中都是<code>snakemake</code>对象的属性,比如<code>snakemake.input</code>就是含有输入文件名的列表</p><p>同样在R代码中,<code>snakemake</code>是作为S4对象存在的,S4类的属性是R列表,因此我们可以通过类似<code>snakemake@input[[1]]</code>的形式来获取第一个输入文件</p><h3 id="第七步：Adding-a-target-rule"><a href="#第七步：Adding-a-target-rule" class="headerlink" title="第七步：Adding a target rule"></a>第七步：Adding a target rule</h3><p>前面都是通过命令行来指定目标文件(snakemake是通过目标文件逐步反推),如果没有指定目标文件则认为第一个规则的output是目标文件,因此我们可以在第一个规则中不加output,只包含input,并且这个input是整个流程的最终输出文件,这样我们就可以无需指定输出文件了(如果输出有很多,这样就不方便)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##将下面的规则放到第一个</span><br>rule <span class="hljs-built_in">all</span>:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;plots/quals.svg&quot;</span><br></code></pre></td></tr></table></figure><p>可以看看整个流程的DAG图：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/dag3.svg"></p><p>接下来运行整个流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake --cores 1<br></code></pre></td></tr></table></figure><p>得到最终的结果为变异检测质量值的直方图：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/quals.svg"></p><p>注意：snakemake只在以下几种情况下才会执行任务(jobs)<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210322103940316.png"></p><p>但是<code>Snakemake</code>也提供了强制运行的选项<code>--forcerun</code>,后面接输出文件或者规则(<code>--forceall</code>可以强制运行整个流程)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs bash">snakemake --cores 1 --forcerun samtools_sort<br>Building DAG of <span class="hljs-built_in">jobs</span>...<br>Using shell: /usr/bin/bash<br>Provided cores: 1 (use --cores to define parallelism)<br>Rules claiming more threads will be scaled down.<br>Job counts:<br>        count   <span class="hljs-built_in">jobs</span><br>        1       att<br>        1       bcftools_call<br>        1       plot_quals<br>        2       samtools_index<br>        2       samtools_sort<br>        7<br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:47 2021]<br>rule samtools_sort:<br>    input: mapped_reads/A.bam<br>    output: sorted_reads/A_sorted.bam<br>    jobid: 3<br>    wildcards: sample=A<br><br>[Mon Mar 22 10:29:48 2021]<br>Finished job 3.<br>1 of 7 steps (14%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:48 2021]<br>rule samtools_index:<br>    input: sorted_reads/A_sorted.bam<br>    output: sorted_reads/A.bam.bai<br>    jobid: 7<br>    wildcards: sample=A<br><br>[Mon Mar 22 10:29:48 2021]<br>Finished job 7.<br>2 of 7 steps (29%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:48 2021]<br>rule samtools_sort:<br>    input: mapped_reads/B.bam<br>    output: sorted_reads/B_sorted.bam<br>    jobid: 5<br>    wildcards: sample=B<br><br>[Mon Mar 22 10:29:48 2021]<br>Finished job 5.<br>3 of 7 steps (43%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:48 2021]<br>rule samtools_index:<br>    input: sorted_reads/B_sorted.bam<br>    output: sorted_reads/B.bam.bai<br>    jobid: 8<br>    wildcards: sample=B<br><br>[Mon Mar 22 10:29:48 2021]<br>Finished job 8.<br>4 of 7 steps (57%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:48 2021]<br>rule bcftools_call:<br>    input: data/genome.fa, sorted_reads/A_sorted.bam, sorted_reads/B_sorted.bam, sorted_reads/A.bam.bai, sorted_reads/B.bam.bai<br>    output: calls/all.vcf<br>    jobid: 2<br><br>[warning] samtools mpileup option `g` is functional, but deprecated. Please switch to using bcftools mpileup <span class="hljs-keyword">in</span> future.<br>[mpileup] 2 samples <span class="hljs-keyword">in</span> 2 input files<br>Note: none of --samples-file, --ploidy or --ploidy-file given, assuming all sites are diploid<br>[Mon Mar 22 10:29:49 2021]<br>Finished job 2.<br>5 of 7 steps (71%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:29:49 2021]<br>rule plot_quals:<br>    input: calls/all.vcf<br>    output: plots/quals.svg<br>    jobid: 1<br><br>[Mon Mar 22 10:30:00 2021]<br>Finished job 1.<br>6 of 7 steps (86%) <span class="hljs-keyword">done</span><br>Select <span class="hljs-built_in">jobs</span> to execute...<br><br>[Mon Mar 22 10:30:00 2021]<br>localrule att:<br>    input: plots/quals.svg<br>    jobid: 0<br><br>[Mon Mar 22 10:30:00 2021]<br>Finished job 0.<br>7 of 7 steps (100%) <span class="hljs-keyword">done</span><br>Complete <span class="hljs-built_in">log</span>: /slst/home/wutao2/snakemake_tutorial/.snakemake/<span class="hljs-built_in">log</span>/2021-03-22T102940.208336.snakemake.log<br></code></pre></td></tr></table></figure><h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><h3 id="第一步：指定使用的线程数"><a href="#第一步：指定使用的线程数" class="headerlink" title="第一步：指定使用的线程数"></a>第一步：指定使用的线程数</h3><p>可以在规则中使用<code>threads</code>指令来指定需要的线程数(实际用到的可以小于等于指定的线程数),比如可以把bwa的线程指定为8个(如果不指定,默认是1)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">rule bwa_map:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        <span class="hljs-string">&quot;data/samples/&#123;sample&#125;.fastq&quot;</span><br>    output:<br>        <span class="hljs-string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br>    threads: <span class="hljs-number">8</span><br>    shell:<br>        <span class="hljs-string">&quot;bwa mem -t &#123;threads&#125; &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>在实际运行中用到的线程数由Snakemake来控制,保证同时运行的所有任务的总线程数不超过给定的总线程数,可以通过snakemake的参数<code>--cores</code>来指定给定的线程数(也就是说使用的线程数不超过<code>--cores</code>指定的数量),如果<code>--cores</code>后面没有数字则使用所有可用的核</p><h3 id="第二步：配置文件"><a href="#第二步：配置文件" class="headerlink" title="第二步：配置文件"></a>第二步：配置文件</h3><p>在前面的步骤中是通过一个python列表来指定需要考虑的样本(<code>SAMPLES = [&quot;A&quot;, &quot;B&quot;]</code>),但是如果想要流程能够更好的适应新的数据,我们可以使用配置文件,配置文件的格式可以是<code>JSON</code>或者<code>YAML</code>;在流程中使用<code>configfile</code>指令来指定配置文件</p><p><code>snakemake</code>会将配置文件读入,并将其内容存到名称为<code>config</code>的<strong>字典变量</strong>中</p><p>现在可以将之前的<code>SAMPLES</code>移除,加上配置文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###配置文件config.yaml</span><br>samples:<br>    A: data/samples/A.fastq<br>    B: data/samples/B.fastq<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###将下面的指令放到Snakefile的开头</span><br>configfile: <span class="hljs-string">&quot;config.yaml&quot;</span><br><br><span class="hljs-comment">###将expand函数改写</span><br>rule bcftools_call:<br>    <span class="hljs-built_in">input</span>:<br>        fa=<span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        bam=expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;_sorted.bam&quot;</span>, sample=config[<span class="hljs-string">&quot;samples&quot;</span>]),<span class="hljs-comment">##config是一个字典</span><br>        bai=expand(<span class="hljs-string">&quot;sorted_reads/&#123;sample&#125;.bam.bai&quot;</span>, sample=config[<span class="hljs-string">&quot;samples&quot;</span>])<br>    output:<br>        <span class="hljs-string">&quot;calls/all.vcf&quot;</span><br>    shell:<br>        <span class="hljs-string">&quot;samtools mpileup -g -f &#123;input.fa&#125; &#123;input.bam&#125; | &quot;</span><br>        <span class="hljs-string">&quot;bcftools call -mv - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="第三步：输入函数"><a href="#第三步：输入函数" class="headerlink" title="第三步：输入函数"></a>第三步：输入函数</h3><p>上面通过<code>expand</code>和配置文件改写了<code>bcftools_call</code>规则,注意到配置文件中也有<code>fastq</code>文件的路径,我们可不可以也将<code>bwa_map</code>进行类似的改写呢？</p><p>首先需要了解Snakemake流程执行的步骤：</p><ul><li>初始化(initialization)：在流程内定义的文件被解析,所有的规则被实例化(<code>expand</code>函数就是在此时被执行)</li><li>DAG：通过填充通配符和根据输出文件匹配输入文件来构建任务的有向无环图</li><li>scheduling：根据可获得的资源来执行任务</li></ul><p>这两个规则的区别在于：<code>bcftools_call</code>不需要根据输出文件来推断输入文件(因为该步骤输入的是所有文件),而<code>bwa_map</code>规则需要根据输出来推断输入文件(比如,如果job的输出是B.bam,那么输入必须是B.fastq),因此无法在<code>bwa_map</code>中使用<code>expand</code>函数</p><p>但是我们可以使用<strong>input function</strong>来完成根据输出匹配输入的任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">rule bwa_map:<br>    <span class="hljs-built_in">input</span>:<br>        <span class="hljs-string">&quot;data/genome.fa&quot;</span>,<br>        <span class="hljs-keyword">lambda</span> wildcards: config[<span class="hljs-string">&quot;samples&quot;</span>][wildcards.sample]<br>    output:<br>        <span class="hljs-string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span><br>    threads: <span class="hljs-number">8</span><br>    shell:<br>        <span class="hljs-string">&quot;bwa mem -t &#123;threads&#125; &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>上面所展示的<code>input function</code>是lambda函数(为了方便所以使用lambda,一般的函数都可以的),参数是<code>wildcards</code>对象,通过<code>sample</code>属性获取output中匹配的通配符(比如output中是A.bam,wildcards.sample得到的就是”A”,<code>config[&quot;samples&quot;][wildcards.sample]</code>得到的就是配置文件中A的路径)</p><h3 id="第四步：规则参数"><a href="#第四步：规则参数" class="headerlink" title="第四步：规则参数"></a>第四步：规则参数</h3><p>有时候shell命令中的参数并不是静态的,比如要根据输入的样本名调整某些参数的值;snakemake提供了<code>params</code>指令</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>skills</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bioinformatics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>感知机模型</title>
    <link href="/2021/03/14/perceptron/"/>
    <url>/2021/03/14/perceptron/</url>
    
    <content type="html"><![CDATA[<p>感知机模型</p><span id="more"></span><p>机器学习方法都是由3个要素构成的：</p><ul><li>  模型：包含输入空间,输出空间和假设空间(包含所有可能的决策函数)</li><li>  策略：按照什么样的准则选择最优的模型(损失函数)</li><li>  算法：如何找到最优模型(最优化问题)</li></ul><h2 id="感知机模型"><a href="#感知机模型" class="headerlink" title="感知机模型"></a>感知机模型</h2><p>输入空间：$X \in R^n$ (n维实数)<br>输出空间：$Y = {+1,-1}$<br>假设空间：</p><p>$$<br>f(x)=sign(w\cdot x+b)=\left{<br>\begin{matrix}<br>+1, w\cdot x+b\ge0\<br>-1, w\cdot x+b&lt;0 \<br>\end{matrix}<br>\right.<br>$$<br>注意：$w,x,b$都是向量,$w\cdot b$也就是向量的内积,比如在二维空间中：</p><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF1_01.png"></p></center><p>就是要找一个直线$w_1x_1+w_2x_2+b=0$将点分成两类(这条直线更一般的名称叫做超平面)；另外感知机模型对数据的假设是:数据是线性可分的;比如下图所示的数据所对应的就不是一个线性可分的输入空间</p><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/Rd9f79181b6f2972e0795a5815e8dc3a0.png"></p></center><h2 id="学习策略"><a href="#学习策略" class="headerlink" title="学习策略"></a>学习策略</h2><p>感知机的损失函数为：<strong>误分类点到超平面S的总距离</strong>,通过最小化这个距离得到最优的超平面(超平面的参数就是w和b)</p><p>首先我们需要一些基础知识：</p><h3 id="超平面的法向量"><a href="#超平面的法向量" class="headerlink" title="超平面的法向量"></a>超平面的法向量</h3><p>对于一个超平面S ($w\cdot x+b$),其法向量为$w$:</p><p>设超平面S上有两个点：A点$(x_A)$和B点$(x_B)$有：</p><p>$$<br>\left{ \begin{matrix}<br>wx_A+b=0\<br>wx_B+b=0 \<br>\end{matrix}\right. \<br>\Rightarrow w(x_A-x_B)=0<br>$$<br>因为$x_A-x_B$是超平面S上的一个向量,两个向量的乘积为0,所以$w$垂直于S,即$w$为超平面S的法向量</p><h3 id="点到超平面的距离"><a href="#点到超平面的距离" class="headerlink" title="点到超平面的距离"></a>点到超平面的距离</h3><p>输入空间中任一点$x_0$到超平面S ($w\cdot x+b$)的距离d为：</p><p>$$<br>d = \frac{1}{||w||}|w\cdot x_0+b|<br>$$</p><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210314141051985.png"></p></center><p>设点$x_0$在S上投影为$x_1$,则$w\cdot x_1+b=0$;由于向量$\vec {x_1x_0}$与S的法向量$w$平行,所以：</p><p>$$<br>|\vec w\cdot \vec{x_1x_0}|=||\vec w||×||\vec{x_1x_0}||cos&lt;\vec w,\vec{x_1x_0}&gt;=||\vec w||×||\vec{x_1x_0}||=||\vec w||d<br>$$<br>对于$\vec w\cdot \vec{x_1x_0}$又有(假设$w$和$x$都是N维的向量,上面的图只是一个3维的例子)：</p><p>$$<br>\vec w\cdot \vec{x_1x_0}=w^1 (x_1^1-x_0^1)+w^2(x_1^2-x_0^2)+…+w^N(x_1^N-x_0^N) \ =w^1x_1^1+w^2x_1^2+…+w^Nx_1^N-(w^1x_0^1+w^2x_0^2+…+w^Nx_0^N) \ =-b-(w^1x_0^1+w^2x_0^2+…+w^Nx_0^N)<br>$$<br>因此由上面两个式子,可以得出：</p><p>$$<br>||w||d=|-b-(w^1x_0^1+w^2x_0^2+…+w^Nx_0^N)|=|w\cdot x_0 +b|\<br>\Rightarrow d=\frac{|w\cdot x_0 +b|}{||w||}<br>$$</p><p>回到感知机模型中,因为误分类点$w\cdot x+b$和类标签的符号是相反的(当$w\cdot x+b$大于0时,误分类的类标签是-1;当$w\cdot x+b$小于0时,误分类的类标签是+1),所以误分类点到超平面S的距离也可以表示为:</p><p>$$<br>d_i = \frac{-y_i(w\cdot x_i+b)}{||w||}<br>$$<br>误分类点的总距离为：</p><p>$$<br>-\frac{1}{||w||}\sum_{x_i\in M}y_i(w\cdot x_i+b),M为误分类点的集合<br>$$<br>所以感知机的损失函数为：</p><p>$$<br>L(w,b)=-\sum_{x_i\in M}y_i(w\cdot x_i+b)<br>$$</p><h2 id="学习算法"><a href="#学习算法" class="headerlink" title="学习算法"></a>学习算法</h2><p>可以使用梯度下降或者随机梯度下降的方法来求解使损失函数最小化时的参数$w,b$</p><p>损失函数$L(w,b)$的梯度为：</p><p>$$<br>\nabla_{w}L(w,b)=\frac{\partial L(w,b)}{\partial w}=-\sum_{x_i\in M}y_ix_i \<br>\nabla_{b}L(w,b)=\frac{\partial L(w,b)}{\partial b}=-\sum_{x_i\in M}y_i<br>$$</p><p>所以按照梯度下降法,对每个误分类点更新w,b:</p><p>$$<br>\left{ \begin{matrix}<br>w := w+\eta\sum_iy_ix_i\<br>b := b+\eta\sum_iy_i\<br>\end{matrix}\right. \<br>$$<br>$\eta$是学习率;在实际应用中一般选择使用随机梯度下降:</p><p>$$<br>\left{ \begin{matrix}<br>w := w+\eta y_ix_i\<br>b := b+\eta y_i\<br>\end{matrix}\right. \<br>$$<br>感知机的学习算法(随机梯度下降法)的步骤为:</p><ul><li>选取初值$w_0,b_0$</li><li>在训练集中选取数据$(x_i,y_i)$</li><li>如果选取的点是误分类点,也就是说$y_i(w\cdot x_i+b)\le0$,按照上式对参数进行更新</li><li>转至第二步,直到训练集中没有误分类点</li></ul><h2 id="算法收敛性"><a href="#算法收敛性" class="headerlink" title="算法收敛性"></a>算法收敛性</h2><p>证明如下的定理：</p><p>设训练数据集$T={(x_1,y_1),(x_2,y_2),…,(x_N,y_N)}$是线性可分的：</p><ol><li>存在满足条件$||\hat w_{opt}||$=1的超平面$\hat w_{opt} \cdot \hat x=w_{opt}\cdot x+b_{opt}=0$将数据集完全正确分开,且存在$r&gt;0$,对所有的$i=1,2,..,N$有：<br>$$<br>y_i(\hat w_{opt} \cdot \hat x)=y_i(w_{opt}\cdot x+b_{opt})\ge r<br>$$</li><li>令$R=\max||\hat x_i||$,则感知机在训练集上的误分类次数k满足不等式:<br>$$<br>k \le (\frac{R}{r})^2<br>$$</li></ol><p>首先为了方便,将b放进了w和x中,也就是:<br>$$<br>\hat w=(w^T,b)^T \ ,\hat x = (x^T,1)^T<br>$$<br>先证明1：<br>由于数据集是线性可分的,肯定存在一个超平面将数据集完全分开,即对$i=1,2,…,N$,都有：<br>$$<br>y_i(\hat w_{opt} \cdot \hat x)&gt;0<br>$$</p><p>因此只需要r为$y_i(\hat w_{opt} \cdot \hat x)$的最小值,就会有：<br>$$<br>y_i(\hat w_{opt} \cdot \hat x) \ge r<br>$$</p><p>再来看2：      </p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-14_16-08-55_00.png"></p><p>也就是说误分类的次数是有上界的,经过有限次搜索肯定是可以找到将训练集完全分开的超平面</p><h2 id="Sci-kit-learn"><a href="#Sci-kit-learn" class="headerlink" title="Sci-kit learn"></a>Sci-kit learn</h2><p>scikit learn 中的Perceptron类和SGDClassifier类都可以进行感知机模型的计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs &#123;python&#125;">from sklearn.datasets import load_digits<br>from sklearn.linear_model import Perceptron<br><br>X, y = load_digits(return_X_y=True)<br>clf = Perceptron(random_state=0)<br>##也可以使用SGDClassifier(loss=&quot;perceptron&quot;, eta0=1, learning_rate=&quot;constant&quot;, penalty=None)<br>clf.fit(X, y)<br>clf.score(X, y)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【hands on ML Ch6】-决策树模型</title>
    <link href="/2021/03/04/hands_on_ML_ch6/"/>
    <url>/2021/03/04/hands_on_ML_ch6/</url>
    
    <content type="html"><![CDATA[<p>hands on ML 第六章，决策树模型</p><span id="more"></span><p>决策树是一种多能的机器学习算法，可以处理分类，回归，甚至多输出问题(见第二章)</p><h2 id="训练和可视化决策树"><a href="#训练和可视化决策树" class="headerlink" title="训练和可视化决策树"></a>训练和可视化决策树</h2><p>首先在iris数据集上训练一个决策树模型并可视化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_iris<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> tree<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><br>iris = load_iris()<br>x = iris.data[:,<span class="hljs-number">2</span>:]<span class="hljs-comment">##取petal length和width变量</span><br>y = iris.target<br><br>tree_clf = DecisionTreeClassifier(max_depth=<span class="hljs-number">2</span>)<br>tree_clf.fit(x,y)<br>&gt;&gt; DecisionTreeClassifier(max_depth=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>Graphviz是一个开源的图（Graph）可视化软件，采用抽象的图和网络来表示结构化的信息。在数据科学领域，Graphviz的一个用途就是实现决策树可视化,因此我们需要使用<code>export_graphviz()</code>将树结构导出为一个<code>.dot</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> export_graphviz<br><span class="hljs-keyword">from</span> graphviz <span class="hljs-keyword">import</span> Source<br><br>export_graphviz(<br>  tree_clf,<br>  out_file=<span class="hljs-string">&quot;../test/iris_tree.dot&quot;</span>,<br>  feature_names=iris.feature_names[<span class="hljs-number">2</span>:],<br>  class_names=iris.target_names,<br>  rounded=<span class="hljs-literal">True</span>,<br>  filled=<span class="hljs-literal">True</span>,<br>  special_characters=<span class="hljs-literal">True</span><br>)<br></code></pre></td></tr></table></figure><p>然后需要下载<a href="https://www.graphviz.org/download/">Graphviz</a>,打开powershell：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">dot -Tpng iris_tree.dot -o iris_tree.png<br></code></pre></td></tr></table></figure><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/iris_tree.png"></p></center><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>决策树可以用来处理分类和回归任务，主要思想就是：根据特征对数据集进行划分，决策树的学习分成3个步骤：</p><ul><li>  特征选择</li><li>  生成决策树</li><li>  决策树的修剪(正则化)</li></ul><h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><p>特征选择的就是选择对训练数据有较好分类能力的特征，也就是说通过某个特征将数据集分成若干子集，这些子集中数据的一致性(纯度)应该比原来的数据集要高；在决策树中使用熵来表示这个纯度</p><p>对离散型随机变量X，其概率分布为：</p><p><em>P</em>(<em>X</em> = <em>x</em><sub><em>i</em></sub>) = <em>p</em><sub><em>i</em></sub>, <em>i</em> = 1, 2, …, <em>n</em><br>则X的熵定义为：</p><p>$$<br>H(X) = - \sum_{i=1}^np_ilog_2p_i<br>$$<br>设有随机变量X,Y,其联合概率分布为：</p><p><em>P</em>(<em>X</em> = <em>x</em><sub><em>i</em></sub>, <em>Y</em> = <em>y</em><sub><em>j</em></sub>) = <em>p</em><sub><em>i**j</em></sub>, <em>i</em> = 1, 2, …, <em>n</em>; <em>j</em> = 1, 2, …, <em>m</em></p><p>条件熵为在X给定的条件下Y的条件概率分布的熵对X的数学期望:</p><p>$$<br>H(Y|X) = \sum_{i=1}^np_iH(Y|X=x_i)\\<br>p_i=P(X=x_i),i=1,2,…,n<br>$$<br>由实际数据计算得到的熵和条件熵叫做经验熵和经验条件熵；设数据集为D,根据特征A将数据集分成若干个子集<em>D</em><sub><em>i</em></sub>,那么D的经验熵(<em>H</em>(<em>D</em>))和给定A的条件下D的经验条件熵(<em>H</em>(<em>D</em>|<em>A</em>))为:</p><p>$$<br>H(D)=-\sum_{k=1}^K\frac{|D_k|}{|D|}log_2\frac{|D_k|}{|D|},\\<br>H(D|A)=\sum_{i=1}^n\frac{|D_i|}{|D|}H(D_i)=\sum_{i=1}^n\frac{|D_i|}{|D|}\sum_{k=1}^K\frac{|D_{ik}|}{|D_i|}log_2\frac{|D_{ik}|}{|D_i|}\\<br>$$<br>|<em>D</em><sub><em>k</em></sub>|表示k类样本的数目,|<em>D</em>|是总的样本数,|<em>D</em><sub><em>i**k</em></sub>|表示在第i个子集中k类样本的数目,|<em>D</em><sub><em>i</em></sub>|表示第i个子集的样本数</p><p>一个好的分类特征应该是：根据这个特征划分的数据集后的熵应该比原来数据集的熵要低,因此定义信息增益<em>g</em>(<em>D</em>, <em>A</em>)为：</p><p><em>g</em>(<em>D</em>, <em>A</em>) = <em>H</em>(<em>D</em>) − <em>H</em>(<em>D</em>|<em>A</em>)</p><p>所以根据信息增益来选择特征：<strong>对训练集(或子集)计算每个特征的信息增益，选择信息增益最大的特征来划分数据集</strong></p><p>信息增益计算的是绝对值，因此对取值较多的特征有倾向性(取值越多,加和也越大),所以将信息增益除以该特征的经验熵来标准化信息增益，得到信息增益比:</p><p>$$<br>g_k(D,A)=\frac{g(D,A)}{H_A(D)},H_A(D)=-\sum_{i=1}^n\frac{|D_i|}{|D|}log_2\frac{|D_i|}{|D|}<br>$$<br>n表示特征A可以取值的个数(A的水平)</p><h3 id="生成决策树"><a href="#生成决策树" class="headerlink" title="生成决策树"></a>生成决策树</h3><p>生成决策树的算法有3种：ID3,C4.5和CRAT，CART算法比较特殊，后面单独讲；前两种算法都只可以用来分类，CART既可以分类也可以回归</p><p>ID3算法在决策树的各个节点上应用信息增益法则选择特征，递归构建决策树：从根节点开始，对节点计算所有可能的特征的信息增益，选择信息增益最大的特征作为节点的特征，由该特征的不同取值建立子节点，再对子节点递归地调用以上方法构建决策树，直到所有特征的信息增益都很小或者没有特征可以选择为止</p><p>C4.5算法和ID3的区别在于使用信息增益比来选择特征</p><h3 id="决策树的剪枝"><a href="#决策树的剪枝" class="headerlink" title="决策树的剪枝"></a>决策树的剪枝</h3><p>在生成决策树的过程中是以尽可能的准确分类为标准，但是这样往往会出现过拟合的情况，为了避免过拟合，需要限制模型的自由度，即对模型进行正则化约束，在决策树模型里面就是剪枝</p><p>决策树的剪枝是通过最小化损失函数来实现；决策树学习的损失函数为：</p><p>$$<br>C_{\alpha}(T)=\sum_{t=1}^{|T|}N_tH_t(T)+\alpha|T|\\<br>H_t(T)=-\sum_k^K\frac{N_{tk}}{N_t}log2\frac{N_{tk}}{N_t}<br>$$<br>其中t表示叶节点,|T|是叶节点个数,<em>N</em><sub><em>t</em></sub>是t叶节点的样本数,<em>N</em><sub><em>t**k</em></sub>是t叶节点中k类样本的个数</p><p>将损失函数的第一项记作<em>C</em>(<em>T</em>),</p><p>$$<br>C(T)=\sum_{t=1}^{|T|}N_tH_t(T)=-\sum_{t=1}^{|T|}N_t\sum_k^K\frac{N_{tk}}{N_t}log2\frac{N_{tk}}{N_t}=-\sum_{t=1}^{|T|}\sum_k^KN_{tk}log2\frac{N_{tk}}{N_t}<br>$$</p><p>损失函数可以写成：</p><p><em>C</em><sub><em>α</em></sub>(<em>T</em>) = <em>C</em>(<em>T</em>) + <em>α</em>|<em>T</em>|</p><p><em>C</em>(<em>T</em>)表示模型对数据的拟合程度(如果完全拟合，那么经验熵就为为0)，|T|表示模型的复杂度(叶子节点的多少)，<em>α</em>的作用就是在两者间平衡(对模型复杂度有个惩罚)</p><p>决策树剪枝的过程为：从下往上进行回缩，如果回缩前的模型为<em>T</em><sub><em>A</em></sub>,回缩后的模型为<em>T</em><sub><em>B</em></sub>:</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210307192547332.png"></p><p>如果有：</p><p><em>C</em><sub><em>α</em></sub>(<em>T</em><sub><em>B</em></sub>) ≤ <em>C</em><sub><em>α</em></sub>(<em>T</em><sub><em>A</em></sub>)</p><p>那么就进行回缩剪枝，将父节点变为叶节点</p><h3 id="CART算法"><a href="#CART算法" class="headerlink" title="CART算法"></a>CART算法</h3><p>CART的全称为classification and regression<br>tree,可以用来处理<strong>分类和回归</strong>任务，得到的决策树是二叉树，内部节点的取值只有是和否,左分支为“是”的分支,右分支为“否”的分支</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>CART算法使用<strong>基尼指数</strong>作为最优特征的选择依据，而不是信息增益</p><p>在分类问题中，假设有K个类，样本点属于第k类的概率为<em>p</em><sub><em>k</em></sub>,那么概率分布的基尼指数为：</p><p>$$<br>Gini(p)=\sum_{k=1}^Kp_k(1-p_k)=1-\sum_{k=1}^Kp_k^2<br>$$<br>对于给定的样本集合D，基尼指数为：<br>$$<br>Gini(D)=1-\sum_{k=1}^K(\frac{|C_k|}{|D|})^2<br>$$</p><p>如果数据集D可以根据特征A的某个值分割成D1和D2两个部分，则在特征A的条件下，集合D的基尼指数为：</p><p>$$<br>Gini(D,A)=\frac{|C_1|}{|D|}Gini(D_1)+\frac{|C_2|}{|D|}Gini(D_2)<br>$$<br>因此CART算法构建决策树的过程为：在所有可能的特征A和其切分点a的组合中选择使上式最小的A和a将数据分成两个子集，生成两个子节点，再在子节点上重复这个过程，直到满足停止条件</p><p>以最开始的鸢尾花决策树为例：决策树做预测比较简单：就是从根节点(最上面)往下进行判断；如果现在有一个iris花,从根节点开始(深度为0)，花瓣长度是否小于2.45,如果小于2.45就是往左走，此时左边的节点没有子节点，这样的节点叫做叶子节点，然后就可以判断该花是setosa类</p><p>从上图可以看到每个节点都有一些属性(gini,samples,value,class)：</p><ul><li>  samples属性：该节点所应用的样本数量，比如在深度为1的右侧节点中有100个训练实例的花瓣长度大于2.45，在这100个里面又有54个实例的花瓣宽度小于1.75(深度为2的左节点)</li><li>value属性：该节点中每个类型有多少训练实例；比如最底部的右侧节点的value表示46个实例中有0个Iris<br>  setosa,1个 Iris versicolor,和45个Iris virginica</li><li>  gini属性：该节点的不纯度，如果该节点所有的实例都是一个类，那么gini就是0，表示纯的；比如深度为1的左节点，全部是setosa</li></ul><p>该决策树的决策边界可以用下图来表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210306162213679.png"></p><h5 id="估计类的概率"><a href="#估计类的概率" class="headerlink" title="估计类的概率"></a>估计类的概率</h5><p>决策树也可以估计一个实例属于特定类的概率<br>首先找到这个实例所属的叶子节点，然后返回该节点中各类的训练实例所占的比例作为这个实例属于各个类的概率；比如现在有一个鸢尾花花瓣长5cm宽1.5cm，那么它所属的叶子节点为深度为2的左节点，所以决策树输出概率为:0%是setosa,90.7%(49/54)是versicolor,9.3%(5/54)是virginica，如果让决策树来预测这个花的类别，会输出class<br>1 (versicolor):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">tree_clf.predict_proba([[<span class="hljs-number">5</span>,<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([[<span class="hljs-number">0.</span>        , <span class="hljs-number">0.90740741</span>, <span class="hljs-number">0.09259259</span>]])<br>tree_clf.predict([[<span class="hljs-number">5</span>,<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>需要注意的是：落在某个叶子节点中的所有实例的输出概率都是一样的(上面决策边界图里面同一个长方形里面的点)</p><h4 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h4><p>决策树的回归也是根据某个特征来划分数据集，但是和分类不同，在划分的子集上并不是对应着一个类，而是对应着一个输出，可以用下图来理解：</p><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210307202506758.png"></p></center><p>图中黑色的竖线代表划分(上图只有一个特征)，有颜色的横线表示每次划分后在相应的子集中的输出</p><p>假设已将输入空间(数据集)划分成M个单元(子集)：<em>R</em><sub>1</sub>, <em>R</em><sub>2</sub>, …, <em>R</em><sub><em>M</em></sub>,在<em>R</em><sub><em>m</em></sub>单元上有一个固定的输出值<em>C</em><sub><em>m</em></sub>,所以回归树模型可以表示为：<br>$$<br>f(x)=\sum_{m=1}^MC_mI(x\in R_m)<br>$$<br>I函数表示x在<em>R</em><sub><em>m</em></sub>里面的时候为1，否则为0<br>在每个单元上可以使用平方误差来表示回归树的预测误差，通过最小化平方误差，我们就可以求解出每个单元上的最优输出值<em>Ĉ</em><sub><em>m</em></sub>:</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/2021-03-07_20-40-32.jpg"></p><p><em>Ĉ</em><sub><em>m</em></sub> = <em>a<strong>v</strong>e</em>(<em>y</em><sub><em>i</em></sub>|<em>x</em><sub><em>i</em></sub> ∈ <em>R</em><sub><em>m</em></sub>)<br>每个子集上的最优输出有了，那么现在的问题就是怎样进行划分？<br>对于特征j和其分割点s，(j,s)对输入空间进行划分得到两个子空间<em>R</em><sub>1</sub>, <em>R</em><sub>2</sub>：</p><p><em>R</em><sub>1</sub>(<em>j</em>, <em>s</em>) = {<em>x</em>|<em>x</em><sup><em>j</em></sup> ≤ <em>s</em>}; <em>R</em><sub>2</sub>(<em>j</em>, <em>s</em>) = {<em>x</em>|<em>x</em><sup><em>j</em></sup> &gt; <em>s</em>}<br>目的就是找到最优的(j,s)使得：</p><p><em>m<strong>i</strong>n</em><sub><em>j</em>, <em>s</em></sub>[<em>m<strong>i</strong>n</em><sub><em>c</em><sub>1</sub></sub>∑<sub><em>x</em><sub><em>i</em></sub> ∈ <em>R</em><sub>1</sub>(<em>j</em>, <em>s</em>)</sub>(<em>y</em><sub><em>i</em></sub> − <em>c</em><sub>1</sub>)<sup>2</sup> + <em>m<strong>i</strong>n</em><sub><em>c</em><sub>2</sub></sub>∑<sub><em>x</em><sub><em>i</em></sub> ∈ <em>R</em><sub>2</sub>(<em>j</em>, <em>s</em>)</sub>(<em>y</em><sub><em>i</em></sub> − <em>c</em><sub>2</sub>)<sup>2</sup>]<br>通常的做法为：遍历特征j，对固定的切分特征j扫描切分点s(如果是连续的需要离散化)，然后选择使上式最小的(j,s)组合，按照(j,s)组合对数据集进行划分，接着继续对子集重复该步骤，直到满足停止条件</p><p>在Scikit-Learn里面可以使用<code>DecisionTreeRegressor</code>类进行回归树的构建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># Quadratic training set + noise</span><br>np.random.seed(<span class="hljs-number">42</span>)<br>m = <span class="hljs-number">200</span><br>X = np.random.rand(m, <span class="hljs-number">1</span>)<br>y = <span class="hljs-number">4</span> * (X - <span class="hljs-number">0.5</span>) ** <span class="hljs-number">2</span><br>y = y + np.random.randn(m, <span class="hljs-number">1</span>) / <span class="hljs-number">10</span><br><br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeRegressor<br><br>tree_reg = DecisionTreeRegressor(max_depth=<span class="hljs-number">2</span>, random_state=<span class="hljs-number">42</span>)<br>tree_reg.fit(X, y)<br>&gt;&gt; DecisionTreeRegressor(max_depth=<span class="hljs-number">2</span>, random_state=<span class="hljs-number">42</span>)<br>export_graphviz(<br>        tree_reg,<br>        out_file=<span class="hljs-string">&quot;../test/iris_tree1.dot&quot;</span>,<br>        feature_names=[<span class="hljs-string">&quot;x1&quot;</span>],<br>        rounded=<span class="hljs-literal">True</span>,<br>        filled=<span class="hljs-literal">True</span><br>    )<br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">dot -Tpng iris_tree1.dot -o iris_tree2.png<br></code></pre></td></tr></table></figure><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/iris_tree2.png"></p></center><h4 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h4><p>CART算法的剪枝和一般的决策树剪枝不同</p><p>CART算法对决策树的每一个内部节点都进行剪枝，生成一个子决策树的序列；假设树的结构如下：</p><center><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210308223511075.png"></p></center><p>设整体树为<em>T</em><sub>0</sub>,对<em>T</em><sub>0</sub>的任意内部节点t,可以计算以t为单节点的树的损失函数<em>C</em><sub><em>α</em></sub>(<em>t</em>)和以t为根节点的子树的损失函数<em>C</em><sub><em>α</em></sub>(<em>T</em><sub><em>t</em></sub>);当<em>α</em>充分小的时候<em>C</em><sub><em>α</em></sub>(<em>T</em><sub><em>t</em></sub>) &lt; <em>C</em><sub><em>α</em></sub>(<em>t</em>)(对树的复杂度惩罚较小,较复杂的树能够较好的拟合数据，因此损失函数较低)，当<em>α</em>增大到某一个值的时候,两者相等，也就是单节点的树和子树的损失函数值相等,但是单节点的树比较简单,因此取单节点树,即对树进行剪枝</p><p>因此对<em>T</em><sub>0</sub>中的每个内部节点都可以计算一个两者相等时的<em>α</em>值：</p><p>$$<br>g(t) = \frac{C(t)-C_\alpha(T_t)}{|T_t|-1}<br>$$<br>表示剪枝后整体损失函数减少的程度</p><p>剪枝过程就为：对<em>T</em><sub>0</sub>的每个内部节点计算<em>g</em>(<em>t</em><sub><em>i</em></sub>),剪去有最小<em>g</em>(<em>t</em><sub><em>i</em></sub>)的内部节点的子节点，得到子树<em>T</em><sub><em>i</em></sub>,然后继续对<em>T</em><sub><em>i</em></sub>进行剪枝,直到根节点；对于得到的子树序列<em>T</em><sub>1</sub>, <em>T</em><sub>2</sub>, …, <em>T</em><sub><em>n</em></sub>通过交叉验证的方法选择最优的子树<em>T</em><sub><em>α</em></sub>,此时也可以确定相应的<em>α</em>了</p><h4 id="Sci-kit-learn中的剪枝参数"><a href="#Sci-kit-learn中的剪枝参数" class="headerlink" title="Sci-kit learn中的剪枝参数"></a>Sci-kit learn中的剪枝参数</h4><p>上面所讲的剪枝方法称为后剪枝(post<br>pruning),即在树构建好了之后再去进行修剪;与之对应的是预剪枝,也就是在构建树的过程中限制树的生长来减少过拟合</p><p>Sci-kit learn提供了一些<strong>预剪枝</strong>的参数：</p><ul><li>  <code>max_depth</code> int, default=None;树的最大深度</li><li><code>min_samples_split</code>和<code>min_samples_leaf</code> int/float<br>  如果是整数,则表示绝对数量;如果是浮点数,则表示占样本总数的比例;<code>min_samples_split</code>为内部节点进行切割所需的最小样本数,<code>min_samples_leaf</code>为切割后形成的叶节点内所含的最小样本数</li><li><code>min_weight_fraction_leaf</code>：该参数一般和<code>class_weight</code>参数一起使用,主要解决不平衡的样本问题(某一类或几类比其他的类占比要大得多);对于不平衡的样本可以使用<code>class_weight</code>指定权重(使用字典指定类的权重{class_label:<br>  weight}或者直接用<code>balance</code>表示自动平衡各类),然后使用<code>min_weight_fraction_leaf</code>来指定在每个叶节点所必须的最小权重比例(占总权重)</li><li>  <code>max_feature</code>:随机选择max_feature数量的特征进行最优化,有多种选择，具体可以参考官网</li><li><code>min_impurity_decrease</code>:<br>  设定不纯度下降的最小值，只有大于设定阈值的分割才会发生</li></ul><p>Sci-kit<br>learn使用的<strong>后剪枝策略</strong>就是上面讲的CART的剪枝算法,提供的参数为<code>ccp_alpha</code>;上面提到剪枝过程是逐次选择最小<em>g</em>(<em>t</em><sub><em>i</em></sub>)的内部节点进行剪枝,因此我们所选择的<em>g</em>(<em>t</em><sub><em>i</em></sub>)是逐渐增大的，<strong>当<em>g</em>(<em>t</em><sub><em>i</em></sub>)大于<code>ccp_alpha</code>的时候就停止剪枝</strong></p><h2 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h2><p>上面已经用过了<code>DecisionTreeRegressor</code>和<code>DecisionTreeClassifier</code>类的中的一些参数,现在来看一下其他的参数</p><ul><li>  <code>criterion</code>:可选gini或者entropy；表示不纯度的衡量指标</li><li><code>random_state</code>:随机种子数，Sci-kit<br>  learn在选择最优的split的时候，并不是选择所有的特征，而是随机选择一部分特征(数量由<code>max_features</code>来控制)，从中选择不纯度指标最优的特征进行分割，因此具有“随机化”</li><li><code>splitter</code>:<br>  有两个选项：<code>best</code>和<code>random</code>;两者在对每个feature选择阈值来分割时有区别：<code>best</code>是使用不纯度指标来评估每个可能的阈值，从而找到最优的切分点，而<code>random</code>是利用一个均匀随机抽样的函数(函数输入是特征的最小值,最大值和上面提到的random_state，也就是说依据均匀分布在相应特征的取值范围内随机选一个值作为分割点)；因此<strong>使用<code>random</code>参数带来的随机化可以在一定程度上减少过拟合</strong></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.bilibili.com/video/BV1ut41197F6?from=search&amp;seid=9344266940719140153">https://www.bilibili.com/video/BV1ut41197F6?from=search&amp;seid=9344266940719140153</a></p><p><a href="https://www.bilibili.com/video/BV1ZK4y1b7Xt">https://www.bilibili.com/video/BV1ZK4y1b7Xt</a></p><p><a href="https://www.bilibili.com/video/BV1MA411J7wm">https://www.bilibili.com/video/BV1MA411J7wm</a></p><p><a href="https://towardsdatascience.com/how-to-tune-a-decision-tree-f03721801680">https://towardsdatascience.com/how-to-tune-a-decision-tree-f03721801680</a></p><p>李航统计学习</p><p>Sci-Kit learn 官网教程</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础03</title>
    <link href="/2021/03/01/python-task3/"/>
    <url>/2021/03/01/python-task3/</url>
    
    <content type="html"><![CDATA[<p>天池python task3</p><span id="more"></span><p>Task3 包含：</p><ul><li>  函数</li><li>  类与对象</li><li>  魔法方法</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%87%BD%E6%95%B0%20-%20%E5%9D%9A%E6%9E%9C%E4%BA%91_00.png"></p><p>函数是带名称的代码块，用于完成具体的工作，结构为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">functionname</span>(<span class="hljs-params">parameters</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;函数文档字符串&quot;&quot;&quot;</span><br>    functionsuite<br>    <span class="hljs-keyword">return</span> [expression]<br></code></pre></td></tr></table></figure><h3 id="函数文档"><a href="#函数文档" class="headerlink" title="函数文档"></a>函数文档</h3><p>函数文档字符串(DocStrings)是对函数的描述;在函数体的第一行使用3个单引号或者双引号来定义文档字符串；使用惯例是：<strong>首行描述函数功能，第二行空行，第三行为函数的具体描述</strong></p><p>可以使用<code>__doc__</code>来获取函数的文档字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">div</span>(<span class="hljs-params">x,y</span>):</span><br>  <span class="hljs-string">&#x27;&#x27;&#x27;除法计算</span><br><span class="hljs-string">  </span><br><span class="hljs-string">  y不能为0&#x27;&#x27;&#x27;</span><br>  <span class="hljs-keyword">return</span>(x/y)<br><br>div(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>&gt;&gt; <span class="hljs-number">0.5</span><br><span class="hljs-built_in">print</span>(div.__doc__)<br>&gt;&gt; 除法计算<br>&gt;&gt;   <br>&gt;&gt;   y不能为<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210301214319502.png"></p><p>形参(parameter)是函数工作所需要的信息，实参(argument)是函数调用时传递的信息；函数调用时实参会被传递给形参</p><p><strong>传递实参的方式</strong>有：位置实参和关键字实参：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printinfo</span>(<span class="hljs-params">name,age</span>):</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:&#123;0&#125;,Age:&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, age))<br>  <br>printinfo(<span class="hljs-string">&quot;ada&quot;</span>,<span class="hljs-number">12</span>)<span class="hljs-comment">##按照位置传递实参</span><br>&gt;&gt; Name:ada,Age:<span class="hljs-number">12</span><br>printinfo(age=<span class="hljs-number">12</span>,name=<span class="hljs-string">&quot;ada&quot;</span>)<span class="hljs-comment">##按照关键字传递实参</span><br>&gt;&gt; Name:ada,Age:<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>对于形参，我们可以给其指定默认值，如果给这样的形参提供了实参则使用实参的值，如果没有对应的实参则使用默认值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printinfo1</span>(<span class="hljs-params">name,age=<span class="hljs-number">10</span></span>):</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:&#123;0&#125;,Age:&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, age))<br>  <br>printinfo1(<span class="hljs-string">&quot;ada&quot;</span>,<span class="hljs-number">12</span>)<span class="hljs-comment">##提供了位置实参</span><br>&gt;&gt; Name:ada,Age:<span class="hljs-number">12</span><br>printinfo1(<span class="hljs-string">&quot;ada&quot;</span>)<span class="hljs-comment">##没有提供实参，使用默认值</span><br>&gt;&gt; Name:ada,Age:<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>有时候不知道函数要接受的实参的个数，这个时候可以使用加星号的形参名，将多余的实参放到以形参名命名的<strong>元组</strong>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printinfo3</span>(<span class="hljs-params">num1, *num2</span>):</span><br>    <span class="hljs-built_in">print</span>(num1)<br>    <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> num2:<br>        <span class="hljs-built_in">print</span>(var)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(num2),<span class="hljs-built_in">len</span>(num2))<br>        <br>printinfo3(<span class="hljs-number">10</span>)<br>&gt;&gt; <span class="hljs-number">10</span><br>&gt;&gt; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">tuple</span>&#x27;&gt; 0</span><br><span class="hljs-class"><span class="hljs-title">printinfo3</span>(<span class="hljs-params"><span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span></span>)</span><br><span class="hljs-class">&gt;&gt; 10</span><br><span class="hljs-class">&gt;&gt; 20</span><br><span class="hljs-class">&gt;&gt; 30</span><br><span class="hljs-class">&gt;&gt; &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">tuple</span>&#x27;&gt; 2</span><br></code></pre></td></tr></table></figure><p>也可以使用在形参名前加两个星号，将多余的实参(参数名和值构成的键值对)放到以形参名命名的<strong>字典</strong>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printinfo4</span>(<span class="hljs-params">num1, *num2, **others</span>):</span><br>    <span class="hljs-built_in">print</span>(num1)<br>    <span class="hljs-built_in">print</span>(num2,<span class="hljs-built_in">type</span>(num2),<span class="hljs-built_in">len</span>(num2))<br>    <span class="hljs-built_in">print</span>(others,<span class="hljs-built_in">type</span>(others),<span class="hljs-built_in">len</span>(others))<br>    <br>printinfo4(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>)<br>&gt;&gt; <span class="hljs-number">10</span><br>&gt;&gt; (<span class="hljs-number">20</span>, <span class="hljs-number">30</span>) &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">tuple</span>&#x27;&gt; 2</span><br><span class="hljs-class">&gt;&gt; &#123;&#125; &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt; 0</span><br><span class="hljs-class"><span class="hljs-title">printinfo4</span>(<span class="hljs-params"><span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span></span>)</span><br><span class="hljs-class">&gt;&gt; 10</span><br><span class="hljs-class">&gt;&gt; (<span class="hljs-params"><span class="hljs-number">20</span>, <span class="hljs-number">30</span></span>) &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">tuple</span>&#x27;&gt; 2</span><br><span class="hljs-class">&gt;&gt; &#123;&#x27;<span class="hljs-title">a</span>&#x27;:</span> <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt; 2</span><br></code></pre></td></tr></table></figure><p>如果在传递实参时对某个实参想要强制使用关键字来传递，可以使用*将其与前面的参数分开：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printinfo15</span>(<span class="hljs-params">name,*,age</span>):</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:&#123;0&#125;,Age:&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, age))<br><br>printinfo15(<span class="hljs-string">&quot;ada&quot;</span>,<span class="hljs-number">10</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): TypeError: printinfo15() takes <span class="hljs-number">1</span> positional argument but <span class="hljs-number">2</span> were given<br>printinfo15(<span class="hljs-string">&quot;ada&quot;</span>,age=<span class="hljs-number">10</span>)<span class="hljs-comment">##必须使用关键字</span><br>&gt;&gt; Name:ada,Age:<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210301220956029.png"></p><p>定义在函数内部的变量只有在函数内部也可以使用，具有局部作用域，称为局部变量；定义在函数外部的变量在全局都可以访问，称为全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">4</span><span class="hljs-comment">##全局变量</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printinfo6</span>(<span class="hljs-params">num1</span>):</span><br>  num2 = <span class="hljs-number">2</span><br>  <span class="hljs-built_in">print</span>(num1+a+num2)<br><br>printinfo6(<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-number">7</span><br>num2<span class="hljs-comment">##局部变量</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): NameError: name <span class="hljs-string">&#x27;num2&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></td></tr></table></figure><p>在内部作用域中想要改变外部作用域的变量时需要使用<code>global</code>(外部全局变量)和<code>nonlocal</code>(外部非全局变量)关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printinfo7</span>(<span class="hljs-params">num1</span>):</span>  <span class="hljs-keyword">global</span> a  a = <span class="hljs-number">2</span>  num2 = <span class="hljs-number">2</span>  <span class="hljs-built_in">print</span>(num1+a+num2)printinfo7(<span class="hljs-number">1</span>)&gt;&gt; 5<span class="hljs-built_in">print</span>(a) <span class="hljs-comment">##a发生了改变&gt;&gt; 2</span><br></code></pre></td></tr></table></figure><p>当一个函数包含在另一个函数内部，这种函数叫做内嵌函数，内嵌函数只能在函数内部进行调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">outer</span>():</span>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;outer函数在这被调用&#x27;</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>():</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;inner函数在这被调用&#x27;</span>)    inner()  <span class="hljs-comment"># 该函数只能在outer函数内部被调用outer()&gt;&gt; outer函数在这被调用&gt;&gt; inner函数在这被调用inner()##不能在外部访问&gt;&gt; Error in py_call_impl(callable, dots$args, dots$keywords): NameError: name &#x27;inner&#x27; is not defined</span><br></code></pre></td></tr></table></figure><p>当一个内嵌函数对外层的非全局作用域的变量进行引用，那么这个内嵌函数就是<strong>闭包</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">funx</span>(<span class="hljs-params">x</span>):</span>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">funy</span>(<span class="hljs-params">y</span>):</span>    <span class="hljs-keyword">return</span>(x * y)    <span class="hljs-keyword">return</span> funynew_f = funx(<span class="hljs-number">8</span>)<span class="hljs-built_in">print</span>(new_f,<span class="hljs-built_in">type</span>(new_f))&gt;&gt; &lt;function funx.&lt;<span class="hljs-built_in">locals</span>&gt;.funy at <span class="hljs-number">0x00000209F628AE50</span>&gt; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">function</span>&#x27;&gt;<span class="hljs-title">new_f</span>(<span class="hljs-params"><span class="hljs-number">2</span></span>)&gt;&gt; 16</span><br></code></pre></td></tr></table></figure><p>从上面的例子可以看出，我们可以使用闭包来创建函数，作为函数工厂来使用(和R里面的闭包类似)</p><p>上面也提到了可以使用<code>nonlocal</code>来改变外层非全局变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">funx</span>(<span class="hljs-params">x</span>):</span><br>  num1 = <span class="hljs-number">4</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;original num1 is &quot;</span>,num1)<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">funy</span>(<span class="hljs-params">y</span>):</span><br>    <span class="hljs-keyword">nonlocal</span> num1<br>    num1 = <span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;current num1 is &quot;</span>,num1)<br>    <span class="hljs-keyword">return</span>(x * y + num1)<br>  <span class="hljs-keyword">return</span> funy<br><br>new_f = funx(<span class="hljs-number">8</span>) <br>&gt;&gt; original num1 <span class="hljs-keyword">is</span>  <span class="hljs-number">4</span><br>new_f(<span class="hljs-number">2</span>)<br>&gt;&gt; current num1 <span class="hljs-keyword">is</span>  <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p>如果一个函数在内部调用自己，那么这个函数就是递归函数,下面以计算n的阶乘为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">n_fac</span>(<span class="hljs-params">n</span>):</span><br>  <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> n * n_fac(n-<span class="hljs-number">1</span>)<br><br>n_fac(<span class="hljs-number">100</span>)<br>&gt;&gt; <span class="hljs-number">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基因组版本坐标转化</title>
    <link href="/2021/02/26/liftover/"/>
    <url>/2021/02/26/liftover/</url>
    
    <content type="html"><![CDATA[<p>使用R包<code>rtracklayer</code> 进行基因组坐标版本转化</p><span id="more"></span><p>现在有GRCh37的基因组坐标文件(TCGA的突变记录)，要将其转换成GRCh38的坐标：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs r">library(dplyr)<br>&gt;&gt; Warning: package <span class="hljs-string">&#x27;dplyr&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.3<br>&gt;&gt; <br>&gt;&gt; Attaching package: <span class="hljs-string">&#x27;dplyr&#x27;</span><br>&gt;&gt; The following objects are masked from <span class="hljs-string">&#x27;package:stats&#x27;</span>:<br>&gt;&gt; <br>&gt;&gt;     filter, lag<br>&gt;&gt; The following objects are masked from <span class="hljs-string">&#x27;package:base&#x27;</span>:<br>&gt;&gt; <br>&gt;&gt;     intersect, setdiff, setequal, union<br><br>dt &lt;- readRDS(<span class="hljs-string">&quot;../test/dt.rds&quot;</span>) %&gt;% <br>  as.data.frame()<br><br>head(dplyr::as_tibble(dt))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 6 x 8</span><br>&gt;&gt;   Hugo_Symbol Chromosome Start_position End_position sample                Protein_Change Variant_Classifica~ Variant_Type<br>&gt;&gt;   &lt;chr&gt;            &lt;int&gt;          &lt;int&gt;        &lt;int&gt; &lt;chr&gt;                 &lt;chr&gt;          &lt;chr&gt;               &lt;chr&gt;       <br>&gt;&gt; <span class="hljs-number">1</span> SH3PXD2A            <span class="hljs-number">10</span>      <span class="hljs-number">105614934</span>    <span class="hljs-number">105614934</span> TCGA-OR-A5J1-<span class="hljs-number">01</span>A-<span class="hljs-number">11</span>D~ .              Intron              SNP         <br>&gt;&gt; <span class="hljs-number">2</span> INPP5F              <span class="hljs-number">10</span>      <span class="hljs-number">121556913</span>    <span class="hljs-number">121556913</span> TCGA-OR-A5J1-<span class="hljs-number">01</span>A-<span class="hljs-number">11</span>D~ .              Intron              SNP         <br>&gt;&gt; <span class="hljs-number">3</span> ITIH2               <span class="hljs-number">10</span>        <span class="hljs-number">7772149</span>      <span class="hljs-number">7772149</span> TCGA-OR-A5J1-<span class="hljs-number">01</span>A-<span class="hljs-number">11</span>D~ .              Intron              SNP         <br>&gt;&gt; <span class="hljs-number">4</span> OPN4                <span class="hljs-number">10</span>       <span class="hljs-number">88419681</span>     <span class="hljs-number">88419681</span> TCGA-OR-A5J1-<span class="hljs-number">01</span>A-<span class="hljs-number">11</span>D~ p.G288D        Missense_Mutation   SNP         <br>&gt;&gt; <span class="hljs-number">5</span> TRIM49B             <span class="hljs-number">11</span>       <span class="hljs-number">49053482</span>     <span class="hljs-number">49053482</span> TCGA-OR-A5J1-<span class="hljs-number">01</span>A-<span class="hljs-number">11</span>D~ p.L111F        Missense_Mutation   SNP         <br>&gt;&gt; <span class="hljs-number">6</span> DNAJC4              <span class="hljs-number">11</span>       <span class="hljs-number">64001585</span>     <span class="hljs-number">64001585</span> TCGA-OR-A5J1-<span class="hljs-number">01</span>A-<span class="hljs-number">11</span>D~ p.G219W        Missense_Mutation   SNP<br></code></pre></td></tr></table></figure><p>转换的方法有多种，可以参考<a href="https://www.biostars.org/p/65558/">Converting Genome Coordinates From One Genome<br>Version To<br>Another</a>,这里使用R包<code>rtracklayer</code>来转换</p><p>安装包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-keyword">if</span>(!(<span class="hljs-string">&quot;rtracklayer&quot;</span> %in% installed.packages()))&#123;<br>  BiocManager::install(<span class="hljs-string">&quot;rtracklayer&quot;</span>)<br>&#125;<br><br>library(rtracklayer)<br></code></pre></td></tr></table></figure><p>我们需要使用的是这个包中的<code>liftOver</code>函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">?liftOver<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210226171357422.png"></p><p>该函数需要两个输入：需要转换的基因组区间(<strong>GRanges对象</strong>)；chain文件</p><p>首先将数据框转化为GRanges对象(需要使用GenomicRanges包，在library(rtracklayer)中已经载入了)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">dt$Chromosome &lt;- paste0(<span class="hljs-string">&quot;chr&quot;</span>,dt$Chromosome)<br><br>dt_granges &lt;- makeGRangesFromDataFrame(dt,<br>                         keep.extra.columns=<span class="hljs-literal">TRUE</span>,<br>                         ignore.strand=<span class="hljs-literal">TRUE</span>,<br>                         seqinfo=<span class="hljs-literal">NULL</span>,<br>                         seqnames.field=<span class="hljs-string">&quot;Chromosome&quot;</span>,<span class="hljs-comment">##染色体所在列的名称</span><br>                         start.field=<span class="hljs-string">&quot;Start_position&quot;</span>,<span class="hljs-comment">##起始位点所在列的名称</span><br>                         end.field=<span class="hljs-string">&quot;End_position&quot;</span>,<span class="hljs-comment">##终止位点所在列的名称</span><br>                         starts.in.df.are.0based=<span class="hljs-literal">FALSE</span>)<span class="hljs-comment">##是否是0based的</span><br></code></pre></td></tr></table></figure><p>这里面需要注意的是：需要转换的基因组坐标起始位点是0based还是1based；对于TCGA的<a href="https://docs.gdc.cancer.gov/Encyclopedia/pages/Mutation_Annotation_Format_TCGAv2/">maf文件</a>是1-based的，所以这里选FALSE：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210226172456415.png"><br>需要的第二个文件是Chain文件，需要在<a href="https://hgdownload.soe.ucsc.edu/downloads.html">UCSC</a>网站上下载：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210226225522742.png"></p><p>使用<code>import.chain</code>函数导入Chain文件，进行转换：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">chainObject &lt;- import.chain(<span class="hljs-string">&quot;../test/hg19ToHg38.over.chain&quot;</span>)<br><br>results &lt;- as.data.frame(liftOver(dt_granges, chainObject))<br><br>head(dplyr::as_tibble(results))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 6 x 12</span><br>&gt;&gt;   group group_name seqnames   start     end width strand Hugo_Symbol sample   Protein_Change Variant_Classif~ Variant_Type<br>&gt;&gt;   &lt;int&gt; &lt;chr&gt;      &lt;fct&gt;      &lt;int&gt;   &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;            &lt;chr&gt;       <br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">1</span> &lt;<span class="hljs-literal">NA</span>&gt;       chr10     <span class="hljs-number">1.04e8</span>  <span class="hljs-number">1.04e8</span>     <span class="hljs-number">1</span> *      SH3PXD2A    TCGA-OR~ .              Intron           SNP         <br>&gt;&gt; <span class="hljs-number">2</span>     <span class="hljs-number">2</span> &lt;<span class="hljs-literal">NA</span>&gt;       chr10     <span class="hljs-number">1.20e8</span>  <span class="hljs-number">1.20e8</span>     <span class="hljs-number">1</span> *      INPP5F      TCGA-OR~ .              Intron           SNP         <br>&gt;&gt; <span class="hljs-number">3</span>     <span class="hljs-number">3</span> &lt;<span class="hljs-literal">NA</span>&gt;       chr10     <span class="hljs-number">7.73e6</span>  <span class="hljs-number">7.73e6</span>     <span class="hljs-number">1</span> *      ITIH2       TCGA-OR~ .              Intron           SNP         <br>&gt;&gt; <span class="hljs-number">4</span>     <span class="hljs-number">4</span> &lt;<span class="hljs-literal">NA</span>&gt;       chr10     <span class="hljs-number">8.67e7</span>  <span class="hljs-number">8.67e7</span>     <span class="hljs-number">1</span> *      OPN4        TCGA-OR~ p.G288D        Missense_Mutati~ SNP         <br>&gt;&gt; <span class="hljs-number">5</span>     <span class="hljs-number">5</span> &lt;<span class="hljs-literal">NA</span>&gt;       chr11     <span class="hljs-number">4.90e7</span>  <span class="hljs-number">4.90e7</span>     <span class="hljs-number">1</span> *      TRIM49B     TCGA-OR~ p.L111F        Missense_Mutati~ SNP         <br>&gt;&gt; <span class="hljs-number">6</span>     <span class="hljs-number">6</span> &lt;<span class="hljs-literal">NA</span>&gt;       chr11     <span class="hljs-number">6.42e7</span>  <span class="hljs-number">6.42e7</span>     <span class="hljs-number">1</span> *      DNAJC4      TCGA-OR~ p.G219W        Missense_Mutati~ SNP<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础02</title>
    <link href="/2021/02/24/python-task2/"/>
    <url>/2021/02/24/python-task2/</url>
    
    <content type="html"><![CDATA[<p>天池python task2</p><span id="more"></span><p>Task2 主要包含python主要数据结构：</p><ul><li>  列表</li><li>  元组</li><li>  字符串</li><li>  字典</li><li>  集合</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%88%97%E8%A1%A8%20-%20%E5%9D%9A%E6%9E%9C%E4%BA%91_00.png"></p><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210224222711937.png"></p><ul><li>  直接创建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-built_in">print</span>(x,<span class="hljs-built_in">type</span>(x))<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">list</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><ul><li>  使用<code>range</code>函数创建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<span class="hljs-comment">##默认是stop，从0开始</span><br><span class="hljs-built_in">print</span>(x,<span class="hljs-built_in">type</span>(x))<br>&gt;&gt; [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>] &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">list</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">x</span> = <span class="hljs-title">list</span>(<span class="hljs-params"><span class="hljs-built_in">range</span>(<span class="hljs-params"><span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span></span>)</span>)</span><br><span class="hljs-class"><span class="hljs-title">print</span>(<span class="hljs-params">x,<span class="hljs-built_in">type</span>(<span class="hljs-params">x</span>)</span>)</span><br><span class="hljs-class">&gt;&gt; [1, 3, 5, 7, 9] &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">list</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">x</span> = <span class="hljs-title">list</span>(<span class="hljs-params"><span class="hljs-built_in">range</span>(<span class="hljs-params"><span class="hljs-number">10</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">2</span></span>)</span>)</span><br><span class="hljs-class"><span class="hljs-title">print</span>(<span class="hljs-params">x,<span class="hljs-built_in">type</span>(<span class="hljs-params">x</span>)</span>)</span><br><span class="hljs-class">&gt;&gt; [10, 8, 6, 4, 2] &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">list</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><ul><li>  利用推导式创建列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [<span class="hljs-number">0</span>] * <span class="hljs-number">5</span> <br>a = [x] * <span class="hljs-number">4</span><br>b = x * <span class="hljs-number">4</span><br><span class="hljs-built_in">print</span>(a,<span class="hljs-built_in">type</span>(a))<br>&gt;&gt; [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]] &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">list</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">print</span>(<span class="hljs-params">b,<span class="hljs-built_in">type</span>(<span class="hljs-params">b</span>)</span>)</span><br><span class="hljs-class">&gt;&gt; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">list</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">a</span>[0][0] = 1</span><br><span class="hljs-class"><span class="hljs-title">print</span>(<span class="hljs-params">a</span>)</span><br><span class="hljs-class">&gt;&gt; [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0]]</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [i ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>)]<br><span class="hljs-built_in">print</span>(x,<span class="hljs-built_in">type</span>(x))<br>&gt;&gt; [<span class="hljs-number">100</span>, <span class="hljs-number">64</span>, <span class="hljs-number">36</span>, <span class="hljs-number">16</span>, <span class="hljs-number">4</span>] &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">list</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210225211530039.png"></p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p><code>append</code>在列表末尾添加元素(作为一个整体添加)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]<br>x.append(<span class="hljs-string">&quot;d&quot;</span>)<br><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br></code></pre></td></tr></table></figure><p><code>extend</code>也是在列表末尾添加元素(添加的是元素的元素)，注意区分两者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x.append([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]<br>x.extend([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p><code>insert</code>在指定位置插入元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x.insert(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;f&quot;</span>)<span class="hljs-comment">##在第三个位置插入f</span><br><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>根据元素的位置删除元素可以使用<code>pop</code>,<code>del</code>；<code>pop</code>方法移除指定位置的元素并且返回该元素(”弹出“)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x.pop()<br>&gt;&gt; <span class="hljs-number">3</span><br>x.pop(<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;b&#x27;</span><br><span class="hljs-keyword">del</span> x[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>根据元素的值删除元素可以使用<code>remove</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x.remove(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><h3 id="获取列表元素"><a href="#获取列表元素" class="headerlink" title="获取列表元素"></a>获取列表元素</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210225212857353.png"></p><p>切片的操作为[start,stop,step],注意是左闭右开：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(x)<br>&gt;&gt; [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>]<br>x[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>]<br>&gt;&gt; [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">2</span>]<br>x[:<span class="hljs-number">4</span>:<span class="hljs-number">1</span>]<br>&gt;&gt; [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>]<br>x[::-<span class="hljs-number">1</span>]<br>&gt;&gt; [<span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>浅拷贝与深拷贝</strong></p><p>对于不可变数据类型，深浅拷贝是一样的(内存地址不变)；对于可变数据类型，浅拷贝只拷贝最外层的可变数据结构(内存地址发生改变)，而深拷贝则拷贝每层的可变数据类型，<a href="https://mp.weixin.qq.com/s/e8N-s2w4gYQPKETVH62EAg">参考</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>b = <span class="hljs-number">1</span><br>x = [a,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>y = [b,<span class="hljs-number">2</span>]<br><br>z = x[:] <span class="hljs-comment">##浅拷贝</span><br>k = y[:] <span class="hljs-comment">##浅拷贝</span><br><br><span class="hljs-keyword">import</span> copy<br>z_d = copy.deepcopy(x) <span class="hljs-comment">##深拷贝</span><br>k_d = copy.deepcopy(y) <span class="hljs-comment">##深拷贝</span><br><br><span class="hljs-comment">##可变数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(x),<span class="hljs-built_in">id</span>(z))<span class="hljs-comment">##不一样</span><br>&gt;&gt; <span class="hljs-number">2241811121856</span> <span class="hljs-number">2241811122112</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(x[<span class="hljs-number">0</span>]),<span class="hljs-built_in">id</span>(z[<span class="hljs-number">0</span>]))<span class="hljs-comment">##一样</span><br>&gt;&gt; <span class="hljs-number">2241817618048</span> <span class="hljs-number">2241817618048</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(x),<span class="hljs-built_in">id</span>(z_d))<span class="hljs-comment">##不一样</span><br>&gt;&gt; <span class="hljs-number">2241811121856</span> <span class="hljs-number">2241817628928</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(x[<span class="hljs-number">0</span>]),<span class="hljs-built_in">id</span>(z_d[<span class="hljs-number">0</span>])) <span class="hljs-comment">##不一样</span><br><br><span class="hljs-comment">##不可变数据类型</span><br>&gt;&gt; <span class="hljs-number">2241817618048</span> <span class="hljs-number">2241817628992</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(y),<span class="hljs-built_in">id</span>(k))<span class="hljs-comment">##不一样</span><br>&gt;&gt; <span class="hljs-number">2241811157952</span> <span class="hljs-number">2241811156032</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(y[<span class="hljs-number">0</span>]),<span class="hljs-built_in">id</span>(k[<span class="hljs-number">0</span>]))<span class="hljs-comment">##一样</span><br>&gt;&gt; <span class="hljs-number">2240632088880</span> <span class="hljs-number">2240632088880</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(y),<span class="hljs-built_in">id</span>(k_d)) <span class="hljs-comment">##不一样</span><br>&gt;&gt; <span class="hljs-number">2241811157952</span> <span class="hljs-number">2241817629056</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(y[<span class="hljs-number">0</span>]),<span class="hljs-built_in">id</span>(k_d[<span class="hljs-number">0</span>])) <span class="hljs-comment">##一样</span><br>&gt;&gt; <span class="hljs-number">2240632088880</span> <span class="hljs-number">2240632088880</span><br></code></pre></td></tr></table></figure><h3 id="常用操作符"><a href="#常用操作符" class="headerlink" title="常用操作符"></a>常用操作符</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228094615853.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>l2 = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>l3 = [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-built_in">print</span>(l1 == l2)<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(l1 == l3)<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(l1 + l2)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(l1 * <span class="hljs-number">3</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> l1)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> l1)<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228095235247.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">l1.count(<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-number">1</span><br>l4 = l1 * <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(l4)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(l4.index(<span class="hljs-number">1</span>))<br>&gt;&gt; <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(l4.index(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<span class="hljs-comment">##从第三个元素开始找</span><br>&gt;&gt; <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(l4.index(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment">##在第二到第四个元素范围内找(左闭右开), 但是里面没有，报错</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): ValueError: <span class="hljs-number">1</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span><br>l4.reverse()<br><span class="hljs-built_in">print</span>(l4)<br>&gt;&gt; [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br>l4.sort()<br><span class="hljs-built_in">print</span>(l4)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br>l4 = l1 * <span class="hljs-number">3</span><br><span class="hljs-built_in">sorted</span>(l4)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(l4)<br>&gt;&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%85%83%E7%BB%84%20-%20%E5%9D%9A%E6%9E%9C%E4%BA%91_00.png"></p><p>元组和列表类似，不同的是元组是不可变数据类型(但是可以嵌套可变数据类型，可以直接更改其元素)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>t1[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span><br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): TypeError: <span class="hljs-string">&#x27;tuple&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br>t1[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(t1)<br>&gt;&gt; (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p>元组相关的操作符和方法也和列表类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>t2 = (<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)<br><br>t1 == t2<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(t1 + t2)<br>&gt;&gt; (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(t1 * <span class="hljs-number">3</span>)<br>&gt;&gt; (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> t1)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> t1)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(t1.count(<span class="hljs-number">1</span>))<br>&gt;&gt; <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(t1.index(<span class="hljs-number">1</span>))<br>&gt;&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="元组拆包"><a href="#元组拆包" class="headerlink" title="元组拆包"></a>元组拆包</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228103946589.png"></p><p>元组拆包(解压)就是将元组拆成单个的元素(结构要和原来的元组相同)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,[<span class="hljs-string">&quot;j&quot;</span>,<span class="hljs-number">9</span>]))<br><br>(a,b,c,(d,e,f)) = t<br><span class="hljs-built_in">print</span>(a,b,c,d,e,f,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> a b [<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-number">9</span>]<br>(a,b,c,(d,e,[f,g])) = t<br><span class="hljs-built_in">print</span>(a,b,c,d,e,f,g,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> a b j <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>如果我们只想要其中几个元素，可以将其他元素赋给<code>*rest</code>(通配符)或者<code>*_</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">(a,*rest,(b,c,[d,e])) = t<br><span class="hljs-built_in">print</span>(a,b,c,d,e,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> a b j <span class="hljs-number">9</span><br><span class="hljs-built_in">print</span>(*rest)<br>&gt;&gt; <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>(a,*_,(b,c,[d,e])) = t<br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228105301884.png"></p><p>如果字符串中出现了一些有特殊含义的字符需要使用<code>\</code>对其进行转义，也可以在字符串前面加上<code>r</code>来表示原始字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a \n b&quot;</span>)<br>&gt;&gt; a <br>&gt;&gt;  b<br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&quot;a \n b&quot;</span>)<br>&gt;&gt; a \n b<br></code></pre></td></tr></table></figure><p>字符串的切片和拼接和列表，元组类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&quot;abcdef&quot;</span><br><br>s1[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>]<br>&gt;&gt; <span class="hljs-string">&#x27;ac&#x27;</span><br><span class="hljs-built_in">print</span>(s1 + <span class="hljs-string">&quot;abc&quot;</span>)<br>&gt;&gt; abcdefabc<br><span class="hljs-built_in">print</span>(s1 * <span class="hljs-number">3</span>)<br>&gt;&gt; abcdefabcdefabcdef<br></code></pre></td></tr></table></figure><h3 id="常用内置方法"><a href="#常用内置方法" class="headerlink" title="常用内置方法"></a>常用内置方法</h3><ul><li>  大小写的转换：<code>capitalize</code>将字符串的第一个字符转换成大写；<code>lower</code>将所有字符转换为小写；<code>upper</code>将所有字符转换成大写；<code>swapcase</code>将大写字符转换成小写，将小写字符转换成大写；<code>title</code>将所有单词的首字母转换成大写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">s2 = <span class="hljs-string">&quot;An apple&quot;</span><br><br>s2.lower()<br>&gt;&gt; <span class="hljs-string">&#x27;an apple&#x27;</span><br>s2.upper()<br>&gt;&gt; <span class="hljs-string">&#x27;AN APPLE&#x27;</span><br>s2.swapcase()<br>&gt;&gt; <span class="hljs-string">&#x27;aN APPLE&#x27;</span><br>s2.title()<br>&gt;&gt; <span class="hljs-string">&#x27;An Apple&#x27;</span><br>s2.lower().capitalize()<br>&gt;&gt; <span class="hljs-string">&#x27;An apple&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>  <code>count(str, beg= 0,end=len(string))</code>返回<code>str</code>在字符串中出现的次数，可以使用<code>beg</code>和<code>end</code>参数指定范围,<strong>大小写敏感</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s2.count(<span class="hljs-string">&quot;A&quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span><br>s2.count(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)<br>&gt;&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>  检查子字符串：<code>endswith(str, beg=0,end=len(string))</code>检查字符串是否以<code>str</code>结束；<code>startswith(substr, beg=0,end=len(string))</code>检查字符串是否以<code>str</code>开头；<code>find(str, beg=0, end=len(string))</code>检查<code>str</code>是否在字符串中，如果在，返回第一个值的索引，如果不在，返回-1；<code>rfind(str, beg=0,end=len(string))</code>类似<code>find</code>,不过是从右边开始查找</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">s3 = <span class="hljs-string">&quot;this is a string&quot;</span><br><br>s3.endswith(<span class="hljs-string">&quot;str&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">False</span><br>s3.endswith(<span class="hljs-string">&quot;ing&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br>s3.startswith(<span class="hljs-string">&quot;this&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br>s3.find(<span class="hljs-string">&quot;str&quot;</span>)<br>&gt;&gt; <span class="hljs-number">10</span><br>s3.find(<span class="hljs-string">&quot;stre&quot;</span>)<br>&gt;&gt; -<span class="hljs-number">1</span><br>s3.rfind(<span class="hljs-string">&quot;str&quot;</span>)<br>&gt;&gt; <span class="hljs-number">10</span><br>s3.find(<span class="hljs-string">&quot;is&quot;</span>)<br>&gt;&gt; <span class="hljs-number">2</span><br>s3.rfind(<span class="hljs-string">&quot;is&quot;</span>)<span class="hljs-comment">##从右边</span><br>&gt;&gt; <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><ul><li>  <code>isnumeric</code>检查字符串是不是只包含数字字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s4 = <span class="hljs-string">&quot;123&quot;</span><br>s4.isnumeric()<br>&gt;&gt; <span class="hljs-literal">True</span><br>s4 = s4 + <span class="hljs-string">&quot;a&quot;</span><br>s4.isnumeric()<br>&gt;&gt; <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><ul><li>对齐并填充：<code>ljust(width,fillchar)</code><br>  将字符串左对齐,并使用fillchar填充到指定的宽度(width)；与之对应的是<code>rjust(width,fillchar)</code>右对齐</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s4.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;*&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;123a****&#x27;</span><br>s4.rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;*&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;****123a&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>  截断字符串：<code>lstrip(char)</code>去掉字符串左边空格(默认)或者指定字符(char);与之对应的是<code>rstrip</code>(右边)和<code>strip</code>(左边加右边)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">s4 = <span class="hljs-string">&quot;  &quot;</span> + s4 + <span class="hljs-string">&quot;123  &quot;</span><br>s4<br>&gt;&gt; <span class="hljs-string">&#x27;  123a123  &#x27;</span><br>s4.lstrip()<br>&gt;&gt; <span class="hljs-string">&#x27;123a123  &#x27;</span><br>s4.rstrip()<br>&gt;&gt; <span class="hljs-string">&#x27;  123a123&#x27;</span><br>s4.strip()<br>&gt;&gt; <span class="hljs-string">&#x27;123a123&#x27;</span><br>s4 = s4.strip()<br><br>s4.strip(<span class="hljs-string">&quot;123&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>字符串切割：<code>partition(sub)</code>在字符串中找sub字符串，找到之后将原字符串以子字符串分成3部分，如果找不到返回原字符串加上<code>,</code>;<code>rpartition(sub)</code>和<code>partition</code>类似，不过是从右边开始寻找，<strong>注意：这里的寻找只找第一个，所以两者的结果可能不同</strong>;<br>  <code>split(str=&quot; &quot;,num)</code>以str为分隔符切割字符串，可以指定分割产生的子字符串的个数，返回子字符串构成的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s5 = <span class="hljs-string">&#x27;abc123abc&#x27;</span><br><span class="hljs-built_in">print</span>(s5.partition(<span class="hljs-string">&#x27;b&#x27;</span>))<br>&gt;&gt; (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c123abc&#x27;</span>)<br><span class="hljs-built_in">print</span>(s5.rpartition(<span class="hljs-string">&#x27;b&#x27;</span>))<br>&gt;&gt; (<span class="hljs-string">&#x27;abc123a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s5.split(<span class="hljs-string">&quot;b&quot;</span>)<span class="hljs-comment">##分隔符是b</span><br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c123a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br>s5.split(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">1</span>)<span class="hljs-comment">#num指定的是&quot;切割&quot;的次数</span><br>&gt;&gt; [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c123abc&#x27;</span>]<br></code></pre></td></tr></table></figure><ul><li>  <code>replace(old,new,max)</code>将字符串中old子字符串替换成new新字符串，可以通过max指定替换的最大次数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s5.replace(<span class="hljs-string">&quot;bc&quot;</span>,<span class="hljs-string">&quot;**&quot;</span>,<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;a**123abc&#x27;</span><br>s5.replace(<span class="hljs-string">&quot;bc&quot;</span>,<span class="hljs-string">&quot;**&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;a**123a**&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><code>splitlines(keepends)</code><br>  按行分割字符串，返回各行构成的列表(分割符可以为’, ‘’,<br>  ’)；可以通过keepends来指定是否保留分隔符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s6 = <span class="hljs-string">&quot;abc\n123\rbcd\r\n000&quot;</span><br><span class="hljs-built_in">print</span>(s6)<br>&gt;&gt; abc<br>&gt;&gt; 123bcd<br>&gt;&gt; <span class="hljs-number">000</span><br>s6.splitlines()<br>&gt;&gt; [<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;bcd&#x27;</span>, <span class="hljs-string">&#x27;000&#x27;</span>]<br>s6.splitlines(keepends=<span class="hljs-literal">True</span>)<br>&gt;&gt; [<span class="hljs-string">&#x27;abc\n&#x27;</span>, <span class="hljs-string">&#x27;123\r&#x27;</span>, <span class="hljs-string">&#x27;bcd\r\n&#x27;</span>, <span class="hljs-string">&#x27;000&#x27;</span>]<br></code></pre></td></tr></table></figure><ul><li>  字符串的转化：<code>maketrans(intab,outtab)</code>创建intab到outtab的映射；<code>translate(table,deletechars=&quot;&quot;)</code>根据table来进行转化，可以使用<code>deletechars</code>来指定删除的字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">s7 = <span class="hljs-string">&quot;abc has three characters&quot;</span><br><br>intab = <span class="hljs-string">&quot;abc&quot;</span><br>outtab = <span class="hljs-string">&quot;123&quot;</span><br><br>transtab = s7.maketrans(intab,outtab)<br>transtab <span class="hljs-comment">###ASCII对应</span><br>&gt;&gt; &#123;<span class="hljs-number">97</span>: <span class="hljs-number">49</span>, <span class="hljs-number">98</span>: <span class="hljs-number">50</span>, <span class="hljs-number">99</span>: <span class="hljs-number">51</span>&#125;<br>s7.translate(transtab)<br>&gt;&gt; <span class="hljs-string">&#x27;123 h1s three 3h1r13ters&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><ul><li>format 方法<br>  在字符串中使用括号表示format的参数，进行替换；括号内的数字表示位置，字母表示参数名称</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&#123;1&#125; is &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;num&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;1 is num&#x27;</span><br><span class="hljs-string">&quot;&#123;second&#125; is &#123;first&#125;&quot;</span>.<span class="hljs-built_in">format</span>(first = <span class="hljs-string">&quot;num&quot;</span>, second = <span class="hljs-string">&quot;1&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;1 is num&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>  字符串格式化符号</li></ul><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228162350177.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228162434625.png"></p><ul><li>  f字符串：在需要格式化的字符串前面加上f或F，里面用大括号来代替变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;&#x27;123&#x27;&quot;</span><br>b = <span class="hljs-string">&quot;&#x27;cdf&#x27;&quot;</span><br><br><span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> has the same length with <span class="hljs-subst">&#123;b&#125;</span>&quot;</span><br>&gt;&gt; <span class="hljs-string">&quot;&#x27;123&#x27; has the same length with &#x27;cdf&#x27;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E5%AD%97%E5%85%B8%20-%20%E5%9D%9A%E6%9E%9C%E4%BA%91_00.png"></p><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228162934647.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(d1,<span class="hljs-built_in">type</span>(d1))<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##先创建空字典再填充</span><br>d2 = <span class="hljs-built_in">dict</span>()<br>d2[<span class="hljs-string">&quot;a&quot;</span>] = <span class="hljs-number">1</span><br>d2[<span class="hljs-string">&quot;b&quot;</span>] = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(d2,<span class="hljs-built_in">type</span>(d2))<br><br><span class="hljs-comment">##根据可映射对象来创建</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">o1</span> = [(<span class="hljs-params"><span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span></span>),(<span class="hljs-params"><span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span></span>)]</span><br><span class="hljs-class"><span class="hljs-title">o2</span> = (<span class="hljs-params">(<span class="hljs-params"><span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">1</span></span>),(<span class="hljs-params"><span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-number">2</span></span>)</span>)</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">d3</span> = <span class="hljs-title">dict</span>(<span class="hljs-params">o1</span>)</span><br><span class="hljs-class"><span class="hljs-title">d4</span> = <span class="hljs-title">dict</span>(<span class="hljs-params">o2</span>)</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">print</span>(<span class="hljs-params">d3,<span class="hljs-built_in">type</span>(<span class="hljs-params">d3</span>)</span>)</span><br><span class="hljs-class">&gt;&gt; &#123;&#x27;<span class="hljs-title">a</span>&#x27;:</span> <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">print</span>(<span class="hljs-params">d4,<span class="hljs-built_in">type</span>(<span class="hljs-params">d4</span>)</span>)</span><br><span class="hljs-class"></span><br><span class="hljs-class">##根据关键字参数来创建</span><br><span class="hljs-class">&gt;&gt; &#123;&#x27;<span class="hljs-title">c</span>&#x27;:</span> <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">2</span>&#125; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">d5</span> = <span class="hljs-title">dict</span>(<span class="hljs-params">a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span></span>)</span><br><span class="hljs-class"><span class="hljs-title">print</span>(<span class="hljs-params">d5,<span class="hljs-built_in">type</span>(<span class="hljs-params">d5</span>)</span>)</span><br><span class="hljs-class">&gt;&gt; &#123;&#x27;<span class="hljs-title">a</span>&#x27;:</span> <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>还可以使用<code>fromkeys(seq,value)</code>方法来创建；以seq中的元素做键，value作为值(所有的键的值都是value，如果没有则为None)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">seq = (<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>)<br><span class="hljs-built_in">dict</span>.fromkeys(seq)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-literal">None</span>&#125;<br><span class="hljs-built_in">dict</span>.fromkeys(seq,<span class="hljs-number">10</span>)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">10</span>&#125;<br><span class="hljs-built_in">dict</span>.fromkeys(seq,(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment">##不会分开匹配</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-string">&#x27;b&#x27;</span>: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-string">&#x27;c&#x27;</span>: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)&#125;<br></code></pre></td></tr></table></figure><h3 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228163808865.png"><br><code>keys</code>方法返回一个可迭代对象(键)，可以使用<code>list()</code>来转化为列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>d5.keys()<br>&gt;&gt; dict_keys([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])<br><span class="hljs-built_in">type</span>(d5.keys())<br>&gt;&gt; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict_keys</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">list</span>(<span class="hljs-params">d5.keys(<span class="hljs-params"></span>)</span>)</span><br><span class="hljs-class">&gt;&gt; [&#x27;<span class="hljs-title">a</span>&#x27;, &#x27;<span class="hljs-title">b</span>&#x27;]</span><br></code></pre></td></tr></table></figure><p>同样的，<code>values</code>方法返回的是包含值的可迭代对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>d5.values()<br>&gt;&gt; dict_values([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br><span class="hljs-built_in">type</span>(d5.values())<br>&gt;&gt; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict_values</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">list</span>(<span class="hljs-params">d5.values(<span class="hljs-params"></span>)</span>)</span><br><span class="hljs-class">&gt;&gt; [1, 2]</span><br></code></pre></td></tr></table></figure><p><code>items</code>方法返回的是键值对元组构成的可迭代对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">d5.items()<br>&gt;&gt; dict_items([(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>)])<br><span class="hljs-built_in">type</span>(d5.items())<br>&gt;&gt; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict_items</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">list</span>(<span class="hljs-params">d5.items(<span class="hljs-params"></span>)</span>)</span><br><span class="hljs-class">&gt;&gt; [(<span class="hljs-params"><span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span></span>), (<span class="hljs-params"><span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span></span>)]</span><br></code></pre></td></tr></table></figure><p><code>get(key,default=None)</code>方法返回指定键(key)的值，如果没有找到则返回默认值(default)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">d5.get(<span class="hljs-string">&quot;a&quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span><br>d5.get(<span class="hljs-string">&quot;c&quot;</span>)<span class="hljs-comment">##返回None 什么都没有</span><br><br>d5.get(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;not in dict&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;not in dict&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="修改-添加-删除元素"><a href="#修改-添加-删除元素" class="headerlink" title="修改,添加,删除元素"></a>修改,添加,删除元素</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228165518914.png"><br><code>update(dict2)</code>方法将dict2中的键值对更新到字典中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>d5.update(&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">4</span>&#125;)<br>d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><p><code>setdefault(key,default=None)</code>方法和get类似，不过他如果没有找到键的话会添加键，并将值设为default(和get一样也会返回default值)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">d5.setdefault(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">5</span>)<br>&gt;&gt; <span class="hljs-number">5</span><br>d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><p>删除元素有3种方法：<code>pop(key,default)</code>方法删除键(key)所对应的值并返回该值，如果key不存在则返回default；<code>del dict[key]</code>语句删除key对应的值；<code>clear</code>方法删除所有元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">d5.pop(<span class="hljs-string">&quot;a&quot;</span>)<br>&gt;&gt; <span class="hljs-number">4</span><br>d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>&#125;<br>d5.pop(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;not in dict&quot;</span>)<br>&gt;&gt; <span class="hljs-string">&#x27;not in dict&#x27;</span><br><span class="hljs-keyword">del</span> d5[<span class="hljs-string">&quot;b&quot;</span>]<br>d5<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>&#125;<br>d5.clear()<br>d5<br>&gt;&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E9%9B%86%E5%90%88.nbmx%20-%20%E5%9D%9A%E6%9E%9C%E4%BA%91_00.png"></p><h3 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228185240284.png"></p><p>注意：在创建空集合的时候只能使用<code>set()</code>而不能使用<code>&#123;&#125;</code>，因为<code>&#123;&#125;</code>创建的是空字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = <span class="hljs-built_in">set</span>()<br><br>set1.add(<span class="hljs-string">&quot;a&quot;</span>)<br>set1<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>&#125;<br>set1.add((<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>))<br>set1<br><br><span class="hljs-comment">###直接创建</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)&#125;<br>set2 = &#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>&#125;<br>set2<br><br><span class="hljs-comment">###将列表/元组/字符串转化成集合</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br><span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;abc&quot;</span>)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br><span class="hljs-built_in">set</span>((<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>))<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br><span class="hljs-built_in">set</span>([<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加-删除-修改元素"><a href="#添加-删除-修改元素" class="headerlink" title="添加,删除,修改元素"></a>添加,删除,修改元素</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228185911041.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">set3 = &#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br>set3.add(<span class="hljs-string">&quot;d&quot;</span>)<br>set3<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br>set3.add(<span class="hljs-string">&quot;a&quot;</span>)<span class="hljs-comment">##相同元素 不执行操作</span><br>set3<br><br><span class="hljs-comment">###update 更新集合 和前面讲的类似，不同的是集合中的元素唯一</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br>set3.update(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>)<br>set3<br><br><span class="hljs-comment">###remove移除指定元素</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>set3.remove(<span class="hljs-string">&quot;a&quot;</span>)<br>set3<br><br><span class="hljs-comment">###discard也是移除元素，但是元素不存在不会报错</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>set3.remove(<span class="hljs-string">&quot;a&quot;</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): KeyError: <span class="hljs-string">&#x27;a&#x27;</span><br>set3.discard(<span class="hljs-string">&quot;a&quot;</span>)<br><br>set3<br><br><span class="hljs-comment">###pop随机移除</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>set3.pop()<br>&gt;&gt; <span class="hljs-string">&#x27;d&#x27;</span><br>set3<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210228190454050.png"><br><code>intersection(set1, set2)</code><br>返回两个集合的交集,也可以使用<code>&amp;</code>,<code>intersection_update(set1, set2)</code>取交集并更新原来的集合(相当于将原来集合中不重叠的元素删除)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;abcd&quot;</span>)<br>b = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;cdef&quot;</span>)<br><br><span class="hljs-built_in">print</span>(a,b,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a.intersection(b)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(a,b,end=<span class="hljs-string">&quot;\n&quot;</span>)<span class="hljs-comment">##原来的集合没有改变</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a.intersection_update(b)<br><span class="hljs-built_in">print</span>(a,b,end=<span class="hljs-string">&quot;\n&quot;</span>)<span class="hljs-comment">##原来的集合改变</span><br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>union(set1, set2) 返回两个集合的并集,也可以使用<code>|</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a.union(b)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a | b<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>difference(set)<br>返回集合的差集,也可以使用<code>-</code>,difference_update(set)更改原来的集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a.difference(b)<br>&gt;&gt; <span class="hljs-built_in">set</span>()<br>b.difference(a)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a-b<br>&gt;&gt; <span class="hljs-built_in">set</span>()<br>b-a<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>b.difference_update(a)<br><span class="hljs-built_in">print</span>(a,b)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>symmetric_difference(set)返回集合的异或，或者使用<code>^</code></p><p>集合的异或指的是：(参考<a href="https://www.cnblogs.com/organic/p/5023038.html)%E4%B8%8B%E5%9B%BE%E7%BB%BF%E8%89%B2%E7%9A%84%E9%83%A8%E5%88%86">https://www.cnblogs.com/organic/p/5023038.html)下图绿色的部分</a></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/818872-20151206095708736-923889139.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;abcd&quot;</span>)<br>b = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;cdef&quot;</span>)<br><br><span class="hljs-built_in">print</span>(a,b,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a.symmetric_difference(b)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br>a.symmetric_difference_update(b)<br><span class="hljs-built_in">print</span>(a,b,end=<span class="hljs-string">&quot;\n&quot;</span>)<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125; &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>issubset(set)判断集合是否被set包含，也可以使用<code>&lt;=</code>;issuperset(set)判断集合是否包含set，也可以使用<code>&gt;=</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">c = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;ab&quot;</span>)<br><br>c.issubset(a)<br>&gt;&gt; <span class="hljs-literal">True</span><br>c &lt;= a<br>&gt;&gt; <span class="hljs-literal">True</span><br>a.issuperset(c)<br>&gt;&gt; <span class="hljs-literal">True</span><br>a &gt;= c<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>isdisjoint(set) 用于判断两个集合是不是不相交</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a.isdisjoint(b)<br>&gt;&gt; <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 基础01</title>
    <link href="/2021/02/13/python-task1/"/>
    <url>/2021/02/13/python-task1/</url>
    
    <content type="html"><![CDATA[<p>天池python task1</p><span id="more"></span><p>Task1 主要包含以下内容：</p><ul><li><p>  变量，运算符和基本数据类型</p></li><li><p>  位运算</p></li><li><p>  条件语句</p></li><li><p>  循环语句</p></li><li><p>  异常处理</p></li></ul><h2 id="变量，运算符和基本数据类型"><a href="#变量，运算符和基本数据类型" class="headerlink" title="变量，运算符和基本数据类型"></a>变量，运算符和基本数据类型</h2><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210213221003385.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">abc = <span class="hljs-string">&quot;hello&quot;</span><br>b1_ = <span class="hljs-number">7</span><br>_b = <span class="hljs-number">1</span><br>第一个变量 = <span class="hljs-string">&quot;hello world&quot;</span> <span class="hljs-comment">##可以使用中文</span><br><br><span class="hljs-built_in">print</span>(第一个变量)<br>&gt;&gt; hello world<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">1a = <span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-comment">##不能以数字开头</span><br><br>File <span class="hljs-string">&quot;&lt;ipython-input-1-ef2f4120639d&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    1a = <span class="hljs-string">&quot;hello&quot;</span><br>     ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符有以下几类：</p><ul><li>  算术运算符</li><li>  比较运算符</li><li>  逻辑运算符</li><li>  位运算符</li><li>  三元运算符</li><li>  其他运算符</li></ul><p>算术运算符：</p><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>+</code></td><td style="text-align: center;">加</td><td style="text-align: center;"><code>1 + 1</code></td></tr><tr class="even"><td style="text-align: center;"><code>-</code></td><td style="text-align: center;">减</td><td style="text-align: center;"><code>2 - 1</code></td></tr><tr class="odd"><td style="text-align: center;"><code>*</code></td><td style="text-align: center;">乘</td><td style="text-align: center;"><code>3 * 4</code></td></tr><tr class="even"><td style="text-align: center;"><code>/</code></td><td style="text-align: center;">除</td><td style="text-align: center;"><code>3 / 4</code></td></tr><tr class="odd"><td style="text-align: center;"><code>//</code></td><td style="text-align: center;">整除</td><td style="text-align: center;"><code>3 // 4</code></td></tr><tr class="even"><td style="text-align: center;"><code>%</code></td><td style="text-align: center;">取余</td><td style="text-align: center;"><code>3 % 4</code></td></tr><tr class="odd"><td style="text-align: center;"><code>**</code></td><td style="text-align: center;">幂</td><td style="text-align: center;"><code>2 ** 3</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">3</span> // <span class="hljs-number">4</span><br>&gt;&gt; <span class="hljs-number">0</span><br><span class="hljs-number">4</span> // <span class="hljs-number">3</span><br>&gt;&gt; <span class="hljs-number">1</span><br><span class="hljs-number">4</span> % <span class="hljs-number">3</span><br>&gt;&gt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>比较运算符(结果是布尔值True/False)：</p><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>&gt;</code></td><td style="text-align: center;">大于</td><td style="text-align: center;"><code>2 &gt; 1</code></td></tr><tr class="even"><td style="text-align: center;"><code>&gt;=</code></td><td style="text-align: center;">大于等于</td><td style="text-align: center;"><code>2 &gt;= 4</code></td></tr><tr class="odd"><td style="text-align: center;"><code>&lt;</code></td><td style="text-align: center;">小于</td><td style="text-align: center;"><code>1 &lt; 2</code></td></tr><tr class="even"><td style="text-align: center;"><code>&lt;=</code></td><td style="text-align: center;">小于等于</td><td style="text-align: center;"><code>5 &lt;= 2</code></td></tr><tr class="odd"><td style="text-align: center;"><code>==</code></td><td style="text-align: center;">等于</td><td style="text-align: center;"><code>3 == 4</code></td></tr><tr class="even"><td style="text-align: center;"><code>!=</code></td><td style="text-align: center;">不等于</td><td style="text-align: center;"><code>3 != 5</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">3</span> &gt;= <span class="hljs-number">4</span> <br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-number">3</span> != <span class="hljs-number">5</span><br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>逻辑运算符(结果也是布尔值True/False):</p><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>and</code></td><td style="text-align: center;">与</td><td style="text-align: center;"><code>(3 &gt; 2) and (3 &lt; 5)</code></td></tr><tr class="even"><td style="text-align: center;"><code>or</code></td><td style="text-align: center;">或</td><td style="text-align: center;"><code>(1 &gt; 3) or (9 &lt; 2)</code></td></tr><tr class="odd"><td style="text-align: center;"><code>not</code></td><td style="text-align: center;">非</td><td style="text-align: center;"><code>not (2 &gt; 1)</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">( <span class="hljs-number">3</span> &gt;= <span class="hljs-number">4</span> ) <span class="hljs-keyword">and</span> ( <span class="hljs-number">3</span> !=<span class="hljs-number">5</span> )<br>&gt;&gt; <span class="hljs-literal">False</span><br>( <span class="hljs-number">3</span> &gt;= <span class="hljs-number">4</span> ) <span class="hljs-keyword">or</span> ( <span class="hljs-number">3</span> !=<span class="hljs-number">5</span> )<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-keyword">not</span>( <span class="hljs-number">3</span> !=<span class="hljs-number">5</span> )<br>&gt;&gt; <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>位运算符:</p><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>~</code></td><td style="text-align: center;">按位取反</td><td style="text-align: center;"><code>~4</code></td></tr><tr class="even"><td style="text-align: center;"><code>&amp;</code></td><td style="text-align: center;">按位与</td><td style="text-align: center;"><code>4 &amp; 5</code></td></tr><tr class="odd"><td style="text-align: center;"><code>|</code></td><td style="text-align: center;">按位或</td><td style="text-align: center;"><code>4 | 5</code></td></tr><tr class="even"><td style="text-align: center;"><code>^</code></td><td style="text-align: center;">按位异或</td><td style="text-align: center;"><code>4 ^ 5</code></td></tr><tr class="odd"><td style="text-align: center;"><code>&lt;&lt;</code></td><td style="text-align: center;">左移</td><td style="text-align: center;"><code>4 &lt;&lt; 2</code></td></tr><tr class="even"><td style="text-align: center;"><code>&gt;&gt;</code></td><td style="text-align: center;">右移</td><td style="text-align: center;"><code>4 &gt;&gt; 2</code></td></tr></tbody></table><p>三元运算符,也叫条件表达式，可以简化条件判断和赋值操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#condition_is_true if condition else condition_is_false</span><br><span class="hljs-comment">##如果条件为真，则返回if前面的结果，如果为假则返回else后面的结果</span><br><br>x = <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x 是一个字符&quot;</span>) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(x,<span class="hljs-built_in">str</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x 不是字符&quot;</span>)<br>&gt;&gt; x 是一个字符<br></code></pre></td></tr></table></figure><p>其他运算符：</p><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>in</code></td><td style="text-align: center;">存在</td><td style="text-align: center;"><code>'A' in ['A', 'B', 'C']</code></td></tr><tr class="even"><td style="text-align: center;"><code>not in</code></td><td style="text-align: center;">不存在</td><td style="text-align: center;"><code>'h' not in ['A', 'B', 'C']</code></td></tr><tr class="odd"><td style="text-align: center;"><code>is</code></td><td style="text-align: center;">是</td><td style="text-align: center;"><code>"hello" is "hello"</code></td></tr><tr class="even"><td style="text-align: center;"><code>not is</code></td><td style="text-align: center;">不是</td><td style="text-align: center;"><code>"hello" is not "hello"</code></td></tr></tbody></table><p>需要注意的是<code>is</code>/<code>not is</code><br>和<code>==</code>/<code>!=</code>的区别，<code>is</code>/<code>not is</code>比较的是内存地址，而<code>==</code>/<code>!=</code>比较的是变量的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###不可变类型，两者是一样的；因为对于不可变类型，值一样内存地址就一样</span><br>x = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-built_in">id</span>(x) <span class="hljs-comment">##使用id查看内存地址</span><br>&gt;&gt; <span class="hljs-number">2241811015152</span><br>y = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-built_in">id</span>(y)<br>&gt;&gt; <span class="hljs-number">2241811015152</span><br>x == y<br>&gt;&gt; <span class="hljs-literal">True</span><br>x <span class="hljs-keyword">is</span> y<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">id</span>(x) == <span class="hljs-built_in">id</span>(y)<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###对于可变类型，两者是有区别的</span><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">id</span>(a)<br>&gt;&gt; <span class="hljs-number">2241811025408</span><br>b = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">id</span>(b)<br>&gt;&gt; <span class="hljs-number">2241810930752</span><br><span class="hljs-built_in">id</span>(a) == <span class="hljs-built_in">id</span>(b)<br>&gt;&gt; <span class="hljs-literal">False</span><br>a == b<br>&gt;&gt; <span class="hljs-literal">True</span><br>a <span class="hljs-keyword">is</span> b<br>&gt;&gt; <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>运算符的优先级：</p><table><thead><tr class="header"><th>运算符</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>**</td><td>指数（最高优先级）</td></tr><tr class="even"><td>~+-</td><td>按位翻转，一元加号和减号</td></tr><tr class="odd"><td>* / % //</td><td>乘，除，取模和取整除）</td></tr><tr class="even"><td>+ -</td><td>加法减法</td></tr><tr class="odd"><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr class="even"><td>&amp;</td><td>位‘AND’</td></tr><tr class="odd"><td>^|</td><td>位运算符</td></tr><tr class="even"><td>&lt;=&lt;&gt;&gt;=</td><td>比较运算符</td></tr><tr class="odd"><td>&lt;&gt;==!=</td><td>等于运算符</td></tr><tr class="even"><td>=%=/=//=-=+=*=**=</td><td>赋值运算符</td></tr><tr class="odd"><td>is is not</td><td>身份运算符</td></tr><tr class="even"><td>in not in</td><td>成员运算符</td></tr><tr class="odd"><td>not and or</td><td>逻辑运算符</td></tr></tbody></table><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210214114944454.png"></p><p>基本数据类型包括：整型，浮点型和布尔型</p><table><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">名称</th><th style="text-align: center;">示例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">int</td><td style="text-align: center;">整型 <code>&lt;class 'int'&gt;</code></td><td style="text-align: center;"><code>-876, 10</code></td></tr><tr class="even"><td style="text-align: center;">float</td><td style="text-align: center;">浮点型<code>&lt;class 'float'&gt;</code></td><td style="text-align: center;"><code>3.149, 11.11</code></td></tr><tr class="odd"><td style="text-align: center;">bool</td><td style="text-align: center;">布尔型<code>&lt;class 'bool'&gt;</code></td><td style="text-align: center;"><code>True, False</code></td></tr></tbody></table><p>可以通过<code>type</code>或者<code>isinstance</code>来获取对象的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">123</span><br><span class="hljs-built_in">type</span>(x)<br>&gt;&gt; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">int</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">isinstance</span>(<span class="hljs-params">x,<span class="hljs-built_in">int</span></span>)</span><br><span class="hljs-class">&gt;&gt; <span class="hljs-title">True</span></span><br></code></pre></td></tr></table></figure><p>两者的区别是：<code>type</code>不考虑继承关系，而<code>isinstance</code>考虑继承关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>    <span class="hljs-keyword">pass</span><br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment">##B(A)表示B继承A</span><br><br><span class="hljs-built_in">type</span>(A()) == A<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">type</span>(B()) == A<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">isinstance</span>(B(),A)<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>对于<strong>浮点数</strong>，有时候我们想要控制其显示的小数点位数，可以使用decimal<br>包里的 Decimal 对象和 getcontext() 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> decimal<br><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> Decimal<br><br>a = decimal.getcontext()<br>a<br>&gt;&gt; Context(prec=<span class="hljs-number">28</span>, rounding=ROUND_HALF_EVEN, Emin=-<span class="hljs-number">999999</span>, Emax=<span class="hljs-number">999999</span>, capitals=<span class="hljs-number">1</span>, clamp=<span class="hljs-number">0</span>, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])<br></code></pre></td></tr></table></figure><p>其中prec=28表示默认精度是28位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>/<span class="hljs-number">3</span><br>&gt;&gt; <span class="hljs-number">0.3333333333333333</span><br>Decimal(<span class="hljs-number">1</span>)/Decimal(<span class="hljs-number">3</span>)<br>&gt;&gt; Decimal(<span class="hljs-string">&#x27;0.3333333333333333333333333333&#x27;</span>)<br></code></pre></td></tr></table></figure><p>用 getcontext().prec 来调整精度,使其保留小数点后4位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">decimal.getcontext().prec = <span class="hljs-number">4</span><br>Decimal(<span class="hljs-number">1</span>)/Decimal(<span class="hljs-number">3</span>)<br>&gt;&gt; Decimal(<span class="hljs-string">&#x27;0.3333&#x27;</span>)<br></code></pre></td></tr></table></figure><p>对于<strong>布尔值</strong>,<br>除了直接将True和False赋值给布尔型变量之外，还可以使用<code>bool</code>函数来创建布尔型变量，这个函数的参数可以有两种类型：</p><ul><li>  基本数据类型：整型，浮点型和布尔型</li><li>  容器数据类型：字符串，列表，元组，字典和集合</li></ul><p>对于基本数据类型：0(包括整型的0和浮点型的0.0)是False，其他都是True<br>对于容器数据类型：空的就是False，非空的就是True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>)<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">bool</span>(<span class="hljs-number">0.00</span>)<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">bool</span>(<span class="hljs-number">1</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">bool</span>([])<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">bool</span>([<span class="hljs-number">1</span>])<br>&gt;&gt; <span class="hljs-literal">True</span><br><span class="hljs-built_in">bool</span>(&#123;&#125;)<br>&gt;&gt; <span class="hljs-literal">False</span><br><span class="hljs-built_in">bool</span>(&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>&#125;)<br>&gt;&gt; <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>计算机中的数在内存中都是以二进制形式进行存储的，位运算就是直接对数在内存中的二进制位来进行操作，具有较高的效率；二进制有3种表示形式：原码，反码和补码<br><strong>计算机内部使用补码来表示</strong></p><ul><li><p>  原码：正常的二进制表示(负数有一个符号位)；比如<code>00 00 00 11</code>表示的数为3，<code>10 00 00 11</code>表示的数为-3，最高位(最左边)为符号位(0表示正，1表示负)</p></li><li><p>  反码：正数的反码和原码一样，负数的反码是对应正数原码进行按位取反，比如3的原码和反码是一样的，而-3的反码是<code>11 11 11 00</code></p></li><li><p>  补码：正数的补码和原码一样，负数的补码为反码加1，比如-3的补码为<code>11 11 11 01</code></p></li></ul><h3 id="按位运算"><a href="#按位运算" class="headerlink" title="按位运算"></a>按位运算</h3><ul><li>  按位非: <code>~</code></li></ul><p><code>~ num</code>表示将num的补码进行取反(0变成1，1变成0，包括符号位)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">~ <span class="hljs-number">1</span> <span class="hljs-comment">###1的原码为00 00 00 01;补码和原码一样，所以取反后为11 11 11 10是负数，</span><br><span class="hljs-comment">##所以转化成十进制为数值位取反加1：0 00 00 01+1=0 00 00 10 为2 再加上符号，因此为-2</span><br>&gt;&gt; -<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>  按位与操作: <code>&amp;</code></li></ul><p>这是一个二元操作符，只有两个对应位都是1时结果才为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">1</span><br><span class="hljs-number">1</span> &amp; -<span class="hljs-number">2</span><br><span class="hljs-comment">##1的补码为00 00 00 01；-2的原码为10 00 00 10，补码为00 00 00 10按位取反得11 11 11 01再加1为11 11 11 10</span><br><span class="hljs-comment">##所以 与操作 结果为00 00 00 00 为0</span><br>&gt;&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>  按位或操作：<code>|</code></li></ul><p>只要两个对应位中有一个为1结果就为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> | <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">1</span><br><span class="hljs-number">1</span> | -<span class="hljs-number">2</span> <span class="hljs-comment">##11 11 11 11转化为10进制：10 00 00 01 = -1</span><br>&gt;&gt; -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>  按位异或操作：<code>^</code></li></ul><p>两个对应位不同时结果才是1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> ^ -<span class="hljs-number">2</span> <span class="hljs-comment">##11 11 11 11 结果也是-1</span><br>&gt;&gt; -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>  按位左移和右移操作</li></ul><p><code>num &lt;&lt; i</code>将num得二进制表示(1的位置)向左移动i位，<code>&gt;&gt;</code>表示向右移动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">11</span> &lt;&lt; <span class="hljs-number">3</span> <span class="hljs-comment">##11的补码为00 00 10 11将所有的1向左移3位得到：01 01 10 00为88</span><br>&gt;&gt; <span class="hljs-number">88</span><br><span class="hljs-number">11</span> &gt;&gt; <span class="hljs-number">3</span> <span class="hljs-comment">##右移3位得到 00 00 00 01为1</span><br>&gt;&gt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ul><li>  if语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> expression:<br>    expr_true_suite<br></code></pre></td></tr></table></figure><p>只有当expression为真，才执行语句expr_true_suite</p><ul><li>  if-else 语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> expression:<br>    expr_true_suite<br><span class="hljs-keyword">else</span>:<br>    expr_false_suite<br></code></pre></td></tr></table></figure><p>expression为真执行expr_true_suite，否则执行expr_false_suite</p><ul><li>  if-elif-else语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> expression1:<br>    expr1_true_suite<br><span class="hljs-keyword">elif</span> expression2:<br>    expr2_true_suite<br>    .<br>    .<br><span class="hljs-keyword">elif</span> expressionN:<br>    exprN_true_suite<br><span class="hljs-keyword">else</span>:<br>    expr_false_suite<br></code></pre></td></tr></table></figure><p>进行多重判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">source = <span class="hljs-number">99</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">100</span> &gt;= source &gt;= <span class="hljs-number">90</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">90</span> &gt; source &gt;= <span class="hljs-number">80</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;B&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">80</span> &gt; source &gt;= <span class="hljs-number">60</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">60</span> &gt; source &gt;= <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;D&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入错误！&#x27;</span>)<br>&gt;&gt; A<br></code></pre></td></tr></table></figure><ul><li>  assert 断言关键词</li></ul><p>当assert后面的语句为False时，会抛出<code>AssertionError</code>异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> <span class="hljs-number">3</span> &gt; <span class="hljs-number">6</span><br><span class="hljs-comment">##AssertionError</span><br></code></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><ul><li>  while 循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> expression:<br>  code<br></code></pre></td></tr></table></figure><p>当expression为真的时候会一直执行缩进语句中的代码</p><ul><li>  while-else 循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> expression:<br>  code1<br><span class="hljs-keyword">else</span>:<br>  code2<br></code></pre></td></tr></table></figure><p>expression为真，执行code1，为假则执行code2；需要注意的是如果code1中执行了跳出循环的语句，那么不会执行code2中的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">count = <span class="hljs-number">5</span> <br><br><span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">6</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is more than 6&quot;</span> % count)<br>  count = count - <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is not more than 6&quot;</span> % count)<br>&gt;&gt; <span class="hljs-number">5</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> more than <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">count = <span class="hljs-number">5</span> <br><br><span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">4</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is more than 4&quot;</span> % count)<br>  count = count - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is not more than 4&quot;</span> % count)<br>&gt;&gt; <span class="hljs-number">5</span> <span class="hljs-keyword">is</span> more than <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">4</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is more than 4&quot;</span> % count)<br>  count = count - <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is not more than 4&quot;</span> % count)<br>&gt;&gt; <span class="hljs-number">4</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> more than <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><ul><li>  for 循环</li></ul><p>for循环是一个通用的序列迭代器，可以遍历任何可迭代对象(str,list,tuple,dict等)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-built_in">object</span>:<br>  code<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;abcd&quot;</span>:<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot;\t&quot;</span>)<br>&gt;&gt; a    b   c   d   <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = &#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<span class="hljs-comment">##默认是keys</span><br>&gt;&gt; a b c<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic.values():<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><ul><li>  for-else 循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-built_in">object</span>:<br>  code1<br><span class="hljs-keyword">else</span>:<br>  code2<br></code></pre></td></tr></table></figure><p>和while-else循环类似，在for循环执行完后执行else下的语句，如果执行了code1中的跳出循环的语句将不会执行code2</p><ul><li>  range()函数</li></ul><p>range函数的用法为<code>range(start,stop,step=1)</code>，可以用来生成从start到stop步长为step的数字序列(注意：不包含stop，左闭右开)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>):<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<span class="hljs-comment">##默认为stop</span><br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<br>&gt;&gt; <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>):<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><ul><li>  enumerate()函数</li></ul><p>enumerate的用法为<code>enumerate(seq,start=0)</code>,seq为可迭代对象，返回的也是一个可迭代对象(数据加上索引，索引默认从0开始，可以通过start参数指定)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">seasons = [<span class="hljs-string">&#x27;Spring&#x27;</span>, <span class="hljs-string">&#x27;Summer&#x27;</span>, <span class="hljs-string">&#x27;Fall&#x27;</span>, <span class="hljs-string">&#x27;Winter&#x27;</span>]<br><br>seasons_enu = <span class="hljs-built_in">enumerate</span>(seasons)<br><span class="hljs-built_in">print</span>(seasons_enu,<span class="hljs-built_in">type</span>(seasons_enu))<br>&gt;&gt; &lt;<span class="hljs-built_in">enumerate</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x00000209F6583380</span>&gt; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">enumerate</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-built_in">list</span>(<span class="hljs-params">seasons_enu</span>)</span>)</span><br><span class="hljs-class">&gt;&gt; [(<span class="hljs-params"><span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Spring&#x27;</span></span>), (<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Summer&#x27;</span></span>), (<span class="hljs-params"><span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Fall&#x27;</span></span>), (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Winter&#x27;</span></span>)]</span><br><span class="hljs-class"><span class="hljs-title">seasons_enu1</span> = <span class="hljs-title">enumerate</span>(<span class="hljs-params">seasons,start=<span class="hljs-number">1</span></span>)</span><br><span class="hljs-class"><span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-built_in">list</span>(<span class="hljs-params">seasons_enu1</span>)</span>)</span><br><span class="hljs-class">&gt;&gt; [(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Spring&#x27;</span></span>), (<span class="hljs-params"><span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Summer&#x27;</span></span>), (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Fall&#x27;</span></span>), (<span class="hljs-params"><span class="hljs-number">4</span>, <span class="hljs-string">&#x27;Winter&#x27;</span></span>)]</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> seasons_enu1:<br>  <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>  break 和 continue 语句</li></ul><p>break是跳出整个循环语句，而continue是跳出本次循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">counts = <span class="hljs-number">4</span><br><br><span class="hljs-keyword">while</span> counts &lt; <span class="hljs-number">7</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is less than 7&quot;</span> % counts)<br>  counts = counts +<span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span> counts == <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">break</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i run!&quot;</span>)<br>&gt;&gt; <span class="hljs-number">4</span> <span class="hljs-keyword">is</span> less than <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">counts = <span class="hljs-number">4</span><br><br><span class="hljs-keyword">while</span> counts &lt; <span class="hljs-number">7</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d is less than 7&quot;</span> % counts)<br>  counts = counts +<span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span> counts == <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">continue</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i run!&quot;</span>)<br>&gt;&gt; <span class="hljs-number">4</span> <span class="hljs-keyword">is</span> less than <span class="hljs-number">7</span><br>&gt;&gt; <span class="hljs-number">5</span> <span class="hljs-keyword">is</span> less than <span class="hljs-number">7</span><br>&gt;&gt; i run!<br>&gt;&gt; <span class="hljs-number">6</span> <span class="hljs-keyword">is</span> less than <span class="hljs-number">7</span><br>&gt;&gt; i run!<br></code></pre></td></tr></table></figure><ul><li>  pass 语句</li></ul><p>pass 是空语句，不做任何操作，起到占位作用(暂时不确定在该位置写什么代码)</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="Python-标准异常总结"><a href="#Python-标准异常总结" class="headerlink" title="Python 标准异常总结"></a>Python 标准异常总结</h3><ul><li>  BaseException：所有异常的 <strong>基类</strong></li><li>  Exception：常规异常的 <strong>基类</strong></li><li>  StandardError：所有的内建标准异常的基类</li><li>  ArithmeticError：所有数值计算异常的基类</li><li>  FloatingPointError：浮点计算异常</li><li>  <u>OverflowError</u>：数值运算超出最大限制</li><li>  <u>ZeroDivisionError</u>：除数为零</li><li>  <u>AssertionError</u>：断言语句（assert）失败</li><li>  <u>AttributeError</u>：尝试访问未知的对象属性</li><li>  EOFError：没有内建输入，到达EOF标记</li><li>  EnvironmentError：操作系统异常的基类</li><li>  IOError：输入/输出操作失败</li><li>  <u>OSError</u>：操作系统产生的异常（例如打开一个不存在的文件）</li><li>  WindowsError：系统调用失败</li><li>  <u>ImportError</u>：导入模块失败的时候</li><li>  KeyboardInterrupt：用户中断执行</li><li>  LookupError：无效数据查询的基类</li><li>  <u>IndexError</u>：索引超出序列的范围</li><li>  <u>KeyError</u>：字典中查找一个不存在的关键字</li><li>  <u>MemoryError</u>：内存溢出（可通过删除对象释放内存）</li><li>  <u>NameError</u>：尝试访问一个不存在的变量</li><li>  UnboundLocalError：访问未初始化的本地变量</li><li>  ReferenceError：弱引用试图访问已经垃圾回收了的对象</li><li>  RuntimeError：一般的运行时异常</li><li>  NotImplementedError：尚未实现的方法</li><li>  <u>SyntaxError</u>：语法错误导致的异常</li><li>  IndentationError：缩进错误导致的异常</li><li>  TabError：Tab和空格混用</li><li>  SystemError：一般的解释器系统异常</li><li>  <u>TypeError</u>：不同类型间的无效操作</li><li>  <u>ValueError</u>：传入无效的参数</li><li>  UnicodeError：Unicode相关的异常</li><li>  UnicodeDecodeError：Unicode解码时的异常</li><li>  UnicodeEncodeError：Unicode编码错误导致的异常</li><li>  UnicodeTranslateError：Unicode转换错误导致的异常</li></ul><p>异常体系内部有层次关系，Python异常体系中的部分关系如下所示：</p><p><img src="https://img-blog.csdnimg.cn/20200710131404548.png"></p><hr><h3 id="Python标准警告总结"><a href="#Python标准警告总结" class="headerlink" title="Python标准警告总结"></a>Python标准警告总结</h3><ul><li>  Warning：警告的基类</li><li>  DeprecationWarning：关于被弃用的特征的警告</li><li>  FutureWarning：关于构造将来语义会有改变的警告</li><li>  UserWarning：用户代码生成的警告</li><li>  PendingDeprecationWarning：关于特性将会被废弃的警告</li><li>  RuntimeWarning：可疑的运行时行为(runtime behavior)的警告</li><li>  SyntaxWarning：可疑语法的警告</li><li>  ImportWarning：用于在导入模块过程中触发的警告</li><li>  UnicodeWarning：与Unicode相关的警告</li><li>  BytesWarning：与字节或字节码相关的警告</li><li>  ResourceWarning：与资源使用相关的警告</li></ul><p>捕获异常可以使用try-except语句：</p><ul><li>  try-except语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>  code1<br><span class="hljs-keyword">except</span> Exception [<span class="hljs-keyword">as</span> reason]:<br>  code2<br></code></pre></td></tr></table></figure><p>首先执行code1，如果没有异常发生就忽略code2；如果code1中出现异常，那么就会将异常的类型(见上面的总结)和Exception进行匹配，如果可以匹配上就执行code2,如果不能匹配，异常将传递到上层的try，但是一直没有匹配就会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(f.read())<br>    f.close()<br><span class="hljs-keyword">except</span> OSError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;open file error&#x27;</span>)<br>&gt;&gt; <span class="hljs-built_in">open</span> file error<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>   <span class="hljs-number">1</span> + <span class="hljs-string">&quot;p&quot;</span><br><span class="hljs-keyword">except</span> OSError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;open file error&#x27;</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> py_call_impl(<span class="hljs-built_in">callable</span>, dots$args, dots$keywords): TypeError: unsupported operand <span class="hljs-built_in">type</span>(s) <span class="hljs-keyword">for</span> +: <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;str&#x27;</span><br></code></pre></td></tr></table></figure><p>还可以加上as来展示具体的错误信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(f.read())<br>    f.close()<br><span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> error:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;open file error, reason is :&#x27;</span> + <span class="hljs-built_in">str</span>(error))<br>&gt;&gt; <span class="hljs-built_in">open</span> file error, reason <span class="hljs-keyword">is</span> :[Errno <span class="hljs-number">2</span>] No such file <span class="hljs-keyword">or</span> directory: <span class="hljs-string">&#x27;test.txt&#x27;</span><br></code></pre></td></tr></table></figure><p>try后面可以接上多个except语句，用来处理不同的异常，但是需要注意异常之间的关系(见上面那张图)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;v&#x27;</span>: <span class="hljs-number">22</span>&#125;<br><span class="hljs-keyword">try</span>:<br>    x = dict1[<span class="hljs-string">&#x27;y&#x27;</span>]<br><span class="hljs-keyword">except</span> LookupError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查询错误&#x27;</span>)<br><span class="hljs-keyword">except</span> KeyError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;键错误&#x27;</span>)<br>&gt;&gt; 查询错误<br></code></pre></td></tr></table></figure><p>这里KeyError属于LookupError的子类，LookupError又在前面，所以执行的是LookupError里面的语句，所以在使用多个except语句时，要将最底端的异常放在前面(更加具体)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;v&#x27;</span>: <span class="hljs-number">22</span>&#125;<br><span class="hljs-keyword">try</span>:<br>    x = dict1[<span class="hljs-string">&#x27;y&#x27;</span>]<br><span class="hljs-keyword">except</span> KeyError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;键错误&#x27;</span>)<br><span class="hljs-keyword">except</span> LookupError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查询错误&#x27;</span>)<br>&gt;&gt; 键错误<br></code></pre></td></tr></table></figure><p>一个except语句也可以处理多个异常，将需要处理的异常放在元组中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    s = <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;p&#x27;</span><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(f.read())<br>    f.close()<br><span class="hljs-keyword">except</span> (OSError, TypeError) <span class="hljs-keyword">as</span> error:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error !, the reason for first error is ：&#x27;</span> + <span class="hljs-built_in">str</span>(error))<br>&gt;&gt; error !, the reason <span class="hljs-keyword">for</span> first error <span class="hljs-keyword">is</span> ：unsupported operand <span class="hljs-built_in">type</span>(s) <span class="hljs-keyword">for</span> +: <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;str&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>  try-except-else 语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>  code2<br><span class="hljs-keyword">except</span>  Exception [<span class="hljs-keyword">as</span> reason]:<br>  code2<br><span class="hljs-keyword">else</span>:<br>  code3<br></code></pre></td></tr></table></figure><p>如果没有异常则执行code3</p><ul><li>  try-except-finally 语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>  code2<br><span class="hljs-keyword">except</span>  Exception [<span class="hljs-keyword">as</span> reason]:<br>  code2<br><span class="hljs-keyword">finally</span>:<br>  code3<br></code></pre></td></tr></table></figure><p>无论code1中有没有异常，code3中的代码都会被执行(如果code1中有异常并且不能被except捕获，那么会在运行code3之后报错)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs &#123;python&#125;">def divide(x, y):<br>    try:<br>        result = x / y<br>        print(&quot;result is&quot;, result)<br>    except ZeroDivisionError:<br>        print(&quot;division by zero!&quot;)<br>    finally:<br>        print(&quot;executing finally clause&quot;)<br>        <br>divide(2, 1)<br>divide(2, 0)<br>divide(&quot;2&quot;, &quot;1&quot;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【hands on ML Ch4】-训练模型</title>
    <link href="/2021/02/08/hands_on_ml_ch4/"/>
    <url>/2021/02/08/hands_on_ml_ch4/</url>
    
    <content type="html"><![CDATA[<p>hands on ML 主要包括线性回归，多项式回归，逻辑回归，softmax回归，梯度下降和正则化方法</p><span id="more"></span><p>本章主要包括：</p><ul><li>  线性回归模型</li><li>  多项式回归模型</li><li>  逻辑回归模型</li><li>  Softmax回归模型</li><li>  一些正则化的技术</li><li>  梯度下降</li></ul><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>一般线性回归的表示行形式为：输入特征的加权求和再加上截距项(或者叫做bias term)<em>ŷ</em> = <em>θ</em><sub>0</sub> + <em>θ</em><sub>1</sub><em>x</em><sub>1</sub> + <em>θ</em><sub>2</sub><em>x</em><sub>2</sub> + … + <em>θ</em><sub><em>n</em></sub><em>x</em><sub><em>n</em></sub>(<em>ŷ</em>是预测值，n是特征数量，<em>x</em><sub><em>i</em></sub>是特征值，<em>θ</em><sub><em>j</em></sub>是模型参数)，也可以写成向量形式：<em>ŷ</em> = <em>h</em><sub><em>θ</em></sub>(<em>x</em>) = <em>θ</em><sup><em>T</em></sup><em>X</em> (<em>θ</em>是参数向量，X是输入特征向量)</p><p>在第二章中已经讲过衡量一个线性回归模型常用的指标是RMSE，因此我们可以通过最小化RMSE来找到参数<em>θ</em>,为了简化计算，在实际操作中我们是最小化MSE的(MSE最小化，平方根自然也就是最小的)：</p><p>$$<br>MSE(X,h_{\theta})=\frac{1}{m}\sum_{i=1}^{m}(\theta^TX^{(i)}-y^{(i)})^2<br>$$</p><p>求使损失函数最小的<em>θ</em>最直接的方法就是进行数学求解(解析解，也叫normal equation)，MSE的Normal Equation为：<em>θ̂</em> = (<em>X</em><sup><em>T</em></sup><em>X</em>)<sup> − 1</sup><em>X</em><sup><em>T</em></sup><em>y</em>，我们可以来验证一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##生成数据</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = <span class="hljs-number">2</span> * np.random.rand(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br>y = <span class="hljs-number">4</span> + <span class="hljs-number">3</span> * x + np.random.randn(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br>plt.plot(x, y, <span class="hljs-string">&quot;b.&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000021801228460</span>&gt;]<br>plt.xlabel(<span class="hljs-string">&quot;$x_1$&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;$x_1$&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;$y$&quot;</span>, rotation=<span class="hljs-number">0</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;$y$&#x27;</span>)<br>plt.axis([<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>])<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">15.0</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-1-1.png" width="672" /><p>计算<em>θ</em>的Normal equation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x_b = np.c_[np.ones((<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)),x]<span class="hljs-comment">##x_0 = 1</span><br>theta_best = np.linalg.inv(x_b.T.dot(x_b)).dot(x_b.T).dot(y)<br><br>theta_best<br>&gt;&gt; array([[<span class="hljs-number">4.12634538</span>],<br>&gt;&gt;        [<span class="hljs-number">2.81427971</span>]])<br></code></pre></td></tr></table></figure><p><code>np.c_</code>进行的是增加列的操作(R里面的cbind);<code>np.ones((100,1))</code>产生100行1列的矩阵，元素都是1;<code>np.linalg</code>是numpy中线性代数模块;<code>inv</code>是矩阵求逆方法;<code>T</code>是矩阵转置方法;<code>dot</code>是矩阵乘法</p><p>现在我们使用计算出的<em>θ̂</em>来预测：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x_new = np.array([[<span class="hljs-number">0</span>],[<span class="hljs-number">2</span>]])<br>x_new_b = np.c_[np.ones((<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)),x_new]<br>y_pre = x_new_b.dot(theta_best)<br>y_pre<br>&gt;&gt; array([[<span class="hljs-number">4.12634538</span>],<br>&gt;&gt;        [<span class="hljs-number">9.7549048</span> ]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot(x_new,y_pre,<span class="hljs-string">&quot;r-&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002180339EFA0</span>&gt;]<br>plt.plot(x,y,<span class="hljs-string">&quot;b.&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x00000218011C2EB0</span>&gt;]<br>plt.axis([<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>])<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">15.0</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-4-1.png" width="672" /><p>在Scikit-Learn中可以使用<code>LinearRegression</code>来方便的进行线性回归的计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br><br>lin_reg = LinearRegression()<br>lin_reg.fit(x,y)<br>&gt;&gt; LinearRegression()<br>lin_reg.intercept_, lin_reg.coef_<br>&gt;&gt; (array([<span class="hljs-number">4.12634538</span>]), array([[<span class="hljs-number">2.81427971</span>]]))<br>lin_reg.predict(x_new)<br>&gt;&gt; array([[<span class="hljs-number">4.12634538</span>],<br>&gt;&gt;        [<span class="hljs-number">9.7549048</span> ]])<br></code></pre></td></tr></table></figure><p><code>LinearRegression</code>类是基于<code>scipy.linalg.lstsq</code>函数的，该函数是通过SVD进行计算pseudoinverse(<em>X</em><sup>+</sup>)然后再计算<em>θ̂</em> = <em>X</em><sup>+</sup><em>y</em>,这样计算有两个好处：pseudoinverse的计算比直接计算矩阵的逆效率更高(why?)；当<em>X</em><sup><em>T</em></sup><em>X</em>不可逆的时候NormalEquation是无法计算的，而pseudoinverse是可以计算的</p><p>计算Normal Equation的计算复杂度是比较大的(求矩阵的逆的计算复杂度为<em>O</em>(<em>n</em><sup>2.4</sup>)~<em>O</em>(<em>n</em><sup>3</sup>),使用SVD方法的计算复杂度为<em>O</em>(<em>n</em><sup>2</sup>))</p><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><h3 id="数学理论"><a href="#数学理论" class="headerlink" title="数学理论"></a>数学理论</h3><p>这一部分参考李宏毅老师的机器学习课程</p><p>现在的问题是：找到<em>θ</em><sup>*</sup>：<br>$$<br>\theta^* = argmin_{\theta}L(\theta)<br>$$<br><em>L</em>(<em>θ</em>)是损失函数</p><p>现在假设<em>θ</em>由两个参数构成：{<em>θ</em><sub>1</sub>,<em>θ</em><sub>2</sub>},<em>L</em>(<em>θ</em>)的等高线如下图：<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227170016311.png"></p><p>给定一个点，我们是否可以在其邻域内找到一个使<em>L</em>(<em>θ</em>)最小的点然后向这个点移动最终到达全局最小点(如上图)；那么怎样找到这个点呢？</p><p>这里需要引入**<a href="https://www.bilibili.com/video/BV1Gx411Y7cz?from=search&seid=4438787146009065334">泰勒级数</a><strong>的概念：</strong>泰勒级数利用函数在某个点的导数来近似在这个点附近的函数值**,数学表示为：<br>在<em>x</em> = <em>x</em><sub>0</sub>附近有：<br>$$<br>h(x) = h(x_0)+h^{‘}(x_0)(x-x_0)+\frac{h^{‘’}(x_0)}{2!}(x-x_0)^2+…<br>$$<br>当x接近<em>x</em><sub>0</sub>的时候可以将高次式忽略：<br><em>h</em>(<em>x</em>) ≈ <em>h</em>(<em>x</em><sub>0</sub>) + <em>h</em><sup>′</sup>(<em>x</em><sub>0</sub>)(<em>x</em> − <em>x</em><sub>0</sub>)<br>对于多个变量也是类似的：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227180156655.png"></p><p>回到上面的问题:</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227180518842.png"></p><p><strong>如果红色的圆圈足够小</strong>，我们就可以使用泰勒级数来近似损失函数：<br>$$<br>L(\theta) \approx  L(a,b)+\frac{\partial L(a,b)}{\partial \theta_1}(\theta_1-a)+\frac{\partial L(a,b)}{\partial \theta_2}(\theta_2-b)<br>$$<br>令$s=L(a,b)$,$u=\frac{\partial L(a,b)}{\partial \theta_1}$,$v=\frac{\partial L(a,b)}{\partial \theta_2}$, 将上式简化:<br><em>L</em>(<em>θ</em>) ≈ <em>s</em> + <em>u</em>(<em>θ</em><sub>1</sub> − <em>a</em>) + <em>v</em>(<em>θ</em><sub>2</sub> − <em>b</em>)<br>我们现在的问题就是：在红色的圆圈内找到<em>θ</em><sub>1</sub>和<em>θ</em><sub>2</sub>使得<em>L</em>(<em>θ</em>)最小</p><p>如果使$\theta_1-a=\Delta \theta_1$,$\theta_2-b=\Delta \theta_2$，那么<em>L</em>(<em>θ</em>)就可以表示为两个向量的乘积：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227182845081.png"></p><p>要使<em>L</em>(<em>θ</em>)最小，那么就要使这两个向量反向(并且$(\Delta \theta_1,\Delta \theta_2)$在圆上)：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227183501439.png"></p><p>这个就是梯度下降的形式！<br><em>θ</em><sup><em>i</em></sup> = <em>θ</em><sup><em>i</em> − 1</sup> − <em>η</em> ▽ <em>L</em>(<em>θ</em><sup><em>i</em> − 1</sup>)</p><h3 id="梯度下降的注意事项"><a href="#梯度下降的注意事项" class="headerlink" title="梯度下降的注意事项"></a>梯度下降的注意事项</h3><h4 id="学习率的调整"><a href="#学习率的调整" class="headerlink" title="学习率的调整"></a>学习率的调整</h4><p>学习率(<em>η</em>)是一个重要的超参数，决定了梯度下降的步伐有多大;如果学习率比较小,那么收敛到最小值需要迭代的次数就比较多，如果学习率比较大,那么就可能跳过了最小值，甚至有可能比起始值还要大：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227185426216.png"></p><p>除了手动设定学习率之外，我们还可以使学习率随着训练的进行逐渐减少(在每次迭代时，决定学习率的函数叫做<em>learning schedule</em>)</p><h4 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降"></a>随机梯度下降</h4><p>上面提到的损失函数都是对所有的训练数据来计算的(所有预测值和真实值的误差和)，而随机梯度下降所使用的计算梯度的函数是随机选取的观测值的预测值和真实值的误差(只看一个点)，更有效率</p><h4 id="特征的归一化"><a href="#特征的归一化" class="headerlink" title="特征的归一化"></a>特征的归一化</h4><p>下面的图比较形象的表示了归一化对学习的影响：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210227210417449.png"></p><p>如果两个特征的范围不一样，那么在更新参数时对损失函数的下降的贡献就会不一样</p><p>在Scikit learn中可以使用<code>SGDRegressor</code>来进行随机梯度下降求解线性回归模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> SGDRegressor<br>sgd_reg = SGDRegressor(max_iter=<span class="hljs-number">1000</span>,tol=<span class="hljs-number">1e-3</span>,penalty=<span class="hljs-literal">None</span>,eta0=<span class="hljs-number">0.1</span>)<br>sgd_reg.fit(x,y.ravel())<span class="hljs-comment">##ravel将列向量转为一维向量</span><br>&gt;&gt; SGDRegressor(eta0=<span class="hljs-number">0.1</span>, penalty=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p><code>max_iter</code>表示epoch的数目(epoch指全部训练数据都被模型“看了”一遍)；<code>tol</code>表示如果在某一个epoch上损失函数下降小于tol的数值，则训练停止；<code>penalty</code>表示正则化(后面讲);<code>eta0</code>表示初始的学习率大小，默认的学习率是:$eta0/pow(t,power_t)$, power_t的默认值是0.25</p><h2 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h2><p>可以使用线性模型来拟合非线性的数据，一个简单的做法就是将每个特征加上幂次作为新的特征，然后对这些拓展的特征进行训练线性模型，这个技术叫做<strong>多项式回归(polynomial regression)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##模拟数据</span><br>m = <span class="hljs-number">100</span><br>np.random.seed(<span class="hljs-number">123</span>)<br>x = <span class="hljs-number">6</span> * np.random.rand(m,<span class="hljs-number">1</span>) - <span class="hljs-number">3</span> <span class="hljs-comment">##均匀分布</span><br>y = <span class="hljs-number">0.5</span> * x**<span class="hljs-number">2</span> + x + <span class="hljs-number">2</span> + np.random.randn(m,<span class="hljs-number">1</span>)<span class="hljs-comment">##正态分布</span><br><br>plt.plot(x, y, <span class="hljs-string">&quot;b.&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002180E9B1910</span>&gt;]<br>plt.xlabel(<span class="hljs-string">&quot;$x_1$&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;$x_1$&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;$y$&quot;</span>, rotation=<span class="hljs-number">0</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;$y$&#x27;</span>)<br>plt.axis([-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>])<br>&gt;&gt; (-<span class="hljs-number">3.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">10.0</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-7-1.png" width="672" /><p>使用<code>PolynomialFeatures</code>类将特征加上平方后作为新的特征：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> PolynomialFeatures<br>poly_features = PolynomialFeatures(degree=<span class="hljs-number">2</span>,include_bias=<span class="hljs-literal">False</span>)<br>x_poly = poly_features.fit_transform(x)<br><br>x[<span class="hljs-number">0</span>]<br>&gt;&gt; array([<span class="hljs-number">1.17881511</span>])<br>x_poly[<span class="hljs-number">0</span>]<br>&gt;&gt; array([<span class="hljs-number">1.17881511</span>, <span class="hljs-number">1.38960507</span>])<br></code></pre></td></tr></table></figure><p>然后重新训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">lin_reg = LinearRegression()<br>lin_reg.fit(x_poly,y)<br>&gt;&gt; LinearRegression()<br>lin_reg.intercept_, lin_reg.coef_<br>&gt;&gt; (array([<span class="hljs-number">2.03146145</span>]), array([[<span class="hljs-number">0.95505451</span>, <span class="hljs-number">0.50182851</span>]]))<br></code></pre></td></tr></table></figure><p>预测：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">x_new=np.linspace(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">100</span>).reshape(<span class="hljs-number">100</span>, <span class="hljs-number">1</span>)<br>x_new_poly = poly_features.transform(x_new)<br>y_new = lin_reg.predict(x_new_poly)<br>plt.plot(x, y, <span class="hljs-string">&quot;b.&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002180ECF2C40</span>&gt;]<br>plt.plot(x_new, y_new, <span class="hljs-string">&quot;r-&quot;</span>, linewidth=<span class="hljs-number">2</span>, label=<span class="hljs-string">&quot;Predictions&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002180ECF2E80</span>&gt;]<br>plt.xlabel(<span class="hljs-string">&quot;$x_1$&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;$x_1$&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;$y$&quot;</span>, rotation=<span class="hljs-number">0</span>, fontsize=<span class="hljs-number">18</span>)<br>&gt;&gt; Text(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;$y$&#x27;</span>)<br>plt.legend(loc=<span class="hljs-string">&quot;upper left&quot;</span>, fontsize=<span class="hljs-number">14</span>)<br>&gt;&gt; &lt;matplotlib.legend.Legend <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002180EB14490</span>&gt;<br>plt.axis([-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>])<br>&gt;&gt; (-<span class="hljs-number">3.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">10.0</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-10-1.png" width="672" /><p>需要注意的是：<code>PolynomialFeatures(degree=d)</code>会将原来的n个特征变成$\frac{(n+d)!}{d!n!}$个特征；比如有两个特征a,b,经过自由度为3的PolynomialFeatures转化后就有10个特征(包括1),要注意特征爆炸的问题</p><h2 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h2><p>使用高自由度的多项式回归模型可能会在训练集上过拟合，然而简单的线性模型可能是欠拟合的，那么我们该怎样决定模型的复杂程度或者说判断模型是过拟合还是欠拟合呢？</p><p>在第二章中，使用了交叉验证的方法来估计模型的泛化能力；如果一个模型在训练集上表现的比较好但是依据交叉验证的指标，其泛化能力比较差(在验证集上表现不好)，那么这个模型就是过拟合；如果一个模型在训练集和验证集上表现都不好，那么这个模型是欠拟合的</p><p>另外一个方法就是检查<strong>学习曲线</strong>(learning curves),<strong>学习曲线展示了模型在训练集和验证集上的表现和训练集大小或者训练的迭代次数之间的关系</strong>;要画这个图，需要在不同大小的训练集的子集上训练模型，得到模型的表现指标</p><p>我们先来画一个简单线性回归的学习曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_learning_curves</span>(<span class="hljs-params">model,x,y</span>):</span><br>  x_train,x_val,y_train,y_val = train_test_split(x,y,test_size=<span class="hljs-number">0.2</span>)<br>  train_errors,val_errors = [],[]<br>  <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(x_train)):<br>    model.fit(x_train[:m],y_train[:m])<br>    y_train_predict = model.predict(x_train[:m])<br>    y_val_predict = model.predict(x_val)<br>    train_errors.append(mean_squared_error(y_train[:m],y_train_predict))<br>    val_errors.append(mean_squared_error(y_val,y_val_predict))<br>  <br>  plt.plot(np.sqrt(train_errors),<span class="hljs-string">&quot;r-+&quot;</span>,linewidth=<span class="hljs-number">2</span>,label=<span class="hljs-string">&quot;train&quot;</span>)<br>  plt.plot(np.sqrt(val_errors), <span class="hljs-string">&quot;b-&quot;</span>, linewidth=<span class="hljs-number">3</span>, label=<span class="hljs-string">&quot;val&quot;</span>)<br>  plt.legend(loc=<span class="hljs-string">&quot;upper right&quot;</span>, fontsize=<span class="hljs-number">14</span>)  <br>  plt.xlabel(<span class="hljs-string">&quot;Training set size&quot;</span>, fontsize=<span class="hljs-number">14</span>)<br>  plt.ylabel(<span class="hljs-string">&quot;RMSE&quot;</span>, fontsize=<span class="hljs-number">14</span>) <br>    <br>    <br>lin_reg = LinearRegression()<br>plot_learning_curves(lin_reg,x,y)<br>plt.axis([<span class="hljs-number">0</span>, <span class="hljs-number">80</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>]) <br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">80.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">3.0</span>)<br>plt.show()        <br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-11-1.png" width="672" /><p>当只有一两个训练数据的时候，模型拟合的非常好，同时由于训练集较少，泛化能力较弱所以在验证集中表现不好；当训练集逐渐增大，一方面由于数据的噪音，另一方面因为模型是线性的，而数据不是线性的，所以模型在训练集上的误差上升，但是由于训练集增多，泛化能力会一定程度的上升，所以在验证集上的误差降低，最终两者都到达一个平台</p><p>这个学习曲线是一个典型的欠拟合的模型的特征：<strong>两个曲线都到达一个平台；并且两者比较接近，都比较高</strong></p><p>接下来看一下有10个自由度的多项式回归模型的学习曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.pipeline <span class="hljs-keyword">import</span> Pipeline<br><br>polynomial_regression = Pipeline([<br>        (<span class="hljs-string">&quot;poly_features&quot;</span>, PolynomialFeatures(degree=<span class="hljs-number">20</span>, include_bias=<span class="hljs-literal">False</span>)),<br>        (<span class="hljs-string">&quot;lin_reg&quot;</span>, LinearRegression()),<br>    ])<br><br>plot_learning_curves(polynomial_regression, x, y)<br>plt.axis([<span class="hljs-number">0</span>, <span class="hljs-number">80</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>])<br>&gt;&gt; (<span class="hljs-number">0.0</span>, <span class="hljs-number">80.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">3.0</span>)<br>plt.show()           <br></code></pre></td></tr></table></figure><img src="/img/hands_on_ml_ch4_files/figure-markdown_github/unnamed-chunk-12-1.png" width="672" /><p>这个学习曲线也有两个特征：</p><ul><li>  在训练集上的误差比上面的线性回归模型要低</li><li>  在两个曲线间有一个gap，这意味着模型在训练集上比在验证集上的表现要好得多，而这是<strong>过拟合</strong>的特征(可能需要收集更多的数据)</li></ul><h2 id="BIAS-VARIANCE-TRADE-OFF"><a href="#BIAS-VARIANCE-TRADE-OFF" class="headerlink" title="BIAS/VARIANCE TRADE-OFF"></a>BIAS/VARIANCE TRADE-OFF</h2><h2 id="正则化线性模型"><a href="#正则化线性模型" class="headerlink" title="正则化线性模型"></a>正则化线性模型</h2><p>在第一章和第二章已经讲过了减少过拟合风险的方法之一就是正则化模型(也就是约束模型)；对于多项式模型最简单的正则化方法就是减少模型的自由度；对于线性模型，正则化一般是通过约束模型的权重来实现，常用的有3种方法：岭回归(Ridge Regression),Lasso回归,弹性网络(Elastic Net)</p><h3 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h3><p>岭回归就是在线性回归的损失函数后面加上了一个正则化的项:</p><p>$$<br>J(\theta) = MSE(\theta) + \alpha \frac{1}{2}\sum_{i=1}^{n}\theta_i^2<br>$$<br>加上这一项之后就会使得模型在训练的过程中尽量保持特征权重(<em>θ</em>)比较小<br>注意：在岭回归等正则化的模型中，训练时使用的损失函数与计算模型性能时用的指标不一定相同(在分类模型中更是如此)；另外在训练正则化的模型时，对特征一定要归一化</p><p>下图，左边是线性回归使用岭正则化，右图是多项式回归使用岭正则化，展示了不同<em>α</em>值时的情况：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210301230247251.png"></p><p>可以看到增加<em>α</em>会是曲线更加平缓(减少了variance但是增加了bias)</p><p>对于岭回归，和线性回归一样，可以使用normal equation的方法或者梯度下降的方法求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##Normal equation</span><br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> Ridge<br><br>ridge_reg = Ridge(alpha=<span class="hljs-number">1</span>,solver=<span class="hljs-string">&quot;cholesky&quot;</span>)<br>ridge_reg.fit(x,y)<br>&gt;&gt; Ridge(alpha=<span class="hljs-number">1</span>, solver=<span class="hljs-string">&#x27;cholesky&#x27;</span>)<br>ridge_reg.predict([[<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([[<span class="hljs-number">4.58785445</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##梯度下降</span><br>sgd_reg = SGDRegressor(penalty=<span class="hljs-string">&quot;l2&quot;</span>)<br>sgd_reg.fit(x,y.ravel())<br>&gt;&gt; SGDRegressor()<br>sgd_reg.predict([[<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([<span class="hljs-number">4.56218836</span>])<br></code></pre></td></tr></table></figure><p>“l2”指的是L2范数(norm);<em>L</em><sub><em>p</em></sub>范数的定义为：<br>$$<br>||x||_p = \sqrt[p]{\sum_i |x_i|^p}<br>$$<br>因此L2范数为：<br>$$<br>||x||_2 = \sqrt[2]{\sum_i |x_i|^2}<br>$$</p><p>所以岭回归的正则化项就是<em>α</em>1/2(||<em>w</em>||<sub>2</sub>)<sup>2</sup>,w是<em>θ</em><sub>1</sub>到<em>θ</em><sub><em>n</em></sub>的参数向量(特征权重)</p><h3 id="Lasso回归"><a href="#Lasso回归" class="headerlink" title="Lasso回归"></a>Lasso回归</h3><p>Lasso的全称为Least Absolute Shrinkage and Selection Operator<br>,和岭回归类似也是在损失函数后面加上一个正则化项，只不过Lasso加的是L1范数：<br>$$<br>J(\theta) = MSE(\theta) + \alpha\sum_{i=1}^n|\theta_i|<br>$$<br>lasso回归可以用来进行特征选择(why)</p><p>上面那个损失函数在<em>θ</em><sub><em>i</em></sub> = 0的地方是不可微分的，但是可以通过将梯度向量替换成次梯度向量(subgradient<br>vector)来解决这个问题：<br>$$<br>g(\theta,J)=\triangledown MSE(\theta)+ \alpha     \left(<br>\begin{array}{cccc}<br> sign(\theta_1)\<br> sign(\theta_2)\<br> \vdots  \<br> sign(\theta_n)<br>\end{array}<br>\right ) where \ sign(\theta_n)= \begin{cases}<br>-1\ if\ \theta_i &lt;0 \<br>0\ \ if\ \theta_i =0 \<br>+1 \ if\ \theta_i &gt;0<br>\end{cases}<br>$$</p><p>在Scikit-Learn中可以使用<code>Lasso</code>或者<code>SGDRegressor</code>(指定l1范数的惩罚项)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> Lasso<br><br>lasso_reg = Lasso(alpha=<span class="hljs-number">0.1</span>)<br>lasso_reg.fit(x,y)<br>&gt;&gt; Lasso(alpha=<span class="hljs-number">0.1</span>)<br>lasso_reg.predict([[<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([<span class="hljs-number">4.52578706</span>])<br>sgd_lasso = SGDRegressor(penalty=<span class="hljs-string">&quot;l1&quot;</span>)<br>sgd_lasso.fit(x,y.ravel())<br>&gt;&gt; SGDRegressor(penalty=<span class="hljs-string">&#x27;l1&#x27;</span>)<br>sgd_lasso.predict([[<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([<span class="hljs-number">4.57060493</span>])<br></code></pre></td></tr></table></figure><h3 id="弹性网络"><a href="#弹性网络" class="headerlink" title="弹性网络"></a>弹性网络</h3><p>弹性网络(Elastic Net)是岭回归和lasso回归中间的“调和”，其正则化项是岭回归和lasso回归的正则化项的混合，可以通过<em>r</em>来控制混合的比例:<br>$$<br>J(\theta)=MSE(\theta)+r\alpha\sum_{i=1}^n|\theta_i|+\frac{1-r}{2}\alpha\sum_{i=1}^n\theta_i^2<br>$$</p><p>什么时候使用单独的线性回归，什么时候使用正则化的模型，这些正则化方法应该选哪个；一般来说要避免使用单独的线性回归，所以更多的情况下是使用正则化的模型，当我们知道特征中只有一部分是有用的，可以使用lasso或者弹性网络来选择变量；另外尽可能的使用弹性网络，因为<strong>当特征的数量比训练样本的数量要多或者几个特征间相关性比较强时，lasso表现不稳定</strong></p><p>sklearn中的<code>ElasticNet</code>可以用来建立弹性网络模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> ElasticNet<br>elastic_net = ElasticNet(alpha=<span class="hljs-number">0.1</span>,l1_ratio=<span class="hljs-number">0.5</span>)<span class="hljs-comment">##l1_ratio指的是r</span><br>elastic_net.fit(x,y)<br>&gt;&gt; ElasticNet(alpha=<span class="hljs-number">0.1</span>)<br>elastic_net.predict([[<span class="hljs-number">1.5</span>]])<br><br><span class="hljs-comment">##也可以使用SGDRgressor</span><br>&gt;&gt; array([<span class="hljs-number">4.52788619</span>])<br>sgd_elastic = SGDRegressor(penalty=<span class="hljs-string">&quot;elasticnet&quot;</span>,alpha=<span class="hljs-number">0.1</span>,l1_ratio=<span class="hljs-number">0.5</span>)<br>sgd_elastic.fit(x,y.ravel())<br>&gt;&gt; SGDRegressor(alpha=<span class="hljs-number">0.1</span>, l1_ratio=<span class="hljs-number">0.5</span>, penalty=<span class="hljs-string">&#x27;elasticnet&#x27;</span>)<br>sgd_elastic.predict([[<span class="hljs-number">1.5</span>]])<br>&gt;&gt; array([<span class="hljs-number">4.51766322</span>])<br></code></pre></td></tr></table></figure><h3 id="Early-Stopping"><a href="#Early-Stopping" class="headerlink" title="Early Stopping"></a>Early Stopping</h3><p>另一个方法去正则化迭代的学习算法(如梯度下降)是：当验证集误差达到最小值的时候就停止训练；这种方法叫做<strong>early<br>stopping</strong>,如下图所示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210304083008485.png"></p><p>当学习算法学习的时候，在训练集和验证集上的误差都会降低，但是一段时间之后会出现在验证集上的误差上升的情况，这意味着模型开始过拟合，因此最好在未过拟合之前就停止训练模型(验证集误差最低)</p><p>注意：在随机梯度下降或者小批次梯度下降中，曲线不会像上图那样平滑，因此很难判定是否达到最小值；一个解决方法就是：当训练一段时间之后，验证集的误差一直比最小值要高(每一个epoch之后就把验证集误差和之前所有的误差比较，看看是不是最小值，进行迭代更新)，就停止训练，记录下验证集误差最小时的模型参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##data</span><br>np.random.seed(<span class="hljs-number">42</span>)<br>m = <span class="hljs-number">100</span><br>X = <span class="hljs-number">6</span> * np.random.rand(m, <span class="hljs-number">1</span>) - <span class="hljs-number">3</span><br>y = <span class="hljs-number">2</span> + X + <span class="hljs-number">0.5</span> * X**<span class="hljs-number">2</span> + np.random.randn(m, <span class="hljs-number">1</span>)<br><br>X_train, X_val, y_train, y_val = train_test_split(X[:<span class="hljs-number">50</span>], y[:<span class="hljs-number">50</span>].ravel(), test_size=<span class="hljs-number">0.5</span>, random_state=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> copy <span class="hljs-keyword">import</span> deepcopy<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><br><span class="hljs-comment">##数据预处理</span><br>poly_scaler = Pipeline([<br>        (<span class="hljs-string">&quot;poly_features&quot;</span>, PolynomialFeatures(degree=<span class="hljs-number">90</span>, include_bias=<span class="hljs-literal">False</span>)),<br>        (<span class="hljs-string">&quot;std_scaler&quot;</span>, StandardScaler())<br>    ])<br><br>X_train_poly_scaled = poly_scaler.fit_transform(X_train)<br>X_val_poly_scaled = poly_scaler.transform(X_val)<br><br>sgd_reg = SGDRegressor(max_iter=<span class="hljs-number">1</span>, tol=-np.infty, warm_start=<span class="hljs-literal">True</span>,<br>                       penalty=<span class="hljs-literal">None</span>, learning_rate=<span class="hljs-string">&quot;constant&quot;</span>, eta0=<span class="hljs-number">0.0005</span>, random_state=<span class="hljs-number">42</span>)<br><br>minimum_val_error = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>)<br>best_epoch = <span class="hljs-literal">None</span><br>best_model = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    sgd_reg.fit(X_train_poly_scaled, y_train)  <span class="hljs-comment"># continues where it left off</span><br>    y_val_predict = sgd_reg.predict(X_val_poly_scaled)<br>    val_error = mean_squared_error(y_val, y_val_predict)<br>    <span class="hljs-keyword">if</span> val_error &lt; minimum_val_error:<br>        minimum_val_error = val_error<br>        best_epoch = epoch<br>        best_model = deepcopy(sgd_reg)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">best_epoch<br>&gt;&gt; <span class="hljs-number">239</span><br>minimum_val_error<br>&gt;&gt; <span class="hljs-number">1.3513110512453865</span><br></code></pre></td></tr></table></figure><p>首先预处理步骤对数据进行多项式转化，然后进行归一化；SGDRegressor参数中设置max_iter=1意思是每次训练只进行一个epoch(因为后面显式地进行epoch的迭代),tol前面讲过(如果在某一个epoch上损失函数下降小于tol的数值，则训练停止),warm_start=T表示调用fit时会使用上次训练得到的模型参数作为初始值继续进行训练(热启动),random_state表示当对每个新的epoch都会进行shuffle(默认)时取的随机种子数，来保证结果可重复</p><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>逻辑回归可以用来估计某个实例属于某一类别的概率，如果概率大于50%，则认为该实例属于该类(1),否则不属于该类(0),因此是二分类的分类器</p><h3 id="估计概率"><a href="#估计概率" class="headerlink" title="估计概率"></a>估计概率</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【hands on ML Ch3】-分类</title>
    <link href="/2021/02/04/hands_on_ML_ch3/"/>
    <url>/2021/02/04/hands_on_ML_ch3/</url>
    
    <content type="html"><![CDATA[<p>Hands on ML 第三章笔记，主要是分类相关的知识</p><span id="more"></span><p>本章使用的数据集是MNIST数据集，有70000张手写的数字图像(这个数据集也被称为是机器学习的“hello<br>world”)</p><p>Scikit-Learn提供了一些函数来下载常用的数据集，下面的代码可以下载MNIST数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> fetch_openml<br><br>mnist = fetch_openml(<span class="hljs-string">&#x27;mnist_784&#x27;</span>, version=<span class="hljs-number">1</span>)<br>mnist.keys()<br></code></pre></td></tr></table></figure><p>通过Scikit-Learn下载的数据是字典的结构，包含key和value，比如<code>DESCR</code>key表示数据集的描述，<code>data</code><br>key表示数据集，<code>target</code> key表示数据集的标签</p><p>使用Scikit-Learn下载太慢，所以在openml官网下载了csv格式的<a href="https://www.openml.org/d/554">数据</a>，再使用numpy读入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>data = np.loadtxt(<span class="hljs-string">&quot;../test/mnist_784.csv&quot;</span>,delimiter=<span class="hljs-string">&quot;,&quot;</span>,skiprows=<span class="hljs-number">1</span>)<br><br>data.shape<br><br>&gt;&gt; (<span class="hljs-number">70000</span>, <span class="hljs-number">785</span>)<br>X = data[:,<span class="hljs-number">0</span>:<span class="hljs-number">784</span>]<span class="hljs-comment">###data without lable</span><br><br>y = data[:,<span class="hljs-number">784</span>]<span class="hljs-comment">###lable</span><br><br>X.shape<br>&gt;&gt; (<span class="hljs-number">70000</span>, <span class="hljs-number">784</span>)<br>y.shape<br>&gt;&gt; (<span class="hljs-number">70000</span>,)<br></code></pre></td></tr></table></figure><p>每个图片都有784个特征，因为每张图片都由28*28个像素构成，每个特征就代表一个像素的密度(0-255):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl <br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>some_digit = X[<span class="hljs-number">0</span>] <br>some_digit_image = some_digit.reshape(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>) <br>plt.imshow(some_digit_image,cmap=<span class="hljs-string">&quot;binary&quot;</span>) <br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015BA034A700</span>&gt;<br>plt.axis(<span class="hljs-string">&quot;off&quot;</span>) <br>&gt;&gt; (-<span class="hljs-number">0.5</span>, <span class="hljs-number">27.5</span>, <span class="hljs-number">27.5</span>, -<span class="hljs-number">0.5</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-3-1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">y[<span class="hljs-number">0</span>]<br>&gt;&gt; <span class="hljs-number">5.0</span><br></code></pre></td></tr></table></figure><p>首先要做的就是划分训练集和测试集(MNIST数据集已经打乱过了，所以每个交叉验证的fold都是类似的)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X_train, X_test, y_train, y_test = X[:<span class="hljs-number">60000</span>], X[<span class="hljs-number">60000</span>:], y[:<span class="hljs-number">60000</span>], y[<span class="hljs-number">60000</span>:]<br></code></pre></td></tr></table></figure><h2 id="训练二分类器"><a href="#训练二分类器" class="headerlink" title="训练二分类器"></a>训练二分类器</h2><p>二分类器的目的是在数据中辨别出两种类别，比如这里我们想要鉴别某个手写的数字是5还是不是5；首先将数据的lable进行重塑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">y_train_5 = (y_train == <span class="hljs-number">5</span>)<br>y_test_5 = (y_test == <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>我们首先尝试SGD(Stochastic Gradient<br>Descent)分类器【随机梯度下降是一种算法，<br>Scikit-Learn里面的SGDClassifier类指的是一系列模型，这些模型的优化算法都是SGD，SGDClassifier类默认的是线性SVM模型，参照官网上的<a href="https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html">说明</a>】:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> SGDClassifier<br><br>sgd_clf = SGDClassifier(random_state=<span class="hljs-number">42</span>)<span class="hljs-comment">##随机梯度下降需要设定种子数 </span><br>sgd_clf.fit(X_train, y_train_5)<br>&gt;&gt; SGDClassifier(random_state=<span class="hljs-number">42</span>)<br>sgd_clf.predict([some_digit])<br>&gt;&gt; array([ <span class="hljs-literal">True</span>])<br></code></pre></td></tr></table></figure><h2 id="模型性能评估"><a href="#模型性能评估" class="headerlink" title="模型性能评估"></a>模型性能评估</h2><p>这一部分是重点</p><h3 id="使用交叉验证来评估准确性"><a href="#使用交叉验证来评估准确性" class="headerlink" title="使用交叉验证来评估准确性"></a>使用交叉验证来评估准确性</h3><p>和第二章一样，使用cross_val_score函数来进行交叉验证，注意这里使用的评价方法不是第二章里面的RSME了，而是使用精确度(正确预测的比例)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_val_score<br><br>cross_val_score(sgd_clf, X_train, y_train_5, cv=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&quot;accuracy&quot;</span>)<br>&gt;&gt; array([<span class="hljs-number">0.95035</span>, <span class="hljs-number">0.96035</span>, <span class="hljs-number">0.9604</span> ])<br></code></pre></td></tr></table></figure><p>看起来结果不错，但是如果我们构建一个非常简单的模型：将所有的图片都分到不是5的类中，这个模型的精确度是多少呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.base <span class="hljs-keyword">import</span> BaseEstimator<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Never5Classifier</span>(<span class="hljs-params">BaseEstimator</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span>(<span class="hljs-params">self, X, y=<span class="hljs-literal">None</span></span>):</span> <br>      <span class="hljs-keyword">pass</span> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">predict</span>(<span class="hljs-params">self, X</span>):</span> <br>      <span class="hljs-keyword">return</span> np.zeros((<span class="hljs-built_in">len</span>(X), <span class="hljs-number">1</span>), dtype=<span class="hljs-built_in">bool</span>)<span class="hljs-comment">##返回False</span><br>    <br>never_5_clf = Never5Classifier()<br>cross_val_score(never_5_clf, X_train, y_train_5, cv=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&quot;accuracy&quot;</span>)<br>&gt;&gt; array([<span class="hljs-number">0.91125</span>, <span class="hljs-number">0.90855</span>, <span class="hljs-number">0.90915</span>])<br></code></pre></td></tr></table></figure><p>这个模型都有0.9以上的准确度，因为只有10%的图片是5，所以总是猜不是5，90%是对的</p><p>上面的例子说明：仅仅使用准确度来衡量模型是不太好的，特别是对于有偏向性的数据(skewed<br>datasets)</p><h3 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h3><p>评估一个分类器的更好的方法是混淆矩阵(confusion matrix)</p><p>混淆矩阵的每一行是真实的类，每一列是预测的类</p><p>要计算混淆矩阵，首先要获取预测值，可以使用cross_val_predict函数，这个函数也进行交叉验证，不过返回的不是评估分数而是在每一个验证集上的预测值(因此是“clean”的预测，所谓clean指的是预测使用的是在训练过程中没有看过的数据)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_val_predict<br><br>y_train_pred = cross_val_predict(sgd_clf, X_train, y_train_5, cv=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>然后就可以使用confusion_matrix函数来获得混淆矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrix<br><br>confusion_matrix(y_train_5, y_train_pred)<br>&gt;&gt; array([[<span class="hljs-number">53892</span>,   <span class="hljs-number">687</span>],<br>&gt;&gt;        [ <span class="hljs-number">1891</span>,  <span class="hljs-number">3530</span>]], dtype=int64)<br></code></pre></td></tr></table></figure><p>这个混淆矩阵可以使用下图来表示：<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF1_01.png"></p><p>一个完美的分类器的混淆矩阵应该只有主对角线上是非零值</p><p>关于混淆矩阵，有一些重要的指标：</p><ul><li><p>精度(precision)表示 在预测的positive里面真实的也是positive的比例：</p><p>  $$<br>  precision = \frac{TP}{TP+FP}<br>  $$</p></li><li><p>召回率(recall)(或者叫灵敏度sensitivity; 真阳性率FPR)表示<br>  在真实的positive里面预测是positive的比例：</p><p>  $$<br>  recall = \frac{TP}{TP+FN}<br>  $$</p></li></ul><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210204170319913.png"></p><h3 id="精度和召回率"><a href="#精度和召回率" class="headerlink" title="精度和召回率"></a>精度和召回率</h3><p>Scikit-Learn也提供了函数来计算精度和召回率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_score, recall_score<br><br>precision_score(y_train_5,y_train_pred)<br>&gt;&gt; <span class="hljs-number">0.8370879772350012</span><br>recall_score(y_train_5, y_train_pred)<br>&gt;&gt; <span class="hljs-number">0.6511713705958311</span><br></code></pre></td></tr></table></figure><p>这些值的意思是：当这个分类器认为某个图片是5，那么有83.7%的机率是对的；并且这个分类器只检测到65%的是5的图片</p><p>也可以将精度和召回率结合成一个值：F_1 score<br>(两者的几何平均，几何平均给予小的值更大的权重)：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210204171113298.png"></p><p>可以使用 f1_score()函数来计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> f1_score<br><br>f1_score(y_train_5, y_train_pred)<br>&gt;&gt; <span class="hljs-number">0.7325171197343846</span><br></code></pre></td></tr></table></figure><p>需要注意的是：<strong>在不同情况下，我们对于precision和recall的关注度是不一样的</strong></p><p>比如，如果训练的分类器的任务是检测对儿童安全的视频，那么这个分类器的precision就更重要(尽可能保证预测是安全的视频实际上也是安全的，而不是说将所有的安全的视频都给检出)；而如果分类器的任务是根据商场的监控图像来检测小偷，这个时候分类器的recall就更重要(将所有的小偷尽可能全部检测出，虽然有可能发出假的的警报)</p><h3 id="Precision-Recall-平衡"><a href="#Precision-Recall-平衡" class="headerlink" title="Precision/Recall 平衡"></a>Precision/Recall 平衡</h3><p>对于每个观测值，SGDClassifier都会依据决策函数(decision<br>function)来计算一个值，再根据特定的阈值，如果计算的值高于阈值则为positive类，低于阈值则为negative类，所以改变这个阈值就是使得precision和recall有所变化，这个过程可以用下图来表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210204173205578.png"></p><p>在Scikit-Learn中，我们可以通过decision_function()方法来获取每个观测值的决策函数值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">y_scores = sgd_clf.decision_function([some_digit])<br>y_scores<br>&gt;&gt; array([<span class="hljs-number">2164.22030239</span>])<br>threshold = <span class="hljs-number">0</span><span class="hljs-comment">##设置阈值为0</span><br>y_some_digit_pred = (y_scores &gt; threshold)<br>y_some_digit_pred<br>&gt;&gt; array([ <span class="hljs-literal">True</span>])<br>threshold = <span class="hljs-number">8000</span><span class="hljs-comment">##改变阈值</span><br>y_some_digit_pred = (y_scores &gt; threshold)<br>y_some_digit_pred<br>&gt;&gt; array([<span class="hljs-literal">False</span>])<br></code></pre></td></tr></table></figure><p>那么我们怎么选择一个合适的阈值呢？<br>首先可以使用cross_val_predict()得到每个实例的决策函数值(同样是“clean”的)，然后使用<br>precision_recall_curve()函数来计算所有阈值的precision和recall值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">y_scores = cross_val_predict(sgd_clf, X_train, y_train_5, cv=<span class="hljs-number">3</span>, method=<span class="hljs-string">&quot;decision_function&quot;</span>)<br><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_recall_curve<br><br>precisions, recalls, thresholds = precision_recall_curve(y_train_5, y_scores)<br><br><span class="hljs-comment">###可视化</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_precision_recall_vs_threshold</span>(<span class="hljs-params">precisions, recalls, thresholds</span>):</span><br>    plt.plot(thresholds, precisions[:-<span class="hljs-number">1</span>], <span class="hljs-string">&quot;b--&quot;</span>, label=<span class="hljs-string">&quot;Precision&quot;</span>, linewidth=<span class="hljs-number">2</span>)<br>    plt.plot(thresholds, recalls[:-<span class="hljs-number">1</span>], <span class="hljs-string">&quot;g-&quot;</span>, label=<span class="hljs-string">&quot;Recall&quot;</span>, linewidth=<span class="hljs-number">2</span>)<br>    plt.legend(loc=<span class="hljs-string">&quot;center right&quot;</span>, fontsize=<span class="hljs-number">16</span>)<br>    plt.xlabel(<span class="hljs-string">&quot;Threshold&quot;</span>,fontsize=<span class="hljs-number">16</span>)<br>    plt.grid(<span class="hljs-literal">True</span>)                    <br>    plt.axis([-<span class="hljs-number">50000</span>, <span class="hljs-number">50000</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>    <br>recall_90_precision = recalls[np.argmax(precisions &gt;= <span class="hljs-number">0.90</span>)]<br>threshold_90_precision = thresholds[np.argmax(precisions &gt;= <span class="hljs-number">0.90</span>)]<br><br><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">4</span>))            <br>&gt;&gt; &lt;Figure size 800x400 <span class="hljs-keyword">with</span> <span class="hljs-number">0</span> Axes&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">plot_precision_recall_vs_threshold(precisions, recalls, thresholds)<br>plt.plot([threshold_90_precision, threshold_90_precision], [<span class="hljs-number">0.</span>, <span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;r:&quot;</span>)      <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B4B54FD90</span>&gt;]<br>plt.plot([-<span class="hljs-number">50000</span>, threshold_90_precision], [<span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;r:&quot;</span>)          <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C2D3EB0</span>&gt;]<br>plt.plot([-<span class="hljs-number">50000</span>, threshold_90_precision], [recall_90_precision, recall_90_precision], <span class="hljs-string">&quot;r:&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C2E0820</span>&gt;]<br>plt.plot([threshold_90_precision], [<span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;ro&quot;</span>)                           <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C2E0400</span>&gt;]<br>plt.plot([threshold_90_precision], [recall_90_precision], <span class="hljs-string">&quot;ro&quot;</span>)           <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C2E0B50</span>&gt;]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.show()<br></code></pre></td></tr></table></figure><p><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-17-1.png"></p><p>注意：当提高阈值时，precision不一定总是上升的(以上面那个轴为例，当阈值从中间向右移动一位precision就会下降：4/5→3/4);但是Recall总是下降的</p><p>另外，我们也可以直接展示precision和recall的关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_precision_vs_recall</span>(<span class="hljs-params">precisions, recalls</span>):</span><br>    plt.plot(recalls, precisions, <span class="hljs-string">&quot;b-&quot;</span>, linewidth=<span class="hljs-number">2</span>)<br>    plt.xlabel(<span class="hljs-string">&quot;Recall&quot;</span>, fontsize=<span class="hljs-number">16</span>)<br>    plt.ylabel(<span class="hljs-string">&quot;Precision&quot;</span>, fontsize=<span class="hljs-number">16</span>)<br>    plt.axis([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>    plt.grid(<span class="hljs-literal">True</span>)<br><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>))<br>&gt;&gt; &lt;Figure size 800x600 <span class="hljs-keyword">with</span> <span class="hljs-number">0</span> Axes&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">plot_precision_vs_recall(precisions, recalls)<br>plt.plot([recall_90_precision, recall_90_precision], [<span class="hljs-number">0.</span>, <span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;r:&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C4F4880</span>&gt;]<br>plt.plot([<span class="hljs-number">0.0</span>, recall_90_precision], [<span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;r:&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C4F4C10</span>&gt;]<br>plt.plot([recall_90_precision], [<span class="hljs-number">0.9</span>], <span class="hljs-string">&quot;ro&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C4F44F0</span>&gt;]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-20-1.png" width="672" /><p>假如我们现在想要分类器达到90%的precision，可以使用numpy的np.argmax函数(返回第一个最大值的index)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">threshold_90_precision = thresholds[np.argmax(precisions &gt;= <span class="hljs-number">0.90</span>)]<span class="hljs-comment">##true是1，false是0，因此返回第一个1，也就是第一个true的位置</span><br><br>y_train_pred_90 = (y_scores &gt;= threshold_90_precision)<span class="hljs-comment">##预测</span><br><br>precision_score(y_train_5, y_train_pred_90)<br>&gt;&gt; <span class="hljs-number">0.9000345901072293</span><br>recall_score(y_train_5, y_train_pred_90)<br>&gt;&gt; <span class="hljs-number">0.4799852425751706</span><br></code></pre></td></tr></table></figure><h3 id="ROC曲线"><a href="#ROC曲线" class="headerlink" title="ROC曲线"></a>ROC曲线</h3><p>ROC曲线全称为：receiver operating characteristic<br>curve；ROC曲线展示了真阳性率(true positive rate,<br>recall的另一个叫法)和假阳性率(false positive rate, FPR)的关系</p><p>$$<br>FPR = \frac{FP}{FP+TN}=1-TNR=1-\frac{TN}{FP+TN}<br>$$</p><p>这里面的TNR又叫做特异性(specificity)，所以<strong>ROC曲线画的是recall/sensitivity(两个是一样的)和1-specificity的关系</strong></p><p>可以使用roc_curve函数来计算FPR和TPR：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve<br><br>fpr, tpr, thresholds = roc_curve(y_train_5, y_scores)<br><br><span class="hljs-comment">##plot</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_roc_curve</span>(<span class="hljs-params">fpr, tpr, label=<span class="hljs-literal">None</span></span>):</span><br>    plt.plot(fpr, tpr, linewidth=<span class="hljs-number">2</span>, label=label)<br>    plt.plot([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <span class="hljs-string">&#x27;k--&#x27;</span>) <span class="hljs-comment"># dashed diagonal</span><br>    plt.axis([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])            <br>    plt.xlabel(<span class="hljs-string">&#x27;False Positive Rate&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;True Positive Rate (Recall)&#x27;</span>, fontsize=<span class="hljs-number">16</span>)  <br>    plt.grid(<span class="hljs-literal">True</span>)<br><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>))                  <br>&gt;&gt; &lt;Figure size 800x600 <span class="hljs-keyword">with</span> <span class="hljs-number">0</span> Axes&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">plot_roc_curve(fpr, tpr)<br>fpr_90 = fpr[np.argmax(tpr &gt;= recall_90_precision)]          <br>plt.plot([fpr_90, fpr_90], [<span class="hljs-number">0.</span>, recall_90_precision], <span class="hljs-string">&quot;r:&quot;</span>) <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C708A60</span>&gt;]<br>plt.plot([<span class="hljs-number">0.0</span>, fpr_90], [recall_90_precision, recall_90_precision], <span class="hljs-string">&quot;r:&quot;</span>) <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C708D60</span>&gt;]<br>plt.plot([fpr_90], [recall_90_precision], <span class="hljs-string">&quot;ro&quot;</span>)               <br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C708580</span>&gt;]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-24-1.png" width="672" /><p>图中的虚线表示完全随机的分类器的ROC曲线，一个好的分类器要尽可能离这条线远，并且向左上角靠拢(高的recall并且比较低的假阳性)</p><p>一种比较不同的分类器的方法就是计算ROC曲线下面积(AUC)，越接近1说明这个模型越好(图中虚线的AUC是0.5)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_auc_score<br><br>roc_auc_score(y_train_5, y_scores)<br>&gt;&gt; <span class="hljs-number">0.9604938554008616</span><br></code></pre></td></tr></table></figure><p>现在我们可以来比较一下<br>随机森林分类器(RandomForestClassifier)和SVM分类器(SGDClassifier,默认参数)了</p><p>要注意的是RandomForestClassifier没有decision_function方法而是predict_proba方法，该方法返回的是一个array数组，每一行是一个观测，每一列是该观测属于各类的概率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><br>forest_clf = RandomForestClassifier(random_state=<span class="hljs-number">42</span>)<br>y_probas_forest = cross_val_predict(forest_clf, X_train, y_train_5, cv=<span class="hljs-number">3</span>, method=<span class="hljs-string">&quot;predict_proba&quot;</span>)<br><br>y_probas_forest<br>&gt;&gt; array([[<span class="hljs-number">0.11</span>, <span class="hljs-number">0.89</span>],<br>&gt;&gt;        [<span class="hljs-number">0.99</span>, <span class="hljs-number">0.01</span>],<br>&gt;&gt;        [<span class="hljs-number">0.96</span>, <span class="hljs-number">0.04</span>],<br>&gt;&gt;        ...,<br>&gt;&gt;        [<span class="hljs-number">0.02</span>, <span class="hljs-number">0.98</span>],<br>&gt;&gt;        [<span class="hljs-number">0.92</span>, <span class="hljs-number">0.08</span>],<br>&gt;&gt;        [<span class="hljs-number">0.94</span>, <span class="hljs-number">0.06</span>]])<br></code></pre></td></tr></table></figure><p>roc_curve()函数需要的输入是label和score(用来选取不同的阈值)，所以在这里使用是5类(positive类)的概率作为score：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">y_scores_forest = y_probas_forest[:, <span class="hljs-number">1</span>]<br><br>fpr_forest, tpr_forest, thresholds_forest = roc_curve(y_train_5,y_scores_forest)<br><br><span class="hljs-comment">##plot</span><br>plt.plot(fpr, tpr, <span class="hljs-string">&quot;b:&quot;</span>, label=<span class="hljs-string">&quot;SGD&quot;</span>)<br>&gt;&gt; [&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9CD23580</span>&gt;]<br>plot_roc_curve(fpr_forest, tpr_forest, <span class="hljs-string">&quot;Random Forest&quot;</span>) <br>plt.legend(loc=<span class="hljs-string">&quot;lower right&quot;</span>) <br>&gt;&gt; &lt;matplotlib.legend.Legend <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9CD23EB0</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-27-1.png" width="672" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">roc_auc_score(y_train_5, y_scores_forest)<br>&gt;&gt; <span class="hljs-number">0.9983436731328145</span><br></code></pre></td></tr></table></figure><h2 id="多类别分类"><a href="#多类别分类" class="headerlink" title="多类别分类"></a>多类别分类</h2><p>有一些算法能够处理多分类问题(比如SGD<br>分类器，随随机森林分类器和朴素贝叶斯分类器)而一些算法只能处理二分类问题(比如逻辑斯蒂回归，支持向量机等)，但是我们可以使用一些方法来使这些算法可以用来处理多分类问题</p><p>主要有两种方法：</p><ul><li><p>一对多策略(one-versus-the-rest (OvR)):<br>  比如要将手写图片分为0-9一共10个类别，那么我们就可以训练10个分类器，每个分类器处理的是一个二分类问题(属于这一类还是不属于这一类)，都可以得到一个score，对于每个图片就选择10个分类器中score最高的分类器所对应的类作为该图片的预测类</p></li><li><p>一对一策略(one-versus-one<br>  (OvO)):对所有的类两两组合训练二分类的分类器，如果有N类，那么就需要训练N*(N-1)/2个分类器，对于一个图片就需要运行所有的分类器(10类别是45个)，在这些结果中预测次数最多的类就是该图片的预测类，这个方法的好处是在训练时只需要对一部分训练数据进行训练(只涉及要识别的类的数据，比如0-1分类器只需要对所有的0/1图片进行训练)</p></li></ul><p>对于一些算法(比如支持向量机)对大的训练集处理比较困难(scale poorly with<br>the size of the training<br>set),对于这些算法OvO策略比较适合，因为训练的时候不需要全部的训练集；对于大部分的二分类算法，OvR比较适合</p><p>Scikit-Learn会依据算法的不同来选择OvO或者OvR：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##支持向量机SVM算法，默认是使用OvO</span><br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br>svm_clf = SVC()<br>svm_clf.fit(X_train, y_train)<span class="hljs-comment">##多分类</span><br>&gt;&gt; SVC()<br>svm_clf.predict([some_digit])<br>&gt;&gt; array([<span class="hljs-number">5.</span>])<br></code></pre></td></tr></table></figure><p>如果想要指定OvO或者OvR，可以使用OneVsOneClassifier或者OneVsRestClassifier类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.multiclass <span class="hljs-keyword">import</span> OneVsRestClassifier<br><br>ovr_clf = OneVsRestClassifier(SVC())<span class="hljs-comment">##SVC的OVR策略</span><br>ovr_clf.fit(X_train, y_train)<br>&gt;&gt; OneVsRestClassifier(estimator=SVC())<br>ovr_clf.predict([some_digit])<br>&gt;&gt; array([<span class="hljs-number">5.</span>])<br></code></pre></td></tr></table></figure><p>对SGD分类器进行多分类任务的训练也是类似的，不过SGD分类器本身就可以进行多分类任务，所以不会运行OVO或者OVR：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">sgd_clf.fit(X_train, y_train)<br>&gt;&gt; SGDClassifier(random_state=<span class="hljs-number">42</span>)<br>sgd_clf.predict([some_digit])<br>&gt;&gt; array([<span class="hljs-number">3.</span>])<br>cross_val_score(sgd_clf, X_train, y_train, cv=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&quot;accuracy&quot;</span>)<span class="hljs-comment">##检测预测精度</span><br>&gt;&gt; array([<span class="hljs-number">0.87365</span>, <span class="hljs-number">0.85835</span>, <span class="hljs-number">0.8689</span> ])<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><br>scaler = StandardScaler()<br>X_train_scaled = scaler.fit_transform(X_train.astype(np.float64))<span class="hljs-comment">##将变量进行缩放</span><br>cross_val_score(sgd_clf, X_train_scaled, y_train, cv=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&quot;accuracy&quot;</span>)<span class="hljs-comment">##精度有所提升</span><br>&gt;&gt; array([<span class="hljs-number">0.8983</span>, <span class="hljs-number">0.891</span> , <span class="hljs-number">0.9018</span>])<br></code></pre></td></tr></table></figure><h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><p>当我们通过一系列的步骤找到了一个不错的模型并想要进一步提升其性能，一种方法就是分析这个模型犯的错误</p><p>首先需要查看混淆矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">y_train_pred = cross_val_predict(sgd_clf, X_train_scaled, y_train, cv=<span class="hljs-number">3</span>)<br><br>conf_mx = confusion_matrix(y_train, y_train_pred)<br>conf_mx<br>&gt;&gt; array([[<span class="hljs-number">5577</span>,    <span class="hljs-number">0</span>,   <span class="hljs-number">22</span>,    <span class="hljs-number">5</span>,    <span class="hljs-number">8</span>,   <span class="hljs-number">43</span>,   <span class="hljs-number">36</span>,    <span class="hljs-number">6</span>,  <span class="hljs-number">225</span>,    <span class="hljs-number">1</span>],<br>&gt;&gt;        [   <span class="hljs-number">0</span>, <span class="hljs-number">6400</span>,   <span class="hljs-number">37</span>,   <span class="hljs-number">24</span>,    <span class="hljs-number">4</span>,   <span class="hljs-number">44</span>,    <span class="hljs-number">4</span>,    <span class="hljs-number">7</span>,  <span class="hljs-number">212</span>,   <span class="hljs-number">10</span>],<br>&gt;&gt;        [  <span class="hljs-number">27</span>,   <span class="hljs-number">27</span>, <span class="hljs-number">5220</span>,   <span class="hljs-number">92</span>,   <span class="hljs-number">73</span>,   <span class="hljs-number">27</span>,   <span class="hljs-number">67</span>,   <span class="hljs-number">36</span>,  <span class="hljs-number">378</span>,   <span class="hljs-number">11</span>],<br>&gt;&gt;        [  <span class="hljs-number">22</span>,   <span class="hljs-number">17</span>,  <span class="hljs-number">117</span>, <span class="hljs-number">5227</span>,    <span class="hljs-number">2</span>,  <span class="hljs-number">203</span>,   <span class="hljs-number">27</span>,   <span class="hljs-number">40</span>,  <span class="hljs-number">403</span>,   <span class="hljs-number">73</span>],<br>&gt;&gt;        [  <span class="hljs-number">12</span>,   <span class="hljs-number">14</span>,   <span class="hljs-number">41</span>,    <span class="hljs-number">9</span>, <span class="hljs-number">5182</span>,   <span class="hljs-number">12</span>,   <span class="hljs-number">34</span>,   <span class="hljs-number">27</span>,  <span class="hljs-number">347</span>,  <span class="hljs-number">164</span>],<br>&gt;&gt;        [  <span class="hljs-number">27</span>,   <span class="hljs-number">15</span>,   <span class="hljs-number">30</span>,  <span class="hljs-number">168</span>,   <span class="hljs-number">53</span>, <span class="hljs-number">4444</span>,   <span class="hljs-number">75</span>,   <span class="hljs-number">14</span>,  <span class="hljs-number">535</span>,   <span class="hljs-number">60</span>],<br>&gt;&gt;        [  <span class="hljs-number">30</span>,   <span class="hljs-number">15</span>,   <span class="hljs-number">42</span>,    <span class="hljs-number">3</span>,   <span class="hljs-number">44</span>,   <span class="hljs-number">97</span>, <span class="hljs-number">5552</span>,    <span class="hljs-number">3</span>,  <span class="hljs-number">131</span>,    <span class="hljs-number">1</span>],<br>&gt;&gt;        [  <span class="hljs-number">21</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">51</span>,   <span class="hljs-number">30</span>,   <span class="hljs-number">49</span>,   <span class="hljs-number">12</span>,    <span class="hljs-number">3</span>, <span class="hljs-number">5684</span>,  <span class="hljs-number">195</span>,  <span class="hljs-number">210</span>],<br>&gt;&gt;        [  <span class="hljs-number">17</span>,   <span class="hljs-number">63</span>,   <span class="hljs-number">48</span>,   <span class="hljs-number">86</span>,    <span class="hljs-number">3</span>,  <span class="hljs-number">126</span>,   <span class="hljs-number">25</span>,   <span class="hljs-number">10</span>, <span class="hljs-number">5429</span>,   <span class="hljs-number">44</span>],<br>&gt;&gt;        [  <span class="hljs-number">25</span>,   <span class="hljs-number">18</span>,   <span class="hljs-number">30</span>,   <span class="hljs-number">64</span>,  <span class="hljs-number">118</span>,   <span class="hljs-number">36</span>,    <span class="hljs-number">1</span>,  <span class="hljs-number">179</span>,  <span class="hljs-number">371</span>, <span class="hljs-number">5107</span>]],<br>&gt;&gt;       dtype=int64)<br></code></pre></td></tr></table></figure><p>可以用热图的形式将混淆矩阵可视化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.matshow(conf_mx, cmap=plt.cm.gray)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C0DC1C0</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-33-1.png" width="480" /><p>从这个图来看，结果是比较好的，因为大部分都集中在对角线上，但是这里面查看的是绝对数值，可能某个类的总数就比较小，比如5类，因此我们将混淆矩阵中的每个值除以相应类的图片总数(行和)得到相对值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">row_sums = conf_mx.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>)<br>norm_conf_mx = conf_mx / row_sums<br></code></pre></td></tr></table></figure><p>再将对角线上的值归为0，因此处理后的混淆矩阵中的值就是错误率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">np.fill_diagonal(norm_conf_mx, <span class="hljs-number">0</span>)<span class="hljs-comment">##对角线归0</span><br><br>plt.matshow(norm_conf_mx, cmap=plt.cm.gray)<br>&gt;&gt; &lt;matplotlib.image.AxesImage <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000015B9C508E50</span>&gt;<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/img/hands_on_ML_ch3_files/figure-markdown_github/unnamed-chunk-35-1.png" width="480" /><p>可以看到8类的列最亮，也就是说很多图片都被错误地分成8了；另外3和5也是经常被相互错分的</p><p>我们可以针对这种错误来想办法提升模型，例如：可以收集更多的图片，这些图片长得像8但又不是8，用这些数据作为训练集；还可以编码一些新的特征，比如图像中闭环的数目(8有2个，6有1个，5没有)；也可以对图像进行预处理(使图像居中，突出某些特征等)</p><h2 id="多标签分类"><a href="#多标签分类" class="headerlink" title="多标签分类"></a>多标签分类</h2><p>多标签分类指的是：对于一个观测值可以输出多个类别；比如一个人像识别系统被训练可以识别3张脸A,B,C，当来了一张A和C的照片，这个分类器就会输出[1,0,1],也就是对这一张照片可以有3个类别</p><p>这里，我们可以将每个图片都赋予两个类的属性，图片上的数值是否大于7和数字是否为偶数(这里使用的是K近邻分类算法)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br><br>y_train_large = (y_train &gt;= <span class="hljs-number">7</span>) <br>y_train_odd = (y_train % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) <br>y_multilabel = np.c_[y_train_large, y_train_odd] <br>knn_clf = KNeighborsClassifier() <br>knn_clf.fit(X_train,y_multilabel)<br>&gt;&gt; KNeighborsClassifier()<br>knn_clf.predict([some_digit])<br>&gt;&gt; array([[<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>]])<br></code></pre></td></tr></table></figure><p>评估多标签分类器的方法有很多，取决于不同的项目;比如可以使用每个标签的F1<br>score的均值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">y_train_knn_pred = cross_val_predict(knn_clf, X_train, y_multilabel, cv=<span class="hljs-number">3</span>)<br><br>f1_score(y_multilabel, y_train_knn_pred, average=<span class="hljs-string">&quot;macro&quot;</span>)<span class="hljs-comment">##有不同的平均方法，具体可以看文档</span><br>&gt;&gt; <span class="hljs-number">0.976410265560605</span><br></code></pre></td></tr></table></figure><h2 id="多输出分类"><a href="#多输出分类" class="headerlink" title="多输出分类"></a>多输出分类</h2><p>全称为多输出-多标签分类，意思是：对于每个观测值有多个标签(像上面的多标签分类一样)，并且对于每个标签有多个值(上面只有T/F两个值)</p><p>举个例子：我们现在有一个系统，输入是有噪声的图片，输出是降噪后的图片；那么对于每个图片，输出有多个标签(每个像素都是一个标签)并且每个标签有多个值(像素密度从0-255)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GenomicRanges基因组区间操作</title>
    <link href="/2021/01/28/granges/"/>
    <url>/2021/01/28/granges/</url>
    
    <content type="html"><![CDATA[<p>利用<code>GenomicRanges</code>包进行基因组区间操作</p><span id="more"></span><p><code>GenomicRanges</code>是Bioconductor里面用来展示基因组位置、处理基因组区间的一个基础性的包</p><p>这个包主要通过引进3个类来进行对基因组的操作:</p><ul><li><p>  <em>GRanges:</em> 基因组区间</p></li><li><p>  <em>GPos</em>：基因组位置</p></li><li><p>  <em>GRangesList</em>：一组基因组区间</p></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">library(GenomicRanges)<br>&gt;&gt; Warning: package <span class="hljs-string">&#x27;S4Vectors&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.3<br>&gt;&gt; Warning: package <span class="hljs-string">&#x27;IRanges&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.2<br>&gt;&gt; Warning: package <span class="hljs-string">&#x27;GenomeInfoDb&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.3<br></code></pre></td></tr></table></figure><h2 id="GRanges"><a href="#GRanges" class="headerlink" title="GRanges"></a>GRanges</h2><p><em>GRanges</em>类储存的是一系列基因组区间，每个区间都有一个起始位点和终止位点，可用来存储基因组特征的位置(比如转录本，外显子等)；可以通过<code>GRanges</code>函数来创建：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r">gr &lt;- GRanges(<br>    seqnames = Rle(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;chr1&quot;</span>, <span class="hljs-string">&quot;chr2&quot;</span>, <span class="hljs-string">&quot;chr1&quot;</span>, <span class="hljs-string">&quot;chr3&quot;</span>), <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>)),<br>    ranges = IRanges(start = <span class="hljs-number">101</span>:<span class="hljs-number">110</span>, end = <span class="hljs-number">111</span>:<span class="hljs-number">120</span>, <span class="hljs-built_in">names</span> = head(<span class="hljs-built_in">letters</span>, <span class="hljs-number">10</span>)),<br>    strand = Rle(strand(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>)), <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)),<br>    score = <span class="hljs-number">1</span>:<span class="hljs-number">10</span>,<br>    GC = seq(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">length</span>=<span class="hljs-number">10</span>))<br>gr<br>&gt;&gt; GRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">113</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   d     chr2   <span class="hljs-number">104</span>-<span class="hljs-number">114</span>      * |         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br>&gt;&gt;   e     chr1   <span class="hljs-number">105</span>-<span class="hljs-number">115</span>      * |         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br>&gt;&gt;   f     chr1   <span class="hljs-number">106</span>-<span class="hljs-number">116</span>      + |         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br>&gt;&gt;   g     chr3   <span class="hljs-number">107</span>-<span class="hljs-number">117</span>      + |         <span class="hljs-number">7</span> <span class="hljs-number">0.333333333333333</span><br>&gt;&gt;   h     chr3   <span class="hljs-number">108</span>-<span class="hljs-number">118</span>      + |         <span class="hljs-number">8</span> <span class="hljs-number">0.222222222222222</span><br>&gt;&gt;   i     chr3   <span class="hljs-number">109</span>-<span class="hljs-number">119</span>      - |         <span class="hljs-number">9</span> <span class="hljs-number">0.111111111111111</span><br>&gt;&gt;   j     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p><code>Rle</code>函数是<code>IRanges</code><br>包提供的用来存储序列信息的函数(序列信息中有很多的重复内容)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">test1 &lt;- Rle(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;chr1&quot;</span>, <span class="hljs-string">&quot;chr2&quot;</span>, <span class="hljs-string">&quot;chr1&quot;</span>), <span class="hljs-built_in">c</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">2000</span>))<br>test2 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-built_in">rep</span>(<span class="hljs-string">&quot;chr1&quot;</span>,<span class="hljs-number">1000</span>),<span class="hljs-built_in">rep</span>(<span class="hljs-string">&quot;chr2&quot;</span>,<span class="hljs-number">3000</span>),<span class="hljs-built_in">rep</span>(<span class="hljs-string">&quot;chr1&quot;</span>,<span class="hljs-number">2000</span>))<br><br><span class="hljs-comment">##比较</span><br>identical(as.vector(test1), test2)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br><br>object.size(test1)<br>&gt;&gt; <span class="hljs-number">1320</span> bytes<br>object.size(test2)<br>&gt;&gt; <span class="hljs-number">48160</span> bytes<br></code></pre></td></tr></table></figure><p>创建的这个<em>GRanges</em>对象有10个基因组区间，可以看到<code>|</code>符号将数据分成左右两个部分；左边的是基因组坐标(包括seqnames,ranges, 和strand)，右边是元数据(metadata),也就是一些注释信息</p><p>对于基因组位置，我们可以通过<code>seqnames()</code>,<code>ranges()</code>,<code>strand()</code>函数来提取：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r">seqnames(gr)<br>&gt;&gt; factor-Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">10</span> with <span class="hljs-number">4</span> runs<br>&gt;&gt;   Lengths:    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span>    <span class="hljs-number">4</span><br>&gt;&gt;   Values : chr1 chr2 chr1 chr3<br>&gt;&gt; Levels(<span class="hljs-number">3</span>): chr1 chr2 chr3<br><br>ranges(gr)<br>&gt;&gt; IRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;         start       end     width<br>&gt;&gt;     &lt;integer&gt; &lt;integer&gt; &lt;integer&gt;<br>&gt;&gt;   a       <span class="hljs-number">101</span>       <span class="hljs-number">111</span>        <span class="hljs-number">11</span><br>&gt;&gt;   b       <span class="hljs-number">102</span>       <span class="hljs-number">112</span>        <span class="hljs-number">11</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>       <span class="hljs-number">103</span>       <span class="hljs-number">113</span>        <span class="hljs-number">11</span><br>&gt;&gt;   d       <span class="hljs-number">104</span>       <span class="hljs-number">114</span>        <span class="hljs-number">11</span><br>&gt;&gt;   e       <span class="hljs-number">105</span>       <span class="hljs-number">115</span>        <span class="hljs-number">11</span><br>&gt;&gt;   f       <span class="hljs-number">106</span>       <span class="hljs-number">116</span>        <span class="hljs-number">11</span><br>&gt;&gt;   g       <span class="hljs-number">107</span>       <span class="hljs-number">117</span>        <span class="hljs-number">11</span><br>&gt;&gt;   h       <span class="hljs-number">108</span>       <span class="hljs-number">118</span>        <span class="hljs-number">11</span><br>&gt;&gt;   i       <span class="hljs-number">109</span>       <span class="hljs-number">119</span>        <span class="hljs-number">11</span><br>&gt;&gt;   j       <span class="hljs-number">110</span>       <span class="hljs-number">120</span>        <span class="hljs-number">11</span><br><br>strand(gr)<br>&gt;&gt; factor-Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">10</span> with <span class="hljs-number">5</span> runs<br>&gt;&gt;   Lengths: <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br>&gt;&gt;   Values : - + * + -<br>&gt;&gt; Levels(<span class="hljs-number">3</span>): + - *<br></code></pre></td></tr></table></figure><p>也可以整体地提取左边和右边的内容：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##提取左边的基因组位置信息</span><br>granges(gr)<br>&gt;&gt; GRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      -<br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      +<br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">113</span>      +<br>&gt;&gt;   d     chr2   <span class="hljs-number">104</span>-<span class="hljs-number">114</span>      *<br>&gt;&gt;   e     chr1   <span class="hljs-number">105</span>-<span class="hljs-number">115</span>      *<br>&gt;&gt;   f     chr1   <span class="hljs-number">106</span>-<span class="hljs-number">116</span>      +<br>&gt;&gt;   g     chr3   <span class="hljs-number">107</span>-<span class="hljs-number">117</span>      +<br>&gt;&gt;   h     chr3   <span class="hljs-number">108</span>-<span class="hljs-number">118</span>      +<br>&gt;&gt;   i     chr3   <span class="hljs-number">109</span>-<span class="hljs-number">119</span>      -<br>&gt;&gt;   j     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      -<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">##提取右边的元数据信息</span><br>mcols(gr)<br>&gt;&gt; DataFrame with <span class="hljs-number">10</span> rows and <span class="hljs-number">2</span> columns<br>&gt;&gt;       score                GC<br>&gt;&gt;   &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt; a         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt; b         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt; <span class="hljs-built_in">c</span>         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt; d         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br>&gt;&gt; e         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br>&gt;&gt; f         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br>&gt;&gt; g         <span class="hljs-number">7</span> <span class="hljs-number">0.333333333333333</span><br>&gt;&gt; h         <span class="hljs-number">8</span> <span class="hljs-number">0.222222222222222</span><br>&gt;&gt; i         <span class="hljs-number">9</span> <span class="hljs-number">0.111111111111111</span><br>&gt;&gt; j        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>mcols(gr)$score<br>&gt;&gt;  [<span class="hljs-number">1</span>]  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="拆分-和并GRanges对象"><a href="#拆分-和并GRanges对象" class="headerlink" title="拆分,和并GRanges对象"></a>拆分,和并GRanges对象</h3><p>GRanges对象可以通过<code>split</code>函数进行拆分，拆分后产生的是GRangesList对象：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r">sp &lt;- split(gr,<span class="hljs-built_in">rep</span>(<span class="hljs-number">1</span>:<span class="hljs-number">2</span>,each=<span class="hljs-number">5</span>))<br>sp<br>&gt;&gt; GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span>:<br>&gt;&gt; $`<span class="hljs-number">1</span>`<br>&gt;&gt; GRanges object with 5 ranges and 2 metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   101-111      - |         1                 1<br>&gt;&gt;   b     chr2   102-112      + |         2 0.888888888888889<br>&gt;&gt;   c     chr2   103-113      + |         3 0.777777777777778<br>&gt;&gt;   d     chr2   104-114      * |         4 0.666666666666667<br>&gt;&gt;   e     chr1   105-115      * |         5 0.555555555555556<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: 3 sequences from an unspecified genome; no seqlengths<br>&gt;&gt; <br>&gt;&gt; $`2`<br>&gt;&gt; GRanges object with 5 ranges and 2 metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   f     chr1   106-116      + |         6 0.444444444444444<br>&gt;&gt;   g     chr3   107-117      + |         7 0.333333333333333<br>&gt;&gt;   h     chr3   108-118      + |         8 0.222222222222222<br>&gt;&gt;   i     chr3   109-119      - |         9 0.111111111111111<br>&gt;&gt;   j     chr3   110-120      - |        10                 0<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: 3 sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p>合并GRanges对象可以使用<code>c</code>和<code>append</code>函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">c</span>(sp[[<span class="hljs-number">1</span>]],sp[[<span class="hljs-number">2</span>]])<br>&gt;&gt; GRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">113</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   d     chr2   <span class="hljs-number">104</span>-<span class="hljs-number">114</span>      * |         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br>&gt;&gt;   e     chr1   <span class="hljs-number">105</span>-<span class="hljs-number">115</span>      * |         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br>&gt;&gt;   f     chr1   <span class="hljs-number">106</span>-<span class="hljs-number">116</span>      + |         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br>&gt;&gt;   g     chr3   <span class="hljs-number">107</span>-<span class="hljs-number">117</span>      + |         <span class="hljs-number">7</span> <span class="hljs-number">0.333333333333333</span><br>&gt;&gt;   h     chr3   <span class="hljs-number">108</span>-<span class="hljs-number">118</span>      + |         <span class="hljs-number">8</span> <span class="hljs-number">0.222222222222222</span><br>&gt;&gt;   i     chr3   <span class="hljs-number">109</span>-<span class="hljs-number">119</span>      - |         <span class="hljs-number">9</span> <span class="hljs-number">0.111111111111111</span><br>&gt;&gt;   j     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">##or</span><br>append(sp[[<span class="hljs-number">1</span>]],sp[[<span class="hljs-number">2</span>]])<br>&gt;&gt; GRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">113</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   d     chr2   <span class="hljs-number">104</span>-<span class="hljs-number">114</span>      * |         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br>&gt;&gt;   e     chr1   <span class="hljs-number">105</span>-<span class="hljs-number">115</span>      * |         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br>&gt;&gt;   f     chr1   <span class="hljs-number">106</span>-<span class="hljs-number">116</span>      + |         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br>&gt;&gt;   g     chr3   <span class="hljs-number">107</span>-<span class="hljs-number">117</span>      + |         <span class="hljs-number">7</span> <span class="hljs-number">0.333333333333333</span><br>&gt;&gt;   h     chr3   <span class="hljs-number">108</span>-<span class="hljs-number">118</span>      + |         <span class="hljs-number">8</span> <span class="hljs-number">0.222222222222222</span><br>&gt;&gt;   i     chr3   <span class="hljs-number">109</span>-<span class="hljs-number">119</span>      - |         <span class="hljs-number">9</span> <span class="hljs-number">0.111111111111111</span><br>&gt;&gt;   j     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><h3 id="对GRanges对象取子集"><a href="#对GRanges对象取子集" class="headerlink" title="对GRanges对象取子集"></a>对GRanges对象取子集</h3><p>可以通过<code>[</code>操作符来选取子集：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">gr[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>]<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">113</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p>指定第二个参数来选取特定的<strong>metadata信息：</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">gr[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;GC&quot;</span>]<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">1</span> metadata column:<br>&gt;&gt;     seqnames    ranges strand |                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; |         &lt;numeric&gt;<br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + | <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">113</span>      + | <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p>也可以通过这种取子集的方式对GRanges对象进行修改：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">singles &lt;- split(gr, <span class="hljs-built_in">names</span>(gr))<span class="hljs-comment">##拆分</span><br>grMod &lt;- gr<br>grMod[<span class="hljs-number">2</span>] &lt;- singles[[<span class="hljs-number">1</span>]]<span class="hljs-comment">##将第二行替换成第一行</span><br>head(grMod, n=<span class="hljs-number">3</span>)<br>&gt;&gt; GRanges object with <span class="hljs-number">3</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">113</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><h3 id="区间操作"><a href="#区间操作" class="headerlink" title="区间操作"></a>区间操作</h3><p>GRanges对象的基本区间特征可以使用<code>start</code> <code>end</code> <code>width</code> <code>range</code>函数来获得：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs r">g &lt;- gr[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<br>g &lt;- append(g, singles[[<span class="hljs-number">10</span>]])<br>g<br>&gt;&gt; GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">113</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   j     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">###起始</span><br>start(g)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">101</span> <span class="hljs-number">102</span> <span class="hljs-number">103</span> <span class="hljs-number">110</span><br><br><span class="hljs-comment">##终止</span><br>end(g)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">111</span> <span class="hljs-number">112</span> <span class="hljs-number">113</span> <span class="hljs-number">120</span><br><br><span class="hljs-comment">###区间长度</span><br>width(g)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">11</span> <span class="hljs-number">11</span> <span class="hljs-number">11</span> <span class="hljs-number">11</span><br><br><span class="hljs-comment">###range</span><br><span class="hljs-built_in">range</span>(g)<br>&gt;&gt; GRanges object with <span class="hljs-number">3</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      -<br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">113</span>      +<br>&gt;&gt;   [<span class="hljs-number">3</span>]     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      -<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p>GRanges用来操作区间的函数可以分为3类：</p><ul><li><p>  <em>intra-range methods</em></p></li><li><p>  <em>inter-range methods</em></p></li><li><p>  <em>between-range methods</em></p></li></ul><p>intra-range对每个区间进行操作：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###flank取区间的上游或下游</span><br><span class="hljs-comment">##每个区间的上游10bp</span><br>flank(g,<span class="hljs-number">10</span>)<br>&gt;&gt; GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">112</span>-<span class="hljs-number">121</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2    <span class="hljs-number">92</span>-<span class="hljs-number">101</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2    <span class="hljs-number">93</span>-<span class="hljs-number">102</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   j     chr3   <span class="hljs-number">121</span>-<span class="hljs-number">130</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">##每个区间的下游10bp</span><br>flank(g,<span class="hljs-number">10</span>,start = <span class="hljs-literal">FALSE</span>)<br>&gt;&gt; GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1    <span class="hljs-number">91</span>-<span class="hljs-number">100</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">113</span>-<span class="hljs-number">122</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">114</span>-<span class="hljs-number">123</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   j     chr3   <span class="hljs-number">100</span>-<span class="hljs-number">109</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">###shift移动区间</span><br>shift(g,<span class="hljs-number">5</span>)<br>&gt;&gt; GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">106</span>-<span class="hljs-number">116</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">107</span>-<span class="hljs-number">117</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">108</span>-<span class="hljs-number">118</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   j     chr3   <span class="hljs-number">115</span>-<span class="hljs-number">125</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br>shift(g,-<span class="hljs-number">5</span>)<br>&gt;&gt; GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1    <span class="hljs-number">96</span>-<span class="hljs-number">106</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2    <span class="hljs-number">97</span>-<span class="hljs-number">107</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2    <span class="hljs-number">98</span>-<span class="hljs-number">108</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   j     chr3   <span class="hljs-number">105</span>-<span class="hljs-number">115</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">###resize拓展区间</span><br>resize(g,<span class="hljs-number">30</span>)<br>&gt;&gt; GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1    <span class="hljs-number">82</span>-<span class="hljs-number">111</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">131</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">132</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   j     chr3    <span class="hljs-number">91</span>-<span class="hljs-number">120</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br>resize(g,<span class="hljs-number">30</span>,fix = <span class="hljs-string">&quot;end&quot;</span>)<br>&gt;&gt; GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">130</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2    <span class="hljs-number">83</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2    <span class="hljs-number">84</span>-<span class="hljs-number">113</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   j     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">139</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210128155320852.png"></p><p>inter-range 涉及在单个GRanges对象中的区间比较：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###reduce 合并重复的区间</span><br>reduce(g)<br>&gt;&gt; GRanges object with <span class="hljs-number">3</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      -<br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">113</span>      +<br>&gt;&gt;   [<span class="hljs-number">3</span>]     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      -<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">###gap 获取区间的间隔</span><br>gaps(g)<br>&gt;&gt; GRanges object with <span class="hljs-number">3</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr1     <span class="hljs-number">1</span>-<span class="hljs-number">100</span>      -<br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr2     <span class="hljs-number">1</span>-<span class="hljs-number">101</span>      +<br>&gt;&gt;   [<span class="hljs-number">3</span>]     chr3     <span class="hljs-number">1</span>-<span class="hljs-number">109</span>      -<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-comment">##由于没有提供染色体的长度，所以从1开始到指定的区间end结束</span><br><span class="hljs-comment">##提供染色体长度</span><br>seqlengths(g) &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">249250621</span>, <span class="hljs-number">243199373</span>, <span class="hljs-number">198022430</span>)<br>seqlengths(g)<br>&gt;&gt;      chr1      chr2      chr3 <br>&gt;&gt; <span class="hljs-number">249250621</span> <span class="hljs-number">243199373</span> <span class="hljs-number">198022430</span><br><br>gaps(g)<br>&gt;&gt; GRanges object with <span class="hljs-number">12</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;        seqnames        ranges strand<br>&gt;&gt;           &lt;Rle&gt;     &lt;IRanges&gt;  &lt;Rle&gt;<br>&gt;&gt;    [<span class="hljs-number">1</span>]     chr1   <span class="hljs-number">1</span>-<span class="hljs-number">249250621</span>      +<br>&gt;&gt;    [<span class="hljs-number">2</span>]     chr1         <span class="hljs-number">1</span>-<span class="hljs-number">100</span>      -<br>&gt;&gt;    [<span class="hljs-number">3</span>]     chr1 <span class="hljs-number">112</span>-<span class="hljs-number">249250621</span>      -<br>&gt;&gt;    [<span class="hljs-number">4</span>]     chr1   <span class="hljs-number">1</span>-<span class="hljs-number">249250621</span>      *<br>&gt;&gt;    [<span class="hljs-number">5</span>]     chr2         <span class="hljs-number">1</span>-<span class="hljs-number">101</span>      +<br>&gt;&gt;    ...      ...           ...    ...<br>&gt;&gt;    [<span class="hljs-number">8</span>]     chr2   <span class="hljs-number">1</span>-<span class="hljs-number">243199373</span>      *<br>&gt;&gt;    [<span class="hljs-number">9</span>]     chr3   <span class="hljs-number">1</span>-<span class="hljs-number">198022430</span>      +<br>&gt;&gt;   [<span class="hljs-number">10</span>]     chr3         <span class="hljs-number">1</span>-<span class="hljs-number">109</span>      -<br>&gt;&gt;   [<span class="hljs-number">11</span>]     chr3 <span class="hljs-number">121</span>-<span class="hljs-number">198022430</span>      -<br>&gt;&gt;   [<span class="hljs-number">12</span>]     chr3   <span class="hljs-number">1</span>-<span class="hljs-number">198022430</span>      *<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome<br><br><span class="hljs-comment">###disjoin 重组GRanges对象得到互不重叠的区间</span><br>disjoin(g)<br>&gt;&gt; GRanges object with <span class="hljs-number">5</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      -<br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr2       <span class="hljs-number">102</span>      +<br>&gt;&gt;   [<span class="hljs-number">3</span>]     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">112</span>      +<br>&gt;&gt;   [<span class="hljs-number">4</span>]     chr2       <span class="hljs-number">113</span>      +<br>&gt;&gt;   [<span class="hljs-number">5</span>]     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      -<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome<br><br><span class="hljs-comment">###coverage 计算重叠的程度</span><br>coverage(g)<br>&gt;&gt; RleList of <span class="hljs-built_in">length</span> <span class="hljs-number">3</span><br>&gt;&gt; $chr1<br>&gt;&gt; integer-Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">249250621</span> with <span class="hljs-number">3</span> runs<br>&gt;&gt;   Lengths:       <span class="hljs-number">100</span>        <span class="hljs-number">11</span> <span class="hljs-number">249250510</span><br>&gt;&gt;   Values :         <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">0</span><br>&gt;&gt; <br>&gt;&gt; $chr2<br>&gt;&gt; integer-Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">243199373</span> with <span class="hljs-number">5</span> runs<br>&gt;&gt;   Lengths:       <span class="hljs-number">101</span>         <span class="hljs-number">1</span>        <span class="hljs-number">10</span>         <span class="hljs-number">1</span> <span class="hljs-number">243199260</span><br>&gt;&gt;   Values :         <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>         <span class="hljs-number">1</span>         <span class="hljs-number">0</span><br>&gt;&gt; <br>&gt;&gt; $chr3<br>&gt;&gt; integer-Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">198022430</span> with <span class="hljs-number">3</span> runs<br>&gt;&gt;   Lengths:       <span class="hljs-number">109</span>        <span class="hljs-number">11</span> <span class="hljs-number">198022310</span><br>&gt;&gt;   Values :         <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>Between-range 计算不同的GRanges对象之间的关系：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###union 将GRanges视为位置的集合,取并集</span><br>g2 &lt;- head(gr,n=<span class="hljs-number">2</span>)<br>g<br>&gt;&gt; GRanges object with <span class="hljs-number">4</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">113</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   j     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome<br>g2<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br>union(g,g2)<br>&gt;&gt; GRanges object with <span class="hljs-number">3</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      -<br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">113</span>      +<br>&gt;&gt;   [<span class="hljs-number">3</span>]     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      -<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome<br><br><span class="hljs-comment">###intersect 取交集</span><br>intersect(g,g2)<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      -<br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      +<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome<br><br><span class="hljs-comment">###setdiff 取差集</span><br>setdiff(g,g2)<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr2       <span class="hljs-number">113</span>      +<br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      -<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome<br></code></pre></td></tr></table></figure><p>当两个GRanges是相关联的时候，也就是要对两个对象进行成对操作(如对象1的第一行和对象2的第一行取交集等)，可以使用以<code>p</code>开头(parallel)的一系列操作：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs r">g3 &lt;- g[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]<br>ranges(g3[<span class="hljs-number">1</span>]) &lt;- IRanges(start=<span class="hljs-number">105</span>, end=<span class="hljs-number">112</span>)<br>g3<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">105</span>-<span class="hljs-number">112</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome<br>punion(g2, g3)<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">112</span>      -<br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      +<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome<br><br>pintersect(g2, g3)<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">3</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC       hit<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt; &lt;logical&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">105</span>-<span class="hljs-number">111</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span>      <span class="hljs-literal">TRUE</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span>      <span class="hljs-literal">TRUE</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome<br><br>psetdiff(g2, g3)<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">104</span>      -<br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">101</span>      +<br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome<br></code></pre></td></tr></table></figure><h2 id="GRangesList"><a href="#GRangesList" class="headerlink" title="GRangesList"></a>GRangesList</h2><p>当一个基因组特征由多个区间构成，那么用一个组合对象GRangesList来表示更有意义：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###两个转录本</span><br>gr1 &lt;- GRanges(<br>    seqnames = <span class="hljs-string">&quot;chr2&quot;</span>,<br>    ranges = IRanges(<span class="hljs-number">103</span>, <span class="hljs-number">106</span>),<br>    strand = <span class="hljs-string">&quot;+&quot;</span>,<br>    score = <span class="hljs-number">5L</span>, GC = <span class="hljs-number">0.45</span>)<br><br><span class="hljs-comment">##第二个转录本有两个外显子</span><br>gr2 &lt;- GRanges(<br>    seqnames = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;chr1&quot;</span>, <span class="hljs-string">&quot;chr1&quot;</span>),<br>    ranges = IRanges(<span class="hljs-built_in">c</span>(<span class="hljs-number">107</span>, <span class="hljs-number">113</span>), width = <span class="hljs-number">3</span>),<br>    strand = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>),<br>    score = <span class="hljs-number">3</span>:<span class="hljs-number">4</span>, GC = <span class="hljs-built_in">c</span>(<span class="hljs-number">0.3</span>, <span class="hljs-number">0.5</span>))<br>grl &lt;- GRangesList(<span class="hljs-string">&quot;txA&quot;</span> = gr1, <span class="hljs-string">&quot;txB&quot;</span> = gr2)<br>grl<br>&gt;&gt; GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span>:<br>&gt;&gt; $txA<br>&gt;&gt; GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">106</span>      + |         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br>&gt;&gt; <br>&gt;&gt; $txB<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr1   <span class="hljs-number">107</span>-<span class="hljs-number">109</span>      + |         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr1   <span class="hljs-number">113</span>-<span class="hljs-number">115</span>      - |         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure><p>在GRanges上的方法在GRangesList上返回的就是list：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r">seqnames(grl)<br>&gt;&gt; RleList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br>&gt;&gt; $txA<br>&gt;&gt; factor-Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">1</span> with <span class="hljs-number">1</span> run<br>&gt;&gt;   Lengths:    <span class="hljs-number">1</span><br>&gt;&gt;   Values : chr2<br>&gt;&gt; Levels(<span class="hljs-number">2</span>): chr2 chr1<br>&gt;&gt; <br>&gt;&gt; $txB<br>&gt;&gt; factor-Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span> with <span class="hljs-number">1</span> run<br>&gt;&gt;   Lengths:    <span class="hljs-number">2</span><br>&gt;&gt;   Values : chr1<br>&gt;&gt; Levels(<span class="hljs-number">2</span>): chr2 chr1<br>strand(grl)<br>&gt;&gt; RleList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br>&gt;&gt; $txA<br>&gt;&gt; factor-Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">1</span> with <span class="hljs-number">1</span> run<br>&gt;&gt;   Lengths: <span class="hljs-number">1</span><br>&gt;&gt;   Values : +<br>&gt;&gt; Levels(<span class="hljs-number">3</span>): + - *<br>&gt;&gt; <br>&gt;&gt; $txB<br>&gt;&gt; factor-Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span> with <span class="hljs-number">2</span> runs<br>&gt;&gt;   Lengths: <span class="hljs-number">1</span> <span class="hljs-number">1</span><br>&gt;&gt;   Values : + -<br>&gt;&gt; Levels(<span class="hljs-number">3</span>): + - *<br></code></pre></td></tr></table></figure><p>需要注意的是不同于GRanges的<code>mcols</code>方法，在GRangesList上返回的是列表层面的信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">mcols(grl)<br>&gt;&gt; DataFrame with <span class="hljs-number">2</span> rows and <span class="hljs-number">0</span> columns<br><br><span class="hljs-comment">###需要unlist来combine GRangesList中的GRanges</span><br>mcols(unlist(grl))<br>&gt;&gt; DataFrame with <span class="hljs-number">3</span> rows and <span class="hljs-number">2</span> columns<br>&gt;&gt;         score        GC<br>&gt;&gt;     &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt; txA         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br>&gt;&gt; txB         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br>&gt;&gt; txB         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><p>在GRangesList上的区间操作和单独的GRanges类似：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs r">start(grl)<br>&gt;&gt; IntegerList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br>&gt;&gt; [[<span class="hljs-string">&quot;txA&quot;</span>]] <span class="hljs-number">103</span><br>&gt;&gt; [[<span class="hljs-string">&quot;txB&quot;</span>]] <span class="hljs-number">107</span> <span class="hljs-number">113</span><br><br>end(grl)<br>&gt;&gt; IntegerList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br>&gt;&gt; [[<span class="hljs-string">&quot;txA&quot;</span>]] <span class="hljs-number">106</span><br>&gt;&gt; [[<span class="hljs-string">&quot;txB&quot;</span>]] <span class="hljs-number">109</span> <span class="hljs-number">115</span><br><br>width(grl)<br>&gt;&gt; IntegerList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br>&gt;&gt; [[<span class="hljs-string">&quot;txA&quot;</span>]] <span class="hljs-number">4</span><br>&gt;&gt; [[<span class="hljs-string">&quot;txB&quot;</span>]] <span class="hljs-number">3</span> <span class="hljs-number">3</span><br><br><span class="hljs-comment">##这些操作返回的是整数列表</span><br><span class="hljs-built_in">class</span>(width(grl))<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;CompressedIntegerList&quot;</span><br>&gt;&gt; <span class="hljs-built_in">attr</span>(,<span class="hljs-string">&quot;package&quot;</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;IRanges&quot;</span><br><span class="hljs-built_in">sum</span>(width(grl))<br>&gt;&gt; txA txB <br>&gt;&gt;   <span class="hljs-number">4</span>   <span class="hljs-number">6</span><br><br><span class="hljs-comment">###intra-, inter- and between-range对每个GRanges对象操作</span><br>shift(grl, <span class="hljs-number">20</span>)<br>&gt;&gt; GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span>:<br>&gt;&gt; $txA<br>&gt;&gt; GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr2   <span class="hljs-number">123</span>-<span class="hljs-number">126</span>      + |         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br>&gt;&gt; <br>&gt;&gt; $txB<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr1   <span class="hljs-number">127</span>-<span class="hljs-number">129</span>      + |         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr1   <span class="hljs-number">133</span>-<span class="hljs-number">135</span>      - |         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><br>coverage(grl)<br>&gt;&gt; RleList of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span><br>&gt;&gt; $chr2<br>&gt;&gt; integer-Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">106</span> with <span class="hljs-number">2</span> runs<br>&gt;&gt;   Lengths: <span class="hljs-number">102</span>   <span class="hljs-number">4</span><br>&gt;&gt;   Values :   <span class="hljs-number">0</span>   <span class="hljs-number">1</span><br>&gt;&gt; <br>&gt;&gt; $chr1<br>&gt;&gt; integer-Rle of <span class="hljs-built_in">length</span> <span class="hljs-number">115</span> with <span class="hljs-number">4</span> runs<br>&gt;&gt;   Lengths: <span class="hljs-number">106</span>   <span class="hljs-number">3</span>   <span class="hljs-number">3</span>   <span class="hljs-number">3</span><br>&gt;&gt;   Values :   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>GRangesList的行为和list类似，也可以通过<code>[</code>,<code>[[</code>或者<code>$</code>来取子集：<code>[</code>返回的是GRangesList对象，<code>[[</code>和<code>$</code>返回的是GRanges对象</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs r">grl[<span class="hljs-number">1</span>]<br>&gt;&gt; GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">1</span>:<br>&gt;&gt; $txA<br>&gt;&gt; GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">106</span>      + |         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br>grl[[<span class="hljs-number">1</span>]]<br>&gt;&gt; GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">106</span>      + |         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br>grl[<span class="hljs-string">&quot;txA&quot;</span>]<br>&gt;&gt; GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">1</span>:<br>&gt;&gt; $txA<br>&gt;&gt; GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">106</span>      + |         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br>grl$txB<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr1   <span class="hljs-number">107</span>-<span class="hljs-number">109</span>      + |         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr1   <span class="hljs-number">113</span>-<span class="hljs-number">115</span>      - |         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><br><span class="hljs-built_in">class</span>(grl[<span class="hljs-number">1</span>])<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;CompressedGRangesList&quot;</span><br>&gt;&gt; <span class="hljs-built_in">attr</span>(,<span class="hljs-string">&quot;package&quot;</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;GenomicRanges&quot;</span><br><span class="hljs-built_in">class</span>(grl[[<span class="hljs-number">1</span>]])<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;GRanges&quot;</span><br>&gt;&gt; <span class="hljs-built_in">attr</span>(,<span class="hljs-string">&quot;package&quot;</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;GenomicRanges&quot;</span><br></code></pre></td></tr></table></figure><h2 id="区间重叠"><a href="#区间重叠" class="headerlink" title="区间重叠"></a>区间重叠</h2><p>区间重叠的操作也属于上面提到的<em>between-range methods</em>(比较两个对象的区间),主要有3个函数：<code>findOverlaps</code>,<code>countOverlaps</code>和<code>subsetByOverlaps</code></p><p><code>findOverlaps</code>输入是query(查找对象)和subject(目标对象)，返回的是一个Hit对象</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs r">gr<br>&gt;&gt; GRanges object with <span class="hljs-number">10</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   a     chr1   <span class="hljs-number">101</span>-<span class="hljs-number">111</span>      - |         <span class="hljs-number">1</span>                 <span class="hljs-number">1</span><br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">113</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   d     chr2   <span class="hljs-number">104</span>-<span class="hljs-number">114</span>      * |         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br>&gt;&gt;   e     chr1   <span class="hljs-number">105</span>-<span class="hljs-number">115</span>      * |         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br>&gt;&gt;   f     chr1   <span class="hljs-number">106</span>-<span class="hljs-number">116</span>      + |         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br>&gt;&gt;   g     chr3   <span class="hljs-number">107</span>-<span class="hljs-number">117</span>      + |         <span class="hljs-number">7</span> <span class="hljs-number">0.333333333333333</span><br>&gt;&gt;   h     chr3   <span class="hljs-number">108</span>-<span class="hljs-number">118</span>      + |         <span class="hljs-number">8</span> <span class="hljs-number">0.222222222222222</span><br>&gt;&gt;   i     chr3   <span class="hljs-number">109</span>-<span class="hljs-number">119</span>      - |         <span class="hljs-number">9</span> <span class="hljs-number">0.111111111111111</span><br>&gt;&gt;   j     chr3   <span class="hljs-number">110</span>-<span class="hljs-number">120</span>      - |        <span class="hljs-number">10</span>                 <span class="hljs-number">0</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br><br>grl<br>&gt;&gt; GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span>:<br>&gt;&gt; $txA<br>&gt;&gt; GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">106</span>      + |         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br>&gt;&gt; <br>&gt;&gt; $txB<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr1   <span class="hljs-number">107</span>-<span class="hljs-number">109</span>      + |         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr1   <span class="hljs-number">113</span>-<span class="hljs-number">115</span>      - |         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><br>findOverlaps(gr, grl)<br>&gt;&gt; Hits object with <span class="hljs-number">5</span> hits and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;       queryHits subjectHits<br>&gt;&gt;       &lt;integer&gt;   &lt;integer&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]         <span class="hljs-number">2</span>           <span class="hljs-number">1</span><br>&gt;&gt;   [<span class="hljs-number">2</span>]         <span class="hljs-number">3</span>           <span class="hljs-number">1</span><br>&gt;&gt;   [<span class="hljs-number">3</span>]         <span class="hljs-number">4</span>           <span class="hljs-number">1</span><br>&gt;&gt;   [<span class="hljs-number">4</span>]         <span class="hljs-number">5</span>           <span class="hljs-number">2</span><br>&gt;&gt;   [<span class="hljs-number">5</span>]         <span class="hljs-number">6</span>           <span class="hljs-number">2</span><br>&gt;&gt;   -------<br>&gt;&gt;   queryLength: <span class="hljs-number">10</span> / subjectLength: <span class="hljs-number">2</span><br><br><span class="hljs-comment">###queryHits 是query中的index，subjectHits表示在subject哪一个元素与query相应的元素overlap</span><br><br>seqnames(grl[[<span class="hljs-string">&quot;txB&quot;</span>]][<span class="hljs-number">2</span>])[<span class="hljs-number">1</span>] &lt;- <span class="hljs-string">&quot;chr2&quot;</span><br>grl<br>&gt;&gt; GRangesList object of <span class="hljs-built_in">length</span> <span class="hljs-number">2</span>:<br>&gt;&gt; $txA<br>&gt;&gt; GRanges object with <span class="hljs-number">1</span> <span class="hljs-built_in">range</span> and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">106</span>      + |         <span class="hljs-number">5</span>      <span class="hljs-number">0.45</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br>&gt;&gt; <br>&gt;&gt; $txB<br>&gt;&gt; GRanges object with <span class="hljs-number">2</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;       seqnames    ranges strand |     score        GC<br>&gt;&gt;          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]     chr1   <span class="hljs-number">107</span>-<span class="hljs-number">109</span>      + |         <span class="hljs-number">3</span>       <span class="hljs-number">0.3</span><br>&gt;&gt;   [<span class="hljs-number">2</span>]     chr2   <span class="hljs-number">113</span>-<span class="hljs-number">115</span>      - |         <span class="hljs-number">4</span>       <span class="hljs-number">0.5</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">2</span> sequences from an unspecified genome; no seqlengths<br><br>findOverlaps(gr, grl)<br>&gt;&gt; Hits object with <span class="hljs-number">6</span> hits and <span class="hljs-number">0</span> metadata columns:<br>&gt;&gt;       queryHits subjectHits<br>&gt;&gt;       &lt;integer&gt;   &lt;integer&gt;<br>&gt;&gt;   [<span class="hljs-number">1</span>]         <span class="hljs-number">2</span>           <span class="hljs-number">1</span><br>&gt;&gt;   [<span class="hljs-number">2</span>]         <span class="hljs-number">3</span>           <span class="hljs-number">1</span><br>&gt;&gt;   [<span class="hljs-number">3</span>]         <span class="hljs-number">4</span>           <span class="hljs-number">1</span><br>&gt;&gt;   [<span class="hljs-number">4</span>]         <span class="hljs-number">4</span>           <span class="hljs-number">2</span><br>&gt;&gt;   [<span class="hljs-number">5</span>]         <span class="hljs-number">5</span>           <span class="hljs-number">2</span><br>&gt;&gt;   [<span class="hljs-number">6</span>]         <span class="hljs-number">6</span>           <span class="hljs-number">2</span><br>&gt;&gt;   -------<br>&gt;&gt;   queryLength: <span class="hljs-number">10</span> / subjectLength: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><code>countOverlaps</code> 计算在query中匹配到subject的元素个数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">countOverlaps(gr, grl)<br>&gt;&gt; a b <span class="hljs-built_in">c</span> d e f g h i j <br>&gt;&gt; <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><code>subsetByOverlaps</code> 在query中提取至少与subject重复一次的元素：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">subsetByOverlaps(gr,grl)<br>&gt;&gt; GRanges object with <span class="hljs-number">5</span> ranges and <span class="hljs-number">2</span> metadata columns:<br>&gt;&gt;     seqnames    ranges strand |     score                GC<br>&gt;&gt;        &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt;         &lt;numeric&gt;<br>&gt;&gt;   b     chr2   <span class="hljs-number">102</span>-<span class="hljs-number">112</span>      + |         <span class="hljs-number">2</span> <span class="hljs-number">0.888888888888889</span><br>&gt;&gt;   <span class="hljs-built_in">c</span>     chr2   <span class="hljs-number">103</span>-<span class="hljs-number">113</span>      + |         <span class="hljs-number">3</span> <span class="hljs-number">0.777777777777778</span><br>&gt;&gt;   d     chr2   <span class="hljs-number">104</span>-<span class="hljs-number">114</span>      * |         <span class="hljs-number">4</span> <span class="hljs-number">0.666666666666667</span><br>&gt;&gt;   e     chr1   <span class="hljs-number">105</span>-<span class="hljs-number">115</span>      * |         <span class="hljs-number">5</span> <span class="hljs-number">0.555555555555556</span><br>&gt;&gt;   f     chr1   <span class="hljs-number">106</span>-<span class="hljs-number">116</span>      + |         <span class="hljs-number">6</span> <span class="hljs-number">0.444444444444444</span><br>&gt;&gt;   -------<br>&gt;&gt;   seqinfo: <span class="hljs-number">3</span> sequences from an unspecified genome; no seqlengths<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dplyr列式操作</title>
    <link href="/2021/01/23/dplyr_col_wise/"/>
    <url>/2021/01/23/dplyr_col_wise/</url>
    
    <content type="html"><![CDATA[<p>dplyr 按列操作，主要是 across 函数的用法</p><span id="more"></span><p>我们在数据分析过程中经常要做的一件事就是对数据框的多列进行同样的操作，但是如果采用粘贴复制的方法比较繁琐也容易出错，比如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">df %&gt;% <br>  group_by(g1, g2) %&gt;% <br>  summarise(a = mean(a), b = mean(b), <span class="hljs-built_in">c</span> = mean(<span class="hljs-built_in">c</span>), d = mean(d))<br></code></pre></td></tr></table></figure><p>使用across函数就可以较简洁的重写上面的代码：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">df %&gt;% <br>  group_by(g1, g2) %&gt;% <br>  summarise(across(a:d, mean))<br></code></pre></td></tr></table></figure><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p><code>across</code>有两个基本的参数：</p><ul><li><p>第一个参数是<code>.cols</code> 选择想要操作的列，使用的方法是<em>tidy selection</em><br>  (也就是和select一样，可以根据位置/名称/类型来选择)</p></li><li><p>第二个参数是<code>.fns</code><br>  是对每列进行操作的函数，可以是purrr风格的公式(比如~.x<br>  /2，具体见<a href="sss">迭代—purrr</a>)</p></li></ul><p>across最常见的是与summarise一起使用(别的动词也可以)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars %&gt;% <br>  summarise(across(where(<span class="hljs-built_in">is.character</span>), ~ <span class="hljs-built_in">length</span>(unique(.x))))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 1 x 8</span><br>&gt;&gt;    name hair_color skin_color eye_color   sex gender homeworld species<br>&gt;&gt;   &lt;int&gt;      &lt;int&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;  &lt;int&gt;     &lt;int&gt;   &lt;int&gt;<br>&gt;&gt; <span class="hljs-number">1</span>    <span class="hljs-number">87</span>         <span class="hljs-number">13</span>         <span class="hljs-number">31</span>        <span class="hljs-number">15</span>     <span class="hljs-number">5</span>      <span class="hljs-number">3</span>        <span class="hljs-number">49</span>      <span class="hljs-number">38</span><br><br>starwars %&gt;% <br>  group_by(species) %&gt;% <br>  filter(n() &gt; <span class="hljs-number">1</span>) %&gt;% <br>  summarise(across(<span class="hljs-built_in">c</span>(sex, gender, homeworld), ~ <span class="hljs-built_in">length</span>(unique(.x))))<br>&gt;&gt; `summarise()` ungrouping output (override with `.groups` argument)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 9 x 4</span><br>&gt;&gt;   species    sex gender homeworld<br>&gt;&gt;   &lt;chr&gt;    &lt;int&gt;  &lt;int&gt;     &lt;int&gt;<br>&gt;&gt; <span class="hljs-number">1</span> Droid        <span class="hljs-number">1</span>      <span class="hljs-number">2</span>         <span class="hljs-number">3</span><br>&gt;&gt; <span class="hljs-number">2</span> Gungan       <span class="hljs-number">1</span>      <span class="hljs-number">1</span>         <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">3</span> Human        <span class="hljs-number">2</span>      <span class="hljs-number">2</span>        <span class="hljs-number">16</span><br>&gt;&gt; <span class="hljs-number">4</span> Kaminoan     <span class="hljs-number">2</span>      <span class="hljs-number">2</span>         <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">5</span> Mirialan     <span class="hljs-number">1</span>      <span class="hljs-number">1</span>         <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">6</span> Twi<span class="hljs-string">&#x27;lek      2      2         1</span><br><span class="hljs-string">&gt;&gt; 7 Wookiee      1      1         1</span><br><span class="hljs-string">&gt;&gt; 8 Zabrak       1      1         2</span><br><span class="hljs-string">&gt;&gt; 9 &lt;NA&gt;         1      1         3</span><br><span class="hljs-string"></span><br><span class="hljs-string">starwars %&gt;% </span><br><span class="hljs-string">  group_by(homeworld) %&gt;% </span><br><span class="hljs-string">  filter(n() &gt; 1) %&gt;% </span><br><span class="hljs-string">  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))</span><br><span class="hljs-string">&gt;&gt; `summarise()` ungrouping output (override with `.groups` argument)</span><br><span class="hljs-string">&gt;&gt; # A tibble: 10 x 4</span><br><span class="hljs-string">&gt;&gt;    homeworld height  mass birth_year</span><br><span class="hljs-string">&gt;&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;</span><br><span class="hljs-string">&gt;&gt;  1 Alderaan    176.  64         43  </span><br><span class="hljs-string">&gt;&gt;  2 Corellia    175   78.5       25  </span><br><span class="hljs-string">&gt;&gt;  3 Coruscant   174.  50         91  </span><br><span class="hljs-string">&gt;&gt;  4 Kamino      208.  83.1       31.5</span><br><span class="hljs-string">&gt;&gt;  5 Kashyyyk    231  124        200  </span><br><span class="hljs-string">&gt;&gt;  6 Mirial      168   53.1       49  </span><br><span class="hljs-string">&gt;&gt;  7 Naboo       175.  64.2       55  </span><br><span class="hljs-string">&gt;&gt;  8 Ryloth      179   55         48  </span><br><span class="hljs-string">&gt;&gt;  9 Tatooine    170.  85.4       54.6</span><br><span class="hljs-string">&gt;&gt; 10 &lt;NA&gt;        139.  82        334.</span><br></code></pre></td></tr></table></figure><p>需要注意的是：across在进行操作的时候不会选择分组变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">df &lt;- data.frame(g = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), x = <span class="hljs-built_in">c</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>), y = <span class="hljs-built_in">c</span>(-<span class="hljs-number">1</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">9</span>))<br>df %&gt;% <br>  group_by(g) %&gt;% <br>  summarise(across(where(<span class="hljs-built_in">is.numeric</span>), <span class="hljs-built_in">sum</span>))<br>&gt;&gt; `summarise()` ungrouping output (override with `.groups` argument)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 2 x 3</span><br>&gt;&gt;       g     x     y<br>&gt;&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    -<span class="hljs-number">5</span><br>&gt;&gt; <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>    -<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h3 id="多个函数"><a href="#多个函数" class="headerlink" title="多个函数"></a>多个函数</h3><p>也可以使用多个函数对列进行操作，只需要在第二个参数中提供具名函数的列表：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">min_max &lt;- <span class="hljs-built_in">list</span>(<br>  <span class="hljs-built_in">min</span> = ~<span class="hljs-built_in">min</span>(.x, na.rm = <span class="hljs-literal">TRUE</span>), <br>  <span class="hljs-built_in">max</span> = ~<span class="hljs-built_in">max</span>(.x, na.rm = <span class="hljs-literal">TRUE</span>)<br>)<br>starwars %&gt;% summarise(across(where(<span class="hljs-built_in">is.numeric</span>), min_max))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 1 x 6</span><br>&gt;&gt;   height_min height_max mass_min mass_max birth_year_min birth_year_max<br>&gt;&gt;        &lt;int&gt;      &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;<br>&gt;&gt; <span class="hljs-number">1</span>         <span class="hljs-number">66</span>        <span class="hljs-number">264</span>       <span class="hljs-number">15</span>     <span class="hljs-number">1358</span>              <span class="hljs-number">8</span>            <span class="hljs-number">896</span><br><br>starwars %&gt;% summarise(across(<span class="hljs-built_in">c</span>(height, mass, birth_year), min_max))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 1 x 6</span><br>&gt;&gt;   height_min height_max mass_min mass_max birth_year_min birth_year_max<br>&gt;&gt;        &lt;int&gt;      &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;<br>&gt;&gt; <span class="hljs-number">1</span>         <span class="hljs-number">66</span>        <span class="hljs-number">264</span>       <span class="hljs-number">15</span>     <span class="hljs-number">1358</span>              <span class="hljs-number">8</span>            <span class="hljs-number">896</span><br></code></pre></td></tr></table></figure><p>我们可以看到默认的输出结果的列名是原来的列名加上函数的名称中间用下划线分割，也可以通过<code>.name</code>参数来指定输出的名称(以<code>glue</code>包中的格式)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars %&gt;% summarise(across(where(<span class="hljs-built_in">is.numeric</span>), min_max, .names = <span class="hljs-string">&quot;&#123;.fn&#125;.&#123;.col&#125;&quot;</span>))<span class="hljs-comment">##调换位置，并以点号分割</span><br>&gt;&gt; <span class="hljs-comment"># A tibble: 1 x 6</span><br>&gt;&gt;   min.height max.height min.mass max.mass min.birth_year max.birth_year<br>&gt;&gt;        &lt;int&gt;      &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;<br>&gt;&gt; <span class="hljs-number">1</span>         <span class="hljs-number">66</span>        <span class="hljs-number">264</span>       <span class="hljs-number">15</span>     <span class="hljs-number">1358</span>              <span class="hljs-number">8</span>            <span class="hljs-number">896</span><br><br>starwars %&gt;% summarise(across(<span class="hljs-built_in">c</span>(height, mass, birth_year), min_max, .names = <span class="hljs-string">&quot;&#123;.fn&#125;.&#123;.col&#125;&quot;</span>))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 1 x 6</span><br>&gt;&gt;   min.height max.height min.mass max.mass min.birth_year max.birth_year<br>&gt;&gt;        &lt;int&gt;      &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;<br>&gt;&gt; <span class="hljs-number">1</span>         <span class="hljs-number">66</span>        <span class="hljs-number">264</span>       <span class="hljs-number">15</span>     <span class="hljs-number">1358</span>              <span class="hljs-number">8</span>            <span class="hljs-number">896</span><br></code></pre></td></tr></table></figure><p>如果想要同一个函数操作得到的结果放在一起，我们可以把上面两个函数拆开执行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars %&gt;% summarise(<br>  across(<span class="hljs-built_in">c</span>(height, mass, birth_year), ~<span class="hljs-built_in">min</span>(.x, na.rm = <span class="hljs-literal">TRUE</span>), .names = <span class="hljs-string">&quot;min_&#123;.col&#125;&quot;</span>),<br>  across(<span class="hljs-built_in">c</span>(height, mass, birth_year), ~<span class="hljs-built_in">max</span>(.x, na.rm = <span class="hljs-literal">TRUE</span>), .names = <span class="hljs-string">&quot;max_&#123;.col&#125;&quot;</span>)<br>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 1 x 6</span><br>&gt;&gt;   min_height min_mass min_birth_year max_height max_mass max_birth_year<br>&gt;&gt;        &lt;int&gt;    &lt;dbl&gt;          &lt;dbl&gt;      &lt;int&gt;    &lt;dbl&gt;          &lt;dbl&gt;<br>&gt;&gt; <span class="hljs-number">1</span>         <span class="hljs-number">66</span>       <span class="hljs-number">15</span>              <span class="hljs-number">8</span>        <span class="hljs-number">264</span>     <span class="hljs-number">1358</span>            <span class="hljs-number">896</span><br></code></pre></td></tr></table></figure><p>注意：在上面的代码中不能直接使用<code>where(is.numeric)</code><br>因为第二个across会对新生成的数值变量(“min_height”, “min_mass” and<br>“min_birth_year”)进行操作:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars %&gt;% summarise(<br>  across(where(<span class="hljs-built_in">is.numeric</span>), ~<span class="hljs-built_in">min</span>(.x, na.rm = <span class="hljs-literal">TRUE</span>), .names = <span class="hljs-string">&quot;min_&#123;.col&#125;&quot;</span>),<br>    across(where(<span class="hljs-built_in">is.numeric</span>), ~<span class="hljs-built_in">max</span>(.x, na.rm = <span class="hljs-literal">TRUE</span>), .names = <span class="hljs-string">&quot;max_&#123;.col&#125;&quot;</span>)  <br>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 1 x 9</span><br>&gt;&gt;   min_height min_mass min_birth_year max_height max_mass max_birth_year max_min_height max_min_mass<br>&gt;&gt;        &lt;int&gt;    &lt;dbl&gt;          &lt;dbl&gt;      &lt;int&gt;    &lt;dbl&gt;          &lt;dbl&gt;          &lt;int&gt;        &lt;dbl&gt;<br>&gt;&gt; <span class="hljs-number">1</span>         <span class="hljs-number">66</span>       <span class="hljs-number">15</span>              <span class="hljs-number">8</span>        <span class="hljs-number">264</span>     <span class="hljs-number">1358</span>            <span class="hljs-number">896</span>             <span class="hljs-number">66</span>           <span class="hljs-number">15</span><br>&gt;&gt; <span class="hljs-comment"># ... with 1 more variable: max_min_birth_year &lt;dbl&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到生成了额外的三列：max_min_height &lt;int&gt;, max_min_mass &lt;dbl&gt;,<br>max_min_birth_year &lt;dbl&gt;</p><p>另外，我们也可以使用<code>relocate</code>函数来调整列的顺序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars %&gt;% <br>  summarise(across(where(<span class="hljs-built_in">is.numeric</span>), min_max, .names = <span class="hljs-string">&quot;&#123;.fn&#125;.&#123;.col&#125;&quot;</span>)) %&gt;% <br>  relocate(starts_with(<span class="hljs-string">&quot;min&quot;</span>))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 1 x 6</span><br>&gt;&gt;   min.height min.mass min.birth_year max.height max.mass max.birth_year<br>&gt;&gt;        &lt;int&gt;    &lt;dbl&gt;          &lt;dbl&gt;      &lt;int&gt;    &lt;dbl&gt;          &lt;dbl&gt;<br>&gt;&gt; <span class="hljs-number">1</span>         <span class="hljs-number">66</span>       <span class="hljs-number">15</span>              <span class="hljs-number">8</span>        <span class="hljs-number">264</span>     <span class="hljs-number">1358</span>            <span class="hljs-number">896</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【hands on ML Ch2】-端到端机器学习</title>
    <link href="/2021/01/23/hands_on_ML_ch2/"/>
    <url>/2021/01/23/hands_on_ML_ch2/</url>
    
    <content type="html"><![CDATA[<p>hands on ML 第二章，展示了一个实例项目的完整流程</p><span id="more"></span><p>本章展示了一个实例项目的完整流程，主要步骤包括：</p><ul><li><p>  组织项目(look at the big picture)</p></li><li><p>  获取数据</p></li><li><p>  对数据进行探索和可视化</p></li><li><p>  对数据进行预处理</p></li><li><p>  选择模型进行训练</p></li><li><p>  微调模型</p></li><li><p>  展示结果</p></li><li><p>  启动，监控并维护系统</p></li></ul><p>本章使用的数据为加州房屋价格数据集，来自1990年的人口普查数据,包括每个地区(人口普查单位)的中位数收入，人口，中位数住房价格等信息，需要建立一个模型来预测住房价格</p><h2 id="Look-at-the-Big-Picture"><a href="#Look-at-the-Big-Picture" class="headerlink" title="Look at the Big Picture"></a>Look at the Big Picture</h2><p>第一步就是<strong>确定问题</strong> ：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210123145823410.png"></p><p>这个项目是处于一个数据管线(pipeline)上的一环，目的是预测出地区的住房价格以供后续的投资决策参考</p><p>有关机器学习系统的问题包括：这个系统是监督的还是非监督的还是增强学习类型；是分类任务还是回归任务还是其他；需要使用批量学习还是在线学习</p><p>这个任务是典型的监督学习，回归任务(单变量回归)；由于没有连续的数据流进入系统，所以采用批量学习(batch<br>learning)</p><p>第二步是选择一个<strong>性能衡量指标</strong>，对于回归问题最常用的是RMSE(Root Mean Square Error,均方根误差):</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210123152509580.png"></p><p>也可以使用其他的函数，比如，如果数据中离群点比较多，可以使用MAE(mean absolute error,平均绝对误差)，这个衡量相较RMSE对离群点更不敏感</p><p>第三步是 <strong>再次检查假设</strong> 帮助我们较早的发现可能的问题，比如如果系统的下游需要的不是数值而是价格的分类(低中高)，那么这个问题就变成分类问题而不是回归问题了；所以需要在项目开始前将这些问题考虑到，避免时间精力的浪费</p><h2 id="Get-the-Data"><a href="#Get-the-Data" class="headerlink" title="Get the Data"></a>Get the Data</h2><p>编写函数来自动下载数据并解压：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tarfile<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> urllib.request<br><br>DOWNLOAD_ROOT = <span class="hljs-string">&quot;https://raw.githubusercontent.com/ageron/handson-ml2/master/&quot;</span><br>HOUSING_PATH = os.path.join(<span class="hljs-string">&quot;../test/datasets&quot;</span>, <span class="hljs-string">&quot;housing&quot;</span>)<br>HOUSING_URL = DOWNLOAD_ROOT + <span class="hljs-string">&quot;datasets/housing/housing.tgz&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fetch_housing_data</span>(<span class="hljs-params">housing_url=HOUSING_URL, housing_path=HOUSING_PATH</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(housing_path):<br>        os.makedirs(housing_path)<br>    tgz_path = os.path.join(housing_path, <span class="hljs-string">&quot;housing.tgz&quot;</span>)<br>    urllib.request.urlretrieve(housing_url, tgz_path)<br>    housing_tgz = tarfile.<span class="hljs-built_in">open</span>(tgz_path)<br>    housing_tgz.extractall(path=housing_path)<br>    housing_tgz.close()<br><br>fetch_housing_data()<br></code></pre></td></tr></table></figure><p>然后使用pandas来读入数据，返回一个pandas的DataFrame 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">HOUSING_PATH = os.path.join(<span class="hljs-string">&quot;../test/datasets&quot;</span>, <span class="hljs-string">&quot;housing&quot;</span>)<br><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_housing_data</span>(<span class="hljs-params">housing_path=HOUSING_PATH</span>):</span><br>    csv_path = os.path.join(housing_path, <span class="hljs-string">&quot;housing.csv&quot;</span>)<br>    <span class="hljs-keyword">return</span> pd.read_csv(csv_path)<br><br>housing = load_housing_data()<br></code></pre></td></tr></table></figure><p>可以看一下数据的结构：<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210123161251034.png"></p><p>也可以使用<code>info</code> 方法来查看数据的描述,可以展示数据的行数，每列的类型以及非空值的数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">housing.info()<br>&gt;&gt; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span><br><span class="hljs-class">&gt;&gt; <span class="hljs-title">RangeIndex</span>:</span> <span class="hljs-number">20640</span> entries, <span class="hljs-number">0</span> to <span class="hljs-number">20639</span><br>&gt;&gt; Data columns (total <span class="hljs-number">10</span> columns):<br>&gt;&gt;  <span class="hljs-comment">#   Column              Non-Null Count  Dtype  </span><br>&gt;&gt; ---  ------              --------------  -----  <br>&gt;&gt;  <span class="hljs-number">0</span>   longitude           <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">1</span>   latitude            <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">2</span>   housing_median_age  <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">3</span>   total_rooms         <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">4</span>   total_bedrooms      <span class="hljs-number">20433</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">5</span>   population          <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">6</span>   households          <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">7</span>   median_income       <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">8</span>   median_house_value  <span class="hljs-number">20640</span> non-null  float64<br>&gt;&gt;  <span class="hljs-number">9</span>   ocean_proximity     <span class="hljs-number">20640</span> non-null  <span class="hljs-built_in">object</span> <br>&gt;&gt; dtypes: float64(<span class="hljs-number">9</span>), <span class="hljs-built_in">object</span>(<span class="hljs-number">1</span>)<br>&gt;&gt; memory usage: <span class="hljs-number">1.6</span>+ MB<br></code></pre></td></tr></table></figure><p>注意到<code>total_bedrooms</code> 变量只有20433个非空值，因此后续可能要对该变量进行缺失值的处理</p><p>对于<code>ocean_proximity</code>这个变量，可以使用<code>value_counts()</code> 方法来看其具体的分类情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">housing[<span class="hljs-string">&quot;ocean_proximity&quot;</span>].value_counts()<br>&gt;&gt; &lt;1H OCEAN     <span class="hljs-number">9136</span><br>&gt;&gt; INLAND        <span class="hljs-number">6551</span><br>&gt;&gt; NEAR OCEAN    <span class="hljs-number">2658</span><br>&gt;&gt; NEAR BAY      <span class="hljs-number">2290</span><br>&gt;&gt; ISLAND           <span class="hljs-number">5</span><br>&gt;&gt; Name: ocean_proximity, dtype: int64<br></code></pre></td></tr></table></figure><p>使用<code>describe</code> 方法可以得到数据的汇总统计信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">housing.describe()<br>&gt;&gt;           longitude      latitude  ...  median_income  median_house_value<br>&gt;&gt; count  <span class="hljs-number">20640.000000</span>  <span class="hljs-number">20640.000000</span>  ...   <span class="hljs-number">20640.000000</span>        <span class="hljs-number">20640.000000</span><br>&gt;&gt; mean    -<span class="hljs-number">119.569704</span>     <span class="hljs-number">35.631861</span>  ...       <span class="hljs-number">3.870671</span>       <span class="hljs-number">206855.816909</span><br>&gt;&gt; std        <span class="hljs-number">2.003532</span>      <span class="hljs-number">2.135952</span>  ...       <span class="hljs-number">1.899822</span>       <span class="hljs-number">115395.615874</span><br>&gt;&gt; <span class="hljs-built_in">min</span>     -<span class="hljs-number">124.350000</span>     <span class="hljs-number">32.540000</span>  ...       <span class="hljs-number">0.499900</span>        <span class="hljs-number">14999.000000</span><br>&gt;&gt; <span class="hljs-number">25</span>%     -<span class="hljs-number">121.800000</span>     <span class="hljs-number">33.930000</span>  ...       <span class="hljs-number">2.563400</span>       <span class="hljs-number">119600.000000</span><br>&gt;&gt; <span class="hljs-number">50</span>%     -<span class="hljs-number">118.490000</span>     <span class="hljs-number">34.260000</span>  ...       <span class="hljs-number">3.534800</span>       <span class="hljs-number">179700.000000</span><br>&gt;&gt; <span class="hljs-number">75</span>%     -<span class="hljs-number">118.010000</span>     <span class="hljs-number">37.710000</span>  ...       <span class="hljs-number">4.743250</span>       <span class="hljs-number">264725.000000</span><br>&gt;&gt; <span class="hljs-built_in">max</span>     -<span class="hljs-number">114.310000</span>     <span class="hljs-number">41.950000</span>  ...      <span class="hljs-number">15.000100</span>       <span class="hljs-number">500001.000000</span><br>&gt;&gt; <br>&gt;&gt; [<span class="hljs-number">8</span> rows x <span class="hljs-number">9</span> columns]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">housing.describe()[<span class="hljs-string">&quot;median_house_value&quot;</span>]<br>&gt;&gt; count     <span class="hljs-number">20640.000000</span><br>&gt;&gt; mean     <span class="hljs-number">206855.816909</span><br>&gt;&gt; std      <span class="hljs-number">115395.615874</span><br>&gt;&gt; <span class="hljs-built_in">min</span>       <span class="hljs-number">14999.000000</span><br>&gt;&gt; <span class="hljs-number">25</span>%      <span class="hljs-number">119600.000000</span><br>&gt;&gt; <span class="hljs-number">50</span>%      <span class="hljs-number">179700.000000</span><br>&gt;&gt; <span class="hljs-number">75</span>%      <span class="hljs-number">264725.000000</span><br>&gt;&gt; <span class="hljs-built_in">max</span>      <span class="hljs-number">500001.000000</span><br>&gt;&gt; Name: median_house_value, dtype: float64<br></code></pre></td></tr></table></figure><p>除了得到一些数值信息之外，对数据的探索更直接的方式是通过可视化来得到数据的一些特征,最简单的就是画直方图来反映数据的分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>housing.hist(bins=<span class="hljs-number">50</span>, figsize=(<span class="hljs-number">20</span>,<span class="hljs-number">15</span>))<br>&gt;&gt; array([[&lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;longitude&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;latitude&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;housing_median_age&#x27;</span>&#125;&gt;],<br>&gt;&gt;        [&lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;total_rooms&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;total_bedrooms&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;population&#x27;</span>&#125;&gt;],<br>&gt;&gt;        [&lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;households&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;median_income&#x27;</span>&#125;&gt;,<br>&gt;&gt;         &lt;AxesSubplot:title=&#123;<span class="hljs-string">&#x27;center&#x27;</span>:<span class="hljs-string">&#x27;median_house_value&#x27;</span>&#125;&gt;]],<br>&gt;&gt;       dtype=<span class="hljs-built_in">object</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="index.zh-cn_files/figure-commonmark/unnamed-chunk-8-1.png"><!-- --></p><p>观察数据的分布可以得到一些可能注意不到的信息：比如这里的<code>median income</code> 变量，看横坐标范围是0.5-15，所以不可能是以美元作为单位，这个时候我们就要尽量弄清楚这些已经经过处理的数值是怎么得到的(这里经过了转化，单位变成了$10000，并且下限是0.5，上限是15);另外我们看到这些<em>变量的尺度差异比较大</em>，后续需要进行缩放处理(scaling); 还有就是这些变量看起来都是偏向分布的(tailed distribution),这对于某些机器学习算法的学习可能比较困难，所以后续可能要进行转化，使其分布趋向于钟形分布</p><h3 id="创建测试集"><a href="#创建测试集" class="headerlink" title="创建测试集"></a>创建测试集</h3><p>为什么要在选择模型之前就要创建测试集呢？</p><p>因为人的大脑是一种惊人的模式检测系统，可能我们在观察了测试数据之后可能会偶然发现有意思的模式从而就会有偏向性的选择某个模型，在测试集上估计误差的时候就会过于乐观(data snooping bias)</p><p>因此我们需要提前将测试集划分好，并且在模型训练过程中不触及测试集</p><p>在划分训练集和测试集的时候主要有两种方法：</p><ul><li><p>  完全随机抽样</p></li><li><p>  分层抽样</p></li></ul><p>Scikit-Learn 提供了一些函数来划分训练集和测试集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###完全随机抽样</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br><span class="hljs-comment">##random_states是随机种子数</span><br>train_set, test_set = train_test_split(housing, test_size=<span class="hljs-number">0.2</span>,random_state=<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><p>假设这个项目中中位数收入(median income)对预测median housing prices是比较重要的变量，因此我们在创建测试集的时候希望能够代表不同类别的收入群体；由于median income是一个连续性的变量，所以我们需要将其转化成分类变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>housing[<span class="hljs-string">&quot;income_cat&quot;</span>] = pd.cut(housing[<span class="hljs-string">&quot;median_income&quot;</span>],<br>                               bins=[<span class="hljs-number">0.</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.5</span>, <span class="hljs-number">6.</span>, np.inf],<br>                               labels=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>                               <br>housing[<span class="hljs-string">&quot;income_cat&quot;</span>].value_counts()<br>&gt;&gt; <span class="hljs-number">3</span>    <span class="hljs-number">7236</span><br>&gt;&gt; <span class="hljs-number">2</span>    <span class="hljs-number">6581</span><br>&gt;&gt; <span class="hljs-number">4</span>    <span class="hljs-number">3639</span><br>&gt;&gt; <span class="hljs-number">5</span>    <span class="hljs-number">2362</span><br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">822</span><br>&gt;&gt; Name: income_cat, dtype: int64<br>housing[<span class="hljs-string">&quot;income_cat&quot;</span>].hist()<br>&gt;&gt; &lt;AxesSubplot:&gt;<br></code></pre></td></tr></table></figure><p>然后可以使用Scikit-Learn的<strong>StratifiedShuffleSplit类</strong>来进行分层抽样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> StratifiedShuffleSplit<br><br>split = StratifiedShuffleSplit(n_splits=<span class="hljs-number">1</span>, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><span class="hljs-keyword">for</span> train_index, test_index <span class="hljs-keyword">in</span> split.split(housing, housing[<span class="hljs-string">&quot;income_cat&quot;</span>]):<br>    strat_train_set = housing.loc[train_index]<br>    strat_test_set = housing.loc[test_index]<br></code></pre></td></tr></table></figure><p>最后需要将我们创建的用于分层抽样的变量<code>income_cat</code> 删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> set_ <span class="hljs-keyword">in</span> (strat_train_set,strat_test_set):<br>  set_.drop(<span class="hljs-string">&quot;income_cat&quot;</span>,axis=<span class="hljs-number">1</span>,inplace=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="对数据进行探索和可视化"><a href="#对数据进行探索和可视化" class="headerlink" title="对数据进行探索和可视化"></a>对数据进行探索和可视化</h2><p>首先我们要确保对数据的探索和可视化只对训练集进行，另外如果数据集比较大，这一步骤也可以选择一部分数据集作为“exploration set”</p><p>对数据的可视化要选取合适的形式，比如这个项目是不同地区的房价，因此可以以经纬度来展示不同的变量(住房价格，人口密度等)；有些时候可视化需要调整一些参数使得模式更加清晰(比如点的透明度)，有时候可以将一些变量进行合并</p><p>对数据的探索是一个迭代的过程，当我们建立起一个原型系统之后，在运行的过程中可以分析其输出然后返回来再次进行这个探索步骤，从而获得更深的理解</p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>将数据(预)处理的过程包装成函数是非常有用的：</p><ul><li><p>  在任何数据集上都可以便捷地重复数据转化步骤</p></li><li><p>  可以将经常用到的函数打包成库，以便未来的项目进行复用</p></li><li><p>  如果我们的项目是部署在动态的系统上，就可以使用这些函数对新输入的数据进行转化</p></li><li><p>  更重要的是：通过函数，我们可以尝试不同的转化参数或不同的转化步骤的组合对最终模型性能的影响</p></li></ul><p>首先获取训练集的拷贝并将数据的labels去掉：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">housing = strat_train_set.drop(<span class="hljs-string">&quot;median_house_value&quot;</span>, axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># drop labels for training set</span><br>housing_labels = strat_train_set[<span class="hljs-string">&quot;median_house_value&quot;</span>].copy()<br></code></pre></td></tr></table></figure><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><p>大部分机器学习算法是不能够处理缺失值的，而我们之前看到<code>total_bedrooms</code> 变量是有一些缺失值的，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">sample_incomplete_rows = housing[housing.isnull().<span class="hljs-built_in">any</span>(axis=<span class="hljs-number">1</span>)].head()<br>sample_incomplete_rows<br>&gt;&gt;        longitude  latitude  ...  median_income  ocean_proximity<br>&gt;&gt; <span class="hljs-number">4629</span>     -<span class="hljs-number">118.30</span>     <span class="hljs-number">34.07</span>  ...         <span class="hljs-number">2.2708</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">6068</span>     -<span class="hljs-number">117.86</span>     <span class="hljs-number">34.01</span>  ...         <span class="hljs-number">5.1762</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">17923</span>    -<span class="hljs-number">121.97</span>     <span class="hljs-number">37.35</span>  ...         <span class="hljs-number">4.6328</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">13656</span>    -<span class="hljs-number">117.30</span>     <span class="hljs-number">34.05</span>  ...         <span class="hljs-number">1.6675</span>           INLAND<br>&gt;&gt; <span class="hljs-number">19252</span>    -<span class="hljs-number">122.79</span>     <span class="hljs-number">38.48</span>  ...         <span class="hljs-number">3.1662</span>        &lt;1H OCEAN<br>&gt;&gt; <br>&gt;&gt; [<span class="hljs-number">5</span> rows x <span class="hljs-number">9</span> columns]<br></code></pre></td></tr></table></figure><p>对于缺失值的处理可以有3种选择：</p><ul><li><p>  将相应的地区删除(删除观测值，也就是行)</p></li><li><p>  将有缺失值的变量删除(删除列)</p></li><li><p>  将缺失值填补为某个值(比如0,平均值,中位数等)</p></li></ul><p>需要注意的是：如果采取用某个值填补缺失值，需要将这个值存储下来，不只是训练集，之后还要用这个值来填充测试集中的缺失值，新的数据中的缺失值</p><p>使用pandas DataFrame中的<code>dropna()</code> <code>drop</code> 和<code>fillna()</code>方法可以实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># option 1 </span><br>housing.dropna(subset=[<span class="hljs-string">&quot;total_bedrooms&quot;</span>]) <br>&gt;&gt;        longitude  latitude  ...  median_income  ocean_proximity<br>&gt;&gt; <span class="hljs-number">17606</span>    -<span class="hljs-number">121.89</span>     <span class="hljs-number">37.29</span>  ...         <span class="hljs-number">2.7042</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">18632</span>    -<span class="hljs-number">121.93</span>     <span class="hljs-number">37.05</span>  ...         <span class="hljs-number">6.4214</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">14650</span>    -<span class="hljs-number">117.20</span>     <span class="hljs-number">32.77</span>  ...         <span class="hljs-number">2.8621</span>       NEAR OCEAN<br>&gt;&gt; <span class="hljs-number">3230</span>     -<span class="hljs-number">119.61</span>     <span class="hljs-number">36.31</span>  ...         <span class="hljs-number">1.8839</span>           INLAND<br>&gt;&gt; <span class="hljs-number">3555</span>     -<span class="hljs-number">118.59</span>     <span class="hljs-number">34.23</span>  ...         <span class="hljs-number">3.0347</span>        &lt;1H OCEAN<br>&gt;&gt; ...          ...       ...  ...            ...              ...<br>&gt;&gt; <span class="hljs-number">6563</span>     -<span class="hljs-number">118.13</span>     <span class="hljs-number">34.20</span>  ...         <span class="hljs-number">4.9312</span>           INLAND<br>&gt;&gt; <span class="hljs-number">12053</span>    -<span class="hljs-number">117.56</span>     <span class="hljs-number">33.88</span>  ...         <span class="hljs-number">2.0682</span>           INLAND<br>&gt;&gt; <span class="hljs-number">13908</span>    -<span class="hljs-number">116.40</span>     <span class="hljs-number">34.09</span>  ...         <span class="hljs-number">3.2723</span>           INLAND<br>&gt;&gt; <span class="hljs-number">11159</span>    -<span class="hljs-number">118.01</span>     <span class="hljs-number">33.82</span>  ...         <span class="hljs-number">4.0625</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">15775</span>    -<span class="hljs-number">122.45</span>     <span class="hljs-number">37.77</span>  ...         <span class="hljs-number">3.5750</span>         NEAR BAY<br>&gt;&gt; <br>&gt;&gt; [<span class="hljs-number">16354</span> rows x <span class="hljs-number">9</span> columns]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># option 2 </span><br>housing.drop(<span class="hljs-string">&quot;total_bedrooms&quot;</span>, axis=<span class="hljs-number">1</span>) <br>&gt;&gt;        longitude  latitude  ...  median_income  ocean_proximity<br>&gt;&gt; <span class="hljs-number">17606</span>    -<span class="hljs-number">121.89</span>     <span class="hljs-number">37.29</span>  ...         <span class="hljs-number">2.7042</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">18632</span>    -<span class="hljs-number">121.93</span>     <span class="hljs-number">37.05</span>  ...         <span class="hljs-number">6.4214</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">14650</span>    -<span class="hljs-number">117.20</span>     <span class="hljs-number">32.77</span>  ...         <span class="hljs-number">2.8621</span>       NEAR OCEAN<br>&gt;&gt; <span class="hljs-number">3230</span>     -<span class="hljs-number">119.61</span>     <span class="hljs-number">36.31</span>  ...         <span class="hljs-number">1.8839</span>           INLAND<br>&gt;&gt; <span class="hljs-number">3555</span>     -<span class="hljs-number">118.59</span>     <span class="hljs-number">34.23</span>  ...         <span class="hljs-number">3.0347</span>        &lt;1H OCEAN<br>&gt;&gt; ...          ...       ...  ...            ...              ...<br>&gt;&gt; <span class="hljs-number">6563</span>     -<span class="hljs-number">118.13</span>     <span class="hljs-number">34.20</span>  ...         <span class="hljs-number">4.9312</span>           INLAND<br>&gt;&gt; <span class="hljs-number">12053</span>    -<span class="hljs-number">117.56</span>     <span class="hljs-number">33.88</span>  ...         <span class="hljs-number">2.0682</span>           INLAND<br>&gt;&gt; <span class="hljs-number">13908</span>    -<span class="hljs-number">116.40</span>     <span class="hljs-number">34.09</span>  ...         <span class="hljs-number">3.2723</span>           INLAND<br>&gt;&gt; <span class="hljs-number">11159</span>    -<span class="hljs-number">118.01</span>     <span class="hljs-number">33.82</span>  ...         <span class="hljs-number">4.0625</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">15775</span>    -<span class="hljs-number">122.45</span>     <span class="hljs-number">37.77</span>  ...         <span class="hljs-number">3.5750</span>         NEAR BAY<br>&gt;&gt; <br>&gt;&gt; [<span class="hljs-number">16512</span> rows x <span class="hljs-number">8</span> columns]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># option 3</span><br>median = housing[<span class="hljs-string">&quot;total_bedrooms&quot;</span>].median() <br><br>housing[<span class="hljs-string">&quot;total_bedrooms&quot;</span>].fillna(median, inplace=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>Scikit-Learn提供了一个方便的类<code>SimpleImputer</code> 来处理缺失值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###首先需要创建一个SimpleImputer实例</span><br><span class="hljs-keyword">from</span> sklearn.impute <span class="hljs-keyword">import</span> SimpleImputer<br><br>imputer = SimpleImputer(strategy=<span class="hljs-string">&quot;median&quot;</span>)<br><br><span class="hljs-comment">###由于只能对数值变量计算meidan，所以将字符变量删除</span><br>housing_num = housing.drop(<span class="hljs-string">&quot;ocean_proximity&quot;</span>,axis=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">###使用fit方法计算median</span><br>imputer.fit(housing_num)<br><br><span class="hljs-comment">##计算的结果存储在statistics_实例变量中</span><br>&gt;&gt; SimpleImputer(strategy=<span class="hljs-string">&#x27;median&#x27;</span>)<br>imputer.statistics_<br>&gt;&gt; array([-<span class="hljs-number">118.51</span>  ,   <span class="hljs-number">34.26</span>  ,   <span class="hljs-number">29.</span>    , <span class="hljs-number">2119.5</span>   ,  <span class="hljs-number">433.</span>    , <span class="hljs-number">1164.</span>    ,<br>&gt;&gt;         <span class="hljs-number">408.</span>    ,    <span class="hljs-number">3.5409</span>])<br>housing_num.median().values<br><br>&gt;&gt; array([-<span class="hljs-number">118.51</span>  ,   <span class="hljs-number">34.26</span>  ,   <span class="hljs-number">29.</span>    , <span class="hljs-number">2119.5</span>   ,  <span class="hljs-number">433.</span>    , <span class="hljs-number">1164.</span>    ,<br>&gt;&gt;         <span class="hljs-number">408.</span>    ,    <span class="hljs-number">3.5409</span>])<br>X = imputer.transform(housing_num)<span class="hljs-comment">####现在就相当于在训练集上&quot;trained&quot; 这个imputer，再使用他去对数据集进行transform(填充缺失值)</span><br>X<br><br><span class="hljs-comment">###将Numpy array转化成数据框</span><br>&gt;&gt; array([[-<span class="hljs-number">121.89</span>  ,   <span class="hljs-number">37.29</span>  ,   <span class="hljs-number">38.</span>    , ...,  <span class="hljs-number">710.</span>    ,  <span class="hljs-number">339.</span>    ,<br>&gt;&gt;            <span class="hljs-number">2.7042</span>],<br>&gt;&gt;        [-<span class="hljs-number">121.93</span>  ,   <span class="hljs-number">37.05</span>  ,   <span class="hljs-number">14.</span>    , ...,  <span class="hljs-number">306.</span>    ,  <span class="hljs-number">113.</span>    ,<br>&gt;&gt;            <span class="hljs-number">6.4214</span>],<br>&gt;&gt;        [-<span class="hljs-number">117.2</span>   ,   <span class="hljs-number">32.77</span>  ,   <span class="hljs-number">31.</span>    , ...,  <span class="hljs-number">936.</span>    ,  <span class="hljs-number">462.</span>    ,<br>&gt;&gt;            <span class="hljs-number">2.8621</span>],<br>&gt;&gt;        ...,<br>&gt;&gt;        [-<span class="hljs-number">116.4</span>   ,   <span class="hljs-number">34.09</span>  ,    <span class="hljs-number">9.</span>    , ..., <span class="hljs-number">2098.</span>    ,  <span class="hljs-number">765.</span>    ,<br>&gt;&gt;            <span class="hljs-number">3.2723</span>],<br>&gt;&gt;        [-<span class="hljs-number">118.01</span>  ,   <span class="hljs-number">33.82</span>  ,   <span class="hljs-number">31.</span>    , ..., <span class="hljs-number">1356.</span>    ,  <span class="hljs-number">356.</span>    ,<br>&gt;&gt;            <span class="hljs-number">4.0625</span>],<br>&gt;&gt;        [-<span class="hljs-number">122.45</span>  ,   <span class="hljs-number">37.77</span>  ,   <span class="hljs-number">52.</span>    , ..., <span class="hljs-number">1269.</span>    ,  <span class="hljs-number">639.</span>    ,<br>&gt;&gt;            <span class="hljs-number">3.575</span> ]])<br>housing_tr = pd.DataFrame(X, columns=housing_num.columns, index=housing_num.index)<br></code></pre></td></tr></table></figure><h3 id="处理分类变量"><a href="#处理分类变量" class="headerlink" title="处理分类变量"></a>处理分类变量</h3><p>这个例子中只有一个变量是分类变量<code>ocean_proximity</code> ,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">housing_cat = housing[[<span class="hljs-string">&quot;ocean_proximity&quot;</span>]]<br>housing_cat.head(<span class="hljs-number">10</span>)<br>&gt;&gt;       ocean_proximity<br>&gt;&gt; <span class="hljs-number">17606</span>       &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">18632</span>       &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">14650</span>      NEAR OCEAN<br>&gt;&gt; <span class="hljs-number">3230</span>           INLAND<br>&gt;&gt; <span class="hljs-number">3555</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">19480</span>          INLAND<br>&gt;&gt; <span class="hljs-number">8879</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">13685</span>          INLAND<br>&gt;&gt; <span class="hljs-number">4937</span>        &lt;1H OCEAN<br>&gt;&gt; <span class="hljs-number">4861</span>        &lt;1H OCEAN<br></code></pre></td></tr></table></figure><p>对于分类变量一般有两种处理方法：</p><ul><li><p>  用多个数值去编码不同的类别</p></li><li><p>  使用dummy变量，也就是one-hot编码(该类别为1，其他类别为0)</p></li></ul><p>使用Scikit-Learn的OrdinalEncoder类和OneHotEncoder类可以分别处理上述两种情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> OrdinalEncoder<br><br><span class="hljs-comment">###fit_transform相当于上面的先fit再transform</span><br>ordinal_encoder = OrdinalEncoder()<br>housing_cat_encoded = ordinal_encoder.fit_transform(housing_cat)<br>housing_cat_encoded[:<span class="hljs-number">10</span>]<br><br><span class="hljs-comment">###结果存储在categories_变量中</span><br>&gt;&gt; array([[<span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">4.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>]])<br>ordinal_encoder.categories_<br>&gt;&gt; [array([<span class="hljs-string">&#x27;&lt;1H OCEAN&#x27;</span>, <span class="hljs-string">&#x27;INLAND&#x27;</span>, <span class="hljs-string">&#x27;ISLAND&#x27;</span>, <span class="hljs-string">&#x27;NEAR BAY&#x27;</span>, <span class="hljs-string">&#x27;NEAR OCEAN&#x27;</span>],<br>&gt;&gt;       dtype=<span class="hljs-built_in">object</span>)]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> OneHotEncoder<br><br>cat_encoder = OneHotEncoder()<br>housing_cat_1hot = cat_encoder.fit_transform(housing_cat)<br>housing_cat_1hot<br>&gt;&gt; &lt;16512x5 sparse matrix of <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;&lt;class &#x27;</span>numpy.float64<span class="hljs-string">&#x27;&gt;&#x27;</span><br>&gt;&gt;  <span class="hljs-keyword">with</span> <span class="hljs-number">16512</span> stored elements <span class="hljs-keyword">in</span> Compressed Sparse Row <span class="hljs-built_in">format</span>&gt;<br>cat_encoder.categories_<br><br><span class="hljs-comment">###为了便于储存，结果是稀疏矩阵，可以转化为正常的矩阵形式</span><br>&gt;&gt; [array([<span class="hljs-string">&#x27;&lt;1H OCEAN&#x27;</span>, <span class="hljs-string">&#x27;INLAND&#x27;</span>, <span class="hljs-string">&#x27;ISLAND&#x27;</span>, <span class="hljs-string">&#x27;NEAR BAY&#x27;</span>, <span class="hljs-string">&#x27;NEAR OCEAN&#x27;</span>],<br>&gt;&gt;       dtype=<span class="hljs-built_in">object</span>)]<br>housing_cat_1hot.toarray()<br><span class="hljs-comment">###也可以使用参数OneHotEncoder(sparse=False)</span><br>&gt;&gt; array([[<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>],<br>&gt;&gt;        ...,<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>&gt;&gt;        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>]])<br></code></pre></td></tr></table></figure><p>需要注意的点是：在机器学习算法中通常会认为差值较小的值比差值较大的值更相似，如果使用不同的数值来编码分类变量(第一种方法)，需要注意其含义(在这里0和4比0和1更相似)</p><h3 id="Custom-Transformers"><a href="#Custom-Transformers" class="headerlink" title="Custom Transformers"></a><strong>Custom Transformers</strong></h3><p>我们也可以定义自己的转化器，需要做的就是：创建一个类，并实现3个方法(fit, transfrom,fit_transform),可以通过添加Scikit Learn的<code>TransformerMixin</code>类作为一个基础类来自动添加最后一个类(fit_ftansform),除此之外，还可以添加<code>BaseEstimator</code>作为基础类，从而可以获得两个额外的方法(get_params() 和set_params())，来更方便的<strong>进行超参数的调试</strong>，下面是一个合并变量的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.base <span class="hljs-keyword">import</span> BaseEstimator, TransformerMixin<br><br><span class="hljs-comment"># column index</span><br>rooms_ix, bedrooms_ix, population_ix, households_ix = <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CombinedAttributesAdder</span>(<span class="hljs-params">BaseEstimator, TransformerMixin</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, add_bedrooms_per_room=<span class="hljs-literal">True</span></span>):</span> <span class="hljs-comment"># no *args or **kargs</span><br>        self.add_bedrooms_per_room = add_bedrooms_per_room<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span>(<span class="hljs-params">self, X, y=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-keyword">return</span> self  <span class="hljs-comment"># nothing else to do</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transform</span>(<span class="hljs-params">self, X</span>):</span><br>        rooms_per_household = X[:, rooms_ix] / X[:, households_ix]<br>        population_per_household = X[:, population_ix] / X[:, households_ix]<br>        <span class="hljs-keyword">if</span> self.add_bedrooms_per_room:<br>            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]<br>            <span class="hljs-keyword">return</span> np.c_[X, rooms_per_household, population_per_household,<br>                         bedrooms_per_room]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> np.c_[X, rooms_per_household, population_per_household]<br><br>attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=<span class="hljs-literal">False</span>)<br>housing_extra_attribs = attr_adder.transform(housing.values)<br></code></pre></td></tr></table></figure><h3 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h3><p>当输入数据的范围(scale)相差较大，机器学习算法一般不会表现很好</p><p>一般有两种方法可以使所有的变量的尺度一致：</p><ul><li>min-max 缩放(也叫normalization) 将数据缩放到0-1的范围(也可以选择其他的范围)，计算方法是：减去最小值然后除以最大值与最小值的差值；Scikit-learn 提供了<code>MinMaxScaler</code> 转化器(feature_range超参数来修改范围)</li><li>  Standardization 减去均值然后除以标准差，这种方法并不会将数值绑定到某个范围并且受离群值影响比较小；Scikit-learn提供了<code>StandardScaler</code> 转化器</li></ul><h3 id="Transformation-Pipelines"><a href="#Transformation-Pipelines" class="headerlink" title="Transformation Pipelines"></a><strong>Transformation Pipelines</strong></h3><p>Scikit-Learn提供了<code>Pipeline</code>类可以用来组合一系列的数据转化过程，下面是将之前对数值变量的处理组合成pipeline：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.pipeline <span class="hljs-keyword">import</span> Pipeline<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><br>num_pipeline = Pipeline([<br>        (<span class="hljs-string">&#x27;imputer&#x27;</span>, SimpleImputer(strategy=<span class="hljs-string">&quot;median&quot;</span>)),<br>        (<span class="hljs-string">&#x27;attribs_adder&#x27;</span>, CombinedAttributesAdder()),<br>        (<span class="hljs-string">&#x27;std_scaler&#x27;</span>, StandardScaler()),<br>    ])<br><br>housing_num_tr = num_pipeline.fit_transform(housing_num)<br></code></pre></td></tr></table></figure><p><code>Pipeline</code> 的输入是一个列表，每个元素都是name/estimator对，最后一个estimator必须是转化器(也就是说最后一个必须有fit_transform方法)</p><p>为了可以<strong>同时处理数值变量和分类变量</strong>，我们可以使用Scikit-Learn的<strong>ColumnTransformer</strong>(0.20版本)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.compose <span class="hljs-keyword">import</span> ColumnTransformer<br><br>num_attribs = <span class="hljs-built_in">list</span>(housing_num)<br>cat_attribs = [<span class="hljs-string">&quot;ocean_proximity&quot;</span>]<br><br>full_pipeline = ColumnTransformer([<br>        (<span class="hljs-string">&quot;num&quot;</span>, num_pipeline, num_attribs),<br>        (<span class="hljs-string">&quot;cat&quot;</span>, OneHotEncoder(), cat_attribs),<br>    ])<br><br>housing_prepared = full_pipeline.fit_transform(housing)<br></code></pre></td></tr></table></figure><p>ColumnTransformer的输入是一个列表，列表的元素是元组，元组包含：名称+转化器+需要转化的列名</p><h2 id="选择并训练模型"><a href="#选择并训练模型" class="headerlink" title="选择并训练模型"></a>选择并训练模型</h2><h3 id="在测试集上训练并评估模型"><a href="#在测试集上训练并评估模型" class="headerlink" title="在测试集上训练并评估模型"></a>在测试集上训练并评估模型</h3><p>首先尝试线性回归模型并在训练集上计算误差(RMSE):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br><br><span class="hljs-comment">###构建线性回归模型</span><br>lin_reg = LinearRegression()<br>lin_reg.fit(housing_prepared, housing_labels)<br><br><span class="hljs-comment">###计算RMSE</span><br>&gt;&gt; LinearRegression()<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><br>housing_predictions = lin_reg.predict(housing_prepared)<br>lin_mse = mean_squared_error(housing_labels, housing_predictions)<br>lin_rmse = np.sqrt(lin_mse)<br>lin_rmse<br>&gt;&gt; <span class="hljs-number">68628.19819848923</span><br></code></pre></td></tr></table></figure><p>需要预测的变量<code>median_housing_values</code>的范围在$14999~$500001之间，所以这个误差有点大，也就是<strong>underfitting</strong>,上一章讲到解决欠拟合可以从3个方面考虑：选择一个更复杂的模型；选择更好的变量；减少模型的约束(现在这个线性回归没有正则化，所以不用考虑这一点)，这里首先尝试一个更复杂的模型：决策树回归，模型的使用类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeRegressor<br><br>tree_reg = DecisionTreeRegressor() <br>tree_reg.fit(housing_prepared,housing_labels)<br>&gt;&gt; DecisionTreeRegressor()<br>housing_predictions = tree_reg.predict(housing_prepared)<br>tree_mse = mean_squared_error(housing_labels, housing_predictions)<br>tree_rmse = np.sqrt(tree_mse)<br>tree_rmse<br>&gt;&gt; <span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure><p>现在这个模型的误差是0！很大可能是过拟合了，但是要注意：<strong>我们不能够在测试集上测试我们的模型看看是不是过拟合，然后再来调整</strong>，所以这里我们需要应用上章讲到的<strong>将训练集再划分成训练集和验证集</strong>，在训练集中训练模型，在验证集中检测模型然后再进行模型的调整，得到一个较好的结果后再去测试集上检测</p><h3 id="使用交叉验证来更好的评估模型"><a href="#使用交叉验证来更好的评估模型" class="headerlink" title="使用交叉验证来更好的评估模型"></a>使用交叉验证来更好的评估模型</h3><p>交叉验证指的是：随机将训练集分成几份(一般是10份)，每一份称为fold；然后进行训练和评估10次，每次选择一个不同的fold进行评估，在剩余9份中进行训练：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_val_score <br>scores = cross_val_score(tree_reg, housing_prepared, housing_labels, scoring=<span class="hljs-string">&quot;neg_mean_squared_error&quot;</span>, cv=<span class="hljs-number">10</span>) <br>tree_rmse_scores = np.sqrt(-scores)<br></code></pre></td></tr></table></figure><p>注意：在Scikit-Learn中得到的score是功效函数(越大越好)而不是损失函数，所以是负数；得到的结果是评估分数的数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">display_scores</span>(<span class="hljs-params">scores</span>):</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Scores:&quot;</span>,scores)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mean:&quot;</span>,scores.mean())<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SD:&quot;</span>,scores.std())<br>  <br>display_scores(tree_rmse_scores)<br>&gt;&gt; Scores: [<span class="hljs-number">68524.35504919</span> <span class="hljs-number">66981.1355597</span>  <span class="hljs-number">70797.83977591</span> <span class="hljs-number">69247.66817087</span><br>&gt;&gt;  <span class="hljs-number">69998.59463448</span> <span class="hljs-number">74424.9303865</span>  <span class="hljs-number">71390.885174</span>   <span class="hljs-number">71908.43423181</span><br>&gt;&gt;  <span class="hljs-number">77419.30345977</span> <span class="hljs-number">68252.98473013</span>]<br>&gt;&gt; Mean: <span class="hljs-number">70894.61311723632</span><br>&gt;&gt; SD: <span class="hljs-number">2962.180203662978</span><br></code></pre></td></tr></table></figure><p>可以看到这个决策树模型在验证集上的误差比线性回归模型还要差;另外使用交叉验证除了可以估计模型的性能之外还可以衡量这个估计的精确度(标准差)</p><p>我们再算一下线性回归模型的交叉验证结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">lin_scores = cross_val_score(lin_reg, housing_prepared, housing_labels,<br>scoring=<span class="hljs-string">&quot;neg_mean_squared_error&quot;</span>, cv=<span class="hljs-number">10</span>)<br><br>lin_rmse_scores = np.sqrt(-lin_scores)<br>display_scores(lin_rmse_scores)<br>&gt;&gt; Scores: [<span class="hljs-number">66782.73843989</span> <span class="hljs-number">66960.118071</span>   <span class="hljs-number">70347.95244419</span> <span class="hljs-number">74739.57052552</span><br>&gt;&gt;  <span class="hljs-number">68031.13388938</span> <span class="hljs-number">71193.84183426</span> <span class="hljs-number">64969.63056405</span> <span class="hljs-number">68281.61137997</span><br>&gt;&gt;  <span class="hljs-number">71552.91566558</span> <span class="hljs-number">67665.10082067</span>]<br>&gt;&gt; Mean: <span class="hljs-number">69052.46136345083</span><br>&gt;&gt; SD: <span class="hljs-number">2731.674001798342</span><br></code></pre></td></tr></table></figure><p>最后再尝试另一种集成学习模型：随机森林回归(通过随机选特征的子集来训练多个决策树然后对预测进行平均)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestRegressor<br><br>forest_reg = RandomForestRegressor()<br><br><span class="hljs-comment">##看一下再训练集上的误差</span><br>forest_reg.fit(housing_prepared,housing_labels)<br>&gt;&gt; RandomForestRegressor()<br>housing_predictions = forest_reg.predict(housing_prepared)<br>forest_mse = mean_squared_error(housing_labels, housing_predictions)<br>forest_rmse = np.sqrt(forest_mse)<br>forest_rmse<br><br><br><span class="hljs-comment">##交叉验证</span><br>&gt;&gt; <span class="hljs-number">18695.54976048593</span><br>forest_reg_score = cross_val_score(forest_reg,housing_prepared, housing_labels,scoring=<span class="hljs-string">&quot;neg_mean_squared_error&quot;</span>, cv=<span class="hljs-number">10</span>)<br><br>forest_reg_rmse_scores = np.sqrt(-forest_reg_score)<br>display_scores(forest_reg_rmse_scores)<br>&gt;&gt; Scores: [<span class="hljs-number">49766.07996985</span> <span class="hljs-number">47777.52088347</span> <span class="hljs-number">49930.25427399</span> <span class="hljs-number">52365.21532167</span><br>&gt;&gt;  <span class="hljs-number">49565.91367179</span> <span class="hljs-number">53400.89852447</span> <span class="hljs-number">48887.63710491</span> <span class="hljs-number">47989.04820215</span><br>&gt;&gt;  <span class="hljs-number">52920.62118389</span> <span class="hljs-number">50075.38104365</span>]<br>&gt;&gt; Mean: <span class="hljs-number">50267.857017983544</span><br>&gt;&gt; SD: <span class="hljs-number">1882.7452463475934</span><br></code></pre></td></tr></table></figure><p>随机森林的误差已经要小很多了，但是在训练集上的误差仍然要比在验证集上的误差小很多，说明还是有过拟合的(回顾：可以通过简化模型，加上正则项或者收集更多的数据)</p><p>当我们实验了多个模型，应该将每个模型都保存起来，包括模型的超参数，训练参数，交叉验证的值，预测值等以便于模型间的比较，在Python中可以通过<code>pickle</code>模块或者<code>joblib</code>库来存储scikit-learn模型(jonlib在存储大的Numpy数组上更有效率)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> joblib<br>joblib.dump(my_model,<span class="hljs-string">&quot;my_model.pkl)</span><br><span class="hljs-string"></span><br><span class="hljs-string">my_model_loaded = joblib.load(&quot;</span>my_model.pkl<span class="hljs-string">&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="微调模型"><a href="#微调模型" class="headerlink" title="微调模型"></a>微调模型</h2><p>调整模型的超参数，有以下几种常用方法</p><h3 id="网格搜索"><a href="#网格搜索" class="headerlink" title="网格搜索"></a>网格搜索</h3><p>网格搜索就是类似于穷举法，尝试所有的可能；Scikit-learn提供了<code>GridSearchCV</code>来进行网格搜索并使用交叉验证来评估所有的超参数的组合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br><br><span class="hljs-comment">##提供需要实验的超参数值</span><br>param_grid = [ &#123;<span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>], <span class="hljs-string">&#x27;max_features&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]&#125;, &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: [<span class="hljs-literal">False</span>], <span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">10</span>], <span class="hljs-string">&#x27;max_features&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]&#125;,]<br><br>forest_reg = RandomForestRegressor()<br>grid_search = GridSearchCV(forest_reg, param_grid, cv=<span class="hljs-number">5</span>, scoring=<span class="hljs-string">&#x27;neg_mean_squared_error&#x27;</span>, return_train_score=<span class="hljs-literal">True</span>)<br><br>grid_search.fit(housing_prepared, housing_labels)<br>&gt;&gt; GridSearchCV(cv=<span class="hljs-number">5</span>, estimator=RandomForestRegressor(),<br>&gt;&gt;              param_grid=[&#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>],<br>&gt;&gt;                           <span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>]&#125;,<br>&gt;&gt;                          &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: [<span class="hljs-literal">False</span>], <span class="hljs-string">&#x27;max_features&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>&gt;&gt;                           <span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">10</span>]&#125;],<br>&gt;&gt;              return_train_score=<span class="hljs-literal">True</span>, scoring=<span class="hljs-string">&#x27;neg_mean_squared_error&#x27;</span>)<br></code></pre></td></tr></table></figure><p>param_grid提供需要实验的超参数值，是一个列表，列表的元素是字典，每个字典里面是需要尝试的超参数的值，所以这里面就是：首先评估第一个字典中的<code>3*4</code>个超参数的组合，一共12个模型，再评估第二个字典中的<code>2*3</code>个超参数的组合，一个6个模型，所以总的需要评估12+6=18个模型，对每个模型训练5次(交叉验证中CV=5)</p><p>得到的最好的结果存储在<code>best_params_</code>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.best_params_<br>&gt;&gt; &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">30</span>&#125;<br></code></pre></td></tr></table></figure><p>整个模型在<code>best_estimator_</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.best_estimator_<br>&gt;&gt; RandomForestRegressor(max_features=<span class="hljs-number">8</span>, n_estimators=<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p>我们也可以得到每个超参数组合的交叉验证的score：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">cvres = grid_search.cv_results_<br><br><span class="hljs-comment">##平均误差</span><br><span class="hljs-keyword">for</span> mean_score, params <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(cvres[<span class="hljs-string">&quot;mean_test_score&quot;</span>], cvres[<span class="hljs-string">&quot;params&quot;</span>]):<br>  <span class="hljs-built_in">print</span>(np.sqrt(-mean_score), params)<br>&gt;&gt; <span class="hljs-number">64530.62351934246</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">55357.890909127585</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">52935.050118540785</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">30</span>&#125;<br>&gt;&gt; <span class="hljs-number">60838.564876061646</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">53294.075996366715</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">50664.777897014326</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">30</span>&#125;<br>&gt;&gt; <span class="hljs-number">58678.16606697331</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">51832.23262797085</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">50022.944964854985</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">30</span>&#125;<br>&gt;&gt; <span class="hljs-number">58836.35998556703</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">51798.661030790616</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">49981.14999745153</span> &#123;<span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">30</span>&#125;<br>&gt;&gt; <span class="hljs-number">62437.81349999718</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">54286.58589119645</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">59249.56753707383</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">52761.26326802062</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&gt;&gt; <span class="hljs-number">59203.193281533706</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>&gt;&gt; <span class="hljs-number">52169.3677107009</span> &#123;<span class="hljs-string">&#x27;bootstrap&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;max_features&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;n_estimators&#x27;</span>: <span class="hljs-number">10</span>&#125;<br></code></pre></td></tr></table></figure><p>使用max_feature=8和n_estimators=30得到的误差为49682，比之前要好，说明微调模型是有效果的</p><p>注意：一些数据处理的步骤也可以认为是超参数，比如前面的是否添加一些合并的变量(add_bedrooms_per_room)，缺失值的处理，特征选择等；也可以使用类似的方法进行调整</p><h3 id="随机搜索"><a href="#随机搜索" class="headerlink" title="随机搜索"></a>随机搜索</h3><p>当超参数的搜索空间比较大的时候，使用随机搜索的方法比较好<br>随机搜索不是尝试所有可能的组合，而是在每次迭代中对每个超参数随机选取一个值，然后对这些随机选取的超参数组合进行评估，这种方法有两个主要的优势：</p><ul><li>  如果我们设置循环数目为1000，那么这种方法对每个超参数都会尝试1000个不同的值(网格法只会尝试给定的值)</li><li>  通过设定循环的次数就可以控制进行超参数搜寻的成本</li></ul><h3 id="集成方法"><a href="#集成方法" class="headerlink" title="集成方法"></a>集成方法</h3><p>另一个调整模型的方法就是将表现最好的不同模型结合起来(就像决策树回归模型一样)</p><h3 id="分析最好的模型和其误差"><a href="#分析最好的模型和其误差" class="headerlink" title="分析最好的模型和其误差"></a>分析最好的模型和其误差</h3><p>我们可以通过对模型的检查来获得对问题的更好的理解，比如我们可以查看在随机森林回归模型中不同变量对模型预测的重要性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">feature_importances = grid_search.best_estimator_.feature_importances_<br><br>feature_importances<br>&gt;&gt; array([<span class="hljs-number">6.77924618e-02</span>, <span class="hljs-number">6.07623085e-02</span>, <span class="hljs-number">4.33993956e-02</span>, <span class="hljs-number">1.47232036e-02</span>,<br>&gt;&gt;        <span class="hljs-number">1.49909386e-02</span>, <span class="hljs-number">1.44308483e-02</span>, <span class="hljs-number">1.44214759e-02</span>, <span class="hljs-number">3.75628068e-01</span>,<br>&gt;&gt;        <span class="hljs-number">4.07637376e-02</span>, <span class="hljs-number">1.13639737e-01</span>, <span class="hljs-number">6.10155827e-02</span>, <span class="hljs-number">6.75873135e-03</span>,<br>&gt;&gt;        <span class="hljs-number">1.66811158e-01</span>, <span class="hljs-number">1.30669013e-04</span>, <span class="hljs-number">1.75998132e-03</span>, <span class="hljs-number">2.97170208e-03</span>])<br>extra_attribs = [<span class="hljs-string">&quot;rooms_per_hhold&quot;</span>, <span class="hljs-string">&quot;pop_per_hhold&quot;</span>, <span class="hljs-string">&quot;bedrooms_per_room&quot;</span>]<br>cat_encoder = full_pipeline.named_transformers_[<span class="hljs-string">&quot;cat&quot;</span>]<br>cat_one_hot_attribs = <span class="hljs-built_in">list</span>(cat_encoder.categories_[<span class="hljs-number">0</span>])<br>attributes = num_attribs + extra_attribs + cat_one_hot_attribs<br><span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">zip</span>(feature_importances, attributes), reverse=<span class="hljs-literal">True</span>)<br>&gt;&gt; [(<span class="hljs-number">0.3756280684089266</span>, <span class="hljs-string">&#x27;median_income&#x27;</span>), (<span class="hljs-number">0.16681115793474138</span>, <span class="hljs-string">&#x27;INLAND&#x27;</span>), (<span class="hljs-number">0.11363973729374365</span>, <span class="hljs-string">&#x27;pop_per_hhold&#x27;</span>), (<span class="hljs-number">0.06779246179070629</span>, <span class="hljs-string">&#x27;longitude&#x27;</span>), (<span class="hljs-number">0.06101558267732972</span>, <span class="hljs-string">&#x27;bedrooms_per_room&#x27;</span>), (<span class="hljs-number">0.06076230849002859</span>, <span class="hljs-string">&#x27;latitude&#x27;</span>), (<span class="hljs-number">0.04339939564469106</span>, <span class="hljs-string">&#x27;housing_median_age&#x27;</span>), (<span class="hljs-number">0.04076373758593783</span>, <span class="hljs-string">&#x27;rooms_per_hhold&#x27;</span>), (<span class="hljs-number">0.014990938598037237</span>, <span class="hljs-string">&#x27;total_bedrooms&#x27;</span>), (<span class="hljs-number">0.0147232036472</span>, <span class="hljs-string">&#x27;total_rooms&#x27;</span>), (<span class="hljs-number">0.01443084830180091</span>, <span class="hljs-string">&#x27;population&#x27;</span>), (<span class="hljs-number">0.014421475858182577</span>, <span class="hljs-string">&#x27;households&#x27;</span>), (<span class="hljs-number">0.006758731352675241</span>, <span class="hljs-string">&#x27;&lt;1H OCEAN&#x27;</span>), (<span class="hljs-number">0.002971702084100027</span>, <span class="hljs-string">&#x27;NEAR OCEAN&#x27;</span>), (<span class="hljs-number">0.001759981318404895</span>, <span class="hljs-string">&#x27;NEAR BAY&#x27;</span>), (<span class="hljs-number">0.0001306690134939975</span>, <span class="hljs-string">&#x27;ISLAND&#x27;</span>)]<br></code></pre></td></tr></table></figure><p>通过这个信息，我们就可以将那些不重要的变量丢弃(比如这里的ocean_proximity分类变量中除了INLAND外的其他类别)</p><h3 id="在测试集上评估模型系统"><a href="#在测试集上评估模型系统" class="headerlink" title="在测试集上评估模型系统"></a>在测试集上评估模型系统</h3><p>在测试集上的计算和前面的流程类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">final_model = grid_search.best_estimator_<br><br>X_test = strat_test_set.drop(<span class="hljs-string">&quot;median_house_value&quot;</span>, axis=<span class="hljs-number">1</span>) <br>y_test = strat_test_set[<span class="hljs-string">&quot;median_house_value&quot;</span>].copy()<br><br>X_test_prepared = full_pipeline.transform(X_test)<span class="hljs-comment">##注意，仅仅是transform,使用在训练集上已经&quot;train&quot;的参数来transfrom测试集</span><br>final_predictions = final_model.predict(X_test_prepared)<br><br>final_mse = mean_squared_error(y_test, final_predictions)<br>final_rmse = np.sqrt(final_mse)<br></code></pre></td></tr></table></figure><p>有些时候，这样的点估计不太够，我们可以使用<code>scipy.stats.t.interval()</code>来计算置信区间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>confidence = <span class="hljs-number">0.95</span><br>squared_errors = (final_predictions - y_test) ** <span class="hljs-number">2</span><br><br>np.sqrt(stats.t.interval(confidence, <span class="hljs-built_in">len</span>(squared_errors) - <span class="hljs-number">1</span>,loc=squared_errors.mean(),scale=stats.sem(squared_errors)))<br>&gt;&gt; array([<span class="hljs-number">46303.36875963</span>, <span class="hljs-number">50242.61230504</span>])<br></code></pre></td></tr></table></figure><p>最后就是部署模型了：<br><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210203174058586.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>do.call 用法</title>
    <link href="/2021/01/21/do_call/"/>
    <url>/2021/01/21/do_call/</url>
    
    <content type="html"><![CDATA[<p>do.call函数的用法</p><span id="more"></span><p>do.call从名称或者函数构建和执行函数调用，并且使用list来存放函数的参数，基本用法为：</p><blockquote><p>do.call(what, args, quote = FALSE, envir = parent.frame())</p></blockquote><ul><li><p>  what 是一个函数或者表示函数名称的字符</p></li><li><p>  args 是函数调用的参数，列表形式，列表的names属性就是参数名</p></li><li><p>  quote 逻辑值，表示是否对参数进行捕获</p></li><li><p>  envir 执行调用的环境</p></li></ul><p>如果quote是FALSE，那么参数会被计算(执行的环境是调用环境，而不是envir指定的环境)；如果quote是TRUE，那么每个参数会被捕获(也就是在调用被构建的时候不计算参数,从而使我们可以通过envir调整计算的环境)</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">x1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">10</span>,<span class="hljs-literal">NA</span>)<br><br>do.call(<span class="hljs-built_in">sum</span>,<span class="hljs-built_in">list</span>(x1,na.rm=<span class="hljs-literal">TRUE</span>))<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>do.call函数的文档中有一个从哪里寻找对象的例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs r">A &lt;- 2<br>f &lt;- <span class="hljs-keyword">function</span>(x) print(x^<span class="hljs-number">2</span>)<br>env &lt;- new.env()<br><br>assign(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">10</span>, envir = env)<br>env$A<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">10</span><br><br>assign(<span class="hljs-string">&quot;f&quot;</span>, f, envir = env)<br>env$f<br>&gt;&gt; <span class="hljs-keyword">function</span>(x) print(x^<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">###改变了全局环境中的f，但是env中的f没有变</span><br>f &lt;- <span class="hljs-keyword">function</span>(x) print(x)<br>f<br>&gt;&gt; <span class="hljs-keyword">function</span>(x) print(x)<br>env$f<br>&gt;&gt; <span class="hljs-keyword">function</span>(x) print(x^<span class="hljs-number">2</span>)<br><br>f(A)     <br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br><br>do.call(<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-built_in">list</span>(A))<span class="hljs-comment">##在调用环境(全局环境)中寻找f和A</span><br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br><br>do.call(<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-built_in">list</span>(A), envir = env)<span class="hljs-comment">##在env中找到了f，但是由于参数没有被捕获，所以参数在调用环境(全局环境)中计算  </span><br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">4</span><br><br>do.call(f, <span class="hljs-built_in">list</span>(A), envir = env)<span class="hljs-comment">##在全局中寻找f，但是由于参数没有被捕获，所以参数在调用环境(全局环境)中计算    </span><br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br><br>do.call(<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-built_in">list</span>(<span class="hljs-built_in">quote</span>(A)), envir = env)<span class="hljs-comment">##由于A被捕获所以在env中寻找f和A</span><br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">100</span><br><span class="hljs-comment">##为什么和下面的不一样？</span><br>do.call(<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-built_in">list</span>(A),<span class="hljs-built_in">quote</span> = <span class="hljs-literal">TRUE</span>, envir = env)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">4</span><br><br>do.call(f, <span class="hljs-built_in">list</span>(<span class="hljs-built_in">quote</span>(A)), envir = env)<span class="hljs-comment">#由于A被捕获所以在env中寻找A，但是f并不是语言对象(symbol)，所以在env中找不到   </span><br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">10</span><br><br>do.call(<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-built_in">list</span>(as.name(<span class="hljs-string">&quot;A&quot;</span>)), envir = env)<span class="hljs-comment">##这里面as.name和quote的作用一样,都是获取symbol对象</span><br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dplyr基础</title>
    <link href="/2021/01/20/dplyr_base/"/>
    <url>/2021/01/20/dplyr_base/</url>
    
    <content type="html"><![CDATA[<p>dplyr基础知识</p><span id="more"></span><p>参考： <a href="https://github.com/tidyverse/dplyr/blob/master/vignettes/base.Rmd">dplyrbase</a> <a href="https://github.com/tidyverse/dplyr/blob/master/vignettes/two-table.Rmd">twotable</a></p><p>这篇文章主要比较dplyr函数和base R的区别</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ol><li> dplyr动词输入和输出都是数据框，而base R大部分是单独的向量    </li><li> dplyr依赖非标准计算，所以不需要$来选择变量(列)</li><li> dplyr使用一系列具有单个目的的动词，而在baseR中通常使用[]</li><li> dplyr的动词通常可以通过管道(%&gt;%)连在一起，而baseR中常常需要将中间结果保存为变量</li><li> 所有的dplyr动词都可以处理分组数据并且和处理整个数据框类似，但是在baseR中可能每个组的处理都有着不同的形式</li></ol><h2 id="One-table-verbs"><a href="#One-table-verbs" class="headerlink" title="One table verbs"></a>One table verbs</h2><table><thead><tr><th>dplyr</th><th>base</th></tr></thead><tbody><tr><td><code>arrange(df, x)</code></td><td><code>df[order(x), , drop = FALSE]</code></td></tr><tr><td><code>distinct(df, x)</code></td><td><code>df[!duplicated(x), , drop = FALSE]</code>, <code>unique()</code></td></tr><tr><td><code>filter(df, x)</code></td><td><code>df[which(x), , drop = FALSE]</code>, <code>subset()</code></td></tr><tr><td><code>mutate(df, z = x + y)</code></td><td><code>df$z &lt;- df$x + df$y</code>, <code>transform()</code></td></tr><tr><td><code>pull(df, 1)</code></td><td><code>df[[1]]</code></td></tr><tr><td><code>pull(df, x)</code></td><td><code>df$x</code></td></tr><tr><td><code>rename(df, y = x)</code></td><td><code>names(df)[names(df) == &quot;x&quot;] &lt;- &quot;y&quot;</code></td></tr><tr><td><code>relocate(df, y)</code></td><td><code>df[union(&quot;y&quot;, names(df))]</code></td></tr><tr><td><code>select(df, x, y)</code></td><td><code>df[c(&quot;x&quot;, &quot;y&quot;)]</code>, <code>subset()</code></td></tr><tr><td><code>select(df, starts_with(&quot;x&quot;)</code></td><td><code>df[grepl(names(df), &quot;^x&quot;)]</code></td></tr><tr><td><code>summarise(df, mean(x))</code></td><td><code>mean(df$x)</code>, <code>tapply()</code>, <code>aggregate()</code>, <code>by()</code></td></tr><tr><td><code>slice(df, c(1, 2, 5))</code></td><td><code>df[c(1, 2, 5), , drop = FALSE]</code></td></tr></tbody></table><p>首先载入示例数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r">library(dplyr)<br>&gt;&gt; Warning: package <span class="hljs-string">&#x27;dplyr&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.3<br>&gt;&gt; <br>&gt;&gt; Attaching package: <span class="hljs-string">&#x27;dplyr&#x27;</span><br>&gt;&gt; The following objects are masked from <span class="hljs-string">&#x27;package:stats&#x27;</span>:<br>&gt;&gt; <br>&gt;&gt;     filter, lag<br>&gt;&gt; The following objects are masked from <span class="hljs-string">&#x27;package:base&#x27;</span>:<br>&gt;&gt; <br>&gt;&gt;     intersect, setdiff, setequal, union<br><br>mtcars &lt;- as_tibble(mtcars)<br>iris &lt;- as_tibble(iris)<br></code></pre></td></tr></table></figure><h3 id="arrange-通过变量来组织行"><a href="#arrange-通过变量来组织行" class="headerlink" title="arrange() 通过变量来组织行"></a><code>arrange()</code> 通过变量来组织行</h3><p><code>dplyr::arrange()</code>通过一列或多列的值来对数据框的行进行排序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars %&gt;% arrange(cyl,disp)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 32 x 11</span><br>&gt;&gt;      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb<br>&gt;&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">33.9</span>     <span class="hljs-number">4</span>  <span class="hljs-number">71.1</span>    <span class="hljs-number">65</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">1.84</span>  <span class="hljs-number">19.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">75.7</span>    <span class="hljs-number">52</span>  <span class="hljs-number">4.93</span>  <span class="hljs-number">1.62</span>  <span class="hljs-number">18.5</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">32.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">78.7</span>    <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">2.2</span>   <span class="hljs-number">19.5</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">27.3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">79</span>      <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">1.94</span>  <span class="hljs-number">18.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">95.1</span>   <span class="hljs-number">113</span>  <span class="hljs-number">3.77</span>  <span class="hljs-number">1.51</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span> <span class="hljs-number">108</span>      <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">21.5</span>     <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">97</span>  <span class="hljs-number">3.7</span>   <span class="hljs-number">2.46</span>  <span class="hljs-number">20.0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">26</span>       <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">91</span>  <span class="hljs-number">4.43</span>  <span class="hljs-number">2.14</span>  <span class="hljs-number">16.7</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">4</span> <span class="hljs-number">121</span>     <span class="hljs-number">109</span>  <span class="hljs-number">4.11</span>  <span class="hljs-number">2.78</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span> <span class="hljs-number">141.</span>     <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><p><code>desc()</code>辅助函数可以进行降序排序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars %&gt;% arrange(desc(cyl),desc(disp))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 32 x 11</span><br>&gt;&gt;      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb<br>&gt;&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">472</span>   <span class="hljs-number">205</span>  <span class="hljs-number">2.93</span>  <span class="hljs-number">5.25</span>  <span class="hljs-number">18.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">460</span>   <span class="hljs-number">215</span>  <span class="hljs-number">3</span>     <span class="hljs-number">5.42</span>  <span class="hljs-number">17.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">14.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">440</span>   <span class="hljs-number">230</span>  <span class="hljs-number">3.23</span>  <span class="hljs-number">5.34</span>  <span class="hljs-number">17.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">400</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">8</span>   <span class="hljs-number">351</span>   <span class="hljs-number">264</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">3.17</span>  <span class="hljs-number">14.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">13.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">350</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.73</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">15.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">15.5</span>     <span class="hljs-number">8</span>   <span class="hljs-number">318</span>   <span class="hljs-number">150</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.52</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">15.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">304</span>   <span class="hljs-number">150</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><p>在base R中可以使用[+order函数对行进行排序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars[order(mtcars$cyl,mtcars$disp),,drop= <span class="hljs-literal">FALSE</span>]<br>&gt;&gt; <span class="hljs-comment"># A tibble: 32 x 11</span><br>&gt;&gt;      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb<br>&gt;&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">33.9</span>     <span class="hljs-number">4</span>  <span class="hljs-number">71.1</span>    <span class="hljs-number">65</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">1.84</span>  <span class="hljs-number">19.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">75.7</span>    <span class="hljs-number">52</span>  <span class="hljs-number">4.93</span>  <span class="hljs-number">1.62</span>  <span class="hljs-number">18.5</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">32.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">78.7</span>    <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">2.2</span>   <span class="hljs-number">19.5</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">27.3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">79</span>      <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">1.94</span>  <span class="hljs-number">18.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">95.1</span>   <span class="hljs-number">113</span>  <span class="hljs-number">3.77</span>  <span class="hljs-number">1.51</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span> <span class="hljs-number">108</span>      <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">21.5</span>     <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">97</span>  <span class="hljs-number">3.7</span>   <span class="hljs-number">2.46</span>  <span class="hljs-number">20.0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">26</span>       <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">91</span>  <span class="hljs-number">4.43</span>  <span class="hljs-number">2.14</span>  <span class="hljs-number">16.7</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">4</span> <span class="hljs-number">121</span>     <span class="hljs-number">109</span>  <span class="hljs-number">4.11</span>  <span class="hljs-number">2.78</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span> <span class="hljs-number">141.</span>     <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><p>记得加上drop=<br>FALSE，不然如果输入是只有一列的数据框，输出就是一个向量而不是数据框了：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">dt &lt;- data.frame(<br>  x = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>)<br><br>dt[order(dt$x),]<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>dt[order(dt$x),,drop=<span class="hljs-literal">FALSE</span>]<br>&gt;&gt;   x<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">2</span> <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">3</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>进行倒序排序，base R有两种选择：</p><ul><li><p>  对于数值变量可以加上负号-</p></li><li><p>  在order函数中指定参数decreasing=TRUE</p></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars[order(mtcars$cyl, mtcars$disp, decreasing = <span class="hljs-literal">TRUE</span>), , drop = <span class="hljs-literal">FALSE</span>]<br>&gt;&gt; <span class="hljs-comment"># A tibble: 32 x 11</span><br>&gt;&gt;      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb<br>&gt;&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">472</span>   <span class="hljs-number">205</span>  <span class="hljs-number">2.93</span>  <span class="hljs-number">5.25</span>  <span class="hljs-number">18.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">460</span>   <span class="hljs-number">215</span>  <span class="hljs-number">3</span>     <span class="hljs-number">5.42</span>  <span class="hljs-number">17.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">14.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">440</span>   <span class="hljs-number">230</span>  <span class="hljs-number">3.23</span>  <span class="hljs-number">5.34</span>  <span class="hljs-number">17.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">400</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">8</span>   <span class="hljs-number">351</span>   <span class="hljs-number">264</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">3.17</span>  <span class="hljs-number">14.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">13.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">350</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.73</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">15.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">15.5</span>     <span class="hljs-number">8</span>   <span class="hljs-number">318</span>   <span class="hljs-number">150</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.52</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">15.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">304</span>   <span class="hljs-number">150</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-comment"># ... with 22 more rows</span><br><br><span class="hljs-comment">###or</span><br>mtcars[order(-mtcars$cyl, -mtcars$disp), , drop = <span class="hljs-literal">FALSE</span>]<br>&gt;&gt; <span class="hljs-comment"># A tibble: 32 x 11</span><br>&gt;&gt;      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb<br>&gt;&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">472</span>   <span class="hljs-number">205</span>  <span class="hljs-number">2.93</span>  <span class="hljs-number">5.25</span>  <span class="hljs-number">18.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">10.4</span>     <span class="hljs-number">8</span>   <span class="hljs-number">460</span>   <span class="hljs-number">215</span>  <span class="hljs-number">3</span>     <span class="hljs-number">5.42</span>  <span class="hljs-number">17.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">14.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">440</span>   <span class="hljs-number">230</span>  <span class="hljs-number">3.23</span>  <span class="hljs-number">5.34</span>  <span class="hljs-number">17.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">400</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">360</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">8</span>   <span class="hljs-number">351</span>   <span class="hljs-number">264</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">3.17</span>  <span class="hljs-number">14.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">13.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">350</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.73</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">15.4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">15.5</span>     <span class="hljs-number">8</span>   <span class="hljs-number">318</span>   <span class="hljs-number">150</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.52</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">15.2</span>     <span class="hljs-number">8</span>   <span class="hljs-number">304</span>   <span class="hljs-number">150</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><h3 id="distinct-选择唯一的行"><a href="#distinct-选择唯一的行" class="headerlink" title="distinct():选择唯一的行"></a><code>distinct()</code>:选择唯一的行</h3><p><code>dplyr::distinct()</code>选择唯一的行:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs r">df &lt;- tibble(<br>  x = sample(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-built_in">rep</span> = <span class="hljs-literal">TRUE</span>),<br>  y = sample(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-built_in">rep</span> = <span class="hljs-literal">TRUE</span>)<br>)<br><br>df %&gt;% distinct(x)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 10 x 1</span><br>&gt;&gt;        x<br>&gt;&gt;    &lt;int&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">2</span>    <span class="hljs-number">10</span><br>&gt;&gt;  <span class="hljs-number">3</span>     <span class="hljs-number">3</span><br>&gt;&gt;  <span class="hljs-number">4</span>     <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">5</span>     <span class="hljs-number">7</span><br>&gt;&gt;  <span class="hljs-number">6</span>     <span class="hljs-number">8</span><br>&gt;&gt;  <span class="hljs-number">7</span>     <span class="hljs-number">9</span><br>&gt;&gt;  <span class="hljs-number">8</span>     <span class="hljs-number">5</span><br>&gt;&gt;  <span class="hljs-number">9</span>     <span class="hljs-number">4</span><br>&gt;&gt; <span class="hljs-number">10</span>     <span class="hljs-number">2</span><br><br><span class="hljs-comment">###使用.keep_all保留其他的列</span><br>df %&gt;% distinct(x,.keep_all = <span class="hljs-literal">TRUE</span>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 10 x 2</span><br>&gt;&gt;        x     y<br>&gt;&gt;    &lt;int&gt; &lt;int&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">2</span>    <span class="hljs-number">10</span>     <span class="hljs-number">8</span><br>&gt;&gt;  <span class="hljs-number">3</span>     <span class="hljs-number">3</span>     <span class="hljs-number">3</span><br>&gt;&gt;  <span class="hljs-number">4</span>     <span class="hljs-number">6</span>     <span class="hljs-number">5</span><br>&gt;&gt;  <span class="hljs-number">5</span>     <span class="hljs-number">7</span>     <span class="hljs-number">9</span><br>&gt;&gt;  <span class="hljs-number">6</span>     <span class="hljs-number">8</span>     <span class="hljs-number">5</span><br>&gt;&gt;  <span class="hljs-number">7</span>     <span class="hljs-number">9</span>     <span class="hljs-number">3</span><br>&gt;&gt;  <span class="hljs-number">8</span>     <span class="hljs-number">5</span>     <span class="hljs-number">7</span><br>&gt;&gt;  <span class="hljs-number">9</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span><br>&gt;&gt; <span class="hljs-number">10</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>在base R中基于想要选择的列还是全部的数据框也有两种实现方法：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs r">unique(df[<span class="hljs-string">&quot;x&quot;</span>])<br>&gt;&gt; <span class="hljs-comment"># A tibble: 10 x 1</span><br>&gt;&gt;        x<br>&gt;&gt;    &lt;int&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>&gt;&gt;  <span class="hljs-number">2</span>    <span class="hljs-number">10</span><br>&gt;&gt;  <span class="hljs-number">3</span>     <span class="hljs-number">3</span><br>&gt;&gt;  <span class="hljs-number">4</span>     <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">5</span>     <span class="hljs-number">7</span><br>&gt;&gt;  <span class="hljs-number">6</span>     <span class="hljs-number">8</span><br>&gt;&gt;  <span class="hljs-number">7</span>     <span class="hljs-number">9</span><br>&gt;&gt;  <span class="hljs-number">8</span>     <span class="hljs-number">5</span><br>&gt;&gt;  <span class="hljs-number">9</span>     <span class="hljs-number">4</span><br>&gt;&gt; <span class="hljs-number">10</span>     <span class="hljs-number">2</span><br><br>df[!duplicated(df$x), , drop = <span class="hljs-literal">FALSE</span>]<br>&gt;&gt; <span class="hljs-comment"># A tibble: 10 x 2</span><br>&gt;&gt;        x     y<br>&gt;&gt;    &lt;int&gt; &lt;int&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">2</span>    <span class="hljs-number">10</span>     <span class="hljs-number">8</span><br>&gt;&gt;  <span class="hljs-number">3</span>     <span class="hljs-number">3</span>     <span class="hljs-number">3</span><br>&gt;&gt;  <span class="hljs-number">4</span>     <span class="hljs-number">6</span>     <span class="hljs-number">5</span><br>&gt;&gt;  <span class="hljs-number">5</span>     <span class="hljs-number">7</span>     <span class="hljs-number">9</span><br>&gt;&gt;  <span class="hljs-number">6</span>     <span class="hljs-number">8</span>     <span class="hljs-number">5</span><br>&gt;&gt;  <span class="hljs-number">7</span>     <span class="hljs-number">9</span>     <span class="hljs-number">3</span><br>&gt;&gt;  <span class="hljs-number">8</span>     <span class="hljs-number">5</span>     <span class="hljs-number">7</span><br>&gt;&gt;  <span class="hljs-number">9</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span><br>&gt;&gt; <span class="hljs-number">10</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="filter-返回符合条件的行"><a href="#filter-返回符合条件的行" class="headerlink" title="filter()返回符合条件的行"></a><code>filter()</code>返回符合条件的行</h3><p><code>dplyr::filter()</code> 返回表达式是TRUE的行</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars %&gt;% filter(species == <span class="hljs-string">&quot;Human&quot;</span>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 35 x 14</span><br>&gt;&gt;    name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br>&gt;&gt;    &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;   &lt;lis&gt; &lt;<span class="hljs-built_in">list</span>&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span> Luke~    <span class="hljs-number">172</span>    <span class="hljs-number">77</span> blond      fair       blue            <span class="hljs-number">19</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">2</span>~<br>&gt;&gt;  <span class="hljs-number">2</span> Dart~    <span class="hljs-number">202</span>   <span class="hljs-number">136</span> none       white      yellow          <span class="hljs-number">41.9</span> male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">3</span> Leia~    <span class="hljs-number">150</span>    <span class="hljs-number">49</span> brown      light      brown           <span class="hljs-number">19</span>   fema~ femin~ Alderaan  Human   &lt;chr~ &lt;chr [<span class="hljs-number">1</span>~<br>&gt;&gt;  <span class="hljs-number">4</span> Owen~    <span class="hljs-number">178</span>   <span class="hljs-number">120</span> brown, gr~ light      blue            <span class="hljs-number">52</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">5</span> Beru~    <span class="hljs-number">165</span>    <span class="hljs-number">75</span> brown      light      blue            <span class="hljs-number">47</span>   fema~ femin~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">6</span> Bigg~    <span class="hljs-number">183</span>    <span class="hljs-number">84</span> black      light      brown           <span class="hljs-number">24</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">7</span> Obi-~    <span class="hljs-number">182</span>    <span class="hljs-number">77</span> auburn, w~ fair       blue-gray       <span class="hljs-number">57</span>   male  mascu~ Stewjon   Human   &lt;chr~ &lt;chr [<span class="hljs-number">1</span>~<br>&gt;&gt;  <span class="hljs-number">8</span> Anak~    <span class="hljs-number">188</span>    <span class="hljs-number">84</span> blond      fair       blue            <span class="hljs-number">41.9</span> male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">2</span>~<br>&gt;&gt;  <span class="hljs-number">9</span> Wilh~    <span class="hljs-number">180</span>    <span class="hljs-literal">NA</span> auburn, g~ fair       blue            <span class="hljs-number">64</span>   male  mascu~ Eriadu    Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-number">10</span> Han ~    <span class="hljs-number">180</span>    <span class="hljs-number">80</span> brown      fair       brown           <span class="hljs-number">29</span>   male  mascu~ Corellia  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-comment"># ... with 25 more rows, and 1 more variable: starships &lt;list&gt;</span><br><br>starwars %&gt;% filter(mass &gt; <span class="hljs-number">1000</span>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 1 x 14</span><br>&gt;&gt;   name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br>&gt;&gt;   &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;   &lt;lis&gt; &lt;<span class="hljs-built_in">list</span>&gt;  <br>&gt;&gt; <span class="hljs-number">1</span> Jabb~    <span class="hljs-number">175</span>  <span class="hljs-number">1358</span> &lt;<span class="hljs-literal">NA</span>&gt;       green-<span class="hljs-built_in">tan</span>~ orange           <span class="hljs-number">600</span> herm~ mascu~ Nal Hutta Hutt    &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-comment"># ... with 1 more variable: starships &lt;list&gt;</span><br><br>starwars %&gt;% filter(hair_color == <span class="hljs-string">&quot;none&quot;</span> &amp; eye_color == <span class="hljs-string">&quot;black&quot;</span>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 9 x 14</span><br>&gt;&gt;   name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br>&gt;&gt;   &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;   &lt;lis&gt; &lt;<span class="hljs-built_in">list</span>&gt;  <br>&gt;&gt; <span class="hljs-number">1</span> Nien~    <span class="hljs-number">160</span>    <span class="hljs-number">68</span> none       grey       black             <span class="hljs-literal">NA</span> male  mascu~ Sullust   Sullus~ &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-number">2</span> Gasg~    <span class="hljs-number">122</span>    <span class="hljs-literal">NA</span> none       white, bl~ black             <span class="hljs-literal">NA</span> male  mascu~ Troiken   Xexto   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-number">3</span> Kit ~    <span class="hljs-number">196</span>    <span class="hljs-number">87</span> none       green      black             <span class="hljs-literal">NA</span> male  mascu~ Glee Ans~ Nautol~ &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-number">4</span> Plo ~    <span class="hljs-number">188</span>    <span class="hljs-number">80</span> none       orange     black             <span class="hljs-number">22</span> male  mascu~ Dorin     Kel Dor &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-number">5</span> Lama~    <span class="hljs-number">229</span>    <span class="hljs-number">88</span> none       grey       black             <span class="hljs-literal">NA</span> male  mascu~ Kamino    Kamino~ &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-number">6</span> Taun~    <span class="hljs-number">213</span>    <span class="hljs-literal">NA</span> none       grey       black             <span class="hljs-literal">NA</span> fema~ femin~ Kamino    Kamino~ &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-number">7</span> Shaa~    <span class="hljs-number">178</span>    <span class="hljs-number">57</span> none       red, blue~ black             <span class="hljs-literal">NA</span> fema~ femin~ Shili     Togruta &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-number">8</span> Tion~    <span class="hljs-number">206</span>    <span class="hljs-number">80</span> none       grey       black             <span class="hljs-literal">NA</span> male  mascu~ Utapau    Pau<span class="hljs-string">&#x27;an  &lt;chr~ &lt;chr [0~</span><br><span class="hljs-string">&gt;&gt; 9 BB8       NA    NA none       none       black             NA none  mascu~ &lt;NA&gt;      Droid   &lt;chr~ &lt;chr [0~</span><br><span class="hljs-string">&gt;&gt; # ... with 1 more variable: starships &lt;list&gt;</span><br></code></pre></td></tr></table></figure><p>在baseR中有相似功能的函数是subset</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">subset(starwars, species == <span class="hljs-string">&quot;Human&quot;</span>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 35 x 14</span><br>&gt;&gt;    name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br>&gt;&gt;    &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;   &lt;lis&gt; &lt;<span class="hljs-built_in">list</span>&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span> Luke~    <span class="hljs-number">172</span>    <span class="hljs-number">77</span> blond      fair       blue            <span class="hljs-number">19</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">2</span>~<br>&gt;&gt;  <span class="hljs-number">2</span> Dart~    <span class="hljs-number">202</span>   <span class="hljs-number">136</span> none       white      yellow          <span class="hljs-number">41.9</span> male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">3</span> Leia~    <span class="hljs-number">150</span>    <span class="hljs-number">49</span> brown      light      brown           <span class="hljs-number">19</span>   fema~ femin~ Alderaan  Human   &lt;chr~ &lt;chr [<span class="hljs-number">1</span>~<br>&gt;&gt;  <span class="hljs-number">4</span> Owen~    <span class="hljs-number">178</span>   <span class="hljs-number">120</span> brown, gr~ light      blue            <span class="hljs-number">52</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">5</span> Beru~    <span class="hljs-number">165</span>    <span class="hljs-number">75</span> brown      light      blue            <span class="hljs-number">47</span>   fema~ femin~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">6</span> Bigg~    <span class="hljs-number">183</span>    <span class="hljs-number">84</span> black      light      brown           <span class="hljs-number">24</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">7</span> Obi-~    <span class="hljs-number">182</span>    <span class="hljs-number">77</span> auburn, w~ fair       blue-gray       <span class="hljs-number">57</span>   male  mascu~ Stewjon   Human   &lt;chr~ &lt;chr [<span class="hljs-number">1</span>~<br>&gt;&gt;  <span class="hljs-number">8</span> Anak~    <span class="hljs-number">188</span>    <span class="hljs-number">84</span> blond      fair       blue            <span class="hljs-number">41.9</span> male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">2</span>~<br>&gt;&gt;  <span class="hljs-number">9</span> Wilh~    <span class="hljs-number">180</span>    <span class="hljs-literal">NA</span> auburn, g~ fair       blue            <span class="hljs-number">64</span>   male  mascu~ Eriadu    Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-number">10</span> Han ~    <span class="hljs-number">180</span>    <span class="hljs-number">80</span> brown      fair       brown           <span class="hljs-number">29</span>   male  mascu~ Corellia  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-comment"># ... with 25 more rows, and 1 more variable: starships &lt;list&gt;</span><br></code></pre></td></tr></table></figure><p>也可以使用[来选择行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars[starwars$species == <span class="hljs-string">&quot;Human&quot;</span>,]<br>&gt;&gt; <span class="hljs-comment"># A tibble: 39 x 14</span><br>&gt;&gt;    name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br>&gt;&gt;    &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;   &lt;lis&gt; &lt;<span class="hljs-built_in">list</span>&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span> Luke~    <span class="hljs-number">172</span>    <span class="hljs-number">77</span> blond      fair       blue            <span class="hljs-number">19</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">2</span>~<br>&gt;&gt;  <span class="hljs-number">2</span> Dart~    <span class="hljs-number">202</span>   <span class="hljs-number">136</span> none       white      yellow          <span class="hljs-number">41.9</span> male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">3</span> Leia~    <span class="hljs-number">150</span>    <span class="hljs-number">49</span> brown      light      brown           <span class="hljs-number">19</span>   fema~ femin~ Alderaan  Human   &lt;chr~ &lt;chr [<span class="hljs-number">1</span>~<br>&gt;&gt;  <span class="hljs-number">4</span> Owen~    <span class="hljs-number">178</span>   <span class="hljs-number">120</span> brown, gr~ light      blue            <span class="hljs-number">52</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">5</span> Beru~    <span class="hljs-number">165</span>    <span class="hljs-number">75</span> brown      light      blue            <span class="hljs-number">47</span>   fema~ femin~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">6</span> Bigg~    <span class="hljs-number">183</span>    <span class="hljs-number">84</span> black      light      brown           <span class="hljs-number">24</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">7</span> Obi-~    <span class="hljs-number">182</span>    <span class="hljs-number">77</span> auburn, w~ fair       blue-gray       <span class="hljs-number">57</span>   male  mascu~ Stewjon   Human   &lt;chr~ &lt;chr [<span class="hljs-number">1</span>~<br>&gt;&gt;  <span class="hljs-number">8</span> Anak~    <span class="hljs-number">188</span>    <span class="hljs-number">84</span> blond      fair       blue            <span class="hljs-number">41.9</span> male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">2</span>~<br>&gt;&gt;  <span class="hljs-number">9</span> Wilh~    <span class="hljs-number">180</span>    <span class="hljs-literal">NA</span> auburn, g~ fair       blue            <span class="hljs-number">64</span>   male  mascu~ Eriadu    Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-number">10</span> Han ~    <span class="hljs-number">180</span>    <span class="hljs-number">80</span> brown      fair       brown           <span class="hljs-number">29</span>   male  mascu~ Corellia  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-comment"># ... with 29 more rows, and 1 more variable: starships &lt;list&gt;</span><br></code></pre></td></tr></table></figure><p>但是这样处理会出现NA的情况，为了避免NA，可以结合使用which：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">starwars[which(starwars$species == <span class="hljs-string">&quot;Human&quot;</span>), , drop = <span class="hljs-literal">FALSE</span>]<br>&gt;&gt; <span class="hljs-comment"># A tibble: 35 x 14</span><br>&gt;&gt;    name  height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles<br>&gt;&gt;    &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;   &lt;lis&gt; &lt;<span class="hljs-built_in">list</span>&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span> Luke~    <span class="hljs-number">172</span>    <span class="hljs-number">77</span> blond      fair       blue            <span class="hljs-number">19</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">2</span>~<br>&gt;&gt;  <span class="hljs-number">2</span> Dart~    <span class="hljs-number">202</span>   <span class="hljs-number">136</span> none       white      yellow          <span class="hljs-number">41.9</span> male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">3</span> Leia~    <span class="hljs-number">150</span>    <span class="hljs-number">49</span> brown      light      brown           <span class="hljs-number">19</span>   fema~ femin~ Alderaan  Human   &lt;chr~ &lt;chr [<span class="hljs-number">1</span>~<br>&gt;&gt;  <span class="hljs-number">4</span> Owen~    <span class="hljs-number">178</span>   <span class="hljs-number">120</span> brown, gr~ light      blue            <span class="hljs-number">52</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">5</span> Beru~    <span class="hljs-number">165</span>    <span class="hljs-number">75</span> brown      light      blue            <span class="hljs-number">47</span>   fema~ femin~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">6</span> Bigg~    <span class="hljs-number">183</span>    <span class="hljs-number">84</span> black      light      brown           <span class="hljs-number">24</span>   male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt;  <span class="hljs-number">7</span> Obi-~    <span class="hljs-number">182</span>    <span class="hljs-number">77</span> auburn, w~ fair       blue-gray       <span class="hljs-number">57</span>   male  mascu~ Stewjon   Human   &lt;chr~ &lt;chr [<span class="hljs-number">1</span>~<br>&gt;&gt;  <span class="hljs-number">8</span> Anak~    <span class="hljs-number">188</span>    <span class="hljs-number">84</span> blond      fair       blue            <span class="hljs-number">41.9</span> male  mascu~ Tatooine  Human   &lt;chr~ &lt;chr [<span class="hljs-number">2</span>~<br>&gt;&gt;  <span class="hljs-number">9</span> Wilh~    <span class="hljs-number">180</span>    <span class="hljs-literal">NA</span> auburn, g~ fair       blue            <span class="hljs-number">64</span>   male  mascu~ Eriadu    Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-number">10</span> Han ~    <span class="hljs-number">180</span>    <span class="hljs-number">80</span> brown      fair       brown           <span class="hljs-number">29</span>   male  mascu~ Corellia  Human   &lt;chr~ &lt;chr [<span class="hljs-number">0</span>~<br>&gt;&gt; <span class="hljs-comment"># ... with 25 more rows, and 1 more variable: starships &lt;list&gt;</span><br></code></pre></td></tr></table></figure><h3 id="mutate-创建或转化变量"><a href="#mutate-创建或转化变量" class="headerlink" title="mutate()创建或转化变量"></a><code>mutate()</code>创建或转化变量</h3><p><code>dplyr::mutate</code>从已存在的变量中创建新的变量</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">df %&gt;% mutate(z = x + y, z2 = z ^ <span class="hljs-number">2</span>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 100 x 4</span><br>&gt;&gt;        x     y     z    z2<br>&gt;&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span>     <span class="hljs-number">7</span>    <span class="hljs-number">49</span><br>&gt;&gt;  <span class="hljs-number">2</span>    <span class="hljs-number">10</span>     <span class="hljs-number">8</span>    <span class="hljs-number">18</span>   <span class="hljs-number">324</span><br>&gt;&gt;  <span class="hljs-number">3</span>    <span class="hljs-number">10</span>     <span class="hljs-number">7</span>    <span class="hljs-number">17</span>   <span class="hljs-number">289</span><br>&gt;&gt;  <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">3</span>     <span class="hljs-number">6</span>    <span class="hljs-number">36</span><br>&gt;&gt;  <span class="hljs-number">5</span>     <span class="hljs-number">6</span>     <span class="hljs-number">5</span>    <span class="hljs-number">11</span>   <span class="hljs-number">121</span><br>&gt;&gt;  <span class="hljs-number">6</span>     <span class="hljs-number">7</span>     <span class="hljs-number">9</span>    <span class="hljs-number">16</span>   <span class="hljs-number">256</span><br>&gt;&gt;  <span class="hljs-number">7</span>     <span class="hljs-number">8</span>     <span class="hljs-number">5</span>    <span class="hljs-number">13</span>   <span class="hljs-number">169</span><br>&gt;&gt;  <span class="hljs-number">8</span>     <span class="hljs-number">1</span>     <span class="hljs-number">9</span>    <span class="hljs-number">10</span>   <span class="hljs-number">100</span><br>&gt;&gt;  <span class="hljs-number">9</span>     <span class="hljs-number">6</span>     <span class="hljs-number">8</span>    <span class="hljs-number">14</span>   <span class="hljs-number">196</span><br>&gt;&gt; <span class="hljs-number">10</span>    <span class="hljs-number">10</span>     <span class="hljs-number">7</span>    <span class="hljs-number">17</span>   <span class="hljs-number">289</span><br>&gt;&gt; <span class="hljs-comment"># ... with 90 more rows</span><br></code></pre></td></tr></table></figure><p>在base<br>R里面相似的有transform函数，但是要注意的是transform函数不能使用刚创建的变量，只能使用已有的变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">head(transform(df,z=x+y,z2=z^<span class="hljs-number">2</span>))<br>&gt;&gt; Error <span class="hljs-keyword">in</span> eval(<span class="hljs-built_in">substitute</span>(<span class="hljs-built_in">list</span>(...)), `_data`, parent.frame()): 找不到对象<span class="hljs-string">&#x27;z&#x27;</span><br><br>head(transform(df,z=x+y,z2=(x+y)^<span class="hljs-number">2</span>))<br>&gt;&gt;    x y  z  z2<br>&gt;&gt; <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">49</span><br>&gt;&gt; <span class="hljs-number">2</span> <span class="hljs-number">10</span> <span class="hljs-number">8</span> <span class="hljs-number">18</span> <span class="hljs-number">324</span><br>&gt;&gt; <span class="hljs-number">3</span> <span class="hljs-number">10</span> <span class="hljs-number">7</span> <span class="hljs-number">17</span> <span class="hljs-number">289</span><br>&gt;&gt; <span class="hljs-number">4</span>  <span class="hljs-number">3</span> <span class="hljs-number">3</span>  <span class="hljs-number">6</span>  <span class="hljs-number">36</span><br>&gt;&gt; <span class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">11</span> <span class="hljs-number">121</span><br>&gt;&gt; <span class="hljs-number">6</span>  <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">16</span> <span class="hljs-number">256</span><br></code></pre></td></tr></table></figure><p>也可以使用<code>$&lt;-</code>来创建新的变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars$cy12 &lt;- mtcars$cyl * <span class="hljs-number">2</span><br>mtcars$cy14 &lt;- mtcars$cy12 *<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>当应用到分组的数据框上，mutate可以对每个组别计算新的变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">gf &lt;- tibble(g = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>), x = <span class="hljs-built_in">c</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">2.5</span>, <span class="hljs-number">3.5</span>))<br>gf %&gt;% <br>  group_by(g) %&gt;% <br>  mutate(x_mean = mean(x), x_rank = rank(x))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 4 x 4</span><br>&gt;&gt; <span class="hljs-comment"># Groups:   g [2]</span><br>&gt;&gt;       g     x x_mean x_rank<br>&gt;&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;<br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0.5</span>      <span class="hljs-number">1</span>      <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">2</span>     <span class="hljs-number">1</span>   <span class="hljs-number">1.5</span>      <span class="hljs-number">1</span>      <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">3</span>     <span class="hljs-number">2</span>   <span class="hljs-number">2.5</span>      <span class="hljs-number">3</span>      <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">4</span>     <span class="hljs-number">2</span>   <span class="hljs-number">3.5</span>      <span class="hljs-number">3</span>      <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>在baseR中可以用使用<code>ave</code>函数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">transform(gf, <br>  x_mean = ave(x, g, FUN = mean), <br>  x_rank = ave(x, g, FUN = rank)<br>)<br>&gt;&gt;   g   x x_mean x_rank<br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0.5</span>      <span class="hljs-number">1</span>      <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1.5</span>      <span class="hljs-number">1</span>      <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">2.5</span>      <span class="hljs-number">3</span>      <span class="hljs-number">1</span><br>&gt;&gt; <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">3.5</span>      <span class="hljs-number">3</span>      <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="pull-抽提变量"><a href="#pull-抽提变量" class="headerlink" title="pull() 抽提变量"></a><code>pull()</code> 抽提变量</h3><p><code>dplyr::pull()</code>可以通过名称或者位置提取变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars %&gt;% pull(<span class="hljs-number">1</span>)<br>&gt;&gt;  [<span class="hljs-number">1</span>] <span class="hljs-number">21.0</span> <span class="hljs-number">21.0</span> <span class="hljs-number">22.8</span> <span class="hljs-number">21.4</span> <span class="hljs-number">18.7</span> <span class="hljs-number">18.1</span> <span class="hljs-number">14.3</span> <span class="hljs-number">24.4</span> <span class="hljs-number">22.8</span> <span class="hljs-number">19.2</span> <span class="hljs-number">17.8</span> <span class="hljs-number">16.4</span> <span class="hljs-number">17.3</span> <span class="hljs-number">15.2</span> <span class="hljs-number">10.4</span> <span class="hljs-number">10.4</span> <span class="hljs-number">14.7</span> <span class="hljs-number">32.4</span> <span class="hljs-number">30.4</span> <span class="hljs-number">33.9</span> <span class="hljs-number">21.5</span><br>&gt;&gt; [<span class="hljs-number">22</span>] <span class="hljs-number">15.5</span> <span class="hljs-number">15.2</span> <span class="hljs-number">13.3</span> <span class="hljs-number">19.2</span> <span class="hljs-number">27.3</span> <span class="hljs-number">26.0</span> <span class="hljs-number">30.4</span> <span class="hljs-number">15.8</span> <span class="hljs-number">19.7</span> <span class="hljs-number">15.0</span> <span class="hljs-number">21.4</span><br><br>mtcars %&gt;% pull(cyl)<br>&gt;&gt;  [<span class="hljs-number">1</span>] <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>在base R中相当于[[和$:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars[[<span class="hljs-string">&quot;cyl&quot;</span>]]<br>&gt;&gt;  [<span class="hljs-number">1</span>] <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span><br>mtcars[[<span class="hljs-number">1</span>]]<br>&gt;&gt;  [<span class="hljs-number">1</span>] <span class="hljs-number">21.0</span> <span class="hljs-number">21.0</span> <span class="hljs-number">22.8</span> <span class="hljs-number">21.4</span> <span class="hljs-number">18.7</span> <span class="hljs-number">18.1</span> <span class="hljs-number">14.3</span> <span class="hljs-number">24.4</span> <span class="hljs-number">22.8</span> <span class="hljs-number">19.2</span> <span class="hljs-number">17.8</span> <span class="hljs-number">16.4</span> <span class="hljs-number">17.3</span> <span class="hljs-number">15.2</span> <span class="hljs-number">10.4</span> <span class="hljs-number">10.4</span> <span class="hljs-number">14.7</span> <span class="hljs-number">32.4</span> <span class="hljs-number">30.4</span> <span class="hljs-number">33.9</span> <span class="hljs-number">21.5</span><br>&gt;&gt; [<span class="hljs-number">22</span>] <span class="hljs-number">15.5</span> <span class="hljs-number">15.2</span> <span class="hljs-number">13.3</span> <span class="hljs-number">19.2</span> <span class="hljs-number">27.3</span> <span class="hljs-number">26.0</span> <span class="hljs-number">30.4</span> <span class="hljs-number">15.8</span> <span class="hljs-number">19.7</span> <span class="hljs-number">15.0</span> <span class="hljs-number">21.4</span><br><br>mtcars$cyl<br>&gt;&gt;  [<span class="hljs-number">1</span>] <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="relocate-改变列的顺序"><a href="#relocate-改变列的顺序" class="headerlink" title="relocate() 改变列的顺序"></a><code>relocate()</code> 改变列的顺序</h3><p><code>dplyr::relocate()</code><br>可以方便的将列移到新的位置(默认是最前面,下面要讲的<code>select</code>只能将列移到最前面):</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># to front</span><br>mtcars %&gt;% relocate(gear, carb) <br>&gt;&gt; <span class="hljs-comment"># A tibble: 32 x 13</span><br>&gt;&gt;     gear  carb   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  cy12  cy14<br>&gt;&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.62</span>  <span class="hljs-number">16.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.88</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>  <span class="hljs-number">108</span>     <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt;  <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">6</span>  <span class="hljs-number">258</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.22</span>  <span class="hljs-number">19.4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">5</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>  <span class="hljs-number">360</span>    <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt;  <span class="hljs-number">6</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>  <span class="hljs-number">18.1</span>     <span class="hljs-number">6</span>  <span class="hljs-number">225</span>    <span class="hljs-number">105</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.46</span>  <span class="hljs-number">20.2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">7</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>  <span class="hljs-number">360</span>    <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt;  <span class="hljs-number">8</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>  <span class="hljs-number">24.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">147.</span>    <span class="hljs-number">62</span>  <span class="hljs-number">3.69</span>  <span class="hljs-number">3.19</span>  <span class="hljs-number">20</span>       <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt;  <span class="hljs-number">9</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>  <span class="hljs-number">141.</span>    <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt; <span class="hljs-number">10</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">6</span>  <span class="hljs-number">168.</span>   <span class="hljs-number">123</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">18.3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt; <span class="hljs-comment"># ... with 22 more rows</span><br><br><span class="hljs-comment"># to back</span><br>mtcars %&gt;% relocate(mpg, cyl, .after = last_col()) <br>&gt;&gt; <span class="hljs-comment"># A tibble: 32 x 13</span><br>&gt;&gt;     disp    hp  drat    wt  qsec    vs    am  gear  carb  cy12  cy14   mpg   cyl<br>&gt;&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.62</span>  <span class="hljs-number">16.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.88</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">108</span>     <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">258</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.22</span>  <span class="hljs-number">19.4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">360</span>    <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span><br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">225</span>    <span class="hljs-number">105</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.46</span>  <span class="hljs-number">20.2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">18.1</span>     <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">360</span>    <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span><br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">147.</span>    <span class="hljs-number">62</span>  <span class="hljs-number">3.69</span>  <span class="hljs-number">3.19</span>  <span class="hljs-number">20</span>       <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">24.4</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">141.</span>    <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span><br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">168.</span>   <span class="hljs-number">123</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">18.3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">6</span><br>&gt;&gt; <span class="hljs-comment"># ... with 22 more rows</span><br><br><span class="hljs-comment"># to after disp</span><br>mtcars %&gt;% relocate(mpg, cyl, .after = disp) <br>&gt;&gt; <span class="hljs-comment"># A tibble: 32 x 13</span><br>&gt;&gt;     disp   mpg   cyl    hp  drat    wt  qsec    vs    am  gear  carb  cy12  cy14<br>&gt;&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">160</span>   <span class="hljs-number">21</span>       <span class="hljs-number">6</span>   <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.62</span>  <span class="hljs-number">16.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">160</span>   <span class="hljs-number">21</span>       <span class="hljs-number">6</span>   <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.88</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">108</span>   <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>    <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">258</span>   <span class="hljs-number">21.4</span>     <span class="hljs-number">6</span>   <span class="hljs-number">110</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.22</span>  <span class="hljs-number">19.4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">360</span>   <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>   <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">225</span>   <span class="hljs-number">18.1</span>     <span class="hljs-number">6</span>   <span class="hljs-number">105</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.46</span>  <span class="hljs-number">20.2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">360</span>   <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>   <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">147.</span>  <span class="hljs-number">24.4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">62</span>  <span class="hljs-number">3.69</span>  <span class="hljs-number">3.19</span>  <span class="hljs-number">20</span>       <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">141.</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>    <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">168.</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">6</span>   <span class="hljs-number">123</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">18.3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt; <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><p>在base R中就有一点复杂：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##to front</span><br>mtcars[union(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;gear&quot;</span>, <span class="hljs-string">&quot;carb&quot;</span>), <span class="hljs-built_in">names</span>(mtcars))]<br>&gt;&gt; <span class="hljs-comment"># A tibble: 32 x 13</span><br>&gt;&gt;     gear  carb   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  cy12  cy14<br>&gt;&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.62</span>  <span class="hljs-number">16.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.88</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>  <span class="hljs-number">108</span>     <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt;  <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">6</span>  <span class="hljs-number">258</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.22</span>  <span class="hljs-number">19.4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">5</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span>  <span class="hljs-number">360</span>    <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt;  <span class="hljs-number">6</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>  <span class="hljs-number">18.1</span>     <span class="hljs-number">6</span>  <span class="hljs-number">225</span>    <span class="hljs-number">105</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.46</span>  <span class="hljs-number">20.2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt;  <span class="hljs-number">7</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span>  <span class="hljs-number">360</span>    <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt;  <span class="hljs-number">8</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>  <span class="hljs-number">24.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">147.</span>    <span class="hljs-number">62</span>  <span class="hljs-number">3.69</span>  <span class="hljs-number">3.19</span>  <span class="hljs-number">20</span>       <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt;  <span class="hljs-number">9</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span>  <span class="hljs-number">141.</span>    <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt; <span class="hljs-number">10</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">6</span>  <span class="hljs-number">168.</span>   <span class="hljs-number">123</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">18.3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt; <span class="hljs-comment"># ... with 22 more rows</span><br><br><span class="hljs-comment">###to back</span><br><span class="hljs-comment">##先将要移动的列去掉，再重组到后面</span><br>to_back &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;mpg&quot;</span>, <span class="hljs-string">&quot;cyl&quot;</span>)<br>mtcars[<span class="hljs-built_in">c</span>(setdiff(<span class="hljs-built_in">names</span>(mtcars), to_back), to_back)]<br>&gt;&gt; <span class="hljs-comment"># A tibble: 32 x 13</span><br>&gt;&gt;     disp    hp  drat    wt  qsec    vs    am  gear  carb  cy12  cy14   mpg   cyl<br>&gt;&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.62</span>  <span class="hljs-number">16.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">160</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.9</span>   <span class="hljs-number">2.88</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21</span>       <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">108</span>     <span class="hljs-number">93</span>  <span class="hljs-number">3.85</span>  <span class="hljs-number">2.32</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">258</span>    <span class="hljs-number">110</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.22</span>  <span class="hljs-number">19.4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">360</span>    <span class="hljs-number">175</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">8</span><br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">225</span>    <span class="hljs-number">105</span>  <span class="hljs-number">2.76</span>  <span class="hljs-number">3.46</span>  <span class="hljs-number">20.2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">18.1</span>     <span class="hljs-number">6</span><br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">360</span>    <span class="hljs-number">245</span>  <span class="hljs-number">3.21</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span>  <span class="hljs-number">14.3</span>     <span class="hljs-number">8</span><br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">147.</span>    <span class="hljs-number">62</span>  <span class="hljs-number">3.69</span>  <span class="hljs-number">3.19</span>  <span class="hljs-number">20</span>       <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">24.4</span>     <span class="hljs-number">4</span><br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">141.</span>    <span class="hljs-number">95</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.15</span>  <span class="hljs-number">22.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>  <span class="hljs-number">22.8</span>     <span class="hljs-number">4</span><br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">168.</span>   <span class="hljs-number">123</span>  <span class="hljs-number">3.92</span>  <span class="hljs-number">3.44</span>  <span class="hljs-number">18.3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">4</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">6</span><br>&gt;&gt; <span class="hljs-comment"># ... with 22 more rows</span><br></code></pre></td></tr></table></figure><h3 id="rename-重命名变量"><a href="#rename-重命名变量" class="headerlink" title="rename() 重命名变量"></a><code>rename()</code> 重命名变量</h3><p><code>dplyr::rename()</code>可以通过旧的名称或者位置来重命名变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">iris %&gt;% rename(sepal_length = Sepal.Length, sepal_width = <span class="hljs-number">2</span>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 5</span><br>&gt;&gt;    sepal_length sepal_width Petal.Length Petal.Width Species<br>&gt;&gt;           &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br>&gt;&gt;  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br>&gt;&gt;  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt; <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><p>在base R中根据位置来重命名变量是比较直接的：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">iris2 &lt;- iris<br><span class="hljs-built_in">names</span>(iris2)[<span class="hljs-number">2</span>] &lt;- <span class="hljs-string">&quot;sepal_width&quot;</span><br></code></pre></td></tr></table></figure><p>通过旧的变量名来重命名有一点繁琐：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">names</span>(iris2)[<span class="hljs-built_in">names</span>(iris2) == <span class="hljs-string">&quot;Sepal.Length&quot;</span>] &lt;- <span class="hljs-string">&quot;sepal_length&quot;</span><br></code></pre></td></tr></table></figure><h3 id="rename-with-通过函数来重命名变量"><a href="#rename-with-通过函数来重命名变量" class="headerlink" title="rename_with()通过函数来重命名变量"></a><code>rename_with()</code>通过函数来重命名变量</h3><p><code>dplyr::rename_with()</code>通过函数来转化列名：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs r">iris %&gt;% rename_with(toupper)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 5</span><br>&gt;&gt;    SEPAL.LENGTH SEPAL.WIDTH PETAL.LENGTH PETAL.WIDTH SPECIES<br>&gt;&gt;           &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br>&gt;&gt;  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br>&gt;&gt;  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt; <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">###也可以选择范围，默认是所有列</span><br>rename_with(iris, toupper, starts_with(<span class="hljs-string">&quot;Petal&quot;</span>))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 5</span><br>&gt;&gt;    Sepal.Length Sepal.Width PETAL.LENGTH PETAL.WIDTH Species<br>&gt;&gt;           &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br>&gt;&gt;  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br>&gt;&gt;  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt; <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">###也可以自定义函数</span><br>rename_with(iris, <span class="hljs-keyword">function</span>(x)&#123;<br>  gsub(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;_&quot;</span>,x,fixed = <span class="hljs-literal">TRUE</span>)<br>  &#125;,starts_with(<span class="hljs-string">&quot;Petal&quot;</span>))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 5</span><br>&gt;&gt;    Sepal.Length Sepal.Width Petal_Length Petal_Width Species<br>&gt;&gt;           &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br>&gt;&gt;  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br>&gt;&gt;  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt; <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">###或者公式类型的函数</span><br>rename_with(iris, ~ tolower(gsub(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, .x, fixed = <span class="hljs-literal">TRUE</span>)))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 5</span><br>&gt;&gt;    sepal_length sepal_width petal_length petal_width species<br>&gt;&gt;           &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br>&gt;&gt;  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br>&gt;&gt;  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt; <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><p>在base R中可以使用<code>setNames()</code>来实现：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">setNames(iris, toupper(<span class="hljs-built_in">names</span>(iris)))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 5</span><br>&gt;&gt;    SEPAL.LENGTH SEPAL.WIDTH PETAL.LENGTH PETAL.WIDTH SPECIES<br>&gt;&gt;           &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span> setosa <br>&gt;&gt;  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span> setosa <br>&gt;&gt;  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt;  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt; <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span> setosa <br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><h3 id="select-通过列名选择变量"><a href="#select-通过列名选择变量" class="headerlink" title="select()通过列名选择变量"></a><code>select()</code>通过列名选择变量</h3><p><code>dplyr::select()</code>根据列名，位置，和列名相关的函数或者其他特征来选择列：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###位置</span><br>iris %&gt;% select(<span class="hljs-number">1</span>:<span class="hljs-number">3</span>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 3</span><br>&gt;&gt;    Sepal.Length Sepal.Width Petal.Length<br>&gt;&gt;           &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span><br>&gt;&gt;  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span><br>&gt;&gt;  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span><br>&gt;&gt;  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span><br>&gt;&gt;  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span><br>&gt;&gt;  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span><br>&gt;&gt;  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span><br>&gt;&gt;  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span><br>&gt;&gt;  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span><br>&gt;&gt; <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span><br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">##列名</span><br>iris %&gt;% select(Species, Sepal.Length)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 2</span><br>&gt;&gt;    Species Sepal.Length<br>&gt;&gt;    &lt;fct&gt;          &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span> setosa           <span class="hljs-number">5.1</span><br>&gt;&gt;  <span class="hljs-number">2</span> setosa           <span class="hljs-number">4.9</span><br>&gt;&gt;  <span class="hljs-number">3</span> setosa           <span class="hljs-number">4.7</span><br>&gt;&gt;  <span class="hljs-number">4</span> setosa           <span class="hljs-number">4.6</span><br>&gt;&gt;  <span class="hljs-number">5</span> setosa           <span class="hljs-number">5</span>  <br>&gt;&gt;  <span class="hljs-number">6</span> setosa           <span class="hljs-number">5.4</span><br>&gt;&gt;  <span class="hljs-number">7</span> setosa           <span class="hljs-number">4.6</span><br>&gt;&gt;  <span class="hljs-number">8</span> setosa           <span class="hljs-number">5</span>  <br>&gt;&gt;  <span class="hljs-number">9</span> setosa           <span class="hljs-number">4.4</span><br>&gt;&gt; <span class="hljs-number">10</span> setosa           <span class="hljs-number">4.9</span><br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">##函数</span><br>iris %&gt;% select(starts_with(<span class="hljs-string">&quot;Petal&quot;</span>))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 2</span><br>&gt;&gt;    Petal.Length Petal.Width<br>&gt;&gt;           &lt;dbl&gt;       &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">2</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">3</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">6</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span><br>&gt;&gt;  <span class="hljs-number">7</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span><br>&gt;&gt;  <span class="hljs-number">8</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br>&gt;&gt; <span class="hljs-number">10</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span><br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br>iris %&gt;% select(where(is.factor))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 1</span><br>&gt;&gt;    Species<br>&gt;&gt;    &lt;fct&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span> setosa <br>&gt;&gt;  <span class="hljs-number">2</span> setosa <br>&gt;&gt;  <span class="hljs-number">3</span> setosa <br>&gt;&gt;  <span class="hljs-number">4</span> setosa <br>&gt;&gt;  <span class="hljs-number">5</span> setosa <br>&gt;&gt;  <span class="hljs-number">6</span> setosa <br>&gt;&gt;  <span class="hljs-number">7</span> setosa <br>&gt;&gt;  <span class="hljs-number">8</span> setosa <br>&gt;&gt;  <span class="hljs-number">9</span> setosa <br>&gt;&gt; <span class="hljs-number">10</span> setosa <br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><p>在base R中通过位置选择变量是比较直接的:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r">iris[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<span class="hljs-comment">##单个参数是取列的</span><br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 3</span><br>&gt;&gt;    Sepal.Length Sepal.Width Petal.Length<br>&gt;&gt;           &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span><br>&gt;&gt;  <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span><br>&gt;&gt;  <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span><br>&gt;&gt;  <span class="hljs-number">4</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span><br>&gt;&gt;  <span class="hljs-number">5</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.6</span>          <span class="hljs-number">1.4</span><br>&gt;&gt;  <span class="hljs-number">6</span>          <span class="hljs-number">5.4</span>         <span class="hljs-number">3.9</span>          <span class="hljs-number">1.7</span><br>&gt;&gt;  <span class="hljs-number">7</span>          <span class="hljs-number">4.6</span>         <span class="hljs-number">3.4</span>          <span class="hljs-number">1.4</span><br>&gt;&gt;  <span class="hljs-number">8</span>          <span class="hljs-number">5</span>           <span class="hljs-number">3.4</span>          <span class="hljs-number">1.5</span><br>&gt;&gt;  <span class="hljs-number">9</span>          <span class="hljs-number">4.4</span>         <span class="hljs-number">2.9</span>          <span class="hljs-number">1.4</span><br>&gt;&gt; <span class="hljs-number">10</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3.1</span>          <span class="hljs-number">1.5</span><br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br><br>iris[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>, , drop = <span class="hljs-literal">FALSE</span>]<span class="hljs-comment">##也可以加多个参数，第二个参数是列</span><br>&gt;&gt; <span class="hljs-comment"># A tibble: 3 x 5</span><br>&gt;&gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species<br>&gt;&gt;          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  <br>&gt;&gt; <span class="hljs-number">1</span>          <span class="hljs-number">5.1</span>         <span class="hljs-number">3.5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt; <span class="hljs-number">2</span>          <span class="hljs-number">4.9</span>         <span class="hljs-number">3</span>            <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span> setosa <br>&gt;&gt; <span class="hljs-number">3</span>          <span class="hljs-number">4.7</span>         <span class="hljs-number">3.2</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span> setosa<br></code></pre></td></tr></table></figure><p>按照名称选择列可以有两种选择：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###直接按照字符向量选择</span><br>iris[<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Species&quot;</span>, <span class="hljs-string">&quot;Sepal.Length&quot;</span>)]<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 2</span><br>&gt;&gt;    Species Sepal.Length<br>&gt;&gt;    &lt;fct&gt;          &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span> setosa           <span class="hljs-number">5.1</span><br>&gt;&gt;  <span class="hljs-number">2</span> setosa           <span class="hljs-number">4.9</span><br>&gt;&gt;  <span class="hljs-number">3</span> setosa           <span class="hljs-number">4.7</span><br>&gt;&gt;  <span class="hljs-number">4</span> setosa           <span class="hljs-number">4.6</span><br>&gt;&gt;  <span class="hljs-number">5</span> setosa           <span class="hljs-number">5</span>  <br>&gt;&gt;  <span class="hljs-number">6</span> setosa           <span class="hljs-number">5.4</span><br>&gt;&gt;  <span class="hljs-number">7</span> setosa           <span class="hljs-number">4.6</span><br>&gt;&gt;  <span class="hljs-number">8</span> setosa           <span class="hljs-number">5</span>  <br>&gt;&gt;  <span class="hljs-number">9</span> setosa           <span class="hljs-number">4.4</span><br>&gt;&gt; <span class="hljs-number">10</span> setosa           <span class="hljs-number">4.9</span><br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br><br><span class="hljs-comment">###使用subset函数，subset使用了和dplyr相同的机制(元编程)</span><br>subset(iris, select = <span class="hljs-built_in">c</span>(Species, Sepal.Length))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 2</span><br>&gt;&gt;    Species Sepal.Length<br>&gt;&gt;    &lt;fct&gt;          &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span> setosa           <span class="hljs-number">5.1</span><br>&gt;&gt;  <span class="hljs-number">2</span> setosa           <span class="hljs-number">4.9</span><br>&gt;&gt;  <span class="hljs-number">3</span> setosa           <span class="hljs-number">4.7</span><br>&gt;&gt;  <span class="hljs-number">4</span> setosa           <span class="hljs-number">4.6</span><br>&gt;&gt;  <span class="hljs-number">5</span> setosa           <span class="hljs-number">5</span>  <br>&gt;&gt;  <span class="hljs-number">6</span> setosa           <span class="hljs-number">5.4</span><br>&gt;&gt;  <span class="hljs-number">7</span> setosa           <span class="hljs-number">4.6</span><br>&gt;&gt;  <span class="hljs-number">8</span> setosa           <span class="hljs-number">5</span>  <br>&gt;&gt;  <span class="hljs-number">9</span> setosa           <span class="hljs-number">4.4</span><br>&gt;&gt; <span class="hljs-number">10</span> setosa           <span class="hljs-number">4.9</span><br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><p>通过名称的函数来选择列，可以使用<code>grep</code>函数来匹配：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">iris[grep(<span class="hljs-string">&quot;^Petal&quot;</span>, <span class="hljs-built_in">names</span>(iris))]<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 2</span><br>&gt;&gt;    Petal.Length Petal.Width<br>&gt;&gt;           &lt;dbl&gt;       &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">2</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">3</span>          <span class="hljs-number">1.3</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">4</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">5</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">6</span>          <span class="hljs-number">1.7</span>         <span class="hljs-number">0.4</span><br>&gt;&gt;  <span class="hljs-number">7</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.3</span><br>&gt;&gt;  <span class="hljs-number">8</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.2</span><br>&gt;&gt;  <span class="hljs-number">9</span>          <span class="hljs-number">1.4</span>         <span class="hljs-number">0.2</span><br>&gt;&gt; <span class="hljs-number">10</span>          <span class="hljs-number">1.5</span>         <span class="hljs-number">0.1</span><br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><p>也可以通过Filter函数根据变量的类型来选择列：Filter是高阶函数，接受别的函数作为参数，高阶函数的内容见<a href="https://wutaoblog.com.cn/p/meta_r_prom/">review</a></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###</span><br>Filter(is.factor,iris)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 150 x 1</span><br>&gt;&gt;    Species<br>&gt;&gt;    &lt;fct&gt;  <br>&gt;&gt;  <span class="hljs-number">1</span> setosa <br>&gt;&gt;  <span class="hljs-number">2</span> setosa <br>&gt;&gt;  <span class="hljs-number">3</span> setosa <br>&gt;&gt;  <span class="hljs-number">4</span> setosa <br>&gt;&gt;  <span class="hljs-number">5</span> setosa <br>&gt;&gt;  <span class="hljs-number">6</span> setosa <br>&gt;&gt;  <span class="hljs-number">7</span> setosa <br>&gt;&gt;  <span class="hljs-number">8</span> setosa <br>&gt;&gt;  <span class="hljs-number">9</span> setosa <br>&gt;&gt; <span class="hljs-number">10</span> setosa <br>&gt;&gt; <span class="hljs-comment"># ... with 140 more rows</span><br></code></pre></td></tr></table></figure><h3 id="summarise-将多个值汇总成单个值"><a href="#summarise-将多个值汇总成单个值" class="headerlink" title="summarise()将多个值汇总成单个值"></a><code>summarise()</code>将多个值汇总成单个值</h3><p><code>dplyr::summarise</code> 计算每个组别的汇总信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars %&gt;% <br>  group_by(cyl) %&gt;% <br>  summarise(mean = mean(disp), n = n())<br>&gt;&gt; `summarise()` ungrouping output (override with `.groups` argument)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 3 x 3</span><br>&gt;&gt;     cyl  mean     n<br>&gt;&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;<br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">4</span>  <span class="hljs-number">105.</span>    <span class="hljs-number">11</span><br>&gt;&gt; <span class="hljs-number">2</span>     <span class="hljs-number">6</span>  <span class="hljs-number">183.</span>     <span class="hljs-number">7</span><br>&gt;&gt; <span class="hljs-number">3</span>     <span class="hljs-number">8</span>  <span class="hljs-number">353.</span>    <span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><p>在base R里面比较相似的是by函数，但是by函数返回的是list：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###先来看一下by函数的用法</span><br><span class="hljs-comment">##by(data, data$byvar, FUN)</span><br><span class="hljs-comment">##data是数据，data$byvar是分组依据，fun是函数</span><br><br><br>mtcars_by &lt;- by(mtcars, mtcars$cyl, <span class="hljs-keyword">function</span>(df) &#123;<br>  with(df, data.frame(cyl = cyl[[<span class="hljs-number">1</span>]], mean = mean(disp), n = nrow(df)))<br>&#125;)<br>mtcars_by<br>&gt;&gt; mtcars$cyl: <span class="hljs-number">4</span><br>&gt;&gt;   cyl     mean  n<br>&gt;&gt; <span class="hljs-number">1</span>   <span class="hljs-number">4</span> <span class="hljs-number">105.1364</span> <span class="hljs-number">11</span><br>&gt;&gt; ------------------------------------------------------------------------------------ <br>&gt;&gt; mtcars$cyl: <span class="hljs-number">6</span><br>&gt;&gt;   cyl     mean n<br>&gt;&gt; <span class="hljs-number">1</span>   <span class="hljs-number">6</span> <span class="hljs-number">183.3143</span> <span class="hljs-number">7</span><br>&gt;&gt; ------------------------------------------------------------------------------------ <br>&gt;&gt; mtcars$cyl: <span class="hljs-number">8</span><br>&gt;&gt;   cyl  mean  n<br>&gt;&gt; <span class="hljs-number">1</span>   <span class="hljs-number">8</span> <span class="hljs-number">353.1</span> <span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><p>我们可以使用<a href="">do.call函数</a>来将这个列表合并成数据框：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">do.call(rbind,mtcars_by)<br>&gt;&gt;   cyl     mean  n<br>&gt;&gt; <span class="hljs-number">4</span>   <span class="hljs-number">4</span> <span class="hljs-number">105.1364</span> <span class="hljs-number">11</span><br>&gt;&gt; <span class="hljs-number">6</span>   <span class="hljs-number">6</span> <span class="hljs-number">183.3143</span>  <span class="hljs-number">7</span><br>&gt;&gt; <span class="hljs-number">8</span>   <span class="hljs-number">8</span> <span class="hljs-number">353.1000</span> <span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><h3 id="slice-根据位置选择行"><a href="#slice-根据位置选择行" class="headerlink" title="slice() 根据位置选择行"></a><code>slice()</code> 根据位置选择行</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###n表示行数</span><br>slice(mtcars, <span class="hljs-number">25</span>:n())<br>&gt;&gt; <span class="hljs-comment"># A tibble: 8 x 13</span><br>&gt;&gt;     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb  cy12  cy14<br>&gt;&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt; <span class="hljs-number">1</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">8</span> <span class="hljs-number">400</span>     <span class="hljs-number">175</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt; <span class="hljs-number">2</span>  <span class="hljs-number">27.3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">79</span>      <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">1.94</span>  <span class="hljs-number">18.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt; <span class="hljs-number">3</span>  <span class="hljs-number">26</span>       <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">91</span>  <span class="hljs-number">4.43</span>  <span class="hljs-number">2.14</span>  <span class="hljs-number">16.7</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt; <span class="hljs-number">4</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">95.1</span>   <span class="hljs-number">113</span>  <span class="hljs-number">3.77</span>  <span class="hljs-number">1.51</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt; <span class="hljs-number">5</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">8</span> <span class="hljs-number">351</span>     <span class="hljs-number">264</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">3.17</span>  <span class="hljs-number">14.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt; <span class="hljs-number">6</span>  <span class="hljs-number">19.7</span>     <span class="hljs-number">6</span> <span class="hljs-number">145</span>     <span class="hljs-number">175</span>  <span class="hljs-number">3.62</span>  <span class="hljs-number">2.77</span>  <span class="hljs-number">15.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt; <span class="hljs-number">7</span>  <span class="hljs-number">15</span>       <span class="hljs-number">8</span> <span class="hljs-number">301</span>     <span class="hljs-number">335</span>  <span class="hljs-number">3.54</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">14.6</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt; <span class="hljs-number">8</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">4</span> <span class="hljs-number">121</span>     <span class="hljs-number">109</span>  <span class="hljs-number">4.11</span>  <span class="hljs-number">2.78</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>在base R中可以直接使用[来选取：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">mtcars[<span class="hljs-number">25</span>:nrow(mtcars), , drop = <span class="hljs-literal">FALSE</span>]<br>&gt;&gt; <span class="hljs-comment"># A tibble: 8 x 13</span><br>&gt;&gt;     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb  cy12  cy14<br>&gt;&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;<br>&gt;&gt; <span class="hljs-number">1</span>  <span class="hljs-number">19.2</span>     <span class="hljs-number">8</span> <span class="hljs-number">400</span>     <span class="hljs-number">175</span>  <span class="hljs-number">3.08</span>  <span class="hljs-number">3.84</span>  <span class="hljs-number">17.0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt; <span class="hljs-number">2</span>  <span class="hljs-number">27.3</span>     <span class="hljs-number">4</span>  <span class="hljs-number">79</span>      <span class="hljs-number">66</span>  <span class="hljs-number">4.08</span>  <span class="hljs-number">1.94</span>  <span class="hljs-number">18.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt; <span class="hljs-number">3</span>  <span class="hljs-number">26</span>       <span class="hljs-number">4</span> <span class="hljs-number">120.</span>     <span class="hljs-number">91</span>  <span class="hljs-number">4.43</span>  <span class="hljs-number">2.14</span>  <span class="hljs-number">16.7</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt; <span class="hljs-number">4</span>  <span class="hljs-number">30.4</span>     <span class="hljs-number">4</span>  <span class="hljs-number">95.1</span>   <span class="hljs-number">113</span>  <span class="hljs-number">3.77</span>  <span class="hljs-number">1.51</span>  <span class="hljs-number">16.9</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br>&gt;&gt; <span class="hljs-number">5</span>  <span class="hljs-number">15.8</span>     <span class="hljs-number">8</span> <span class="hljs-number">351</span>     <span class="hljs-number">264</span>  <span class="hljs-number">4.22</span>  <span class="hljs-number">3.17</span>  <span class="hljs-number">14.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt; <span class="hljs-number">6</span>  <span class="hljs-number">19.7</span>     <span class="hljs-number">6</span> <span class="hljs-number">145</span>     <span class="hljs-number">175</span>  <span class="hljs-number">3.62</span>  <span class="hljs-number">2.77</span>  <span class="hljs-number">15.5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span>    <span class="hljs-number">12</span>    <span class="hljs-number">24</span><br>&gt;&gt; <span class="hljs-number">7</span>  <span class="hljs-number">15</span>       <span class="hljs-number">8</span> <span class="hljs-number">301</span>     <span class="hljs-number">335</span>  <span class="hljs-number">3.54</span>  <span class="hljs-number">3.57</span>  <span class="hljs-number">14.6</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span>    <span class="hljs-number">32</span><br>&gt;&gt; <span class="hljs-number">8</span>  <span class="hljs-number">21.4</span>     <span class="hljs-number">4</span> <span class="hljs-number">121</span>     <span class="hljs-number">109</span>  <span class="hljs-number">4.11</span>  <span class="hljs-number">2.78</span>  <span class="hljs-number">18.6</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">8</span>    <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h2 id="Two-table-verbs"><a href="#Two-table-verbs" class="headerlink" title="Two-table verbs"></a>Two-table verbs</h2><p>增加：<a href="https://github.com/tidyverse/dplyr/blob/master/vignettes/two-table.Rmd">two-table</a></p><p>two-table<br>verbs指的是合并两个数据框的操作，在dplyr中使用*_join操作代替base<br>R中的各种merge操作：</p><table><thead><tr><th>dplyr</th><th>base</th></tr></thead><tbody><tr><td><code>inner_join(df1, df2)</code></td><td><code>merge(df1, df2)</code></td></tr><tr><td><code>left_join(df1, df2)</code></td><td><code>merge(df1, df2, all.x = TRUE)</code></td></tr><tr><td><code>right_join(df1, df2)</code></td><td><code>merge(df1, df2, all.y = TRUE)</code></td></tr><tr><td><code>full_join(df1, df2)</code></td><td><code>merge(df1, df2, all = TRUE)</code></td></tr><tr><td><code>semi_join(df1, df2)</code></td><td><code>df1[df1$x %in% df2$x, , drop = FALSE]</code></td></tr><tr><td><code>anti_join(df1, df2)</code></td><td><code>df1[!df1$x %in% df2$x, , drop = FALSE]</code></td></tr></tbody></table><p>在dplyr中有3类动词可以同时对两个table进行操作：</p><ul><li><p>  Mutating join 根据匹配的行来添加变量</p></li><li><p>  Filtering joins 根据匹配的行来筛选变量</p></li><li><p>  Set operations 将数据集的行作为集合的元素来操作</p></li></ul><h3 id="Mutating-joins"><a href="#Mutating-joins" class="headerlink" title="Mutating joins"></a>Mutating joins</h3><p>Mutating<br>join可以将两个table的变量结合到一起；比如在nycflights13数据中一个table有航班信息，并且每个航班有相应的航空公司的缩写，另一个table有航空公司的缩写和全称的对应信息，我们可以将这两个table合并：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs r">library(<span class="hljs-string">&quot;nycflights13&quot;</span>)<br>&gt;&gt; Warning: package <span class="hljs-string">&#x27;nycflights13&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.3<br><br>flights2 &lt;- flights %&gt;% select(year:day, hour, origin, dest, tailnum, carrier)<br><br>flights2 %&gt;% <br>  left_join(airlines)<br>&gt;&gt; Joining, by = <span class="hljs-string">&quot;carrier&quot;</span><br>&gt;&gt; <span class="hljs-comment"># A tibble: 336,776 x 9</span><br>&gt;&gt;     year month   day  hour origin dest  tailnum carrier name                    <br>&gt;&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                   <br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    IAH   N14228  UA      United Air Lines Inc.   <br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> LGA    IAH   N24211  UA      United Air Lines Inc.   <br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    MIA   N619AA  AA      American Airlines Inc.  <br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    BQN   N804JB  B6      JetBlue Airways         <br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ATL   N668DN  DL      Delta Air Lines Inc.    <br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    ORD   N39463  UA      United Air Lines Inc.   <br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> EWR    FLL   N516JB  B6      JetBlue Airways         <br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    IAD   N829AS  EV      ExpressJet Airlines Inc.<br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> JFK    MCO   N593JB  B6      JetBlue Airways         <br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ORD   N3ALAA  AA      American Airlines Inc.  <br>&gt;&gt; <span class="hljs-comment"># ... with 336,766 more rows</span><br></code></pre></td></tr></table></figure><h4 id="控制table如何匹配"><a href="#控制table如何匹配" class="headerlink" title="控制table如何匹配"></a>控制table如何匹配</h4><p>每一个Mutating join函数都有一个by参数，控制哪个变量被用来进行匹配</p><ul><li><p><code>NULL</code><br>  默认值，使用两个table中共有的变量，比如flights和weather两个表的共有列为year,<br>  month, day, hour 和origin</p>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">flights2 %&gt;% left_join(weather)<br>&gt;&gt; Joining, by = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;year&quot;</span>, <span class="hljs-string">&quot;month&quot;</span>, <span class="hljs-string">&quot;day&quot;</span>, <span class="hljs-string">&quot;hour&quot;</span>, <span class="hljs-string">&quot;origin&quot;</span>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 336,776 x 18</span><br>&gt;&gt;     year month   day  hour origin dest  tailnum carrier  temp  dewp humid wind_dir wind_speed wind_gust precip<br>&gt;&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    IAH   N14228  UA       <span class="hljs-number">39.0</span>  <span class="hljs-number">28.0</span>  <span class="hljs-number">64.4</span>      <span class="hljs-number">260</span>       <span class="hljs-number">12.7</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> LGA    IAH   N24211  UA       <span class="hljs-number">39.9</span>  <span class="hljs-number">25.0</span>  <span class="hljs-number">54.8</span>      <span class="hljs-number">250</span>       <span class="hljs-number">15.0</span>      <span class="hljs-number">21.9</span>      <span class="hljs-number">0</span><br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    MIA   N619AA  AA       <span class="hljs-number">39.0</span>  <span class="hljs-number">27.0</span>  <span class="hljs-number">61.6</span>      <span class="hljs-number">260</span>       <span class="hljs-number">15.0</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    BQN   N804JB  B6       <span class="hljs-number">39.0</span>  <span class="hljs-number">27.0</span>  <span class="hljs-number">61.6</span>      <span class="hljs-number">260</span>       <span class="hljs-number">15.0</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ATL   N668DN  DL       <span class="hljs-number">39.9</span>  <span class="hljs-number">25.0</span>  <span class="hljs-number">54.8</span>      <span class="hljs-number">260</span>       <span class="hljs-number">16.1</span>      <span class="hljs-number">23.0</span>      <span class="hljs-number">0</span><br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    ORD   N39463  UA       <span class="hljs-number">39.0</span>  <span class="hljs-number">28.0</span>  <span class="hljs-number">64.4</span>      <span class="hljs-number">260</span>       <span class="hljs-number">12.7</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> EWR    FLL   N516JB  B6       <span class="hljs-number">37.9</span>  <span class="hljs-number">28.0</span>  <span class="hljs-number">67.2</span>      <span class="hljs-number">240</span>       <span class="hljs-number">11.5</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    IAD   N829AS  EV       <span class="hljs-number">39.9</span>  <span class="hljs-number">25.0</span>  <span class="hljs-number">54.8</span>      <span class="hljs-number">260</span>       <span class="hljs-number">16.1</span>      <span class="hljs-number">23.0</span>      <span class="hljs-number">0</span><br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> JFK    MCO   N593JB  B6       <span class="hljs-number">37.9</span>  <span class="hljs-number">27.0</span>  <span class="hljs-number">64.3</span>      <span class="hljs-number">260</span>       <span class="hljs-number">13.8</span>      <span class="hljs-literal">NA</span>        <span class="hljs-number">0</span><br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ORD   N3ALAA  AA       <span class="hljs-number">39.9</span>  <span class="hljs-number">25.0</span>  <span class="hljs-number">54.8</span>      <span class="hljs-number">260</span>       <span class="hljs-number">16.1</span>      <span class="hljs-number">23.0</span>      <span class="hljs-number">0</span><br>&gt;&gt; <span class="hljs-comment"># ... with 336,766 more rows, and 3 more variables: pressure &lt;dbl&gt;, visib &lt;dbl&gt;, time_hour &lt;dttm&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>字符向量，<code>by=&quot;x&quot;</code> 使用指定的变量进行匹配</p>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r">flights2 %&gt;% left_join(planes, by = <span class="hljs-string">&quot;tailnum&quot;</span>)<br>&gt;&gt; <span class="hljs-comment"># A tibble: 336,776 x 16</span><br>&gt;&gt;    year.x month   day  hour origin dest  tailnum carrier year.y type  manufacturer model engines seats speed<br>&gt;&gt;     &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt;<br>&gt;&gt;  <span class="hljs-number">1</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    IAH   N14228  UA        <span class="hljs-number">1999</span> Fixe~ BOEING       <span class="hljs-number">737</span>-~       <span class="hljs-number">2</span>   <span class="hljs-number">149</span>    <span class="hljs-literal">NA</span><br>&gt;&gt;  <span class="hljs-number">2</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> LGA    IAH   N24211  UA        <span class="hljs-number">1998</span> Fixe~ BOEING       <span class="hljs-number">737</span>-~       <span class="hljs-number">2</span>   <span class="hljs-number">149</span>    <span class="hljs-literal">NA</span><br>&gt;&gt;  <span class="hljs-number">3</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    MIA   N619AA  AA        <span class="hljs-number">1990</span> Fixe~ BOEING       <span class="hljs-number">757</span>-~       <span class="hljs-number">2</span>   <span class="hljs-number">178</span>    <span class="hljs-literal">NA</span><br>&gt;&gt;  <span class="hljs-number">4</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    BQN   N804JB  B6        <span class="hljs-number">2012</span> Fixe~ AIRBUS       A320~       <span class="hljs-number">2</span>   <span class="hljs-number">200</span>    <span class="hljs-literal">NA</span><br>&gt;&gt;  <span class="hljs-number">5</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ATL   N668DN  DL        <span class="hljs-number">1991</span> Fixe~ BOEING       <span class="hljs-number">757</span>-~       <span class="hljs-number">2</span>   <span class="hljs-number">178</span>    <span class="hljs-literal">NA</span><br>&gt;&gt;  <span class="hljs-number">6</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    ORD   N39463  UA        <span class="hljs-number">2012</span> Fixe~ BOEING       <span class="hljs-number">737</span>-~       <span class="hljs-number">2</span>   <span class="hljs-number">191</span>    <span class="hljs-literal">NA</span><br>&gt;&gt;  <span class="hljs-number">7</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> EWR    FLL   N516JB  B6        <span class="hljs-number">2000</span> Fixe~ AIRBUS INDU~ A320~       <span class="hljs-number">2</span>   <span class="hljs-number">200</span>    <span class="hljs-literal">NA</span><br>&gt;&gt;  <span class="hljs-number">8</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    IAD   N829AS  EV        <span class="hljs-number">1998</span> Fixe~ CANADAIR     CL-<span class="hljs-number">6</span>~       <span class="hljs-number">2</span>    <span class="hljs-number">55</span>    <span class="hljs-literal">NA</span><br>&gt;&gt;  <span class="hljs-number">9</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> JFK    MCO   N593JB  B6        <span class="hljs-number">2004</span> Fixe~ AIRBUS       A320~       <span class="hljs-number">2</span>   <span class="hljs-number">200</span>    <span class="hljs-literal">NA</span><br>&gt;&gt; <span class="hljs-number">10</span>   <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ORD   N3ALAA  AA          <span class="hljs-literal">NA</span> &lt;<span class="hljs-literal">NA</span>&gt;  &lt;<span class="hljs-literal">NA</span>&gt;         &lt;<span class="hljs-literal">NA</span>&gt;       <span class="hljs-literal">NA</span>    <span class="hljs-literal">NA</span>    <span class="hljs-literal">NA</span><br>&gt;&gt; <span class="hljs-comment"># ... with 336,766 more rows, and 1 more variable: engine &lt;chr&gt;</span><br><br><span class="hljs-comment">##两个table的其他的共有列会加上后缀</span><br></code></pre></td></tr></table></figure></li><li><p>具名字符向量，<code>by=c(&quot;a&quot;=&quot;b&quot;)</code><br>  将一个table中的a变量与另一个table中的b变量进行匹配(输出中保留a)</p>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs r">flights2 %&gt;% left_join(airports, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;dest&quot;</span> = <span class="hljs-string">&quot;faa&quot;</span>))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 336,776 x 15</span><br>&gt;&gt;     year month   day  hour origin dest  tailnum carrier name                lat   lon   alt    tz dst   tzone    <br>&gt;&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    <br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    IAH   N14228  UA      George Bush Inte~  <span class="hljs-number">30.0</span> -<span class="hljs-number">95.3</span>    <span class="hljs-number">97</span>    -<span class="hljs-number">6</span> A     America/~<br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> LGA    IAH   N24211  UA      George Bush Inte~  <span class="hljs-number">30.0</span> -<span class="hljs-number">95.3</span>    <span class="hljs-number">97</span>    -<span class="hljs-number">6</span> A     America/~<br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    MIA   N619AA  AA      Miami Intl         <span class="hljs-number">25.8</span> -<span class="hljs-number">80.3</span>     <span class="hljs-number">8</span>    -<span class="hljs-number">5</span> A     America/~<br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    BQN   N804JB  B6      &lt;<span class="hljs-literal">NA</span>&gt;               <span class="hljs-literal">NA</span>    <span class="hljs-literal">NA</span>      <span class="hljs-literal">NA</span>    <span class="hljs-literal">NA</span> &lt;<span class="hljs-literal">NA</span>&gt;  &lt;<span class="hljs-literal">NA</span>&gt;     <br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ATL   N668DN  DL      Hartsfield Jacks~  <span class="hljs-number">33.6</span> -<span class="hljs-number">84.4</span>  <span class="hljs-number">1026</span>    -<span class="hljs-number">5</span> A     America/~<br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    ORD   N39463  UA      Chicago Ohare In~  <span class="hljs-number">42.0</span> -<span class="hljs-number">87.9</span>   <span class="hljs-number">668</span>    -<span class="hljs-number">6</span> A     America/~<br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> EWR    FLL   N516JB  B6      Fort Lauderdale ~  <span class="hljs-number">26.1</span> -<span class="hljs-number">80.2</span>     <span class="hljs-number">9</span>    -<span class="hljs-number">5</span> A     America/~<br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    IAD   N829AS  EV      Washington Dulle~  <span class="hljs-number">38.9</span> -<span class="hljs-number">77.5</span>   <span class="hljs-number">313</span>    -<span class="hljs-number">5</span> A     America/~<br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> JFK    MCO   N593JB  B6      Orlando Intl       <span class="hljs-number">28.4</span> -<span class="hljs-number">81.3</span>    <span class="hljs-number">96</span>    -<span class="hljs-number">5</span> A     America/~<br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ORD   N3ALAA  AA      Chicago Ohare In~  <span class="hljs-number">42.0</span> -<span class="hljs-number">87.9</span>   <span class="hljs-number">668</span>    -<span class="hljs-number">6</span> A     America/~<br>&gt;&gt; <span class="hljs-comment"># ... with 336,766 more rows</span><br><br>flights2 %&gt;% left_join(airports, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;origin&quot;</span> = <span class="hljs-string">&quot;faa&quot;</span>))<br>&gt;&gt; <span class="hljs-comment"># A tibble: 336,776 x 15</span><br>&gt;&gt;     year month   day  hour origin dest  tailnum carrier name             lat   lon   alt    tz dst   tzone       <br>&gt;&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;       <br>&gt;&gt;  <span class="hljs-number">1</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    IAH   N14228  UA      Newark Libert~  <span class="hljs-number">40.7</span> -<span class="hljs-number">74.2</span>    <span class="hljs-number">18</span>    -<span class="hljs-number">5</span> A     America/New~<br>&gt;&gt;  <span class="hljs-number">2</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> LGA    IAH   N24211  UA      La Guardia      <span class="hljs-number">40.8</span> -<span class="hljs-number">73.9</span>    <span class="hljs-number">22</span>    -<span class="hljs-number">5</span> A     America/New~<br>&gt;&gt;  <span class="hljs-number">3</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    MIA   N619AA  AA      John <span class="hljs-built_in">F</span> Kenned~  <span class="hljs-number">40.6</span> -<span class="hljs-number">73.8</span>    <span class="hljs-number">13</span>    -<span class="hljs-number">5</span> A     America/New~<br>&gt;&gt;  <span class="hljs-number">4</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> JFK    BQN   N804JB  B6      John <span class="hljs-built_in">F</span> Kenned~  <span class="hljs-number">40.6</span> -<span class="hljs-number">73.8</span>    <span class="hljs-number">13</span>    -<span class="hljs-number">5</span> A     America/New~<br>&gt;&gt;  <span class="hljs-number">5</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ATL   N668DN  DL      La Guardia      <span class="hljs-number">40.8</span> -<span class="hljs-number">73.9</span>    <span class="hljs-number">22</span>    -<span class="hljs-number">5</span> A     America/New~<br>&gt;&gt;  <span class="hljs-number">6</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span> EWR    ORD   N39463  UA      Newark Libert~  <span class="hljs-number">40.7</span> -<span class="hljs-number">74.2</span>    <span class="hljs-number">18</span>    -<span class="hljs-number">5</span> A     America/New~<br>&gt;&gt;  <span class="hljs-number">7</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> EWR    FLL   N516JB  B6      Newark Libert~  <span class="hljs-number">40.7</span> -<span class="hljs-number">74.2</span>    <span class="hljs-number">18</span>    -<span class="hljs-number">5</span> A     America/New~<br>&gt;&gt;  <span class="hljs-number">8</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    IAD   N829AS  EV      La Guardia      <span class="hljs-number">40.8</span> -<span class="hljs-number">73.9</span>    <span class="hljs-number">22</span>    -<span class="hljs-number">5</span> A     America/New~<br>&gt;&gt;  <span class="hljs-number">9</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> JFK    MCO   N593JB  B6      John <span class="hljs-built_in">F</span> Kenned~  <span class="hljs-number">40.6</span> -<span class="hljs-number">73.8</span>    <span class="hljs-number">13</span>    -<span class="hljs-number">5</span> A     America/New~<br>&gt;&gt; <span class="hljs-number">10</span>  <span class="hljs-number">2013</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">6</span> LGA    ORD   N3ALAA  AA      La Guardia      <span class="hljs-number">40.8</span> -<span class="hljs-number">73.9</span>    <span class="hljs-number">22</span>    -<span class="hljs-number">5</span> A     America/New~<br>&gt;&gt; <span class="hljs-comment"># ... with 336,766 more rows</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="匹配的类型"><a href="#匹配的类型" class="headerlink" title="匹配的类型"></a>匹配的类型</h4><p>有4种类型的mutating join，他们的区别在于如何处理找不到匹配的情况</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##示例数据</span><br>df1 &lt;- tibble(x = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), y = <span class="hljs-number">2</span>:<span class="hljs-number">1</span>)<br>df2 &lt;- tibble(x = <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>), a = <span class="hljs-number">10</span>, b = <span class="hljs-string">&quot;a&quot;</span>)<br><br>df1<br>&gt;&gt; <span class="hljs-comment"># A tibble: 2 x 2</span><br>&gt;&gt;       x     y<br>&gt;&gt;   &lt;dbl&gt; &lt;int&gt;<br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span><br><br>df2<br>&gt;&gt; <span class="hljs-comment"># A tibble: 2 x 3</span><br>&gt;&gt;       x     a b    <br>&gt;&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;<br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">3</span>    <span class="hljs-number">10</span> a    <br>&gt;&gt; <span class="hljs-number">2</span>     <span class="hljs-number">1</span>    <span class="hljs-number">10</span> a<br></code></pre></td></tr></table></figure><ul><li><p><code>inner_join(x,y)</code> 只包含x和y中都有的行</p>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">df1 %&gt;% inner_join(df2)<br>&gt;&gt; Joining, by = <span class="hljs-string">&quot;x&quot;</span><br>&gt;&gt; <span class="hljs-comment"># A tibble: 1 x 4</span><br>&gt;&gt;       x     y     a b    <br>&gt;&gt;   &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;<br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>    <span class="hljs-number">10</span> a<br></code></pre></td></tr></table></figure></li><li><p><code>left_join(x,y)</code> 包含x的所有行，不管有没有匹配(没有匹配的为NA)</p>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs r">df1 %&gt;% left_join(df2)<br>&gt;&gt; Joining, by = <span class="hljs-string">&quot;x&quot;</span><br>&gt;&gt; <span class="hljs-comment"># A tibble: 2 x 4</span><br>&gt;&gt;       x     y     a b    <br>&gt;&gt;   &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;<br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>    <span class="hljs-number">10</span> a    <br>&gt;&gt; <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span>    <span class="hljs-literal">NA</span> &lt;<span class="hljs-literal">NA</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p><code>right_join(x,y)</code> 包含y的所有行(和<code>left_join(y,x)</code><br>  的差别在于行和列的顺序不一样)</p>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r">df1 %&gt;% right_join(df2)<br>&gt;&gt; Joining, by = <span class="hljs-string">&quot;x&quot;</span><br>&gt;&gt; <span class="hljs-comment"># A tibble: 2 x 4</span><br>&gt;&gt;       x     y     a b    <br>&gt;&gt;   &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;<br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>    <span class="hljs-number">10</span> a    <br>&gt;&gt; <span class="hljs-number">2</span>     <span class="hljs-number">3</span>    <span class="hljs-literal">NA</span>    <span class="hljs-number">10</span> a<br><br>df2 %&gt;% left_join(df1)<br>&gt;&gt; Joining, by = <span class="hljs-string">&quot;x&quot;</span><br>&gt;&gt; <span class="hljs-comment"># A tibble: 2 x 4</span><br>&gt;&gt;       x     a b         y<br>&gt;&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt;<br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">3</span>    <span class="hljs-number">10</span> a        <span class="hljs-literal">NA</span><br>&gt;&gt; <span class="hljs-number">2</span>     <span class="hljs-number">1</span>    <span class="hljs-number">10</span> a         <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p><code>full_join(x,y)</code> 包含x和y的所有行</p>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">df1 %&gt;% full_join(df2)<br>&gt;&gt; Joining, by = <span class="hljs-string">&quot;x&quot;</span><br>&gt;&gt; <span class="hljs-comment"># A tibble: 3 x 4</span><br>&gt;&gt;       x     y     a b    <br>&gt;&gt;   &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;<br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>    <span class="hljs-number">10</span> a    <br>&gt;&gt; <span class="hljs-number">2</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span>    <span class="hljs-literal">NA</span> &lt;<span class="hljs-literal">NA</span>&gt; <br>&gt;&gt; <span class="hljs-number">3</span>     <span class="hljs-number">3</span>    <span class="hljs-literal">NA</span>    <span class="hljs-number">10</span> a<br></code></pre></td></tr></table></figure></li></ul><p>需要注意的一点是：如果匹配不唯一(比如x里面用来匹配的变量有几行是一样的)，那么进行join时会加上所有可能的组合(笛卡尔积)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">df1 &lt;- tibble(x = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), y = <span class="hljs-number">1</span>:<span class="hljs-number">3</span>)<br>df2 &lt;- tibble(x = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), z = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>))<br>df1 %&gt;% left_join(df2)<br>&gt;&gt; Joining, by = <span class="hljs-string">&quot;x&quot;</span><br>&gt;&gt; <span class="hljs-comment"># A tibble: 5 x 3</span><br>&gt;&gt;       x     y z    <br>&gt;&gt;   &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;<br>&gt;&gt; <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span> a    <br>&gt;&gt; <span class="hljs-number">2</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span> b    <br>&gt;&gt; <span class="hljs-number">3</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span> a    <br>&gt;&gt; <span class="hljs-number">4</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span> b    <br>&gt;&gt; <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span> a<br></code></pre></td></tr></table></figure><h3 id="Filtering-joins"><a href="#Filtering-joins" class="headerlink" title="Filtering joins"></a>Filtering joins</h3><p>filter join影响的是观测不是变量，有两种类型：</p><ul><li><p>  <code>semi_join(x,y)</code> 保留x在y中有匹配的观测</p></li><li><p>  <code>anti_join(x,y)</code> 丢弃x在y中有匹配的观测</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git简介</title>
    <link href="/2021/01/17/git_notes/"/>
    <url>/2021/01/17/git_notes/</url>
    
    <content type="html"><![CDATA[<p>主要参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的Git教程</a></p><h2 id="安装创建Git"><a href="#安装创建Git" class="headerlink" title="安装创建Git"></a>安装创建Git</h2><p>Ubuntu 可以直接通过<code>apt</code>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install git<br></code></pre></td></tr></table></figure><p>Windows可以上Git 官网下载相应的安装包安装</p><p>安装完成后需要设置用户名和邮件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;Your Name&quot;<br>git config --global user.email &quot;email@example.com&quot;<br></code></pre></td></tr></table></figure><p>接下来就可以创建一个版本库了，版本库(repository)就相当于一个目录，Git可以跟踪该目录中所有文件的修改，删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir learninggit<br></code></pre></td></tr></table></figure><p>通过<code>git init</code>来初始化目录为可以被管理的仓库</p><p>然后就可以将文件添加到版本库中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#在该文件夹下新建一个文件</span></span><br>touch readme.txt<br>vi readme.txt<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># Git is a version control system.</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># Git is free software.</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#将文件添加到仓库</span></span><br>git add readme.txt<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#将文件提交到仓库</span></span><br>git commit -m &#x27;write a readme file&#x27;<br></code></pre></td></tr></table></figure><p><code>-m</code>后面加的字符串是提交的文件的描叙，<code>git commit</code>命令是提交整个文件夹，也就是他可以检查整个文件的改动，所以在前面可以<code>add</code>多个文件，最后一次<code>commit</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add file1.txt<br>git add file2.txt file3.txt<br>git commit -m &quot;add 3 files.&quot;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wt12318/picgo/master/img/20200411224439.png"></p><p>上面的图简单的说明了<code>add</code>和<code>commit</code>的作用，在文件夹下所有可见的文件都是工作区，而不可见的<code>.git</code>文件夹就是版本库，版本库中有一个暂存区(stage)，当<code>add</code>文件后，文件就被储存到这个空间里，<code>add</code>结束后，<code>commit</code>会一次性将暂存区的文件提交到master的分支上,也就是不<code>add</code>是不会被提交的</p><h2 id="修改，管理，版本控制"><a href="#修改，管理，版本控制" class="headerlink" title="修改，管理，版本控制"></a>修改，管理，版本控制</h2><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>前面讲过Git可以监控文件夹中的文件的修改，现在来修改<code>readme.txt</code>看看会发生什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi readme.txt<br><span class="hljs-meta">#</span><span class="bash"> Git is a distributed version control system.</span><br><span class="hljs-meta">#</span><span class="bash"> Git is free software.</span><br></code></pre></td></tr></table></figure><p>可以用<code>git status</code>查看仓库的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br>On branch master<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>modified:   readme.txt<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br></code></pre></td></tr></table></figure><p>上面结果说明<code>readme.txt</code>已经被修改，但是还没有准备提交</p><p>可以用<code>git diff</code>来查看修改的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff readme.txt <br><span class="hljs-meta">#</span><span class="bash">diff --git a/readme.txt b/readme.txt</span><br><span class="hljs-meta">#</span><span class="bash">index 46d49bf..9247db6 100644</span><br><span class="hljs-meta">#</span><span class="bash">--- a/readme.txt</span><br><span class="hljs-meta">#</span><span class="bash">+++ b/readme.txt</span><br><span class="hljs-meta">#</span><span class="bash">@@ -1,2 +1,2 @@</span><br><span class="hljs-meta">#</span><span class="bash">-Git is a version control system.</span><br><span class="hljs-meta">#</span><span class="bash">+Git is a distributed version control system.</span><br><span class="hljs-meta">#</span><span class="bash">Git is free software.</span><br></code></pre></td></tr></table></figure><p>要将修改后的文件提交到仓库，就和之前一样，先<code>add</code>再<code>commit</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add readme.txt<br><br>git status<br>On branch master<br>Changes to be committed:<br>  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)<br><br>modified:   readme.txt<br><br>git commit -m &quot;add distributed&quot;<br>[master e475afc] add distributed<br> 1 file changed, 1 insertion(+), 1 deletion(-)<br> <br> git status<br>On branch master<br>nothing to commit, working tree clean<br></code></pre></td></tr></table></figure><p>可以看到在<code>add</code>之后，文件的状态变成待提交(to be committed)，提交之后变成clean了</p><p>每一次<code>commit</code>文件就相当于对文件进行快照，可以从这些快照中来恢复之前的文件版本</p><p>可以使用<code>git log</code>命令来查看这些<code>commit</code>历史：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br>commit 3288eec6192ff2d876c9d0140ce2ddfdba30f5bc (HEAD -&gt; master)<br>Author: wt12318 &lt;1650464505@qq.com&gt;<br>Date:   Sat Apr 11 21:22:36 2020 +0800<br><br>    add distributed<br><br>commit a524903c1f9612bc4f3b85f29936565818c13e2c<br>Author: wt12318 &lt;1650464505@qq.com&gt;<br>Date:   Sat Apr 11 20:34:55 2020 +0800<br><br>    wrote a readme file<br></code></pre></td></tr></table></figure><p>可以看到Git将当前版本用HEAD 标记，在Git中上一个版本就是<code>HEAD^</code>,每往前一个版本就在后面加上<code>^</code>，当数量较多的时候可以用<code>HEAD~number</code>代替</p><p>比如，现在要将<code>readme.txt</code>恢复到前一个版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard HEAD^<br><span class="hljs-meta">#</span><span class="bash"> HEAD is now at a524903 wrote a readme file</span><br><br>cat readme.txt<br>Git is a version control system.<br>Git is free software.<br><br>git log<br>commit a524903c1f9612bc4f3b85f29936565818c13e2c (HEAD -&gt; master)<br>Author: wt12318 &lt;1650464505@qq.com&gt;<br>Date:   Sat Apr 11 20:34:55 2020 +0800<br><br>    wrote a readme file<br></code></pre></td></tr></table></figure><p>现在add distributed的那个版本已经不见了，如果想要恢复该版本（回到未来）可以用该版本的<code>commit id</code>来进行(可以不写全）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard 3288eec<br>HEAD is now at 3288eec add distributed<br><br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br></code></pre></td></tr></table></figure><p>但是如果关掉了terminal，又想要恢复“未来”的文件该怎么办？可以用<code>git reflog</code>，记录了每一次的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reflog<br>3288eec (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 3288eec<br>a524903 HEAD@&#123;1&#125;: reset: moving to HEAD^<br>3288eec (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: add distributed<br>a524903 HEAD@&#123;3&#125;: commit (initial): wrote a readme file<br></code></pre></td></tr></table></figure><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p><code>git checkout --file</code>可以撤销工作区的修改，现在在<code>readme.txt</code>中添加一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br>Git check out<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -- readme.txt<br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br></code></pre></td></tr></table></figure><p>这样就复原来最近的一次<code>add</code>或者<code>commit</code>的版本了</p><p>但是如果现在已经将文件<code>add</code>到暂存区了，可以用<code>git reset HEAD file</code>将文件返回到工作区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br>Git check out<br><br>git add readme.txt<br>git status<br>On branch master<br>Changes to be committed:<br>  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)<br><br>        modified:   readme.txt<br>        <br>git reset HEAD readme.txt<br>Unstaged changes after reset:<br>M       readme.txt<br>git status<br>On branch master<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>        modified:   readme.txt<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br><br></code></pre></td></tr></table></figure><p>可以看到在<code>reset</code>之后，暂存区没有文件待提交，现在可以用<code>checkout</code>来删除修改了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -- readme.txt<br>git status<br>On branch master<br>nothing to commit, working tree clean<br><br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br></code></pre></td></tr></table></figure><p>已经将文件提交了，可以用之前讲过的<code>git reset --hard commit_id/HEAD^^...</code>来恢复</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>先创建一个新文件：<code>touch test.txt</code>,再像之前一样提交到版本库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add test.txt<br>git commit -m &#x27;add test.txt&#x27;<br>[master f1d6024] add test.txt<br> 1 file changed, 0 insertions(+), 0 deletions(-)<br> create mode 100644 test.txt<br></code></pre></td></tr></table></figure><p>现在删除该文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm test.txt<br>git status<br>On branch master<br>Changes not staged for commit:<br>  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>        deleted:    test.txt<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br></code></pre></td></tr></table></figure><p>Git可以发现删除了一个文件，如果是删错了，可以从版本库中恢复，还是用之前那个<code>checkout</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -- test.txt<br>ls<br>readme.txt  test.txt<br></code></pre></td></tr></table></figure><p>其实<code>checkout</code>就是用版本库的内容覆盖工作区的内容，所以可以恢复修改和删除</p><p>如果确实想删除该文件，可以用<code>git rm</code>然后再提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git rm test.txt<br><span class="hljs-meta">#</span><span class="bash"> rm <span class="hljs-string">&#x27;test.txt&#x27;</span></span><br><br>git commit -m &#x27;remove test.txt&#x27;<br>[master a6b89a8] remove test.txt<br> 1 file changed, 0 insertions(+), 0 deletions(-)<br> delete mode 100644 test.txt<br></code></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>创建SSH key：<code>ssh-keygen -t rsa -C &quot;youremail@example.com</code> 一路回车，完成后就会在主目录的<code>.ssh</code>目录下看到<code>id_rsa  id_rsa.pub</code>两个文件</p><p>登陆Github，在<code>setting</code>里面找到<code>SSH and GPG keys</code> 添加<code>New SSH key</code>,将<code>id_rsa.pub</code>中的内容复制进去</p><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><p>在Github上添加一个Repository 名字为<code>learngit</code>,然后将本地的库与远程的库关联：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin git@github.com:wt12318/learngit.git ## 或者https://github.com/wt12318/learngit.git<br>git push -u origin master<br></code></pre></td></tr></table></figure><p>以后在本地提交了之后就可以通过<code>git push origin master</code>将修改推送到远程库了</p><h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><p>现在在Github上新建一个远程库，名为<code>gitskills</code> 并初始化<code>README</code> ,然后就可以在本地克隆该仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:wt12318/gitskills<br></code></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>在<strong>团队协作</strong>中可以建一个自己的分支，在里面修改，提交别人是看不到的，最后开发完成后再与原来的分支合并</p><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>Git的创建和合并分支就是一个改变指针的动作，上面的那些提交都是在master分支上进行的，master指向最新的提交，HEAD指向master，当我们新建一个分支的时候，在以后操作过程中就是由该新建的分支指向提交，再由HEAD指向这个分支，最后合并的时候就是把指针还给master，HEAD重新指向master</p><p>现在新建一个分支<code>dev</code>，并切换到该分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b dev <br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#或者 git switch -c dev</span></span><br></code></pre></td></tr></table></figure><p><code>git checkout -b </code>(<code>git switch -c dev</code>)相当于创建并切换，等于下面两个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch dev<br>git checkout dev## git switch dev<br></code></pre></td></tr></table></figure><p>使用<code>git branch</code>可以查看当前的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch<br>* dev<br>  master<br></code></pre></td></tr></table></figure><p>当前分支前面会有一个星号</p><p>现在试试在dev上修改，提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 加一行:Creating a new branch is quick</span></span><br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br>Creating a new branch is quick<br><br>git add readme.txt<br>git commit -m &#x27;branch test&#x27;<br></code></pre></td></tr></table></figure><p>然后切换到master分支上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout master ## git switch master<br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br></code></pre></td></tr></table></figure><p>就会发现之前在dev上修改的内容不见了，原因就是master和dev分支的提交点不一样：</p><p><img src="https://raw.githubusercontent.com/wt12318/picgo/master/img/20200412194020.png"></p><p>所以要想将master移动到当前的修改，就需要将dev分支合并到master上，抗可以用<code>git merge</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge dev<br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br>Creating a new branch is quick<br></code></pre></td></tr></table></figure><p>现在就可以删除分支dev了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -d dev<br>git branch<br>* master<br></code></pre></td></tr></table></figure><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>合并冲突可能会出现冲突，需要手动编辑冲突的文件</p><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p>一般情况下，Git会使用<code>fast forward</code>方式进行合并分支，这种方法就是直接将master的指针移动到分支的最新提交上，当分支删除后就不能看成分支信息了，可以用<code>--no-ff</code>选项禁用<code>fast forward</code>模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">git switch -c dev<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#修改readme</span></span><br>cat readme.txt<br>Git is a distributed version control system.<br>Git is free software.<br>Git tracks changes<br>Creating a new branch is quick<br>no fast forward<br><br>git add readme.txt<br>git commit -m &quot;add merge&quot;<br>git switch master<br><br>git merge --no-ff -m &quot;merge with no-ff&quot; dev ##这种合并会创建一个新的commit，所以要加-m<br></code></pre></td></tr></table></figure><p>可以用<code>git log --graph</code>查看合并图：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log --graph --pretty=oneline --abbrev-commit<br>*   7e4a555 (HEAD -&gt; master) merge with no-ff<br>|\<br>| * 0c38472 (dev) add merge<br>|/<br>* 58a2bf7 branch test<br>* a6b89a8 (origin/master) remove test.txt<br>* f1d6024 add test.txt<br>* c500238 git tracks changes<br>* 3288eec add distributed<br>* a524903 wrote a readme file<br></code></pre></td></tr></table></figure><p>另外如果想要删除一个没有被合并的分支，可以通过<code>git branch -D name</code>来删除</p><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>远程仓库的默认名是<code>orign</code></p><p>查看远程库的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote<br>git remote -v ##详细信息<br>origin  https://github.com/limbo1996/neoantigens_depletion.git (fetch)<br>origin  https://github.com/limbo1996/neoantigens_depletion.git (push)<br></code></pre></td></tr></table></figure><p>推送不同的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin master<br>git push origin dev<br></code></pre></td></tr></table></figure><p>多人协作的时候，首先需要将远程仓库克隆到本地：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:wt12318/learngit.git<br></code></pre></td></tr></table></figure><p>要在已经创建的分支dev上工作，需要创建远程仓库中的dev分支对应的本地分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b dev origin/dev<br>git branch --set-upstream-to=origin/dev dev#指定本地dev分支与远程origin/dev分支的链接<br></code></pre></td></tr></table></figure><p>拉取，推送分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin dev<br>git pull<br></code></pre></td></tr></table></figure><h4 id="github"><a href="#github" class="headerlink" title="github"></a><code>github</code></h4><p>首先要fork别人的仓库，然后clone：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:***<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#添加远程仓库</span></span><br>git remote add upstream https://github.com/***<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#获取最新源码</span></span><br>git pull upstream branch<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#将最新代码提交到自己的分支中</span></span><br>git push origin branch<br></code></pre></td></tr></table></figure><p>最后提交后，再去作者的<code>github</code>里pull request</p><p>如何与原仓库同步？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add upstream https://github.com/origin_rep<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#如果报错fatal: remote upstream already exists.</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#先git remote rm upstream</span></span><br>git fetch upstream<br></code></pre></td></tr></table></figure><p>然后合并远程分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout master<br>git merge upstream/master<br></code></pre></td></tr></table></figure><p>此时已经将本地库与原仓库合并，要更新自己github上的仓库还需要<code>git push</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push --set-upstream origin master<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h3><p>克隆已有的库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone ssh://user@domain.com/repo.git<br></code></pre></td></tr></table></figure><p>创建本地新库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><h3 id="本地改变"><a href="#本地改变" class="headerlink" title="本地改变"></a>本地改变</h3><p>查看改变的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><p>查看文件修改的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff<br></code></pre></td></tr></table></figure><p>将改变添加到暂存区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add <br></code></pre></td></tr></table></figure><p>将改变提交到分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit<br></code></pre></td></tr></table></figure><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p>显示所有的提交（从最新的开始）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br></code></pre></td></tr></table></figure><p>显示对于某个文件的改变：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log -p &lt;file&gt;<br></code></pre></td></tr></table></figure><p>显示谁在什么时候改变了什么：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git blame &lt;file&gt;<br></code></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>显示所有的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -v<br></code></pre></td></tr></table></figure><p>切换分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout &lt;branch&gt; ##or git switch &lt;branch&gt;<br></code></pre></td></tr></table></figure><p>创建新分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch &lt;new-branch&gt;<br></code></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -d &lt;branch&gt;<br></code></pre></td></tr></table></figure><h3 id="远程协作"><a href="#远程协作" class="headerlink" title="远程协作"></a>远程协作</h3><p>查看远程库的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote -v<br></code></pre></td></tr></table></figure><p>推送分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin &lt;branch&gt;<br></code></pre></td></tr></table></figure><p>拉取分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull<br></code></pre></td></tr></table></figure><h3 id="撤销修改-1"><a href="#撤销修改-1" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>将文件返回工作区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset HEAD file<br></code></pre></td></tr></table></figure><p>撤销工作区的删改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout --file<br></code></pre></td></tr></table></figure><h3 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard &lt;commit&gt;<br></code></pre></td></tr></table></figure><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p>git出错：“Please make sure you have the correct access rights and the repository exists.</p><p>参考：<a href="https://cloud.tencent.com/developer/article/1572090">https://cloud.tencent.com/developer/article/1572090</a></p><p>ssh 需要重置</p><p>1、重置用户名和邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global [user.name](http://user.name/) “yourname” git config --global user.email“your@email.com&quot;  <br></code></pre></td></tr></table></figure><p><strong>注：yourname是你要设置的名字，your@email是你要设置的邮箱。</strong></p><p>2、删除.ssh文件夹下的known_hosts<br>3、git输入命令</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C your<span class="hljs-variable">@email</span>.com<br></code></pre></td></tr></table></figure><p>一路yes和回车 然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub将全部的内容复制<br>4、打开<a href="https://github.com/%EF%BC%8C%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84%E8%B4%A6%E6%88%B7%EF%BC%8C%E8%BF%9B%E5%85%A5%E8%AE%BE%E7%BD%AE--%E8%BF%9B%E5%85%A5ssh%E8%AE%BE%E7%BD%AE">https://github.com/，登陆你的账户，进入设置--进入ssh设置</a> 在key中将刚刚复制的粘贴进去<br>5、在git中输入命令</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>github.com <br></code></pre></td></tr></table></figure><p>然后会跳出一堆话 输入命令：回车</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础</title>
    <link href="/2021/01/16/python-base/"/>
    <url>/2021/01/16/python-base/</url>
    
    <content type="html"><![CDATA[<p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210118230926897.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/py2.png" alt="py2"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/py33.png" alt="py33"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/py44.png" alt="py44"></p>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【R语言编程指南】元编程</title>
    <link href="/2021/01/14/r-meta/"/>
    <url>/2021/01/14/r-meta/</url>
    
    <content type="html"><![CDATA[<p>函数式编程，基于语言的计算，非标准计算</p><span id="more"></span><p>本章主要学习3个内容：</p><ul><li>函数式编程<ul><li>  在函数内部定义的函数→闭包</li><li>  与其他函数组合使用的函数→高阶函数</li></ul></li><li>  基于语言的计算</li><li>  非标准计算</li></ul><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包(closure)就是在函数内部定义的函数,下面创建一个简单的闭包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">addn &lt;- <span class="hljs-keyword">function</span>(y)&#123;<br>  <span class="hljs-keyword">function</span>(x)&#123;<br>    x+y<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的函数在其内部创建一个函数，所以其返回值是一个闭包；这个addn就相当于一个“函数工厂”，通过提供不同的参数就可以创建不同的函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">add1 &lt;- addn(<span class="hljs-number">1</span>)<br>add2 &lt;- addn(<span class="hljs-number">2</span>)<br><br>add1<br>&gt;&gt; <span class="hljs-keyword">function</span>(x)&#123;<br>&gt;&gt;     x+y<br>&gt;&gt;   &#125;<br>&gt;&gt; &lt;environment: <span class="hljs-number">0x00000209f3243f80</span>&gt;<br><span class="hljs-comment">##当函数不在当前工作环境，输出该函数时会显示其所在的环境</span><br><br>add1(<span class="hljs-number">10</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">11</span><br>add2(<span class="hljs-number">10</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>我们可以通过在<a href="http://localhost:4321/p/r-inter/">R内部机制</a>中提到的ennironment()来查看这两个闭包的封闭环境：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">environment(add1)$y<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br>environment(add2)$y<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>既然闭包可以用来创建函数，我们就可以将一些大部分情况下只会用到一部分参数的函数包装起来形成一个简版的“专用函数”.<br>比如画图的时候可能在不同的图之间只需要更改线条的颜色，那么就可以将其他参数包装起来，使代码更简洁：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">color_line &lt;- <span class="hljs-keyword">function</span>(col)&#123;<br>  <span class="hljs-keyword">function</span>(...)&#123;<br>    plot(...,type=<span class="hljs-string">&quot;l&quot;</span>,lty=<span class="hljs-number">1</span>,col=col)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">##生成专用函数</span><br>red_line &lt;- color_line(<span class="hljs-string">&quot;red&quot;</span>)<br>red_line(rnorm(<span class="hljs-number">30</span>))<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/ex4-1.png"><!-- --></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##也可以设置其他参数，因为上面的闭包中使用...来处理其他的参数</span><br>red_line(rnorm(<span class="hljs-number">30</span>),main=<span class="hljs-string">&quot;Red line plot&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/ex4-2.png"><!-- --></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###与下面的代码相比较，使用闭包创建专用函数可以使代码更简洁</span><br><span class="hljs-comment">#plot(rnorm(30),type = &quot;l&quot;,lty=1,col=&quot;red&quot;,main = &quot;Red line plot&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶函数指的是：将另外一个函数作为参数的函数<br>将函数作为参数也就是将现有的函数和一个变量名绑定，那么将一个函数赋给一个变量会影响函数的封闭环境吗(这可能会影响到变量的搜索路径)，答案是不会改变，下面的实验证明了这一点：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs r">f1 &lt;- <span class="hljs-keyword">function</span>()&#123;<br>  cat(<span class="hljs-string">&quot;f1 的执行环境为 &quot;</span>)<br>  print(environment())<br>  cat(<span class="hljs-string">&quot;f1 的封闭环境为 &quot;</span>)<br>  print(parent.env(environment()))<br>  cat(<span class="hljs-string">&quot;f1 的调用环境为 &quot;</span>)<br>  print(parent.frame())<br>&#125;<br><br>f2 &lt;- <span class="hljs-keyword">function</span>()&#123;<br>  cat(<span class="hljs-string">&quot;f2 的执行环境为 &quot;</span>)<br>  print(environment())<br>  cat(<span class="hljs-string">&quot;f2 的封闭环境为 &quot;</span>)<br>  print(parent.env(environment()))<br>  cat(<span class="hljs-string">&quot;f2 的调用环境为 &quot;</span>)<br>  print(parent.frame())<br>  p &lt;- f1<br>  p()<br>&#125;<br><br>f1()<br>&gt;&gt; f1 的执行环境为 &lt;environment: <span class="hljs-number">0x00000209f26542b0</span>&gt;<br>&gt;&gt; f1 的封闭环境为 &lt;environment: R_GlobalEnv&gt;<br>&gt;&gt; f1 的调用环境为 &lt;environment: R_GlobalEnv&gt;<br>f2()<br>&gt;&gt; f2 的执行环境为 &lt;environment: <span class="hljs-number">0x00000209f26000d0</span>&gt;<br>&gt;&gt; f2 的封闭环境为 &lt;environment: R_GlobalEnv&gt;<br>&gt;&gt; f2 的调用环境为 &lt;environment: R_GlobalEnv&gt;<br>&gt;&gt; f1 的执行环境为 &lt;environment: <span class="hljs-number">0x00000209f25f5928</span>&gt;<br>&gt;&gt; f1 的封闭环境为 &lt;environment: R_GlobalEnv&gt;<br>&gt;&gt; f1 的调用环境为 &lt;environment: <span class="hljs-number">0x00000209f26000d0</span>&gt;<br></code></pre></td></tr></table></figure><p>可以看到在f2内部将f1赋给p并调用p，并不改变f1的封闭环境(定义的地方)，所以将一个函数赋给一个变量仅仅是给了函数一个“别名”:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs r">f3 &lt;- <span class="hljs-keyword">function</span>(x,y)&#123;<br>  <span class="hljs-keyword">if</span>(x &gt; y)&#123;<br>    x-y<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    x+y<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">###给+,-函数起别名</span><br>f4 &lt;- <span class="hljs-keyword">function</span>(x,y)&#123;<br>  op &lt;- <span class="hljs-keyword">if</span>(x&gt;y) `-` <span class="hljs-keyword">else</span> `+`<br>  op(x,y)<br>&#125;<br><br>f3(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">3</span><br>f4(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>既然函数可以作为变量使用，那么函数也可以作为参数来传递：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">add &lt;- <span class="hljs-keyword">function</span>(x,y,z)&#123;<br>  x+y+z<br>&#125;<br><br>product &lt;- <span class="hljs-keyword">function</span>(x,y,z)&#123;<br>  x*y*z<br>&#125;<br><br><span class="hljs-comment">###定义高阶函数，以其他函数作为参数</span><br>combine &lt;- <span class="hljs-keyword">function</span>(f,x,y,z)&#123;<br>  f(x,y,z)<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的参数名f就相当于在高阶函数内部给传入的函数起了个别名，在combine函数内部这个函数就叫f了</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###将add和product传给combine</span><br>combine(add,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">12</span><br>combine(product,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><p>我们经常使用的apply函数族就是高阶函数，接受其他的函数作为参数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">sapply(<span class="hljs-number">1</span>:<span class="hljs-number">3</span>,addn(<span class="hljs-number">3</span>))<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h2 id="基于语言的计算-元编程"><a href="#基于语言的计算-元编程" class="headerlink" title="基于语言的计算(元编程)"></a>基于语言的计算(元编程)</h2><p>元编程可以允许我们调整语言本身，使特定的语言结构在特定情况下更方便使用(不是很懂)<br>先来看一个元编程的用处：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">###将iris数据集中数值列的大于80%分位数的数挑出来</span><br>iris[iris$Sepal.Length &gt; quantile(iris$Sepal.Length,<span class="hljs-number">0.8</span>),<br>     iris$Sepal.Width &gt; quantile(iris$Sepal.Width,<span class="hljs-number">0.8</span>),<br>     iris$Petal.Length &gt; quantile(iris$Petal.Length,<span class="hljs-number">0.8</span>),<br>     iris$Petal.Width &gt; quantile(iris$Petal.Width,<span class="hljs-number">0.8</span>)]<br>&gt;&gt; Error <span class="hljs-keyword">in</span> `[.data.frame`(iris, iris$Sepal.Length &gt; quantile(iris$Sepal.Length, : 参数没有用(iris$Petal.Width &gt; quantile(iris$Petal.Width, <span class="hljs-number">0.8</span>))<br><br><span class="hljs-comment">##上面的代码就比较繁琐，需要多次写iris$</span><br><span class="hljs-comment">##subset函数可以简化上述代码</span><br>subset(iris,<br>       Sepal.Length &gt; quantile(Sepal.Length,<span class="hljs-number">0.8</span>) &amp;<br>       Sepal.Width &gt; quantile(Sepal.Width,<span class="hljs-number">0.8</span>) &amp;<br>       Petal.Length &gt; quantile(Petal.Length,<span class="hljs-number">0.8</span>) &amp;<br>       Petal.Width &gt; quantile(Petal.Width,<span class="hljs-number">0.8</span>))<br>&gt;&gt;     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species<br>&gt;&gt; <span class="hljs-number">110</span>          <span class="hljs-number">7.2</span>         <span class="hljs-number">3.6</span>          <span class="hljs-number">6.1</span>         <span class="hljs-number">2.5</span> virginica<br>&gt;&gt; <span class="hljs-number">118</span>          <span class="hljs-number">7.7</span>         <span class="hljs-number">3.8</span>          <span class="hljs-number">6.7</span>         <span class="hljs-number">2.2</span> virginica<br>&gt;&gt; <span class="hljs-number">132</span>          <span class="hljs-number">7.9</span>         <span class="hljs-number">3.8</span>          <span class="hljs-number">6.4</span>         <span class="hljs-number">2.0</span> virginica<br><br><br><span class="hljs-comment">###但是下面的代码就不能运行：</span><br>iris[Sepal.Length &gt; quantile(Sepal.Length,<span class="hljs-number">0.8</span>) &amp;<br>     Sepal.Width &gt; quantile(Sepal.Width,<span class="hljs-number">0.8</span>) &amp;<br>     Petal.Length &gt; quantile(Petal.Length,<span class="hljs-number">0.8</span>) &amp;<br>     Petal.Width &gt; quantile(Petal.Width,<span class="hljs-number">0.8</span>)]<br>&gt;&gt; Error <span class="hljs-keyword">in</span> `[.data.frame`(iris, Sepal.Length &gt; quantile(Sepal.Length, <span class="hljs-number">0.8</span>) &amp; : 找不到对象<span class="hljs-string">&#x27;Sepal.Length&#x27;</span><br></code></pre></td></tr></table></figure><p>这是因为subset函数使用<strong>元编程调整了其参数的计算环境</strong>(也就是不是去全局环境寻找这些变量，所以不会产生后面那样的报错)，这个过程分为两步：<em>捕获表达式；调整表达式的计算(修改计算的环境等)</em></p><h3 id="捕获表达式"><a href="#捕获表达式" class="headerlink" title="捕获表达式"></a>捕获表达式</h3><p>捕获表达式指的是：将表达式本身存储为变量的形式，防止表达式的直接执行(执行了还修改什么)；使用函数quote()</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r">call1 &lt;- <span class="hljs-built_in">quote</span>(rnorm(<span class="hljs-number">5</span>))<br>call1<br>&gt;&gt; rnorm(<span class="hljs-number">5</span>)<br><br>typeof(call1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;language&quot;</span><br><span class="hljs-built_in">class</span>(call1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;call&quot;</span><br><br>name1 &lt;- <span class="hljs-built_in">quote</span>(rnorm)<br>name1<br>&gt;&gt; rnorm<br><br>typeof(name1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;symbol&quot;</span><br><span class="hljs-built_in">class</span>(name1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;name&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到当我们捕获一个函数调用的时候返回的是一个语言对象(language)/函数调用(call),当捕获一个函数名(变量名)返回的是符号(symbol)/名称(name)</p><p>因此这里面我们需要区分的是：</p><ul><li><p>  变量和符号对象：变量表示的是一个对象的名称，而这个名称本身也是一个对象，这个对象就是符号对象</p></li><li><p>  函数和调用对象：函数是可以被调用(计算)的对象，而调用对象是函数调用的语言对象，是不会被计算的</p></li></ul><p>可以将对象转化成列表以便查看其内部结构：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs r">as.list(call1)<br>&gt;&gt; [[<span class="hljs-number">1</span>]]<br>&gt;&gt; rnorm<br>&gt;&gt; <br>&gt;&gt; [[<span class="hljs-number">2</span>]]<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">5</span><br><br>typeof(call1[[<span class="hljs-number">1</span>]])<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;symbol&quot;</span><br><span class="hljs-built_in">class</span>(call1[[<span class="hljs-number">1</span>]])<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;name&quot;</span><br><br>typeof(call1[[<span class="hljs-number">2</span>]])<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;double&quot;</span><br><span class="hljs-built_in">class</span>(call1[[<span class="hljs-number">2</span>]])<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;numeric&quot;</span><br></code></pre></td></tr></table></figure><p>符号对象和调用对象都是语言对象，可以使用is.symbol/is.name检查对象是否为符号对象，使用is.call()检查是否为调用对象；也可以使用is.language()同时检查：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">is.call</span>(call1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br><span class="hljs-built_in">is.call</span>(name1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">FALSE</span><br><span class="hljs-built_in">is.symbol</span>(name1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br><span class="hljs-built_in">is.symbol</span>(call1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">FALSE</span><br><br><span class="hljs-built_in">is.language</span>(call1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br><span class="hljs-built_in">is.language</span>(name1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure><p>捕获已知的表达式可以使用quote()，但是需要捕获用户输入的参数就不行了:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">func1 &lt;- <span class="hljs-keyword">function</span>(x)&#123;<br>  <span class="hljs-built_in">quote</span>(x)<br>&#125;<br><br>func1(rnorm(<span class="hljs-number">5</span>))<br>&gt;&gt; x<br></code></pre></td></tr></table></figure><p>这个时候可以使用函数substitute,substitute基本用法为：substitute(expr,<br>env),expr为表达式，env为环境或者列表，默认是当前的执行环境,<em>将表达式中的变量替换成环境中的值</em>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">fun2 &lt;- <span class="hljs-keyword">function</span>(x)&#123;<br>  <span class="hljs-built_in">substitute</span>(x)<span class="hljs-comment">##默认是当前的执行环境</span><br>&#125;<br><br>fun2(rnorm(<span class="hljs-number">5</span>))<br>&gt;&gt; rnorm(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">##substitute 用法</span><br><span class="hljs-comment">##将x替换成执行环境中x所绑定的值，也就是函数的输入</span><br><span class="hljs-built_in">substitute</span>(x+y,<span class="hljs-built_in">list</span>(x=<span class="hljs-number">1</span>))<br>&gt;&gt; <span class="hljs-number">1</span> + y<br><br><span class="hljs-built_in">substitute</span>(f(x+f(y)),<span class="hljs-built_in">list</span>(f = <span class="hljs-built_in">quote</span>(<span class="hljs-built_in">sin</span>)))<br>&gt;&gt; <span class="hljs-built_in">sin</span>(x + <span class="hljs-built_in">sin</span>(y))<br></code></pre></td></tr></table></figure><p>除了将表达式捕获为语言对象之外，还可以直接创建语言对象:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##quote捕获</span><br>call2 &lt;- <span class="hljs-built_in">quote</span>(rnorm(<span class="hljs-number">5</span>,mean = <span class="hljs-number">3</span>))<br><br><span class="hljs-comment">##call 创建函数调用</span><br>call3 &lt;- <span class="hljs-built_in">call</span>(<span class="hljs-string">&quot;rnorm&quot;</span>,<span class="hljs-number">5</span>,mean=<span class="hljs-number">3</span>)<br>call3<br>&gt;&gt; rnorm(<span class="hljs-number">5</span>, mean = <span class="hljs-number">3</span>)<br><br><span class="hljs-comment">##as.call将列表转化成函数调用</span><br>call4 &lt;- <span class="hljs-built_in">as.call</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">quote</span>(rnorm),<span class="hljs-number">5</span>,mean=<span class="hljs-number">3</span>))<br>call4<br>&gt;&gt; rnorm(<span class="hljs-number">5</span>, mean = <span class="hljs-number">3</span>)<br><br>identical(call3,call4)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br>identical(call2,call3)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure><h3 id="修改表达式"><a href="#修改表达式" class="headerlink" title="修改表达式"></a>修改表达式</h3><p>当一个表达式被捕获为调用对象后，可以将其当作列表来修改:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">call1<br>&gt;&gt; rnorm(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">##可以修改第一个元素来更改要调用的函数</span><br>call1[[<span class="hljs-number">1</span>]] &lt;- <span class="hljs-built_in">quote</span>(runif())<br>call1<br>&gt;&gt; runif()(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">##也可以添加新的元素来添加参数</span><br>call1[[<span class="hljs-number">3</span>]] &lt;- <span class="hljs-string">&quot;min&quot;</span> <br>call1<br>&gt;&gt; runif()(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;min&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="执行表达式"><a href="#执行表达式" class="headerlink" title="执行表达式"></a>执行表达式</h3><p>捕获表达式后，下一步就是对其求值，可使用eval()函数  </p><p>eval的基本用法为：eval(expr,envir,enclos),expr是需要被计算的对象，envir是执行环境，enclos是封闭环境(在执行环境中找不到变量就会到这里找)，enclos如果不指定就取决于envir的类型，如果envir是列表则enclos是当前执行函数的调用环境(parent.frame()),如果envir不是列表则enclos是baseenv()</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs r">call1 &lt;- <span class="hljs-built_in">quote</span>(<span class="hljs-built_in">sin</span>(x))<br>eval(call1)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> eval(call1): 找不到对象<span class="hljs-string">&#x27;x&#x27;</span><br><br>x &lt;- 1<br>eval(call1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">0.841471</span><br><br>call2 &lt;- <span class="hljs-built_in">quote</span>(x^<span class="hljs-number">2</span>+y^<span class="hljs-number">2</span>)<br>eval(call2)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> eval(call2): 找不到对象<span class="hljs-string">&#x27;y&#x27;</span><br><br>eval(call2,<span class="hljs-built_in">list</span>(y=<span class="hljs-number">1</span>))<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br><br>rm(x,y)<br>&gt;&gt; Warning <span class="hljs-keyword">in</span> rm(x, y): 找不到对象<span class="hljs-string">&#x27;y&#x27;</span><br><br>e1 &lt;- new.env()<br>e1$x &lt;- 1<br><br>eval(call2,envir = e1)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> eval(call2, envir = e1): 找不到对象<span class="hljs-string">&#x27;y&#x27;</span><br><br><span class="hljs-comment">###新建一个环境 其父环境是e1</span><br>e2 &lt;- new.env(parent = e1)<br>e2$y &lt;- 2<br><br>eval(call2,e2)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">5</span><br><br><span class="hljs-comment">###也可以指定封闭环境</span><br>e3 &lt;- new.env()<br>e3$y  &lt;- 1<br>eval(call2,<span class="hljs-built_in">list</span>(x=<span class="hljs-number">2</span>),e3)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>所以通过捕获表达式–执行表达式，我们可以<strong>调整表达式的执行环境和封闭环境来定制计算过程</strong>,这就是一开始subset函数的“魔力”所在,我们来看一下subset函数的源码：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs r">subset.data.frame<br>&gt;&gt; <span class="hljs-keyword">function</span> (x, subset, select, drop = <span class="hljs-literal">FALSE</span>, ...) <br>&gt;&gt; &#123;<br>&gt;&gt;     r &lt;- <span class="hljs-keyword">if</span> (<span class="hljs-built_in">missing</span>(subset)) <br>&gt;&gt;         rep_len(<span class="hljs-literal">TRUE</span>, nrow(x))<br>&gt;&gt;     <span class="hljs-keyword">else</span> &#123;<br>&gt;&gt;         e &lt;- <span class="hljs-built_in">substitute</span>(subset)<br>&gt;&gt;         r &lt;- eval(e, x, parent.frame())<br>&gt;&gt;         <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">is.logical</span>(r)) <br>&gt;&gt;             stop(<span class="hljs-string">&quot;&#x27;subset&#x27; must be logical&quot;</span>)<br>&gt;&gt;         r &amp; !<span class="hljs-built_in">is.na</span>(r)<br>&gt;&gt;     &#125;<br>&gt;&gt;     vars &lt;- <span class="hljs-keyword">if</span> (<span class="hljs-built_in">missing</span>(select)) <br>&gt;&gt;         <span class="hljs-literal">TRUE</span><br>&gt;&gt;     <span class="hljs-keyword">else</span> &#123;<br>&gt;&gt;         nl &lt;- as.list(<span class="hljs-built_in">seq_along</span>(x))<br>&gt;&gt;         <span class="hljs-built_in">names</span>(nl) &lt;- <span class="hljs-built_in">names</span>(x)<br>&gt;&gt;         eval(<span class="hljs-built_in">substitute</span>(select), nl, parent.frame())<br>&gt;&gt;     &#125;<br>&gt;&gt;     x[r, vars, drop = drop]<br>&gt;&gt; &#125;<br>&gt;&gt; &lt;bytecode: <span class="hljs-number">0x00000209ea31b388</span>&gt;<br>&gt;&gt; &lt;environment: namespace:base&gt;<br></code></pre></td></tr></table></figure><p>可以看到这里也使用了substitute和eval的组合来选择特定的实例或者变量</p><h2 id="非标准计算"><a href="#非标准计算" class="headerlink" title="非标准计算"></a>非标准计算</h2><p>为了理解非标准计算，我们先来看一个例子，从向量中取子集：<br>假设现在有一个整数向量，我们想从中提取第3个到倒数第5个元素</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">x &lt;- 1:<span class="hljs-number">10</span><br>x[<span class="hljs-number">3</span>:(<span class="hljs-built_in">length</span>(x)-<span class="hljs-number">5</span>)]<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>上面的表达式用了两次x，有点繁琐；我们可以使用之前讲过的元编程技术来定义一个函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">qs &lt;- <span class="hljs-keyword">function</span>(x,<span class="hljs-built_in">range</span>)&#123;<br>  range &lt;- <span class="hljs-built_in">substitute</span>(<span class="hljs-built_in">range</span>)<br>  selector &lt;- eval(<span class="hljs-built_in">range</span>,<span class="hljs-built_in">list</span>(.=<span class="hljs-built_in">length</span>(x)))<span class="hljs-comment">###用x向量的长度来代替点号</span><br>  x[selector]<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数可以使用点号来表示向量的长度：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">qs(x,<span class="hljs-number">3</span>:(.-<span class="hljs-number">5</span>))<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><br><span class="hljs-comment">###</span><br>qs(x,.-<span class="hljs-number">1</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>基于qs，下面的函数用于修剪x两端的n个元素，返回去掉前n个和后n个元素的中间部分</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">trim_margin &lt;- <span class="hljs-keyword">function</span>(x,n)&#123;<br>  qs(x,(n+<span class="hljs-number">1</span>):(.-n-<span class="hljs-number">1</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>但是我们调用这个函数的时候，会出现错误：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">trim_margin(x,<span class="hljs-number">3</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> n + <span class="hljs-number">1</span>: 二进列运算符中有非数值参数<br></code></pre></td></tr></table></figure><p>我们来分析一下为什么会报错：<br>当调用trim_margin(x,3)时，会在一个新的执行环境中调用qs(x,(n+1):(.-n-1))，而在qs内部使用eval来执行捕获到的表达式，回忆一下eval的用法,</p><blockquote><p>eval的基本用法为：eval(expr,envir,enclos),expr是需要被计算的对象，envir是执行环境，enclos是封闭环境(在执行环境中找不到变量就会到这里找)，enclos如果不指定就取决于envir的类型，如果envir是列表则enclos是当前执行函数的调用环境(parent.frame()),如果envir不是列表则enclos是baseenv()</p></blockquote><p>而qs内部的eval提供的就是一个列表并且只有点号，所以当找不到n的时候就会到eval的调用环境(parent.frame())中去找，也就是qs的执行环境，而qs的执行环境当然时没有n的(n在qs的调用环境，也是trim_margin的执行环境中)，所以会报错</p><p>解决这个报错也比较简单，我们只需要指定eval的封闭环境就行</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r">qs &lt;- <span class="hljs-keyword">function</span>(x,<span class="hljs-built_in">range</span>)&#123;<br>  range &lt;- <span class="hljs-built_in">substitute</span>(<span class="hljs-built_in">range</span>)<br>  selector &lt;- eval(<span class="hljs-built_in">range</span>,<span class="hljs-built_in">list</span>(.=<span class="hljs-built_in">length</span>(x)),enclos = parent.frame())<span class="hljs-comment">###用x向量的长度来代替点号</span><br>  x[selector]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【hands on ML Ch2】 机器学习简介</title>
    <link href="/2021/01/13/hands_on_ML_ch1/"/>
    <url>/2021/01/13/hands_on_ML_ch1/</url>
    
    <content type="html"><![CDATA[<p>第一章：The Machine Learning Landscape<br>对机器学习的概述，包括机器学习系统的分类，机器学习的挑战和一些术语的解释(验证集，训练集，测试集，正则化，超参数，交叉验证等)</p><p>机器学习对数据挖掘的作用除了预测之外：我们也可以通过检查机器学习模型从数据中学习到的模式来对问题有更深入的理解，也就是机器学习可以帮助人去学习</p><p>机器学习系统的类型：</p><ul><li><p><strong>监督学习和非监督学习</strong> 在监督学习中有两类算法容易混肴：Anomaly detection and novelty detection 异常检测和新奇检测 异常检测指的是来了新数据，检测其是否属于正常的数据(训练集的数据)，而新奇检测则是检测其是否不同于训练集中的数据 比如训练集中有几千张狗的图像只有1%的图像是吉娃娃，那么来了一个新的吉娃娃图像，那么就判断其为异常数据 而新奇检测则不会将其判断为是新奇的数据</p></li><li><p><strong>Batch and Online Learning</strong>  </p><ul><li><p><em>batch learning</em> 不能够增量学习 必须使用所有的数据进行训练 每次有新的数据来的时候必须要和旧数据进行整合来重新训练模型 也就是说当新数据来的时候我们必须要将旧的模型关闭下线，重新训练后再上线运行，所以这种模式也叫做离线学习 offline learning</p></li><li><p><em>online learning</em> 可以依次传入数据进行<strong>增量学习</strong>，传入的形式可以是单个的数据也可以是小批量数据(mini batch) 因此有两种应用场景：依次传入的数据；非常大的数据(拆分进行训练)</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210111183408092.png" alt="image-20210111183408092"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210111183443429.png" alt="image-20210111183443429"></p></li></ul></li><li><p><strong>Instance</strong> <strong>Based Versus Model</strong> <strong>Based Learning</strong>  依据泛化方式的不同进行分类</p><ul><li>基于实例的：根据相似性度量</li><li>基于模型：依据训练数据选择模型—训练模型—进行推断(在新的数据上应用，也就是泛化)</li></ul></li></ul><p>机器学习的主要挑战：</p><ul><li><p>训练数据的数量不足</p></li><li><p>训练数据的代表性不足 可能有两个原因导致：训练数据比较小(<em>sampling noise</em> :由于随机性产生的不具代表性的数据)；尽管数据比较大，但是由于抽样方法的错误导致的抽样偏差(<em>sampling bias</em>)</p></li><li><p>低质量数据</p></li><li><p>不相关的特征 <em>garbage in, garbage out</em> 机器学习的重要步骤就是我们要选取一系列好的特征来训练我们的模型，这个步骤也叫做<strong>特征工程</strong>( <em>feature engineering</em>),包括以下几个步骤：</p><ul><li>特征选择 在已有的特征中选择最有用的特征来训练模型</li><li>特征提取 组合已有的特征产生更有用的特征，比如使用降维算法</li><li>通过收集新的数据来创造(发现)新的特征</li></ul></li><li><p>在训练数据上的过拟合 过拟合指的是模型在训练集上表现比较好，但是在测试集上表现不好，也就是泛化能力不足；解决过拟合可能有以下几种方法：</p><ul><li>简化模型：选择更少的模型参数，减少训练数据的属性数量(特征)，约束模型(正则化)</li><li>收集更多的训练数据</li><li>减少训练数据的噪音：消除数据错误，移除数据中的离群点等</li></ul><p>这里比较重要的模型的约束，也就是<strong>正则化</strong>(<em>regularization</em>)，比如在简单线性回归中我们可以限制直线斜率的大小的变化从而限制模型的自由度；在学习过程中应用的正则化的数量是通过<strong>超参数</strong>(<em>hyperparameter</em>)来控制的,<em>超参数是学习算法的参数而不是模型的参数</em>，需要在训练模型之前就确定好</p></li><li><p>在训练数据上的欠拟合(underfitting) 当模型过于简单而不能学习到数据的内在结构时，那么该模型即使在训练集上也表现不好，可能通过以下方法来改进：</p><ul><li>选择一个更复杂的模型，使用更多的参数</li><li>通过特征工程喂给学习算法更好的特征</li><li>减小模型的约束，比如减少正则化超参数等</li></ul></li></ul><p>评估模型的泛化能力，即模型在没有见过的数据上的表现. 可以使用将数据分为<strong>训练集(<em>training set</em> )和测试集(<em>test set</em>)</strong> 并在训练集上训练模型，在测试集上测试模型. 模型在新的样本上的错误率叫做泛化误差(generalization error或者out-of-sample error),通过在测试集上评估模型可以估计这个错误率，从而告诉我们模型在没有见过的数据上表现如何；如果模型在测试集上误差很小，而泛化误差比较大，说明该模型在训练数据上过拟合 【一般将数据的80%作为训练集，20%作为测试集，不过这也看数据集的大小而定】</p><p>当我们在不同的模型之间做选择的时候，可以看这些模型在测试集上的误差从而选择表现最好的模型</p><p>当我们需要在一个模型上进行超参数的调试的时候，比如有100个需要尝试的超参数的值，我们用这100个不同的超参数训练模型并在测试集上评估，选择一个表现最好的超参数，但是这可能会发生一种情况：这个模型在测试集上泛化误差比较低，但是应用到新数据上表现又不是很好 我的理解是：在测试集上反复评估模型调整超参数，从而产生一个在测试集上表现最好的模型，所以这个时候测试集变成了“训练集”，这个模型可能形成了新的过拟合现象</p><p>一个普遍的解决方法是从训练集中拿出一部分数据来评估备选的模型并选择最好的模型，这一部分数据叫做<em><strong>validation set</strong></em> 也就是说流程为：在剩下的训练集来训练不同的超参数构成的模型，然后选择在<em>validation set</em>上表现最好的模型，这就相当于在全部的训练数据上来得到最好的模型，最后使用测试集得到泛化误差来评估这个模型</p><p>还有一个问题就是验证集的大小，如果验证集太小，模型评估就会不精确；如果验证集太大，那么剩下的训练集就会比较小(也就是用来训练模型的数据比较少，一个比喻就是选择短跑健将来参加马拉松). 解决这种问题可以使用<strong>交叉验证(cross-validation)</strong> :使用很多小的验证集，每个模型在余下的训练集上训练后再在验证集上进行评估，对每个验证集都进行这个步骤，最后将一个模型在所有验证集上的评估的平均作为该模型表现的更精确的衡量</p>]]></content>
    
    
    <categories>
      
      <category>reading notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【R】按列分组计算</title>
    <link href="/2021/01/05/group_by_column/"/>
    <url>/2021/01/05/group_by_column/</url>
    
    <content type="html"><![CDATA[<p>R按列进行分组计算</p><span id="more"></span><p>现在有一个数据框<code>dt</code>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">dt &lt;- data.frame(<br>  x = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),<br>  y = <span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),<br>  z = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>)<br>)<br>dt<br><span class="hljs-comment">##   x y z</span><br><span class="hljs-comment">## 1 1 2 a</span><br><span class="hljs-comment">## 2 2 3 a</span><br><span class="hljs-comment">## 3 3 4 b</span><br></code></pre></td></tr></table></figure><p>想要依据<code>z</code>列分组并计算<code>x</code>,<code>y</code>列的均值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">library(dplyr)<br>dt %&gt;% <br>  group_by(z) %&gt;% <br>  summarise(mean_x=mean(x),mean_y=mean(y))<br><span class="hljs-comment">## # A tibble: 2 x 3</span><br><span class="hljs-comment">##   z     mean_x mean_y</span><br><span class="hljs-comment">##   &lt;fct&gt;  &lt;dbl&gt;  &lt;dbl&gt;</span><br><span class="hljs-comment">## 1 a        1.5    2.5</span><br><span class="hljs-comment">## 2 b        3      4</span><br></code></pre></td></tr></table></figure><p>但是如果传入的是字符就会出现我们不想要的结果：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">dt %&gt;% <br>  group_by(<span class="hljs-string">&quot;z&quot;</span>) %&gt;% <br>  summarise(mean_x=mean(x),mean_y=mean(y))<br><span class="hljs-comment">## `summarise()` ungrouping output (override with `.groups` argument)</span><br><span class="hljs-comment">## # A tibble: 1 x 3</span><br><span class="hljs-comment">##   `&quot;z&quot;` mean_x mean_y</span><br><span class="hljs-comment">##   &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;</span><br><span class="hljs-comment">## 1 z          2      3</span><br></code></pre></td></tr></table></figure><p>这里实际上是创建了一个新的变量<code>z</code>并且他的值也是<code>z</code>，然后计算了x和y列的均值 <br>这种情况下可以使用<code>group_by_at</code>来选择变量</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">dt %&gt;% <br>  group_by_at(<span class="hljs-string">&quot;z&quot;</span>) %&gt;% <br>  summarise(mean_x=mean(x),mean_y=mean(y))<br><span class="hljs-comment">## `summarise()` ungrouping output (override with `.groups` argument)</span><br><span class="hljs-comment">## # A tibble: 2 x 3</span><br><span class="hljs-comment">##   z     mean_x mean_y</span><br><span class="hljs-comment">##   &lt;fct&gt;  &lt;dbl&gt;  &lt;dbl&gt;</span><br><span class="hljs-comment">## 1 a        1.5    2.5</span><br><span class="hljs-comment">## 2 b        3      4</span><br></code></pre></td></tr></table></figure><p>在<code>dplyr</code>的最新版本中(1.0+)有新的函数<code>across</code>也可以做同样的事:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">dt %&gt;% <br>  group_by(across(<span class="hljs-string">&quot;z&quot;</span>)) %&gt;% <br>  summarise(mean_x=mean(x),mean_y=mean(y))<br><span class="hljs-comment">## `summarise()` ungrouping output (override with `.groups` argument)</span><br><span class="hljs-comment">## # A tibble: 2 x 3</span><br><span class="hljs-comment">##   z     mean_x mean_y</span><br><span class="hljs-comment">##   &lt;fct&gt;  &lt;dbl&gt;  &lt;dbl&gt;</span><br><span class="hljs-comment">## 1 a        1.5    2.5</span><br><span class="hljs-comment">## 2 b        3      4</span><br></code></pre></td></tr></table></figure><p>另外我们也可以使用<code>eval</code>加<code>parse</code>来将字符解析为对象：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">dt %&gt;% <br>  group_by(eval(parse(text = <span class="hljs-string">&quot;z&quot;</span>))) %&gt;% <br>  summarise(mean_x=mean(x),mean_y=mean(y))<br><span class="hljs-comment">## `summarise()` ungrouping output (override with `.groups` argument)</span><br><span class="hljs-comment">## # A tibble: 2 x 3</span><br><span class="hljs-comment">##   `eval(parse(text = &quot;z&quot;))` mean_x mean_y</span><br><span class="hljs-comment">##   &lt;fct&gt;                      &lt;dbl&gt;  &lt;dbl&gt;</span><br><span class="hljs-comment">## 1 a                            1.5    2.5</span><br><span class="hljs-comment">## 2 b                            3      4</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【R语言编程指南】R内部机制</title>
    <link href="/2021/01/04/r-inter/"/>
    <url>/2021/01/04/r-inter/</url>
    
    <content type="html"><![CDATA[<p>本章主要是学习四个方面：</p><ul><li>  惰性求值</li><li>  复制修改机制</li><li>  词法作用域</li><li>  环境</li></ul><span id="more"></span><h2 id="惰性求值"><a href="#惰性求值" class="headerlink" title="惰性求值"></a>惰性求值</h2><p>惰性求值指的是：在函数调用时，参数的值只在用到的时侯才会被调用/执行</p><p>比如下面这个函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r">test0 &lt;- <span class="hljs-keyword">function</span>(x,y)&#123;<br>  <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">0</span>)&#123;<br>    x<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    y<br>  &#125;<br>&#125;<br><br>test0(<span class="hljs-number">1</span>,stop(<span class="hljs-string">&quot;Stop nrow&quot;</span>))<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br>test0(-<span class="hljs-number">1</span>,stop(<span class="hljs-string">&quot;Stop nrow&quot;</span>))<br>&gt;&gt; Error <span class="hljs-keyword">in</span> test0(-<span class="hljs-number">1</span>, stop(<span class="hljs-string">&quot;Stop nrow&quot;</span>)): Stop nrow<br></code></pre></td></tr></table></figure><p>可以看到当调用<code>test0(1,stop(&quot;Stop nrow&quot;))</code>并不会报错，因为这种情况下函数不会运行y(因为不需要y的值)；而在调用<code>test0(-1,stop(&quot;Stop nrow&quot;))</code>的时候会发生报错是因为输入x是负数，因此会进入<code>else</code>运行y，而y的值是表达式<code>stop(&quot;Stop nrow&quot;)</code>所以会报错</p><p>在这一节中还有一个巧妙的用法:使用<code>stop</code>和<code>switch</code>来控制函数的输入:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">check_input &lt;- <span class="hljs-keyword">function</span>(x)&#123;<br>  <span class="hljs-built_in">switch</span>(x,<br>         y = message(<span class="hljs-string">&quot;yes&quot;</span>),<br>         n = message(<span class="hljs-string">&quot;no&quot;</span>),<br>         stop(<span class="hljs-string">&quot;Invalid input&quot;</span>)<br>  )<br>&#125;<br><br>check_input(<span class="hljs-string">&quot;y&quot;</span>)<br>&gt;&gt; yes<br>check_input(<span class="hljs-string">&quot;n&quot;</span>)<br>&gt;&gt; no<br>check_input(<span class="hljs-string">&quot;a&quot;</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> check_input(<span class="hljs-string">&quot;a&quot;</span>): Invalid input<br></code></pre></td></tr></table></figure><h2 id="复制——修改机制"><a href="#复制——修改机制" class="headerlink" title="复制——修改机制"></a>复制——修改机制</h2><p>复制修改机制指的是：当有多个变量指向同一个对象，那么修改一个变量(包括值和属性)就会生成该对象的一个副本</p><p>我们可以看一个例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r">x1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>x2 &lt;- x1<br><br><span class="hljs-comment">##使用tracemem可以追踪变量的内存地址</span><br><span class="hljs-built_in">tracemem</span>(x1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;&lt;00000209EAA600E0&gt;&quot;</span><br><span class="hljs-built_in">tracemem</span>(x2)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;&lt;00000209EAA600E0&gt;&quot;</span><br><br>x1[<span class="hljs-number">1</span>] &lt;- <span class="hljs-number">0</span><br>&gt;&gt; <span class="hljs-built_in">tracemem</span>[<span class="hljs-number">0x00000209eaa600e0</span> -&gt; <span class="hljs-number">0x00000209ea315e78</span>]: eval eval withVisible withCallingHandlers handle timing_fn evaluate_call &lt;Anonymous&gt; evaluate in_dir block_exec call_block process_group.block process_group withCallingHandlers process_file &lt;Anonymous&gt; render<br></code></pre></td></tr></table></figure><p>可以看到在赋值操作中变量所指向的内存地址是一样的，但是在改变其中一个变量的值的时候，该变量的内存地址发生了变化，也就是说修改操作会生成一个副本，然后在该副本上进行修改</p><p>对于函数的参数也是这样，当我们传一个变量给函数的参数时，就相当于该变量和函数参数所表示的变量都指向我们传入的数据，所以在函数内部进行修改时并不会修改传入的变量，而是将该变量的值复制后再进行修改:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">modify &lt;- <span class="hljs-keyword">function</span>(x)&#123;<br>  x[<span class="hljs-number">1</span>] &lt;- <span class="hljs-number">2</span><br>  x<br>&#125;<br><br>v1 &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>modify(v1)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>v1<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>本节中有几个知识点：</p><ol><li> 函数只有在被调用的时候才寻找变量：</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment">##定义函数</span><br>fun1 &lt;- <span class="hljs-keyword">function</span>(x)&#123;<br>  <span class="hljs-built_in">c</span>(a,x,b)<br>&#125;<br><span class="hljs-comment">#现在并没有定义a和b,但是创建函数时不会报错</span><br><br>fun1(<span class="hljs-number">1</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> fun1(<span class="hljs-number">1</span>): 找不到对象<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">##由于调用函数时找不到相应的变量所以报错</span><br><br>a &lt;- b &lt;- 1<br>fun1(<span class="hljs-number">1</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol><li> 当函数被调用时，先会在函数内部搜索变量，如果在内部找不到相应的变量，就会在自己被定义的地方(所在的域或者环境)而不是被调用的地方搜索相应的变量—-<strong>词法作用域</strong></li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r">f1 &lt;- <span class="hljs-keyword">function</span>(x)&#123;<br>  x + p <br>&#125;<br><br>g1 &lt;- <span class="hljs-keyword">function</span>(x)&#123;<br>  p &lt;- 1 <br>  f1(x)<br>&#125;<br><br>g1(<span class="hljs-number">0</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> f1(x): 找不到对象<span class="hljs-string">&#x27;p&#x27;</span><br><span class="hljs-comment">##在g1内部调用f1，f1先在其内部找p，找不到；接着f1到其被定义的域/环境中找p，也找不到(因为p是在g1内部被定义的)，所以会报错</span><br><br>p &lt;- 1<br>g1(<span class="hljs-number">0</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br><span class="hljs-comment">##在g1内部调用f1，f1先在其内部找p，找不到；接着f1到其被定义的域/环境中找p,这时就可以找到了</span><br></code></pre></td></tr></table></figure><p>接下来看一个有意思的例子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs r">f1 &lt;- <span class="hljs-keyword">function</span>(x)&#123;<br>  p &lt;- 1<br>  q &lt;- 2<br>  cat(sprintf(<span class="hljs-string">&quot;1. [f1] p: %d, q: %d\n&quot;</span>,p,q))<br>  f2 &lt;- <span class="hljs-keyword">function</span>(x)&#123;<br>    p &lt;- 3<br>    cat(sprintf(<span class="hljs-string">&quot;2. [f2] p: %d, q: %d\n&quot;</span>,p,q))<br>    <span class="hljs-built_in">c</span>(x=x, p=p, q=q)<br>  &#125;<br>  cat(sprintf(<span class="hljs-string">&quot;3. [f1] p: %d, q: %d&quot;</span>,p,q))<br>  f2(x)<br>&#125;<br><br>f1(<span class="hljs-number">0</span>)<br>&gt;&gt; <span class="hljs-number">1.</span> [f1] p: <span class="hljs-number">1</span>, q: <span class="hljs-number">2</span><br>&gt;&gt; <span class="hljs-number">3.</span> [f1] p: <span class="hljs-number">1</span>, q: <span class="hljs-number">22.</span> [f2] p: <span class="hljs-number">3</span>, q: <span class="hljs-number">2</span><br>&gt;&gt; x p q <br>&gt;&gt; <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><br><span class="hljs-comment">##注意运行的顺序和展示的值</span><br></code></pre></td></tr></table></figure><h2 id="环境的工作方式"><a href="#环境的工作方式" class="headerlink" title="环境的工作方式"></a>环境的工作方式</h2><p>环境是一组名称组成的对象，每个名称(变量)都指向一个对象，并且每个环境(除了空环境)都要一个父环境，当我们寻找某个名称的时候会沿着“环境链”进行搜索</p><p>我们可以通过<code>new.env</code>来创建新环境，通过$和[]来在新环境中创建变量(和列表操作类似)</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">e1 &lt;- new.env()<br>e1<br>&gt;&gt; &lt;environment: <span class="hljs-number">0x00000209ed933aa0</span>&gt;<br><span class="hljs-comment">##环境是用内存地址来表示</span><br><br><span class="hljs-comment">##创建变量</span><br>e1$x &lt;- 1<br>e1[[<span class="hljs-string">&quot;y&quot;</span>]] &lt;- <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>但是在访问变量的时候，环境不能像列表那样通过索引来提取元素：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r">e1[[<span class="hljs-number">1</span>]]<br>&gt;&gt; Error <span class="hljs-keyword">in</span> e1[[<span class="hljs-number">1</span>]]: 取子集环境时的参数不对<br>e1[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]<br>&gt;&gt; Error <span class="hljs-keyword">in</span> e1[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]: 类别为<span class="hljs-string">&#x27;environment&#x27;</span>的对象不可以取子集<br></code></pre></td></tr></table></figure><p>可以通过使用变量的名称或者专门的函数(exist/get/ls)来访问环境中的变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r">e1[[<span class="hljs-string">&quot;x&quot;</span>]]<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br><br>exists(<span class="hljs-string">&quot;x&quot;</span>,e1) <span class="hljs-comment">##exist判断某个变量是否在环境中</span><br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br>get(<span class="hljs-string">&quot;x&quot;</span>,e1)<span class="hljs-comment">##get从环境中获取相应的对象</span><br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br>ls(e1)<span class="hljs-comment">##ls查看环境中所有变量</span><br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;x&quot;</span> <span class="hljs-string">&quot;y&quot;</span><br></code></pre></td></tr></table></figure><p>环境还有两个重要的特征：</p><ul><li>  环境有父环境</li><li>  环境有引用语义</li></ul><h3 id="链接环境"><a href="#链接环境" class="headerlink" title="链接环境"></a>链接环境</h3><p>环境有父环境，当我们寻找一个变量的时候，在当前环境中找不到就会去父环境中寻找<br>在创建环境时可以指定其父环境：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">e2 &lt;- new.env(parent = e1) <span class="hljs-comment">##创建新环境e2，其父环境是e1</span><br>e1<br>&gt;&gt; &lt;environment: <span class="hljs-number">0x00000209ed933aa0</span>&gt;<br>e2<br>&gt;&gt; &lt;environment: <span class="hljs-number">0x00000209ece0a5b0</span>&gt;<br><br><span class="hljs-comment">##可以使用parent.env查看环境的父环境</span><br>parent.env(e2)<br>&gt;&gt; &lt;environment: <span class="hljs-number">0x00000209ed933aa0</span>&gt;<br><span class="hljs-comment">##可以看到和e1的内存地址一样</span><br></code></pre></td></tr></table></figure><p>需要注意的是：只有环境访问函数(exists/get)会沿着环境链寻找变量，操作符($/[])不会.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs r">e2$y &lt;- 2<br>ls(e2)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;y&quot;</span><br>e2[[<span class="hljs-string">&quot;y&quot;</span>]]<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br>e2$y<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br><br>exists(<span class="hljs-string">&quot;y&quot;</span>,e2)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br>exists(<span class="hljs-string">&quot;x&quot;</span>,e2)<span class="hljs-comment">##x在e2中并没有，但是exists会到e2的父环境e1中找到x</span><br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">TRUE</span><br>get(<span class="hljs-string">&quot;x&quot;</span>,e2)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br><br>e2[[<span class="hljs-string">&quot;x&quot;</span>]]<br>&gt;&gt; <span class="hljs-literal">NULL</span><br>e2$x<br>&gt;&gt; <span class="hljs-literal">NULL</span><br><br><span class="hljs-comment">##我们也可以让这些函数不去在父环境中寻找，加上参数inherits = FALSE</span><br>exists(<span class="hljs-string">&quot;x&quot;</span>,e2,inherits = <span class="hljs-literal">FALSE</span>)<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-literal">FALSE</span><br>get(<span class="hljs-string">&quot;x&quot;</span>,e2,inherits = <span class="hljs-literal">FALSE</span>)<br>&gt;&gt; Error <span class="hljs-keyword">in</span> get(<span class="hljs-string">&quot;x&quot;</span>, e2, inherits = <span class="hljs-literal">FALSE</span>): 找不到对象<span class="hljs-string">&#x27;x&#x27;</span><br></code></pre></td></tr></table></figure><p>当每次开启一个新的R会话时工作环境都会时R的一个内置环境，即全局环境(R_GlobalEnv)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">environment()<span class="hljs-comment">##使用environment()查看当前工作环境</span><br>&gt;&gt; &lt;environment: R_GlobalEnv&gt;<br><br><span class="hljs-comment">##还可以通过其他方式访问全局环境</span><br><span class="hljs-built_in">globalenv</span>()<br>&gt;&gt; &lt;environment: R_GlobalEnv&gt;<br>.GlobalEnv<br>&gt;&gt; &lt;environment: R_GlobalEnv&gt;<br></code></pre></td></tr></table></figure><p>那么全局环境的父环境是什么？全局环境的父环境的父环境是什么？最终有没有尽头呢？<br>我们可以通过下面的函数来探索一下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs r">parents &lt;- <span class="hljs-keyword">function</span>(env)&#123;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">TRUE</span>)&#123;<br>    name &lt;- environmentName(env)<br>    txt &lt;- <span class="hljs-keyword">if</span> (<span class="hljs-built_in">nzchar</span>(name))&#123;<br>      name<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      format(env)<br>    &#125;<br>    cat(txt,<span class="hljs-string">&quot;\n&quot;</span>)<br>    env &lt;- parent.env(env)<br>  &#125;<br>&#125;<br><br>parents(<span class="hljs-built_in">globalenv</span>())<br>&gt;&gt; R_GlobalEnv <br>&gt;&gt; package:rtracklayer <br>&gt;&gt; package:GenomicRanges <br>&gt;&gt; package:GenomeInfoDb <br>&gt;&gt; package:IRanges <br>&gt;&gt; package:S4Vectors <br>&gt;&gt; package:BiocGenerics <br>&gt;&gt; package:parallel <br>&gt;&gt; package:stats4 <br>&gt;&gt; package:dplyr <br>&gt;&gt; package:rmarkdown <br>&gt;&gt; tools:rstudio <br>&gt;&gt; package:stats <br>&gt;&gt; package:graphics <br>&gt;&gt; package:grDevices <br>&gt;&gt; package:utils <br>&gt;&gt; package:datasets <br>&gt;&gt; package:methods <br>&gt;&gt; Autoloads <br>&gt;&gt; base <br>&gt;&gt; R_EmptyEnv<br>&gt;&gt; Error <span class="hljs-keyword">in</span> parent.env(env): 空环境没有父母环境<br></code></pre></td></tr></table></figure><p>可以看到这个环境链条从空环境起始经过多个拓展包的环境最后终止于空环境，并且空环境没有父环境，这个结果和search(搜索路径)的结果相似：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r">search()<br>&gt;&gt;  [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;.GlobalEnv&quot;</span>            <span class="hljs-string">&quot;package:rtracklayer&quot;</span>   <span class="hljs-string">&quot;package:GenomicRanges&quot;</span> <span class="hljs-string">&quot;package:GenomeInfoDb&quot;</span> <br>&gt;&gt;  [<span class="hljs-number">5</span>] <span class="hljs-string">&quot;package:IRanges&quot;</span>       <span class="hljs-string">&quot;package:S4Vectors&quot;</span>     <span class="hljs-string">&quot;package:BiocGenerics&quot;</span>  <span class="hljs-string">&quot;package:parallel&quot;</span>     <br>&gt;&gt;  [<span class="hljs-number">9</span>] <span class="hljs-string">&quot;package:stats4&quot;</span>        <span class="hljs-string">&quot;package:dplyr&quot;</span>         <span class="hljs-string">&quot;package:rmarkdown&quot;</span>     <span class="hljs-string">&quot;tools:rstudio&quot;</span>        <br>&gt;&gt; [<span class="hljs-number">13</span>] <span class="hljs-string">&quot;package:stats&quot;</span>         <span class="hljs-string">&quot;package:graphics&quot;</span>      <span class="hljs-string">&quot;package:grDevices&quot;</span>     <span class="hljs-string">&quot;package:utils&quot;</span>        <br>&gt;&gt; [<span class="hljs-number">17</span>] <span class="hljs-string">&quot;package:datasets&quot;</span>      <span class="hljs-string">&quot;package:methods&quot;</span>       <span class="hljs-string">&quot;Autoloads&quot;</span>             <span class="hljs-string">&quot;package:base&quot;</span><br></code></pre></td></tr></table></figure><p>需要注意的是：我们每加载一个包，该包的环境就会加到全局路径的后面，所以如果需要调用两个包中同名函数，会优先选取后加载的包的函数(后加载的包mask了前面包的同名函数)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs r">library(dplyr)<br>search()<br>&gt;&gt;  [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;.GlobalEnv&quot;</span>            <span class="hljs-string">&quot;package:rtracklayer&quot;</span>   <span class="hljs-string">&quot;package:GenomicRanges&quot;</span> <span class="hljs-string">&quot;package:GenomeInfoDb&quot;</span> <br>&gt;&gt;  [<span class="hljs-number">5</span>] <span class="hljs-string">&quot;package:IRanges&quot;</span>       <span class="hljs-string">&quot;package:S4Vectors&quot;</span>     <span class="hljs-string">&quot;package:BiocGenerics&quot;</span>  <span class="hljs-string">&quot;package:parallel&quot;</span>     <br>&gt;&gt;  [<span class="hljs-number">9</span>] <span class="hljs-string">&quot;package:stats4&quot;</span>        <span class="hljs-string">&quot;package:dplyr&quot;</span>         <span class="hljs-string">&quot;package:rmarkdown&quot;</span>     <span class="hljs-string">&quot;tools:rstudio&quot;</span>        <br>&gt;&gt; [<span class="hljs-number">13</span>] <span class="hljs-string">&quot;package:stats&quot;</span>         <span class="hljs-string">&quot;package:graphics&quot;</span>      <span class="hljs-string">&quot;package:grDevices&quot;</span>     <span class="hljs-string">&quot;package:utils&quot;</span>        <br>&gt;&gt; [<span class="hljs-number">17</span>] <span class="hljs-string">&quot;package:datasets&quot;</span>      <span class="hljs-string">&quot;package:methods&quot;</span>       <span class="hljs-string">&quot;Autoloads&quot;</span>             <span class="hljs-string">&quot;package:base&quot;</span><br><br>library(data.table)<br>&gt;&gt; Warning: package <span class="hljs-string">&#x27;data.table&#x27;</span> was built under R version <span class="hljs-number">3.6</span>.2<br>search()<br>&gt;&gt;  [<span class="hljs-number">1</span>] <span class="hljs-string">&quot;.GlobalEnv&quot;</span>            <span class="hljs-string">&quot;package:data.table&quot;</span>    <span class="hljs-string">&quot;package:rtracklayer&quot;</span>   <span class="hljs-string">&quot;package:GenomicRanges&quot;</span><br>&gt;&gt;  [<span class="hljs-number">5</span>] <span class="hljs-string">&quot;package:GenomeInfoDb&quot;</span>  <span class="hljs-string">&quot;package:IRanges&quot;</span>       <span class="hljs-string">&quot;package:S4Vectors&quot;</span>     <span class="hljs-string">&quot;package:BiocGenerics&quot;</span> <br>&gt;&gt;  [<span class="hljs-number">9</span>] <span class="hljs-string">&quot;package:parallel&quot;</span>      <span class="hljs-string">&quot;package:stats4&quot;</span>        <span class="hljs-string">&quot;package:dplyr&quot;</span>         <span class="hljs-string">&quot;package:rmarkdown&quot;</span>    <br>&gt;&gt; [<span class="hljs-number">13</span>] <span class="hljs-string">&quot;tools:rstudio&quot;</span>         <span class="hljs-string">&quot;package:stats&quot;</span>         <span class="hljs-string">&quot;package:graphics&quot;</span>      <span class="hljs-string">&quot;package:grDevices&quot;</span>    <br>&gt;&gt; [<span class="hljs-number">17</span>] <span class="hljs-string">&quot;package:utils&quot;</span>         <span class="hljs-string">&quot;package:datasets&quot;</span>      <span class="hljs-string">&quot;package:methods&quot;</span>       <span class="hljs-string">&quot;Autoloads&quot;</span>            <br>&gt;&gt; [<span class="hljs-number">21</span>] <span class="hljs-string">&quot;package:base&quot;</span><br><br><span class="hljs-comment">##可以看到data.table到前面去了</span><br></code></pre></td></tr></table></figure><h3 id="引用语义"><a href="#引用语义" class="headerlink" title="引用语义"></a>引用语义</h3><p>引用语义指的是：修改环境并不会复制环境的副本(也就是没有复制修改机制)：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r">e3 &lt;- e1<br>e1$x<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br>e3$x<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">1</span><br><br>e3$x &lt;- 2<br>e1$x<br>&gt;&gt; [<span class="hljs-number">1</span>] <span class="hljs-number">2</span><br><span class="hljs-comment">##因此e3和e1指向同一个对象，改变e3中的变量值，e1中的变量值也会改变</span><br></code></pre></td></tr></table></figure><h3 id="与函数相关的环境"><a href="#与函数相关的环境" class="headerlink" title="与函数相关的环境"></a>与函数相关的环境</h3><p>有3个与函数及其运行过程相关的环境：</p><ul><li>执行环境(executing environment):<br>  每次函数执行时，R都会新建一个环境来管理函数的执行过程，所以函数的参数和在函数内部创建的变量都是执行环境中的变量</li><li>封闭环境(enclosing<br>  environment)：定义函数的环境，也是执行环境的父环境，所以在函数执行的时候，没有在执行环境中找到的变量就会到其父环境，也就是封闭环境中寻找(词法作用域)，可以使用environment()来获取函数的封闭环境</li><li>调用环境(calling environment):<br>  调用函数的环境，可以使用parent.frame()来获取调用环境</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习入门</title>
    <link href="/2021/01/03/deep_learning/"/>
    <url>/2021/01/03/deep_learning/</url>
    
    <content type="html"><![CDATA[<p>主要内容来自<em>深度学习入门</em>：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201227171954771.png"></p><h2 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h2><p>感知机也可以称为人工神经元，是神经网络的基础</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223224321725.png"></p><p>感知机接受多个信号(x1,x2)，输出一个信号(y), w1/w2是权重，圆圈就代表神经元</p><p>输入信号被传递到神经元的时候会被乘上<strong>权重</strong>(<em>w</em>1<em>x</em>1、<em>w</em>2<em>x</em>2)，神经元会计算输入的信号总和，只有这个总和超过某个阈值才会输出1，这个状态就叫做神经元的激活，这个过程用函数表示如下( $\theta$表示阈值)：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223224937885.png"></p><p>也可以对上式进行形式上的转化(将$\theta$移到左边)：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223225500139.png"></p><p>这里面b叫做<strong>偏置</strong></p><p>可以看出<em>w</em>1和<em>w</em>2是控制输入信号的重要性的参数，而偏置b是调整神经元被激活的容易程度的参数</p><p>我们再进一步简化上面函数的形式，引入一个新的函数$h(x)$，将上面的函数改写：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223230119601.png"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223230140674.png"></p><p>函数$h(x)$对输入信号的总和进行转化，转化后的值就是输出y</p><p>这个函数$h(x)$就是<strong>激活函数</strong></p><p>我们可以将上面的感知机进行细化，展示出激活函数的运算过程：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223230609708.png"></p><p>$a=w_1x_1+w_2x_2+b$, $y=h(a)$ </p><p><em>a</em>计算计算加权输入信号和偏置的总和，用<em>h</em>(x)函数将<em>a</em>转换为输出<em>y</em></p><p>这样的激活函数称为<strong>阶跃函数</strong>，超过某个阈值就会改变函数的输出，函数的图像呈阶梯状：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223231248638.png"></p><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>神经网络可以看作是多层感知机，并且使用的激活函数不再是阶跃函数了</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223233340355.png"></p><p>上图展示的是一个简单的3层(从0开始计算)神经网络</p><p>先来看一下常用的激活函数：</p><h3 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a><code>sigmoid</code>函数</h3><p><code>sigmoid</code>函数的表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223233716730.png"></p><p>可以通过<code>python</code>简单的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pylab <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment">###sigmoid function</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sigmoid</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x)) <br><br>X = np.arange(-<span class="hljs-number">5.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">0.1</span>)<br>Y = sigmoid(X)<br>plt.plot(X, Y)<br>plt.ylim(-<span class="hljs-number">0.1</span>, <span class="hljs-number">1.1</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201223234952100.png"></p><p><code>sigmoid</code>函数和阶跃函数的主要区别在于其是平滑的曲线，连续可导</p><h3 id="ReLU函数"><a href="#ReLU函数" class="headerlink" title="ReLU函数"></a><code>ReLU</code>函数</h3><p><code>ReLU</code>全称为Rectified Linear Unit，线性整流函数</p><p><code>ReLU</code>函数在输入大于0时，直接输出该值；在输入小于等于0时，输出0:</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110740713.png" alt="image-20210103110740713"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##relu</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">relu</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> np.maximum(<span class="hljs-number">0</span>, x)<br><br>x = np.arange(-<span class="hljs-number">5.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">0.1</span>)<br>y = relu(x)<br>plt.plot(x, y)<br>plt.ylim(-<span class="hljs-number">1.0</span>, <span class="hljs-number">5.5</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110758248.png" alt="image-20210103110758248"></p><h3 id="3层神经网络的实现"><a href="#3层神经网络的实现" class="headerlink" title="3层神经网络的实现"></a>3层神经网络的实现</h3><p>各层间信号的传递可以用下图来表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110840483.png" alt="image-20210103110840483"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#####three layer network</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_network</span>():</span><br> network = &#123;&#125;<br> network[<span class="hljs-string">&#x27;W1&#x27;</span>] = np.array([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.5</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.6</span>]])<br> network[<span class="hljs-string">&#x27;b1&#x27;</span>] = np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>])<br> network[<span class="hljs-string">&#x27;W2&#x27;</span>] = np.array([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.4</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>], [<span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>]])<br> network[<span class="hljs-string">&#x27;b2&#x27;</span>] = np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>])<br> network[<span class="hljs-string">&#x27;W3&#x27;</span>] = np.array([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>]])<br> network[<span class="hljs-string">&#x27;b3&#x27;</span>] = np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>])<br> <span class="hljs-keyword">return</span> network<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">network, x</span>):</span><br> W1, W2, W3 = network[<span class="hljs-string">&#x27;W1&#x27;</span>], network[<span class="hljs-string">&#x27;W2&#x27;</span>], network[<span class="hljs-string">&#x27;W3&#x27;</span>]<br> b1, b2, b3 = network[<span class="hljs-string">&#x27;b1&#x27;</span>], network[<span class="hljs-string">&#x27;b2&#x27;</span>], network[<span class="hljs-string">&#x27;b3&#x27;</span>]<br> a1 = np.dot(x, W1) + b1<br> z1 = sigmoid(a1)<br> a2 = np.dot(z1, W2) + b2<br> z2 = sigmoid(a2)<br> a3 = np.dot(z2, W3) + b3<br> y = identity_function(a3)<br> <span class="hljs-keyword">return</span> y<br><br><br>network = init_network()<br>x = np.array([<span class="hljs-number">1.0</span>, <span class="hljs-number">0.5</span>])<span class="hljs-comment">##初始输入</span><br>y = forward(network, x)<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><p>这里面需要注意的点是输出层的激活函数使用的是恒等函数，一般地，回归问题可以使用恒等函数，二元分类问题可以使用 sigmoid函数，多元分类问题可以使用 softmax函数</p><p>softmax函数可以表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201227183549421.png"></p><p>但是这个函数在进行计算的时候，指数运算可能会产生非常大的数(可能会出现Inf)，需要对其进行变换：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110919951.png" alt="image-20210103110919951"></p><p>可以将$C’$替换为输入信号的最大值的负值来减小运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">softmax</span>(<span class="hljs-params">a</span>):</span><br> c = np.<span class="hljs-built_in">max</span>(a)<br> exp_a = np.exp(a - c) <span class="hljs-comment"># 溢出对策</span><br> sum_exp_a = np.<span class="hljs-built_in">sum</span>(exp_a)<br> y = exp_a / sum_exp_a<br> <span class="hljs-keyword">return</span> y<br><br> a = np.array([<span class="hljs-number">0.3</span>, <span class="hljs-number">2.9</span>, <span class="hljs-number">4.0</span>])<br> y = softmax(a)<br> <span class="hljs-built_in">print</span>(y)<span class="hljs-comment">#[0.01821127 0.24519181 0.73659691]</span><br> np.<span class="hljs-built_in">sum</span>(y)<span class="hljs-comment">#1.0</span><br></code></pre></td></tr></table></figure><p>softmax函数会将输入信号映射到0~1上，并且转化后的值总和为1，这就使我们可以把softmax函数的输出解释为</p><p>概率值；另外指数函数在求导时也比较方便(导数还是指数函数)</p><h2 id="神经网络的学习"><a href="#神经网络的学习" class="headerlink" title="神经网络的学习"></a>神经网络的学习</h2><p>神经网络的学习过程就是通过某种指标来寻找最优权重参数，这个指标就称为<strong>损失函数</strong>,损失函数表示的是神经网络对当前训练数据在多大程度上不拟合，所以目标就是使损失函数尽可能小</p><p>损失函数一般使用均方误差和交叉熵误差</p><p><strong>均方误差</strong>如下所示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110936719.png" alt="image-20210103110936719"></p><p>y表示神经网络得输出，t表示训练数据，k表示维度</p><p>分类问题和回归问题都可以使用均方误差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###mean_squared_error</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mean_squared_error</span>(<span class="hljs-params">y, t</span>):</span><br> <span class="hljs-keyword">return</span> <span class="hljs-number">0.5</span> * np.<span class="hljs-built_in">sum</span>((y-t)**<span class="hljs-number">2</span>)<br><br><br>t = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>y = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>]<br>mean_squared_error(np.array(y), np.array(t))<br><span class="hljs-comment">##0.09750000000000003</span><br><br>y = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>]<br>mean_squared_error(np.array(y), np.array(t))<br><span class="hljs-comment">##0.5975</span><br></code></pre></td></tr></table></figure><p><strong>交叉熵误差</strong>一般作为分类问题的损失函数：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103110944944.png" alt="image-20210103110944944"></p><p>y表示神经网络的输出，t表示训练数据的标签，相应的类标签为1，其他为0，所以交叉熵误差只计算正确标签对应的神经网络的输出，当这个输出越接近于1，E值就越小(等于1时,E=0)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cross_entropy_error</span>(<span class="hljs-params">y, t</span>):</span><br> delta = <span class="hljs-number">1e-7</span><br> <span class="hljs-keyword">return</span> -np.<span class="hljs-built_in">sum</span>(t * np.log(y + delta))<br><br>t = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>y = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>]<br>cross_entropy_error(np.array(y), np.array(t))<br><span class="hljs-comment">##0.510825457099338</span><br><br>y = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>]<br>cross_entropy_error(np.array(y), np.array(t))<br><span class="hljs-comment">##2.302584092994546</span><br></code></pre></td></tr></table></figure><p>神经网络学习的任务就是找到损失函数取最小值(或尽可能小)时的参数(权重和偏置)，这个过程可以通过梯度法来实现</p><h3 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h3><p>在介绍梯度之前需要知道导数的概念</p><p>导数表示的是某个瞬间的变化量，即<em>x</em>的微小变化将导致函数<em>f</em>（<em>x</em>）的值在多大程度上发生变化：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201224122322725.png"></p><p>在实现求导的时候，可以人为导入一个微小的h，并且使用中心差分的形式($f(x+h)-f(x-h)$,以x为中心可以减少误差)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numerical_diff</span>(<span class="hljs-params">f, x</span>):</span><br> h = <span class="hljs-number">1e-4</span><br> <span class="hljs-keyword">return</span> (f(x+h) - f(x-h)) / (<span class="hljs-number">2</span>*h)<br></code></pre></td></tr></table></figure><p>这种通过微小的差分来求导数的过程称为数值微分，和利用数学推导求导数的解析性求导区分</p><p>当我们需要对有多个变量的函数中每个变量进行求导，这个时候的导数就叫做偏导数，求偏导数就是将某个变量定为目标变量，其余变量固定为常数，然后对目标变量求导的过程</p><p>比如有一个二变量的函数：$f(x_0,x_1)=x_0^2+x_1^2$ ,求$x_0=3,x_1=4$的时候，关于各个变量的偏导数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##定义函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">function_2</span>(<span class="hljs-params">x</span>):</span><br><span class="hljs-keyword">return</span> x[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span> + x[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>求偏导就是将无关的变量设为常量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##x0</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">function_tmp1</span>(<span class="hljs-params">x0</span>):</span><br><span class="hljs-keyword">return</span> x0*x0 + <span class="hljs-number">4.0</span>**<span class="hljs-number">2.0</span><br><br>numerical_diff(function_tmp1, <span class="hljs-number">3.0</span>)<span class="hljs-comment">#6.00000000000378</span><br><br><span class="hljs-comment">##x1</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">function_tmp2</span>(<span class="hljs-params">x1</span>):</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">3.0</span>**<span class="hljs-number">2.0</span> + x1*x1<br><br>numerical_diff(function_tmp2, <span class="hljs-number">4.0</span>)<span class="hljs-comment">#7.999999999999119</span><br></code></pre></td></tr></table></figure><p>由全部变量的偏导数汇总而成的向量称为<strong>梯度</strong>（gradient）比如对于上面的二变量函数，梯度就是$(\frac{\partial f}{\partial x_0},\frac{\partial f}{\partial x_1})$ 构成的向量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numerical_gradient</span>(<span class="hljs-params">f, x</span>):</span><br>    h = <span class="hljs-number">1e-4</span> <br>    grad = np.zeros_like(x) <span class="hljs-comment"># 生成和x形状相同的数组</span><br>    <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x.size):<br>        tmp_val = x[idx]<br>        <span class="hljs-comment"># f(x+h)的计算</span><br>        x[idx] = tmp_val + h<br>        fxh1 = f(x)<br>        <span class="hljs-comment"># f(x-h)的计算</span><br>        x[idx] = tmp_val - h<br>        fxh2 = f(x)<br>        grad[idx] = (fxh1 - fxh2) / (<span class="hljs-number">2</span>*h)<br>        x[idx] = tmp_val <span class="hljs-comment"># 还原值</span><br>    <span class="hljs-keyword">return</span> grad<br><br>numerical_gradient(function_2, np.array([<span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>]))<br><span class="hljs-comment">#array([6., 8.])</span><br></code></pre></td></tr></table></figure><p>计算这个函数各点的梯度：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111038666.png" alt="image-20210103111038666"></p><p>这个箭头就代表了梯度，可以看到梯度的方向指向这个函数的最小值(0,0); 虽然在其他情况下梯度的方向并不总是指向最小值，但沿着它的方向能够最大限度地减小函数的值；因此通过不断地沿梯度方向前进，逐渐减小函数值的过程就是<strong>梯度法</strong>（gradient method）(一般指的的梯度下降)</p><p>用数学式表示梯度法：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111049842.png" alt="image-20210103111049842"></p><p>其中<em>η</em>表示更新量，表示每次沿着梯度的方向下降的程度，在神经网络中称为<strong>学习率</strong>(learning rate)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##gradient_descent</span><br><span class="hljs-comment">##f 进行最优化的函数</span><br><span class="hljs-comment">##init_x 初始值</span><br><span class="hljs-comment">##lr 学习率</span><br><span class="hljs-comment">##step_num 迭代次数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gradient_descent</span>(<span class="hljs-params">f, init_x, lr=<span class="hljs-number">0.01</span>, step_num=<span class="hljs-number">100</span></span>):</span><br>    x = init_x<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(step_num):<br>     grad = numerical_gradient(f, x)<br>     x -= lr * grad<br>    <span class="hljs-keyword">return</span> x<br><br>init_x = np.array([-<span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>])<br>gradient_descent(function_2, init_x=init_x, lr=<span class="hljs-number">0.1</span>, step_num=<span class="hljs-number">100</span>)<br><span class="hljs-comment">#array([-6.11110793e-10,  8.14814391e-10])</span><br></code></pre></td></tr></table></figure><p>像学习率这样的参数称为<strong>超参数</strong> ， 神经网络的权重参数是通过学习得到的，而超参数是人为设定的，所以需要尝试</p><h3 id="学习算法的实现"><a href="#学习算法的实现" class="headerlink" title="学习算法的实现"></a>学习算法的实现</h3><p>神经网络的学习步骤可以分成以下几步：</p><ul><li>mini-batch: 从训练数据中随机选出一部分数据，这部分数据称为mini batch。我们的目标是减小mini batch的损失函数的值</li><li>计算梯度：为了减小mini batch的损失函数的值，需要求出各个权重参数的梯度；梯度表示损失函数的值减小最多的方向</li><li>更新参数：将权重参数沿梯度方向进行微小更新</li><li>迭代：重复前3个步骤</li></ul><p>由于选择mini batch是随机的，因此这种方法叫做<strong>随机梯度下降法</strong>(stochastic gradient descent,SGD)</p><p>下面是两层神经网络的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###TwoLayerNet</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoLayerNet</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, input_size, hidden_size, output_size, weight_init_std=<span class="hljs-number">0.01</span></span>):</span><br>        <span class="hljs-comment"># 初始化权重</span><br>        self.params = &#123;&#125;<br>        self.params[<span class="hljs-string">&#x27;W1&#x27;</span>] = weight_init_std * np.random.randn(input_size, hidden_size)<br>        self.params[<span class="hljs-string">&#x27;b1&#x27;</span>] = np.zeros(hidden_size)<br>        self.params[<span class="hljs-string">&#x27;W2&#x27;</span>] = weight_init_std * np.random.randn(hidden_size, output_size)<br>        self.params[<span class="hljs-string">&#x27;b2&#x27;</span>] = np.zeros(output_size)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">predict</span>(<span class="hljs-params">self, x</span>):</span><br>        W1, W2 = self.params[<span class="hljs-string">&#x27;W1&#x27;</span>], self.params[<span class="hljs-string">&#x27;W2&#x27;</span>]<br>        b1, b2 = self.params[<span class="hljs-string">&#x27;b1&#x27;</span>], self.params[<span class="hljs-string">&#x27;b2&#x27;</span>]<br>    <br>        a1 = np.dot(x, W1) + b1<br>        z1 = sigmoid(a1)<br>        a2 = np.dot(z1, W2) + b2<br>        y = softmax(a2)<br>        <br>        <span class="hljs-keyword">return</span> y<br>        <br>    <span class="hljs-comment"># x:输入数据, t:监督数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loss</span>(<span class="hljs-params">self, x, t</span>):</span><br>        y = self.predict(x)<br>        <br>        <span class="hljs-keyword">return</span> cross_entropy_error(y, t)<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">accuracy</span>(<span class="hljs-params">self, x, t</span>):</span><br>        y = self.predict(x)<br>        y = np.argmax(y, axis=<span class="hljs-number">1</span>)<br>        t = np.argmax(t, axis=<span class="hljs-number">1</span>)<br>        <br>        accuracy = np.<span class="hljs-built_in">sum</span>(y == t) / <span class="hljs-built_in">float</span>(x.shape[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> accuracy<br>        <br>    <span class="hljs-comment"># x:输入数据, t:监督数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numerical_gradient</span>(<span class="hljs-params">self, x, t</span>):</span><br>        loss_W = <span class="hljs-keyword">lambda</span> W: self.loss(x, t)<br>        <br>        grads = &#123;&#125;<br>        grads[<span class="hljs-string">&#x27;W1&#x27;</span>] = numerical_gradient(loss_W, self.params[<span class="hljs-string">&#x27;W1&#x27;</span>])<br>        grads[<span class="hljs-string">&#x27;b1&#x27;</span>] = numerical_gradient(loss_W, self.params[<span class="hljs-string">&#x27;b1&#x27;</span>])<br>        grads[<span class="hljs-string">&#x27;W2&#x27;</span>] = numerical_gradient(loss_W, self.params[<span class="hljs-string">&#x27;W2&#x27;</span>])<br>        grads[<span class="hljs-string">&#x27;b2&#x27;</span>] = numerical_gradient(loss_W, self.params[<span class="hljs-string">&#x27;b2&#x27;</span>])<br>        <br>        <span class="hljs-keyword">return</span> grads<br></code></pre></td></tr></table></figure><p>我们接下来在MNIST数据集上(MNIST的图像数据是28像素 <em>×</em> 28像素的灰度图像,各个像素的取值在0到255之间。每个图像数据都相应地标有相应的标签)利用这个两层神经网络实现手写体的识别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###MNIST</span><br><span class="hljs-comment"># 读入数据</span><br><span class="hljs-keyword">from</span> dataset.mnist <span class="hljs-keyword">import</span> load_mnist<br>(x_train, t_train), (x_test, t_test) = load_mnist(normalize=<span class="hljs-literal">True</span>, one_hot_label=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(x_train.shape)<br><span class="hljs-built_in">print</span>(t_train.shape)<br><span class="hljs-built_in">print</span>(x_test.shape)<br><span class="hljs-built_in">print</span>(t_test.shape)<br><br><br>network = TwoLayerNet(input_size=<span class="hljs-number">784</span>, hidden_size=<span class="hljs-number">50</span>, output_size=<span class="hljs-number">10</span>)<br><br>iters_num = <span class="hljs-number">10000</span>  <span class="hljs-comment"># 适当设定循环的次数</span><br>train_size = x_train.shape[<span class="hljs-number">0</span>]<br>batch_size = <span class="hljs-number">100</span><br>learning_rate = <span class="hljs-number">0.1</span><br><br>train_loss_list = []<br>train_acc_list = []<br>test_acc_list = []<br><br><span class="hljs-comment">##平均每个epoch的重复次数</span><br>iter_per_epoch = <span class="hljs-built_in">max</span>(train_size / batch_size, <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iters_num):<br>    batch_mask = np.random.choice(train_size, batch_size)<br>    x_batch = x_train[batch_mask]<br>    t_batch = t_train[batch_mask]<br>    <br>    <span class="hljs-comment"># 计算梯度</span><br>    grad = network.numerical_gradient(x_batch, t_batch)<br>    <br>    <span class="hljs-comment"># 更新参数</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;W1&#x27;</span>, <span class="hljs-string">&#x27;b1&#x27;</span>, <span class="hljs-string">&#x27;W2&#x27;</span>, <span class="hljs-string">&#x27;b2&#x27;</span>):<br>        network.params[key] -= learning_rate * grad[key]<br>    <br>    <span class="hljs-comment">##记录学习过程</span><br>    loss = network.loss(x_batch, t_batch)<br>    train_loss_list.append(loss)<br>    <br>    <span class="hljs-comment">#计算每个epoch的识别精度</span><br>    <span class="hljs-keyword">if</span> i % iter_per_epoch == <span class="hljs-number">0</span>:<br>        train_acc = network.accuracy(x_train, t_train)<br>        test_acc = network.accuracy(x_test, t_test)<br>        train_acc_list.append(train_acc)<br>        test_acc_list.append(test_acc)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;train acc, test acc | &quot;</span> + <span class="hljs-built_in">str</span>(train_acc) + <span class="hljs-string">&quot;, &quot;</span> + <span class="hljs-built_in">str</span>(test_acc))<br><br><span class="hljs-comment"># 绘制图形</span><br>markers = &#123;<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-string">&#x27;s&#x27;</span>&#125;<br>x = np.arange(<span class="hljs-built_in">len</span>(train_acc_list))<br>plt.plot(x, train_acc_list, label=<span class="hljs-string">&#x27;train acc&#x27;</span>)<br>plt.plot(x, test_acc_list, label=<span class="hljs-string">&#x27;test acc&#x27;</span>, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;epochs&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;accuracy&quot;</span>)<br>plt.ylim(<span class="hljs-number">0</span>, <span class="hljs-number">1.0</span>)<br>plt.legend(loc=<span class="hljs-string">&#x27;lower right&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>先将所有训练数据随机打乱，然后按指定的批次大小，按序生成mini batch，给每个batch编号，按顺序遍历所有的batch，遍历一次所有的batch称为一个epoch(但是上面的实现是随机选取的)</p><h3 id="误差反向传播算法"><a href="#误差反向传播算法" class="headerlink" title="误差反向传播算法"></a>误差反向传播算法</h3><p>上面我们通过数值微分来计算权重参数的梯度，但是计算非常费时间，而误差反向传播算法就是一个可以高效计算权重参数的方法，这里通过<strong>计算图</strong>的方式来理解误差方向传播计算梯度的方法</p><p>先来介绍计算图：</p><p>问题是：超市买了2个100日元一个的苹果，消费税是10%，请计算支付金额</p><p>可以通过计算图来计算这个过程：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111113876.png" alt="image-20210103111113876"></p><p>箭头上面标上结果，在节点内部进行计算</p><p>这种从左到右的计算方向称为正向传播，如果我们现在要计算<em>苹果价格的波动会在多大程度上影响最终的支付金额</em>，也就是要计算最终的支付金额对苹果价格的导数，这个时候就可以从右到左进行计算导数，这个过程就叫<strong>反向传播</strong></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111122966.png" alt="image-20210103111122966"></p><p>反向传播的计算顺序为：将传来的信号乘以局部导数再传递给下个节点</p><p>反向传播实现的关键是<strong>链式法则</strong>：</p><blockquote><p>如果某个函数由复合函数表示，则该复合函数的导数可以用构成复合函数的各个函数的导数的乘积表示</p></blockquote><p>举个例子：有一个函数：$z=(x+y)^2$是复合函数，可以拆成两个函数：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111132022.png" alt="image-20210103111132022"></p><p>那么这个函数对x的偏导数就可以这样求：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111139878.png" alt="image-20210103111139878"></p><p>这个过程利用计算图求解如下：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111151298.png" alt="image-20210103111151298"></p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111206447.png" alt="image-20210103111206447"></p><p>我们现在基于计算图来实现各个层的反向传播</p><p>首先是加法节点：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111217127.png" alt="image-20210103111217127"></p><p>左边是正向传播，右边是反向传播</p><p>由于$\frac{\partial f}{\partial x}和\frac{\partial f}{\partial y}$都等于1，所以加法节点将上游的值<strong>原封不动地输出到下游</strong></p><p>然后是乘法节点，考虑$z=xy$：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111230193.png" alt="image-20210103111230193"></p><p>因此乘法的反向传播会<strong>乘以输入信号的翻转值</strong>，所以在实现乘法的反向传播的时候需要保存正向传播的输入信号</p><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MulLayer</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.x = <span class="hljs-literal">None</span><br>        self.y = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x, y</span>):</span><br>        self.x = x<br>        self.y = y<br>        out = x * y<br>        <span class="hljs-keyword">return</span> out<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backward</span>(<span class="hljs-params">self, dout</span>):</span><br>        dx = dout * self.y <span class="hljs-comment"># 翻转x和y</span><br>        dy = dout * self.x<br>        <span class="hljs-keyword">return</span> dx, dy<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddLayer</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x, y</span>):</span><br>        out = x + y<br>        <span class="hljs-keyword">return</span> out<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backward</span>(<span class="hljs-params">self, dout</span>):</span><br>        dx = dout * <span class="hljs-number">1</span><br>        dy = dout * <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> dx, dy<br></code></pre></td></tr></table></figure><p>接下来实现激活函数ReLU层和Sigmoid层</p><p><strong>ReLU激活函数</strong>及其导数：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111246475.png" alt="image-20210103111246475"></p><p>用计算图表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111257385.png" alt="image-20210103111257385"></p><p>ReLU激活函数就像一个开关，正向传播的时候有电流通过就将开关打开，这个时候反向传播电流就会直接通过；如果正向传播时没有电流就把开关关闭，反向传播时就不会有电流通过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Relu</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.mask = <span class="hljs-literal">None</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br>        self.mask = (x &lt;= <span class="hljs-number">0</span>)<br>        out = x.copy()<br>        out[self.mask] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> out<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backward</span>(<span class="hljs-params">self, dout</span>):</span><br>        dout[self.mask] = <span class="hljs-number">0</span><br>        dx = dout<br>        <span class="hljs-keyword">return</span> dx<br></code></pre></td></tr></table></figure><p><strong>sigmoid函数</strong>为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111308934.png" alt="image-20210103111308934"></p><p>利用计算图表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111321535.png" alt="image-20210103111321535"></p><p>这里面出现了几个新的节点：<code>/</code>和<code>exp</code>节点</p><p><code>/</code>节点表示的函数为：$y=\frac{1}{x}$ ,导数为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111330640.png" alt="image-20210103111330640"></p><p>因此该节点将上游的值乘以正向传播的输出平方后再乘以-1传给下游</p><p><code>exp</code>节点表示$y=exp(x)$ 其导数还是其自身：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111338055.png" alt="image-20210103111338055"></p><p>因此<code>exp</code>节点将上游的值乘以正向传播的输出后传给下游</p><p>所以结合前面的<code>+</code>和<code>×</code>节点，sigmoid的导数计算图为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111349060.png" alt="image-20210103111349060"></p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201224171928291.png" alt="image-20201224171928291" style="zoom:67%;" /><p>进一步整理得到：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111358136.png" alt="image-20210103111358136"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sigmoid</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.out = <span class="hljs-literal">None</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br>        out = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))<br>        self.out = out<br>        <span class="hljs-keyword">return</span> out<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backward</span>(<span class="hljs-params">self, dout</span>):</span><br>        dx = dout * (<span class="hljs-number">1.0</span> - self.out) * self.out<br>        <span class="hljs-keyword">return</span> dx<br></code></pre></td></tr></table></figure><p>对输入信号进行加权求和的层叫做<strong>Affine层</strong>，可以用如下的计算图来表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111408215.png" alt="image-20210103111408215"></p><p>其中dot表示矩阵相乘</p><p>其反向传播过程：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111416858.png" alt="image-20210103111416858"></p><p>对于1，2可以类比于乘法，再根据矩阵的维度来理解:比如$\frac{\partial (X \cdot W) }{\partial X}$  如果结果是W，那么W的维度为(2,3)而$\frac{\partial L}{\partial Y}$的维度为(3,1),这样就不能相乘，所以结果是W的转置</p><p>基于上面的计算图，可以使用python来实现<strong>Affine层</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Affine</span>:</span><br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, W, b</span>):</span><br> self.W = W<br> self.b = b<br> self.x = <span class="hljs-literal">None</span><br> self.dW = <span class="hljs-literal">None</span><br> self.db = <span class="hljs-literal">None</span><br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br> self.x = x<br> out = np.dot(x, self.W) + self.b<br> <span class="hljs-keyword">return</span> out<br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backward</span>(<span class="hljs-params">self, dout</span>):</span><br> dx = np.dot(dout, self.W.T)<br> self.dW = np.dot(self.x.T, dout)<br> self.db = np.<span class="hljs-built_in">sum</span>(dout, axis=<span class="hljs-number">0</span>)<br> <span class="hljs-keyword">return</span> dx<br></code></pre></td></tr></table></figure><p>最后还有一个比较重要的是<strong>Softmax-with-Loss 层</strong> ,也就是包含Softmax函数和交叉熵误差的层</p><p>交叉熵误差表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111429635.png" alt="image-20210103111429635"></p><p>用计算图表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111437312.png" alt="image-20210103111437312"></p><p>这个反向传播的要注意的就是log节点：</p><p>log函数为$y=log(x)$ ,所以其导数为$\frac{\partial y }{\partial x}=\frac{1}{x}$ ，而加节点(原封不动)和乘节点(翻转)之前已经见过了</p><p>因此交叉熵误差的反向传播用计算图表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111446952.png" alt="image-20210103111446952"></p><p>Softmax函数为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111453904.png" alt="image-20210103111453904"></p><p>用计算图表示为：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111502001.png" alt="image-20210103111502001"></p><p>反向传播可以分成几个步骤：</p><ul><li><p>交叉熵误差层传过来的值</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111512352.png" alt="image-20210103111512352"></p></li><li><p>乘节点将正向传播的值翻转后相乘：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111523824.png" alt="image-20210103111523824"></p></li><li><p>正向传播时若有分支流出，则反向传播时它们的反向传播的值会相加，因此对于除节点反向传播的输入为$-S(t_1+t_2+t_3)$ 然后进行除节点的反向传播:$-S(t_1+t_2+t_3)×(\frac{1}{S})^2=\frac{1}{S}(t_1+t_2+t_3)$ ,这里面t表示训练数据的标签为ont-hot向量(0,1向量)，因此结果为$\frac{1}{S}$，用计算图表示如下：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111536294.png" alt="image-20210103111536294"></p></li><li><p>加节点原封不动的传递，乘节点进行翻转：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111547342.png" alt="image-20210103111547342"></p></li><li><p>exp节点根据前面的推导，将上游的值乘以正向传播的输出后传给下游，也就是$(\frac{1}{S}-\frac{t_1}{exp(a_1)})exp(a_1)$ 整理可得$y_1-t_1$ :</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20201227191132812.png"> </p></li></ul><p>将上面的交叉熵误差和softmax总结起来可以用下面的计算图表示：</p><p><img src="https://picgo-wutao.oss-cn-shanghai.aliyuncs.com/img/image-20210103111609941.png" alt="image-20210103111609941"></p><p>这样就可以使用python进行简单的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoftmaxWithLoss</span>:</span><br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br> self.loss = <span class="hljs-literal">None</span> <span class="hljs-comment"># 损失</span><br> self.y = <span class="hljs-literal">None</span> <span class="hljs-comment"># softmax的输出</span><br> self.t = <span class="hljs-literal">None</span> <span class="hljs-comment"># 监督数据（one-hot vector）</span><br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x, t</span>):</span><br> self.t = t<br> self.y = softmax(x)<br> self.loss = cross_entropy_error(self.y, self.t)<br> <span class="hljs-keyword">return</span> self.loss<br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backward</span>(<span class="hljs-params">self, dout=<span class="hljs-number">1</span></span>):</span><br> batch_size = self.t.shape[<span class="hljs-number">0</span>]<br> dx = (self.y - self.t) / batch_size<br> <span class="hljs-keyword">return</span> dx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>reading notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notes</tag>
      
      <tag>deep learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
